!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r adw_main_1_wnd - process winds in preparation for advection
!
#include "model_macros_f.h"
#include "msg.h"
!
      subroutine adw_main_1_wnd2(F_su,F_sv,F_sw,um,vm,wm,ut,vt,wt,F_nit,F_njt,F_nk )
!
      implicit none
!
      integer F_nit, F_njt, F_nk
!
      real F_su(*), &
           F_sv(*), &
           F_sw(*)
      real um(F_nit,F_njt,F_nk), &
           vm(F_nit,F_njt,F_nk), &
           wm(F_nit,F_njt,F_nk), &
           ut(F_nit,F_njt,F_nk+1), &
           vt(F_nit,F_njt,F_nk+1), &
           wt(F_nit,F_njt,F_nk+1)
!
!author
!     alain patoine
!
!revision
! v2_31 - Desgagne M.       - removed stkmemw
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_21 - Desgagne M.       - Revision OpenMP
! v4_   - Gravel S.         - Staggered version
! v4_10 - Plante A.         - Add interpolation of wind on their non-native
!                             levels (super winds)
!
!language
!     fortran 77
!
!object
!     see id section
!
!arguments
!______________________________________________________________________
!              |                                                 |     |
! NAME         | DESCRIPTION                                     | I/O |
!--------------|-------------------------------------------------|-----|
! F_su         | u wind component on advection grid on m & t lev |  o  |
! F_sv         | v wind componens on advection grid on m & t lev |  o  |
! F_su         | u wind component on advection grid on m & t lev |  o  |
! um,vm,wm     | work table                                      |  o  |
! ut,vt,wt     | work table                                      |  o  |
!              |                                                 |     |
! F_nit        | \ total number of points in x,y direction in    |  i  |
! F_njt        | / advection grid (including halos)              |  i  |
!              |                                                 |     |
! F_nk         | number of levels                                |  i  |
!______________|_________________________________________________|_____|
!
!implicits
#include "gmm.hf"
!#include "var_gmm.cdk"
!      type(gmm_metadata) :: meta3d
!      integer :: gmmstat
#include "glb_ld.cdk"
!      logical G_lam, G_periodx, G_periody
!      integer G_ni
!      integer G_halox, G_haloy
!      logical l_north, l_south, l_east, l_west
!      integer l_ni, l_nj, l_niu, l_njv
!      integer l_minx, l_maxx, l_miny, l_maxy
#include "ver.cdk"
#include "adw.cdk"
!      integer adw_nic,adw_njc, adw_halox, adw_haloy
!      real*8 adw_cy_8(),adw_cx_8(),adw_sx_8(),adw_wx_8(),adw_sy_8()
#include "inuvl.cdk"
!      real*8 inuvl_wxux3_8(XDIST_SHAPE,4)
!      real*8 inuvl_wyvy3_8(YDIST_SHAPE,4)
#include "vth.cdk"
!      real, pointer, dimension (:,:,:) :: uth,vth,zdth
!      character(len=8) :: gmmk_uth_s, gmmk_vth_s, gmmk_zdth_s
#include "geomg.cdk"
!$$$#include "acid.cdk"
!      logical acid_test_l
!
      type(gmm_metadata) :: dummy_gmm_meta

      integer i, j, k, i0, in, j0, jn, n, dest_ni,istat
      real*8 ONE,sc,lag3,xx, x1, x2, x3, x4, w1, w2, w3, w4,den
      parameter( ONE = 1.0 )
#define lag3(xx, x1, x2, x3, x4)  ((( xx - x2 ) * ( xx - x3 ) * ( xx - x4 ))/( ( x1 - x2 ) * ( x1 - x3 ) * ( x1 - x4 )))
      real, dimension(LDIST_SHAPE,F_nk  ) :: workm
      real, dimension(LDIST_SHAPE,F_nk+1) :: wut,wvt
!
!     ---------------------------------------------------------------
!
      call msg(MSG_DEBUG,'PREPARE WINDS: (S/R ADW_MAIN_1_WND)')

      istat = gmm_get(gmmk_uth_s,uth,dummy_gmm_meta)
      istat = min(istat,gmm_get(gmmk_vth_s,vth,dummy_gmm_meta))
      istat = min(istat,gmm_get(gmmk_zdth_s,zdth,dummy_gmm_meta))
      call handle_error(istat,'adw_main_1_wnd','gmm_get')

!$$$      if (Acid_test_L) call acid_stat_adw_main_1_wnd(uth,1)

!**********************************************************************
! Interpolate advection winds to geopotential grid
! um and vm are used as work space
!**********************************************************************

      call rpn_comm_xch_halo (uth,LDIST_DIM,l_niu,l_nj, F_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo (vth,LDIST_DIM,l_ni,l_njv,F_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
!
!$omp parallel private(k,i0,in,j0,jn,sc, &
!$omp xx, x1, x2, x3, x4, w1, w2, w3, w4,den)
!$omp do
      do k=1,F_nk
!
         i0 = 1
         in = l_niu
         j0 = 1
         jn = l_nj
         if (G_lam) then
             if (l_west) i0 = 3
             if (l_east) in = l_niu - 1
         endif
         do j = j0, jn
         do i = i0, in
            um(i,j,k) = inuvl_wxux3_8(i,1) * uth(i-2,j,k) &
                       + inuvl_wxux3_8(i,2) * uth(i-1,j,k) &
                       + inuvl_wxux3_8(i,3) * uth(i  ,j,k) &
                       + inuvl_wxux3_8(i,4) * uth(i+1,j,k)
         enddo
         enddo
!
         i0 = 1
         in = l_ni
         jn = l_njv
         if (l_south) j0 = 3
         if (l_north) jn = l_njv - 1
         do j = j0, jn
         do i = i0, in
            vm(i,j,k) = inuvl_wyvy3_8(j,1) * vth(i,j-2,k) &
                       + inuvl_wyvy3_8(j,2) * vth(i,j-1,k) &
                       + inuvl_wyvy3_8(j,3) * vth(i,j  ,k) &
                       + inuvl_wyvy3_8(j,4) * vth(i,j+1,k)
         enddo
         enddo
         if (.not.G_lam) then
         if (l_south) then
            do i = i0, in
            vm(i,j0-2,k) = inuvl_wyvy3_8(j0-2,3) * vth(i,j0-2,k) &
                          + inuvl_wyvy3_8(j0-2,4) * vth(i,j0-1,k)
            vm(i,j0-1,k) = inuvl_wyvy3_8(j0-1,2) * vth(i,j0-2,k) &
                          + inuvl_wyvy3_8(j0-1,3) * vth(i,j0-1,k) &
                          + inuvl_wyvy3_8(j0-1,4) * vth(i,j0,k  )
            enddo
         endif
         if (l_north) then
            do i = i0, in
            vm(i,jn+2,k) = inuvl_wyvy3_8(jn+2,1) * vth(i,jn  ,k) &
                          + inuvl_wyvy3_8(jn+2,2) * vth(i,jn+1,k)
            vm(i,jn+1,k) = inuvl_wyvy3_8(jn+1,1) * vth(i,jn-1,k) &
                          + inuvl_wyvy3_8(jn+1,2) * vth(i,jn  ,k) &
                          + inuvl_wyvy3_8(jn+1,3) * vth(i,jn+1,k)
            enddo
         endif
         endif
      enddo
!$omp enddo
!**********************************************************************
! Image to component
!**********************************************************************      
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
             if (l_south) j0 = 3
             if (l_north) jn = l_njv - 1
      endif
!$omp do
      do k = 1,F_nk
      do j = j0,jn
         sc = ONE/Adw_cy_8(j)
         do i = i0,in
            vth(i,j,k) = sc * vm(i,j,k)
         enddo
      enddo
      enddo
!$omp enddo
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
             if (l_west) i0 = 3
             if (l_east) in = l_niu - 1
      endif
!$omp do 
      do k = 1,F_nk
      do j = j0,jn
         sc = ONE/Adw_cy_8(j)
         do i = i0,in
            uth(i,j,k) = sc * um(i,j,k)
         enddo
      enddo
      enddo
!$omp enddo
!**********************************************************************
! Interpolate w on momentum levels
!**********************************************************************
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west)  i0 = 3
         if (l_east)  in = l_ni - 1
         if (l_south) j0 = 3
         if (l_north) jn = l_nj - 1
      endif
!$omp do
      do k=2,F_nk-1
         xx = Ver_z_8%m(k)
         x1 = Ver_z_8%t(k-1)
         x2 = Ver_z_8%t(k)
         x3 = Ver_z_8%t(k+1)
         x4 = Ver_z_8%t(k+2)
         w1 = lag3( xx, x1, x2, x3, x4 )
         w2 = lag3( xx, x2, x1, x3, x4 )
         w3 = lag3( xx, x3, x1, x2, x4 )
         w4 = lag3( xx, x4, x1, x2, x3 )
         do j = j0, jn
         do i = i0, in
            workm(i,j,k)=w1*zdth(i,j,k-1)+ &
                        w2*zdth(i,j,k)  + &
                        w3*zdth(i,j,k+1)+ &
                        w4*zdth(i,j,k+2)
         enddo
         enddo
      enddo
!$omp enddo
!
!     Note  zdth(i,j,1)=0     
      k=1
!      w1=(Ver_z_8%m(k)-Ver_z_8%t(k+1))/
!     $     (Ver_z_8%t(k)-Ver_z_8%t(k+1))
      w2=(Ver_z_8%t(k)-Ver_z_8%m(k))/ &
           (Ver_z_8%t(k)-Ver_z_8%t(k+1))
!$omp do     
      do j = j0, jn
      do i = i0, in
         workm(i,j,k)=w2*zdth(i,j,k+1)
      enddo
      enddo
!$omp enddo
!
!     Note  zdth(i,j,F_nk+1)=0  
      k=F_nk
      w1=(Ver_z_8%m(k)-Ver_z_8%t(k+1))/ &
           (Ver_z_8%t(k)-Ver_z_8%t(k+1))
!      w2=(Ver_z_8%t(k)-Ver_z_8%m(k))/
!     $     (Ver_z_8%t(k)-Ver_z_8%t(k+1))
!$omp do     
      do j = j0, jn
      do i = i0, in
         workm(i,j,k)=w1*zdth(i,j,k)
      enddo
      enddo
!$omp enddo
!
!**********************************************************************
! Interpolate u and v on thermo levels
!**********************************************************************
!$omp do
      do k=3,F_nk-1
         xx = Ver_z_8%t(k)
         x1 = Ver_z_8%m(k-2)
         x2 = Ver_z_8%m(k-1)
         x3 = Ver_z_8%m(k  )
         x4 = Ver_z_8%m(k+1)
         w1 = lag3( xx, x1, x2, x3, x4 )
         w2 = lag3( xx, x2, x1, x3, x4 )
         w3 = lag3( xx, x3, x1, x2, x4 )
         w4 = lag3( xx, x4, x1, x2, x3 )

         do j = j0, jn
         do i = i0, in
            wut(i,j,k)=w1*uth(i,j,k-2)+ &
                       w2*uth(i,j,k-1)+ &
                       w3*uth(i,j,k  )+ &
                       w4*uth(i,j,k+1)
            wvt(i,j,k)=w1*vth(i,j,k-2)+ &
                       w2*vth(i,j,k-1)+ &
                       w3*vth(i,j,k  )+ &
                       w4*vth(i,j,k+1)
         enddo
         enddo         
      enddo
!$omp enddo
!
      den=1.d0/(Ver_z_8%m(1)-Ver_z_8%m(2))
      k=2      
      w1=(Ver_z_8%t(k)-Ver_z_8%m(2))*den
      w2=(Ver_z_8%m(1)-Ver_z_8%t(k))*den
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut(i,j,k)=w1*uth(i,j,1)+w2*uth(i,j,2)
         wvt(i,j,k)=w1*vth(i,j,1)+w2*vth(i,j,2)
      enddo
      enddo
!$omp enddo
! Updward Extrapolation
      k=1      
      w1=(Ver_z_8%t(k)-Ver_z_8%m(2))*den
      w2=(Ver_z_8%m(1)-Ver_z_8%t(k))*den
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut(i,j,k)=w1*uth(i,j,1)+w2*uth(i,j,2)
         wvt(i,j,k)=w1*vth(i,j,1)+w2*vth(i,j,2)
      enddo
      enddo
!$omp enddo
!
      den=1.d0/(Ver_z_8%m(F_nk-1)-Ver_z_8%m(F_nk))
      k=F_nk
      w1=(Ver_z_8%t(k)     -Ver_z_8%m(F_nk))*den
      w2=(Ver_z_8%m(F_nk-1)-Ver_z_8%t(k)   )*den
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut(i,j,k)=w1*uth(i,j,F_nk-1)+w2*uth(i,j,F_nk)
         wvt(i,j,k)=w1*vth(i,j,F_nk-1)+w2*vth(i,j,F_nk)
      enddo
      enddo
!$omp enddo
! Downdward Extrapolation
      k=F_nk+1
      w1=(Ver_z_8%t(k)     -Ver_z_8%m(F_nk))*den
      w2=(Ver_z_8%m(F_nk-1)-Ver_z_8%t(k)   )*den
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut(i,j,k)=w1*uth(i,j,F_nk-1)+w2*uth(i,j,F_nk)
         wvt(i,j,k)=w1*vth(i,j,F_nk-1)+w2*vth(i,j,F_nk)
      enddo
      enddo
!$omp enddo
!**********************************************************************
! Adjust wind fields to advection grid
!**********************************************************************
      if (G_lam) then
          n=0
          dest_ni=l_ni
      else
          n=999
          dest_ni=G_ni
      endif
!
!$$$      if (Acid_test_L)call acid_stat_adw_main_1_wnd(uth,2)
!$omp single
      call rpn_comm_xch_halox ( uth, LDIST_DIM, l_ni, l_nj, F_nk,  &
        Adw_halox, Adw_haloy, G_periodx, G_periody, um, 1-Adw_halox,  &
        Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
      call rpn_comm_xch_halox ( wut, LDIST_DIM, l_ni, l_nj, F_nk+1,  &
        Adw_halox, Adw_haloy, G_periodx, G_periody, ut, 1-Adw_halox,  &
        Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
!
      call rpn_comm_xch_halox ( vth, LDIST_DIM, l_ni, l_nj, F_nk,  &
        Adw_halox, Adw_haloy, G_periodx, G_periody, vm, 1-Adw_halox,  &
        Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
      call rpn_comm_xch_halox ( wvt, LDIST_DIM, l_ni, l_nj, F_nk+1,  &
        Adw_halox, Adw_haloy, G_periodx, G_periody, vt, 1-Adw_halox,  &
        Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
!
      call rpn_comm_xch_halox ( zdth, LDIST_DIM, l_ni, l_nj, F_nk+1,  &
        Adw_halox, Adw_haloy, G_periodx, G_periody, wt, 1-Adw_halox,  &
        Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
      call rpn_comm_xch_halox ( workm, LDIST_DIM, l_ni, l_nj, F_nk,  &
        Adw_halox, Adw_haloy, G_periodx, G_periody, wm, 1-Adw_halox,  &
        Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
!$omp end single

!
      if (.not.G_lam) then
!
         if ( l_south ) then
!
            call adw_polw (um,vm,Adw_cx_8,Adw_sx_8,Adw_wx_8, &
              Adw_sy_8,0,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk)
            call adw_polw (ut,vt,Adw_cx_8,Adw_sx_8,Adw_wx_8, &
              Adw_sy_8,0,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk+1)
            call adw_pols (wt,Adw_wx_8,0,Adw_nic,Adw_halox,Adw_njc, &
              Adw_haloy,F_nk+1)
            call adw_pols (wm,Adw_wx_8,0,Adw_nic,Adw_halox,Adw_njc, &
              Adw_haloy,F_nk)
         endif
!
         if ( l_north ) then
!
            call adw_polw (um,vm,Adw_cx_8,Adw_sx_8,Adw_wx_8, &
              Adw_sy_8,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk)
            call adw_polw (ut,vt,Adw_cx_8,Adw_sx_8,Adw_wx_8, &
              Adw_sy_8,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk+1)
            call adw_pols (wt,Adw_wx_8,Adw_njc+1,Adw_nic,Adw_halox, &
              Adw_njc,Adw_haloy,F_nk+1)
            call adw_pols (wm,Adw_wx_8,Adw_njc+1,Adw_nic,Adw_halox, &
              Adw_njc,Adw_haloy,F_nk)
         endif

      endif
!
!**********************************************************************
!$omp end parallel
!
      call adw_load_super_winds(um,vm,wt,ut,vt,wm,F_su,F_sv,F_sw)
!

      return
      end
