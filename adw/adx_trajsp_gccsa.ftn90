!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#include "msg.h"
#include "constants.h"
#include "stop_mpi.h"
!/**
subroutine adx_trajsp_gccsa ( F_lon, F_lat, F_u, F_v, &
                         F_dt,i0,in,j0,jn,k0,F_ni,F_nj )
   implicit none
#include <arch_specific.hf>
!
   !@objective improves estimates of upwind positions using the
!    Great Circle Constant speed approximation method.
!
   !@arguments
   real, dimension(*), intent(out)   :: F_lon    ! upwind longitudes at central time 
   real, dimension(*), intent(inout) :: F_lat    ! upwind lat at central time 
   real, dimension(*), intent(in)    :: F_u, F_v ! real wind components at upwind pos(trilin)
   real, intent(in) :: F_dt                      ! timestep length
   integer, intent(in) :: i0,in,j0,jn,k0         ! scope of operator
   integer, intent(in) :: F_ni,F_nj
!
   !@author  Abdessamad Qaddouri
   !@revisions
   ! v4_40 - Qaddouri & Lee - Initial version
   ! v4_05 - Gaudreault S.  - Code optimization
!**/

#include "adx_dims.cdk"
#include "adx_grid.cdk"

   integer :: vnij, i,j,k, n, idx_k, idx_kj
   real*8  :: term_8,one_ov6_8,third_8
   real*8  :: F_v_dt, F_u_dt

   !---------------------------------------------------------------------

   call msg(MSG_DEBUG,'adx_trajsp_gccsa')
   vnij = (in-i0+1)*(jn-j0+1)
   third_8=1.0D0/3.0D0
   one_ov6_8=1.0D0/6.0D0

!$omp parallel do private(term_8,idx_k,idx_kj,n,F_v_dt,F_u_dt)
   do k=k0,adx_lnk
      idx_k = (k-1)*adx_mlnij
      do j=j0,jn
         idx_kj = idx_k + ((j-1)*adx_mlni)
         do i=i0,in
            n = idx_kj + i
            F_v_dt = F_v(n)*F_dt
            F_u_dt = F_u(n)*F_dt
            term_8 = ((F_u_dt * Adx_vtan_8(j))**2 - F_v_dt**2) * one_ov6_8
            F_lat(n) = Adx_yy_8(j)- F_v_dt + 0.50D0* F_u_dt**2 * Adx_vtan_8(j) &
                       - third_8 * F_u_dt**2 * F_v_dt
            F_lon(n) = Adx_xx_8(i) - F_u_dt * Adx_vsec_8(j) * (1.0D0+term_8)
            if (F_lon(n) < 0.) F_lon(n) = F_lon(n) + CONST_2PI_8
         end do
      enddo
   enddo
!$omp end parallel do

   call msg(MSG_DEBUG,'adx_trajsp_gccsa [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_trajsp_gccsa
