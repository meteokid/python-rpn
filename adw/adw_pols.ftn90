!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r adw_pols - calculate pole value for a scalar
!                ( weighted average around the pole )
!
      subroutine adw_pols ( F_field, F_wx,    F_j, &
                            F_nic,   F_halox, &
                            F_njc,   F_haloy, F_nk )
      implicit none
!
      integer  F_j, F_nic, F_halox, F_njc, F_haloy, F_nk
!
      real F_field (-F_halox+1:F_nic+F_halox, &
                    -F_haloy+1:F_njc+F_haloy, F_nk)
!
      real*8 F_wx (F_nic)
!
!author
!     alain patoine
!
!revision
! v3_21 - Desgagne M.       - Revision Openmp
!
!language
!     fortran 77
!
!object
!     see id section
!
!arguments
!______________________________________________________________________
!              |                                                 |     |
! NAME         | DESCRIPTION                                     | I/O |
!--------------|-------------------------------------------------|-----|
!              |                                                 |     |
! F_field      | field to treat                                  |  io |
! F_wx         | weights (proportional to x grid distances)      |  i  |
! F_j          | j position to fill                              |  i  |
!              |                                                 |     |
! F_nic        | number of points in x direction (advection grid)|  i  |
! F_njc        | number of points in y direction (advection grid)|  i  |
!              |                                                 |     |
! F_halox      | size of halo in x direction (advection grid)    |  i  |
! F_haloy      | size of halo in y direction (advection grid)    |  i  |
!              |                                                 |     |
! F_nk         | number of levels                                |  i  |
!______________|_________________________________________________|_____|
!
!implicits
!     none
!
!modules
!     none
!***********************************************************************
      integer i,j,k
!
      real*8 ww
!
      if ( F_j .eq. 0 ) then
                             j = 1
      else
                             j = F_njc
      endif
!
!$omp do
      do k = 1,F_nk
!
         ww = 0.0
!
         do i=1,F_nic
            ww = ww + F_wx(i) * dble(F_field(i,j,k))
         enddo
!
         do i=-F_halox+1,F_nic+F_halox
            F_field(i,F_j,k) = ww
         enddo
!
      enddo
!$omp enddo
!
      return
      end

