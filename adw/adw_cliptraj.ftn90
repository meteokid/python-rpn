!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!*s/r adw_cliptraj - Clip SL hor. trajectories to either fit inside the 
!                    physical domain of the processor or to the
!                    actual maximum allowed COURRANT number (LAM)
!
#include "model_macros_f.h"
#include "msg.h"
!
      subroutine adw_cliptraj ( F_x_in,  F_y_in, i0, in, j0, jn, F_nk, mesg )
      implicit none
#include <arch_specific.hf>
!
      character*(*) mesg
      integer i0, in, j0, jn, F_nk
      real    F_x_in ( * ), F_y_in ( * )
!
!author
!     Michel Desgagne        Spring 2008
!
!revision
! v3_31 - Desgagne M.  - Initial version
!
!object
!
!arguments
!______________________________________________________________________
!              |                                                 |     |
! NAME         | DESCRIPTION                                     | I/O |
!--------------|-------------------------------------------------|-----|
! F_x_in       | upstream positions (x-component                 | i/o |
! F_y_in       | upstream positions (y-component                 | i/o |
! i0,in        | x direction scope of operator                   |  i  |
! j0,jn        | y direction scope of operator                   |  i  |
!______________|_________________________________________________|_____|
!
!
!implicits
#include "glb_ld.cdk"
!      integer l_ni, l_nj
!      logical l_north, l_south, l_east, l_west
!      integer G_niu, G_njv
!      integer pil_s,pil_e
#include "adw.cdk"
!      integer            Adw_halox, Adw_haloy
!      integer Adw_nit, Adw_njt
!      real*8 adw_xx_8(*),adw_yy_8(*)
!
      character(len=MSG_MAXLEN) :: msg_S
      integer n, nij, i,j,k, ipos, jpos, cnt, kt, sum_cnt, sum_kt, err, totaln
      real*8 eps
      real minposx,maxposx,minposy,maxposy, &
           posxmin,posxmax,posymin,posymax
      common /clip_sum/ cnt, kt, sum_cnt, sum_kt
!
!     __________________________________________________________________
!
      nij  = l_ni*l_nj
!
      eps=1.0d-5
                   minposx= Adw_xx_8(2)                   + eps
      if (l_west)  minposx= Adw_xx_8(Adw_halox+5)         + eps
                   maxposx= Adw_xx_8(Adw_nit-1  )         - eps
      if (l_east)  maxposx= Adw_xx_8(Adw_nit-Adw_halox-4) - eps
                   minposy= Adw_yy_8(2)                   + eps
      if (l_south) minposy= Adw_yy_8(Adw_haloy+5)         + eps
                   maxposy= Adw_yy_8(Adw_njt-1)           - eps
      if (l_north) maxposy= Adw_yy_8(Adw_njt-Adw_haloy-4) - eps

      cnt=0
      kt =0

      ! Clipping to processor boundary

      do k=1,F_nk
      do j=j0,jn
      do i=i0,in
         n = (k-1)*nij + ((j-1)*l_ni) + i
         if ( (F_x_in(n).lt.minposx).or.(F_x_in(n).gt.maxposx).or. &
              (F_y_in(n).lt.minposy).or.(F_y_in(n).gt.maxposy) ) then
            cnt=cnt+1
            kt = kt+k
         endif
         F_x_in(n) = min(max(F_x_in(n),minposx),maxposx)
         F_y_in(n) = min(max(F_y_in(n),minposy),maxposy)
      enddo
      enddo
      enddo

      n = max(1,adw_maxcfl)
      totaln = ((l_ni*n*2) + ((l_nj-2*n)*n*2)) * F_nk
!
      call rpn_comm_Allreduce(cnt,sum_cnt,2,"MPI_INTEGER", &
                                     "MPI_SUM","grid",err)
!
      nij = F_nk*(G_niu-2*pil_e+2)*(G_njv-2*pil_s+2)
      if (trim(mesg).ne."" .and. sum_cnt>0) then
         write(msg_S,'(a,i5,a,f6.2,a,i3,2x,a)')  &
              ' ADW trajtrunc: npts=',sum_cnt, &
              ', %=',real(sum_cnt)/real(totaln)*100., &
              ', avg_k=',sum_kt/sum_cnt, mesg
         call msg(MSG_INFO,msg_S)
      endif
!     __________________________________________________________________
!
      return
      end
