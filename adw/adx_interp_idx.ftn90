!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!/**
subroutine adx_interp_idx (nearest_i, nearest_j, nearest_k, F_x, F_y, F_z, i0, in, j0, jn, k0, F_nk, nbpts, F_lev_S)
   implicit none
!
   !@ Indexes positions for tricubic interpolation
   ! 2012-05 : Stéphane Gaudreault
!
   !@arguments
   integer, dimension(nbpts), intent(out) :: nearest_i, nearest_j, nearest_k
   real,dimension(*), intent(in) :: F_x, F_y       !I, interpolation target x,y,z coordinates
   real,dimension(*), intent(in) :: F_z            !I, interpolation target x,y,z coordinates
   integer, intent(in) :: i0,in,j0,jn, k0          !I, scope of operator
   integer, intent(in) :: F_nk                     !I, number of vertical levels
   integer, intent(in) :: nbpts                    !I, number of grid points
   character(len=*), intent(in) :: F_lev_S         !I, m/t : Momemtum/thermo level
!**/

#include "adx_dims.cdk"
#include "adx_grid.cdk"
#include "adx_interp.cdk"

   integer :: n,i,j,k, ii, jj, kk
   integer :: idxk, idxjk

   real*8 :: rri, rrj, rrk

   integer :: kkmax
   real*8 :: p_z00_8

   integer,dimension(:),pointer :: p_lcz
   real*8, dimension(:),pointer :: p_bsz_8

   !---------------------------------------------------------------------

   if (F_lev_S == 'm') then
      kkmax   = adx_lnkm - 1
      p_z00_8 = adx_verZ_8%m(1)
      p_lcz   => adx_lcz%m
      p_bsz_8 => adx_bsz_8%m
   else
      kkmax   = adx_lnkm
      p_z00_8 = adx_verZ_8%t(1)
      p_lcz   => adx_lcz%t
      p_bsz_8 => adx_bsz_8%t
   endif

!$omp parallel private(idxk,idxjk,n,ii,rri,jj,rrj,rrk,kk) shared(nearest_i,nearest_j,nearest_k)
!$omp do 
   do k=k0,F_nk
      idxk = (k-1)*Adx_mlnij
      do  j=j0,jn
         idxjk = idxk + ((j-1)*adx_mlni)
         do  i=i0,in
            n = idxjk + i

            rri= F_x(n)
            ii = (rri - adx_x00_8) * adx_ovdx_8
            ii = adx_lcx(ii+1) + 1
            if (rri < adx_bsx_8(ii)) ii = ii - 1
            ii = max(2,min(ii,Adx_iimax))

            rrj= F_y(n)
            jj = (rrj - adx_y00_8) * adx_ovdy_8
            jj = adx_lcy(jj+1) + 1
            if (rrj < adx_bsy_8(jj)) jj = jj - 1
            jj = max(adx_haloy,min(jj,Adx_jjmax))

            rrk= F_z(n)
            kk = (rrk - p_z00_8) * adx_ovdz_8
            kk = p_lcz(kk+1)
            if (rrk < p_bsz_8(kk)) kk = kk - 1
            kk = min(kkmax-1,max(0,kk))

            nearest_i(n) = ii
            nearest_j(n) = jj
            nearest_k(n) = kk
         enddo 
      enddo 
   enddo 
!$omp enddo
!$omp end parallel

   !---------------------------------------------------------------------

   return
end subroutine adx_interp_idx
