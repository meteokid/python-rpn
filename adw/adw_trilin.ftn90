!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/p adw_trilin - tri-linear interpolation
!
#include "model_macros_f.h"
!
      subroutine adw_trilin ( F_out, F_in, F_dt, F_n, &
                              F_capx, F_capy, F_capz, F_num,i0,in,j0,jn,kn)
!
      implicit none
!
      integer F_num, F_n(F_num),i0,in,j0,jn,kn
!
      real F_dt, F_in(*)
!
      real F_out(F_num), F_capx(F_num), F_capy(F_num), F_capz(F_num)
!
!author
!     alain patoine
!
!revision
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
!
!object
!     see id section
!
!arguments
!______________________________________________________________________
!              |                                                 |     |
! NAME         | DESCRIPTION                                     | I/O |
!--------------|-------------------------------------------------|-----|
!              |                                                 |     |
! F_out        | F_dt * result of interpolation                  |  o  |
! F_in         | field to interpolate                            |  i  |
!              |                                                 |     |
! F_dt         | multiplicative constant (1.0 or timestep lenght)|  i  |
!              |                                                 |     |
! F_n          | positions in the 3D volume of interpolation     |  i  |
!              | boxes                                           |     |
!              |                                                 |     |
! F_capx       | \                                               |  i  |
! F_capy       |   precomputed displacements                     |  i  |
! F_capz       | / along the x,y,z directions                    |  i  |
!              |                                                 |     |
! F_num        | number of points to interpolate                 |  i  |
!______________|_________________________________________________|_____|
!
!implicits
#include "glb_ld.cdk"
!      integer l_ni, l_nj
#include "adw.cdk"
!      integer             Adw_nit, Adw_njt
!***********************************************************************
      integer n, nijag, nij, o1, o2, i, j, k
!
      real*8 prf1, prf2, prf3, prf4
!
!     call tmg_start ( 32, 'adw_trilin' )
      nijag = Adw_nit * Adw_njt
      nij = l_ni*l_nj
!

!$omp parallel do private(n,o1,o2,prf1,prf2,prf3,prf4)
      do 100 k=1,kn
      do  90 j=j0,jn
      do  80 i=i0,in
!
      n = (k-1)*nij + ((j-1)*l_ni) + i
      o1 = F_n(n)
      o2 = F_n(n) + Adw_nit


!***********************************************************************
!     x interpolation
!***********************************************************************

      prf1 = (1.0 - F_capx(n)) * F_in(o1) + F_capx(n) * F_in(o1+1)
      prf2 = (1.0 - F_capx(n)) * F_in(o2) + F_capx(n) * F_in(o2+1)
!
      o1 = o1 + nijag
      o2 = o2 + nijag
!
      prf3 = (1.0 - F_capx(n)) * F_in(o1) + F_capx(n) * F_in(o1+1)
      prf4 = (1.0 - F_capx(n)) * F_in(o2) + F_capx(n) * F_in(o2+1)

      
!***********************************************************************
!     y interpolation
!***********************************************************************

      prf1 = (1.0 - F_capy(n)) * prf1 + F_capy(n)  * prf2
      prf2 = (1.0 - F_capy(n)) * prf3 + F_capy(n)  * prf4

!***********************************************************************
!     z interpolation
!***********************************************************************

      F_out(n) = ( (1.0 - F_capz(n)) * prf1 + F_capz(n)  * prf2 ) * F_dt
!
   80 continue
   90 continue
  100 continue
!$omp end parallel do
!
!     call tmg_stop (32)
      return
      end
