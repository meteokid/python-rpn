!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!/**
function adx_nml(F_nmlFileName_S) result(F_stat)
   implicit none
#include "msg.h"
#include "adx_nml.cdk"
   !@objective Advection default configuration and reading namelists adx_cfgs
   !@arguments
   character(len=*) :: F_nmlFileName_S !I, Namelist file name
   !@returns
   integer :: F_stat
   !@author Stephane Chamberland, Nov 2009
   !@revisions
   !  YYYY-MM, MY_AUTHOR: original code
!**/
   integer :: fileUnit
   integer, external :: file_open_existing
   !---------------------------------------------------------------------
   adw_exdg_L = .false.
   adw_ckbd_L = .false.
   adw_mono_L = .true.
   adw_nosetint_L   = .false.
   adw_useadx_L = .true.
   adw_stats_L = .false.

   F_stat = -1
   fileUnit = file_open_existing(F_nmlFileName_S,'SEQ')
   if (fileUnit>=0) then
      read(fileUnit, nml=adw_cfgs, iostat=F_stat)
      call fclos(fileUnit)
      F_stat = -1 * F_stat
      if (F_stat<0) then
         call msg(MSG_ERROR,'adx_nml - Probleme reading nml adw_cfgs in file: '//trim(F_nmlFileName_S))
      endif
   endif
   !---------------------------------------------------------------------
   return
end function adx_nml


!/**
subroutine adx_nml_print()
   implicit none
#include "msg.h"
#undef __ADX_NML__
#include "adx_nml.cdk"
!**/
   integer :: msgUnit
   integer, external :: msg_getUnit !TODO: get full interface from <msg.hf>
   !---------------------------------------------------------------------
   msgUnit = msg_getUnit(MSG_INFO)
   if (msgUnit>=0) write(msgUnit,nml=adw_cfgs)
   !---------------------------------------------------------------------
   return
end subroutine adx_nml_print


!/**
function adx_config() result(F_stat)
   implicit none
   !@objective Establish final Advection configuration
   !@arguments
   !@returns
   integer :: F_stat !O, return -1 on error, 0 on sucess
   !@author Stephane Chamberland, Nov 2009
   !@revisions
   !  YYYY-MM, MY_AUTHOR: original code
!**/
   !---------------------------------------------------------------------
   F_stat = 0
   !---------------------------------------------------------------------
   return
end function adx_config
