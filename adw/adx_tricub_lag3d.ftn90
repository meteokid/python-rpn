!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "msg.h"
!/**
subroutine adx_tricub_lag3d5 (F_out, F_in, F_x, F_y, F_z, F_num,&
                              F_mono_L, i0, in, j0, jn, k0, F_nk, F_lev_S)
   implicit none
!
   !@objective Tri-cubic interp: Lagrange 3d (Based on adx_tricub v3.1.1)
!
   !@arguments
   character(len=*) :: F_lev_S !I, m/t : Momemtum/thermo level
   integer :: F_num            !I, number points
   integer :: F_nk             !I, number of vertical levels
   integer :: i0,in,j0,jn,k0   !I, scope of operator
   logical :: F_mono_L         !I, .true. monotonic interpolation
   real,dimension(F_num) :: &
        F_x, F_y, F_z          !I, interpolation target x,y,z coordinates
   real,dimension(*) :: &
        F_in                   !I, field to interpolate 
   real,dimension(F_num) :: &
        F_out                  !O, result of interpolation
!**/

#include "adx_dims.cdk"
#include "adx_grid.cdk"
#include "adx_interp.cdk"

   integer :: kkmax
   real*8  :: p_z00_8

   integer,dimension(:),pointer :: p_lcz
   real*8, dimension(:),pointer :: p_bsz_8, p_zbc_8, p_zabcd_8
   real*8, dimension(:),pointer :: p_zbacd_8, p_zcabd_8, p_zdabc_8

   !---------------------------------------------------------------------

   call tmg_start0 (61, 'ADINT_3CU')

!$omp parallel 
   if (F_lev_S == 'm') then
      kkmax   = adx_lnkm - 1
      p_z00_8 = adx_verZ_8%m(1)
      p_lcz     => adx_lcz%m
      p_bsz_8   => adx_bsz_8%m
      p_zabcd_8 => adx_zabcd_8%m
      p_zbacd_8 => adx_zbacd_8%m
      p_zcabd_8 => adx_zcabd_8%m
      p_zdabc_8 => adx_zdabc_8%m
      p_zbc_8   => adx_zbc_8%m
   else
      kkmax   = adx_lnkm
      p_z00_8 = adx_verZ_8%t(1)
      p_lcz     => adx_lcz%t
      p_bsz_8   => adx_bsz_8%t
      p_zabcd_8 => adx_zabcd_8%t
      p_zbacd_8 => adx_zbacd_8%t
      p_zcabd_8 => adx_zcabd_8%t
      p_zdabc_8 => adx_zdabc_8%t
      p_zbc_8   => adx_zbc_8%t
   endif

   call adx_lag3d_tricub (F_out, F_in, F_x, F_y, F_z, &
        adx_y00_8,adx_x00_8,p_z00_8,adx_ovdx_8,adx_ovdy_8,adx_ovdz_8, &
        adx_lcx,adx_lcy,p_lcz, adx_bsx_8,adx_bsy_8,p_bsz_8, &
        adx_xabcd_8,adx_xbacd_8,adx_xcabd_8,adx_xdabc_8, &
        adx_yabcd_8,adx_ybacd_8,adx_ycabd_8,adx_ydabc_8, &
        p_zabcd_8,p_zbacd_8, p_zcabd_8, p_zdabc_8, p_zbc_8,&
        F_num, F_mono_L, i0, in, j0, jn, k0, F_nk, kkmax)
!$omp end parallel

   call tmg_stop0 (61)

   !---------------------------------------------------------------------

   return
end subroutine adx_tricub_lag3d5
