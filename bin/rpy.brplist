#!/usr/bin/env python
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Author: Stephane Chamberland <stephane.chamberland@canada.ca>
# Copyright: LGPL 2.1
"""
Show list of reports in a BURP file

Examples:
     rpy.brplist -i $ATM_MODEL_DFILES/bcmk_burp/2007021900.brp
"""
## TODO: need to optimize in liburp mode
## Profiling: python -m cProfile -- ./bin/rpy.brplist -i $ATM_MODEL_DFILES/bcmk_burp/2007021900.brp -b -e
import os
import sys
import argparse
import rpnpy.librmn.all as rmn
## import pprint
## pp = pprint.PrettyPrinter(indent=4)

def print_list(inputFile, formatReport, matchIn, matchOut,
               formatBlock, formatElements, isliburp):
    """
    """
    funit  = rmn.burp_open(inputFile)

    #TODO: get select criterions from caller
    (lat, lon) = (-1, -1)

    print('File: {}'.format(inputFile))
    ## for stnid in matchIn['stnid']:
    ##     for idtyp in matchIn['idtyp']:
    ##         for date in matchIn['date']:
    ##             for time in matchIn['time']:
    ##                 print_list1(funit, inputFile, formatReport, stnid, idtyp,
    ##                             lat, lon, date, time,
    ##                             formatBlock, formatElements,
    ##                             matchIn, matchOut, isliburp)
    for stnid in matchIn['stnid']:
        print_list1(funit, inputFile, formatReport, formatBlock, formatElements,
                    matchIn, matchOut, isliburp, stnid)
                    
    rmn.burp_close(funit)


def isMatch(params, matchIn, matchOut):
    isOk = True
    for k in matchIn.keys():
        if (not k in ('stnid',)) and len(matchIn[k]) > 0 and matchIn[k] != [-1]:
            try:
                if not params[k] in matchIn[k]:
                    isOk = False
                    break
            except:
                pass
    for k in matchOut.keys():
        if (not k in ('stnid',)) and len(matchOut[k]) > 0 and matchOut[k] != [-1]:
            try:
                if params[k] in matchOut[k]:
                    isOk = False
                    break
            except:
                pass
    return isOk


def print_list1(funit, inputFile, formatReport, formatBlock, formatElements,
                matchIn, matchOut, isliburp,
                stnid='*********', idtyp=-1, lat=-1, lon=-1, date=-1, time=-1):
    """
    """        
    nbrp = rmn.mrfnbr(funit)
    buf  = None
    handle = 0
    
    #TODO: Print hedear format dependent
    ## print('0  MRFVOI  UNITE {0: >4}  NOM {1}'.format(funit, inputFile))
    ## #TODO: adjust with desired info
    ## print('0  STATION   LATI   LONG     DX     DY   FLGS(HEX)   DATE    TIME   IDTYP   NB_BLOCK   HANDLE')

    for irep in range(nbrp):
        try:
            handle = rmn.mrfloc(funit, handle, stnid, idtyp, lat, lon,
                                date, time)
        except:
            break
        buf    = rmn.mrfget(handle, buf, funit)
        params = rmn.mrbhdr(buf)
        
        params['handle'] = handle
        params['flgshex'] = hex(params['flgs'])
        params['flgsbin'] = ''.join(['1' if i else '0' for i in params['flgsl']])
        if formatReport:
            if isMatch(params, matchIn, matchOut):
                print(formatReport.format(**params))

        if formatBlock:
            for iblk in range(params['nblk']):
                params.update(rmn.mrbprm(buf, iblk+1))
                params['iblk'] = iblk+1
                if isMatch(params, matchIn, matchOut):
                    print(formatBlock.format(**params))
                    if formatElements:
                        blkdata = rmn.mrb_prm_xtr_dcl_cvt(buf, iblk+1)
                        params.update(blkdata)
                        params['tblval'] = params['tblval'].T
                        params['rval'] = params['rval'].T
                        if isliburp:
                            lstelestr = ["    {:0>6}".format(blkdata['bufrids'][k]) for k in range(blkdata['bufrids'].size)]
                            sys.stdout.write("\nlstele =" +
                                             "".join(lstelestr))
                            (nv, nl, ne) = params['tblval'].shape
                            for n1 in range(nv):
                                for n2 in range(nl):
                                    ## rvalstr = [" {:>9.2f}".format(float(params['rval'][n1,n2,k])) for k in range(ne)]
                                    rvalstr = [" {:>9.2f}".format(float(params['rval'][n1,n2,k]))
                                               if (rmn.mrbcvt_dict(blkdata['cmcids'][k], False)['e_cvt'] and params['bknat_kindd'] != 'flags') else
                                               " {:>9d}".format(int(params['tblval'][n1,n2,k]))
                                               for k in range(ne)]
                                    sys.stdout.write("\ntblval =" +
                                                     "".join(rvalstr))
                            sys.stdout.write("\n")
                        else:
                            for iele in range(len(blkdata['cmcids'])):
                                params.update(rmn.mrbcvt_dict(blkdata['cmcids'][iele], False))
                                params['iele']     = iele
                                params['e_tblval'] = blkdata['tblval'][iele,:,:].T
                                if params['e_cvt']:
                                    params['e_rval'] = blkdata['rval'][iele,:,:].T
                                else:
                                    params['e_rval'] = params['e_tblval']
                                print(formatElements.format(**params))
                                ## pp.pprint(params)
                        
if __name__ == "__main__":
    ## default_format = ' {stnid:<9} {lat:>6} {lon:>6} {dx:>6} {dy:>6}  {flgshex:>8} {date:>8} {timehh:>2}h{timemm:>2} {idtyp:>6} {nblk:>10} {handle:>10}'
    default_format = 'r:{stnid:<9}: {lat:>6} {lon:>6} {elev:>6} : {dx:>6} {dy:>6} : {date:>8} {timehh:>2}h{timemm:>2} : {idtyp:>6} ({idtypd}) : {flgsbin:>24} : {nblk:>10}'
    liburp_format = """
hhmm   = {time:>7} flgs   = {flgs:>5}  codtyp = {idtyp:>5}  stnids ={stnid}
blat   = {ilat:>7} blon   = {ilon:>5}  dx     = {idx:>5}  dy     = {idy:>5}  stnhgt = {ielev:>5}
yymmdd ={date:>8} oars   = {oars:>5}  runn   = {runn:>5}  nblk   = {nblk:>5}  dlay   = {drnd:>5}"""
    default_format_blk = 'b:{stnid:<9}[{iblk:>3}] {bknat_kindd:>6}({datypd:>6}) (mul={bknat_multi}, alt={bktyp_alt}, fam={bfam:<3}) {bktyp_kindd} : {bkstpd} : ({nele:>3}x{nval:>2}x{nt})'
    liburp_format_blk = """
blkno  = {iblk:>5}  nele   = {nele:>5}  nval   = {nval:>5}  nt     = {nt:>5}  bfam   = {bfam:>5}
bdesc  = {bdesc:>5}  btyp   = {btyp:>5}  nbit   = {nbit:>5}  bit0   = {bit0:>5}  datyp  = {datyp:>5}"""
    ## default_format_ele = 'e:{stnid:<9}[{iblk:>3}][{e_code:0>6}:{e_cmcid:>6}] ({e_desc} [{e_units}]) : {e_tblval} => (v + {e_bias})*10^{e_scale}  => {e_rval}'
    default_format_ele = 'e:{stnid:<9}[{iblk:>3}][{e_bufrid:0>6}:{e_cmcid:>6}] ({e_desc} [{e_units}]) : {e_rval}'
    liburp_format_ele = """
lstele = {bufrids}
tblval = {tblval}"""
    #TODO: valid_keys desc
    valid_rep_keys = (
        'handle', 'stnid', 'time', 'timehh', 'timemm',
        'flgs', 'flgsl', 'flgshex', 'flgsbin', 'flgsd',
        'idtyp', 'idtypd',
        'ilat', 'ilon', 'idx', 'idy', 'lat', 'lon', 'dx', 'dy', 
        'ielev', 'elev', 'drnd', 'date', 'dateyy', 'datemm', 'datedd',
        'oars', 'runn', 'nblk', 'sup', 'nsup', 'xaux', 'nxaux'
        )
    valid_blk_keys = (
        'iblk', 'nele', 'nval', 'nt', 'bfam', 'bdesc', 'btyp', 'nbit',
        'bit0', 'datyp', 'datypd',
        'bknat', 'bknat_multi', 'bknat_kind', 'bknat_kindd',
        'bktyp', 'bktyp_alt', 'bktyp_kind', 'bktyp_kindd',
        'bkstp', 'bkstpd'
        )
    valid_ele_keys = {
        'iele', 'e_bufrid', 'e_cmcid', 'e_cvt', 'e_desc', 'e_units', 
        'e_scale', 'e_bias', 'e_nbits', 'e_multi', 'e_tblval', 'e_rval'
        }
    desc = "Show list of selected reports in a BURP file along with requested meta and stats."
    usage = """
    %(prog)s -i filename [options]
    """
    epilog = """-----\n
    --* Options are excluding records matching the provided value(s).
    ++* Options are selecting records matching the provided value(s).

    The default selection critera for all keys is a 'wildcard',
    i.e. all records are selected.

    Accepted format:
        Any python string.format() accepted string
        e.g: '{keyname:format}'
        warning: to print an actual '{' or '}' char
                 you'll need to specify '{{' or '}}' respectively

    Accepted keynames for reports and blocks:
        {}

    Accepted additional keynames for blocks only:
        {}
        
    Accepted additional keynames for blocks' elemets only:
        {}

    Default formats:
        reports  : '{}'
        blocks   : '{}'
        elements : '{}'
        
    liburp formats:
        reports  : '{}'
        blocks   : '{}'
        elements : '{}'
    """.replace('{','{{').replace('}','}}').replace('{{}}','{}')\
       .format('{'+'}  {'.join(valid_rep_keys)+'}',
               '{'+'}  {'.join(valid_blk_keys)+'}',
               '{'+'}  {'.join(valid_ele_keys)+'}',
               default_format, default_format_blk, default_format_ele,
               liburp_format, liburp_format_blk, liburp_format_ele)
    parser = argparse.ArgumentParser(
        description=desc, usage=usage, epilog=epilog,
        prefix_chars='-+', formatter_class=argparse.RawDescriptionHelpFormatter)
    
    ## group = parser.add_mutually_exclusive_group()

    parser.add_argument("-v", "--verbose",
                        action="count", default=0,
                        help="increase output verbosity")    
 
    parser.add_argument("-i", "--input", dest="inputFile",
                        nargs='+', required=True, type=str, default=[],
                        metavar='FILENAME',
                        help="Input RPN Std File name")

    parser.add_argument("-V", "--voir", dest="voir",
                        action="store_true",
                        help="Print BURP file the 'canonical' way with mrfvoi, ignore selectors and format")

    rgroup = parser.add_argument_group(title="Reports related options") #description='')

    ## . ssmuse-sh -d cmda/utils/15.2-2
    ## liburp -wide -conv -irdtb ${CMCADE}/dbase/surface/metar/$(date "+%Y%m%d")00_ #-stn CYUL -heure 2100
    ## rpy.brplist --liburp -i ${CMCADE}/dbase/surface/metar/$(date "+%Y%m%d")00_ -b -e #++stnid CYUL ++time 2100
    parser.add_argument("--liburp", dest="liburp",
                        action="store_true",
                        help="Use liburp utility output format")

    rgroup.add_argument("-f", "--format", dest="formatReport",
                        type=str, default=default_format,
                        metavar="'"+default_format+"'",
                        help="Output Format")
    
    rgroup.add_argument("++stnid",  dest="f_stnid",
                        nargs='*', type=str, default=['*********'],
                        metavar='STNID',
                        help="Filter records by stnid values (9 char, use wildcad '*' for each char)")
    rgroup.add_argument("++date",  dest="f_date",
                        nargs='*', type=int, default=[-1],
                        metavar='YYYYMMDD',
                        help="Filter records by date [YYYYMMDD]")
    rgroup.add_argument("++time",  dest="f_time",
                        nargs='*', type=int, default=[-1],
                        metavar='HHMM',
                        help="Filter records by time [HHMM]")
    rgroup.add_argument("++idtyp",  dest="f_idtyp",
                        nargs='*', type=int, default=[-1],
                        metavar='IDTYP',
                        help="Filter records by idtyp [int]")

    bgroup = parser.add_argument_group(title="Blocks related options") #description='')
    bgroup.add_argument("-b", "--blocks", dest="listBlocks",
                        action="store_true",
                        help="List blocks for matching reports")
    bgroup.add_argument("--format_blk", dest="formatBlock",
                        type=str, default=default_format_blk,
                        metavar="'"+default_format_blk+"'",
                        help="Output Format for blocks")

    bgroup.add_argument("++datyp",  dest="f_datyp",
                        nargs='*', type=int, default=[-1],
                        metavar='DATYP',
                        help="Filter records by Data type [int]")
    bgroup.add_argument("++bfam",  dest="f_bfam",
                        nargs='*', type=int, default=[-1],
                        metavar='BFAM',
                        help="Filter records by Family block descriptor. (0-31) [int]")
    bgroup.add_argument("++bdesc",  dest="f_bdesc",
                        nargs='*', type=int, default=[-1],
                        metavar='BDESC',
                        help="Filter records by Block descriptor. (0-2047) [int]")
    #TODO: split btyp in 3: BKNAT, BKTYP, BKSTP
    bgroup.add_argument("++btyp",  dest="f_btyp",
                        nargs='*', type=int, default=[-1],
                        metavar='BTYP',
                        help="Filter records by Block type (0-2047) [int]")


    egroup = parser.add_argument_group(title="Element's Blocks related options") #description='')
    egroup.add_argument("-e", "--elements", dest="listElements",
                        action="store_true",
                        help="List elements in blocks for matching reports")
    egroup.add_argument("--format_ele", dest="formatElements",
                        type=str, default=default_format_ele,
                        metavar="'"+default_format_ele+"'",
                        help="Output Format for blocks' Elements")

    #TODO: lon, lat min/max filter

    args = parser.parse_args()

    rmn.mrfopt(rmn.FSTOP_MSGLVL, rmn.FSTOPS_MSG_FATAL)

    if args.voir:
        for myfile in args.inputFile:
            funit = rmn.fnom(myfile, rmn.FST_RO)
            rmn.mrfvoi(funit)
            rmn.fclos(funit)
        sys.exit(0)
        
    keylist = ('stnid', 'date', 'time', 'idtyp',
               'datyp', 'bfam', 'bdesc', 'btyp')
    (matchIn, matchOut) = ({}, {})

    if args.liburp:
        args.formatReport = liburp_format
        args.formatBlock = liburp_format_blk
        args.formatElements = liburp_format_ele

    formatBlock = args.formatBlock if args.listBlocks else ""
    formatElements = args.formatElements if args.listElements else ""

    for key in keylist:
        try:
            v = getattr(args,'f_'+key)
            if isinstance(v, str):
                matchIn[key] = [x.strip().lower() for x in v]
            else:
                matchIn[key] = v
        except:
            matchIn[key] = []
        try:
            v = getattr(args,'e_'+key)
            if isinstance(v, str):
                matchOut[key] = [x.strip().lower() for x in v]
            else:
                matchOut[key] = v
        except:
            matchOut[key] = []

    status = 0
    for myfile in args.inputFile:
        if not os.path.isfile(myfile):
            sys.stderr.write('WARNING: No such file (skipping): {}\n'.format(myfile))
            status = 1
        elif not rmn.isBURP(myfile):
            sys.stderr.write('WARNING: Not a BURP file (skipping): {}\n'.format(myfile))
            status = 1
        else:
            print_list(myfile, args.formatReport, matchIn, matchOut,
                       formatBlock, formatElements, args.liburp)
        sys.exit(status)
    
        
# -*- Mode: C; tab-width: 4; indent-tabs-mode: nil -*-
# vim: set expandtab ts=4 sw=4:
# kate: space-indent on; indent-mode cstyle; indent-width 4; mixedindent off;
