#!/usr/bin/env python
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Author: Stephane Chamberland <stephane.chamberland@canada.ca>
# Copyright: LGPL 2.1
"""
Copy selected records from one RPNStd file to another

Examples:
    rpy.fstcopy2 -i /home/ordenv/ssm-domains9/release/gem-data_4.2.0/gem-data_4.2.0_all/share/data/dfiles/bcmk/geophy.fst \
                -o toto.fst \
                ++nomvar '^^' '>>' ++ip1 2002 ++ip2 1001 \
                --zap ip1=2003 ip2=1002
"""
import sys
import argparse
import rpnpy.librmn.all as rmn
## from rpnpy.rpndate import *

def compare_meta(meta, matchIn, matchOut, verbose):
    """
    """
    keylist = ('nomvar', 'typvar', 'etiket', 'ip1', 'ip2', 'ip3', 'datev')
    for key in keylist:
        ## val = getattr(args,'f_'+key)
        val = matchIn[key] if key in matchIn.keys() else []
        metaval = meta[key].strip().lower() if isinstance(meta[key], str) else meta[key]
        if not (len(val) == 0 or val[0] in (-1,' ') or metaval in val):
            if verbose > 1:
                print('{0} : No match for key {1}: {2} not in {3}'.\
                      format(meta['nomvar'],key,metaval,val))
            return False
        ## val = getattr(args,'e_'+key)
        val = matchOut[key] if key in matchOut.keys() else []
        metaval = meta[key].strip().lower() if isinstance(meta[key], str) else meta[key]
        if len(val) > 0 and metaval in val:
            if verbose > 1:
                print('{0} : Matching exclude  key {1}: {2} in {3}'.\
                      format(meta['nomvar'],key,meta[key],val))
            return False
    return True


def select_meta(inFile, matchIn, matchOut, verbose):
    """
    """
    klist = []
    nomvarlist = matchIn['nomvar'] if 'nomvar' in matchIn.keys() else [' ']
    if len(nomvarlist) == 0: nomvarlist = [' ']
    for nomvar in nomvarlist:
        klist0 = rmn.fstinl(inFile, nomvar=nomvar)
        if verbose > 1:
            print('Found {0} records matching "{1}"'.\
                  format(len(klist0),nomvar))
        for key in klist0:
            meta = rmn.fstprm(key)
            if compare_meta(meta, matchIn, matchOut, verbose):
                klist.append(key)
    if len(klist) == 0:
        if verbose > 0:
            sys.stdout.write('No Matching records.\n')
        else:
            klist = sorted(list(set(klist)))
            if verbose > 0:
                sys.stdout.write('Found {0} matching records.\n'.format(len(klist)))
    return klist


def zap_meta(rec, zap, verbose):
    """
    """
    zaptrimed = [x+'='+str(zap[x]) for x in zap.keys() if zap[x] is not None]
    if len(zaptrimed) <= 1:
        return rec
    if not zap['datev'] is None:
        if not zap['dateo'] is None:
            sys.stderr.write("ERROR: Cannot zap dateo and datev " +
                             "simultaneously, try using npas or deet to " +
                             "change the other value.\n")
            raise
        if zap['keep_dateo']:
            sys.stderr.write("ERROR: Cannot zap datev while " +
                             "keeping dateo unchanged, try using npas " +
                             "or deet to change datev instead.\n")
            raise

    try:
        if verbose > 0:
            print('{0} Zapping: {1}'.format(rec['nomvar'],str(zaptrimed)))
        for key in zap.keys():
            val = zap[key]
            if not (key in ('deet', 'npas', 'dateo', 'datev') or val is None):
                rec[key] = val

        deet1  = rec['deet']  if zap['deet']  is None else zap['deet']
        npas1  = rec['npas']  if zap['npas']  is None else zap['npas']
        dateo1 = rec['dateo'] if zap['dateo'] is None else zap['dateo']
        datev1 = rec['datev'] if zap['datev'] is None else zap['datev']
        if (not zap['keep_dateo']) and deet1 > 0 and npas1 > 0 and datev1 > 0:
            nhours = float(deet1) * float(npas1) / -3600.
            dateo1 = rmn.incdatr(datev1, nhours)
        rec['deet']  = deet1
        rec['npas1'] = npas1
        rec['dateo'] = dateo1
        rec['datev'] = datev1 #irrelevent for writing
    except:
        sys.stderr.write('ERROR: Unknown problem zapping records.\n')
        raise
    return rec


def copy_rec(inFileId, outFileId, overwrite, matchIn, matchOut,
             zapValues, verbose):
    """
    """
    try:
        klist = select_meta(inFileId, matchIn, matchOut, verbose)
        for key in klist:
            rec = rmn.fstluk(key)
            rec = zap_meta(rec, zapValues, verbose)
            rmn.fstecr(outFileId, rec['d'], rec, rewrite=overwrite)
    except:
        sys.stderr.write('ERROR: Unknown problem copying records.\n')
        raise


def copy_rec_fname(inputFile, outputFile, overwrite, matchIn, matchOut,
                   zapValues, verbose):
    """
    """
    rmn.fstopt(rmn.FSTOP_FASTIO, rmn.FSTOPL_TRUE)
    rmn.fstopt(rmn.FSTOP_IMAGE, rmn.FSTOPL_TRUE)

    if verbose == 0:
        rmn.fstopt(rmn.FSTOP_MSGLVL, rmn.FSTOPI_MSG_CATAST)

    try:
        if verbose > 0:
            sys.stdout.write('Opening Input File(s): {0}.\n'.\
                             format(str(inputFile)))
        inFileId = rmn.fstopenall(inputFile, rmn.FST_RO)
    except:
        sys.stderr.write('ERROR: Problem opening the file: {0}\n'.\
                         format(str(inputFile)))
        raise
    try:
        if verbose > 0:
            sys.stdout.write('Opening Output File: {0}.\n'.format(outputFile))
        outFileId = rmn.fstopenall(outputFile, rmn.FST_RW)
    except:
        sys.stderr.write('ERROR: Problem opening the file: {0}\n'.\
                         format(outputFile))
        raise
    try:
        copy_rec(inFileId, outFileId, overwrite, matchIn, matchOut,
                 zapValues, verbose)
    except:
        sys.stderr.write('ERROR: Unknown problem copying records.\n')
        raise
    finally:
        if verbose > 0:
            sys.stdout.write('Closing Files.\n')
        rmn.fstcloseall(outFileId)
        rmn.fstcloseall(inFileId)


if __name__ == "__main__":

## $ time editfst -s $ATM_MODEL_DFILES/bcmk/2009042700_* -d 2009042700_000.3 -i 0
## real    0m3.164s
## user    0m0.088s
## sys     0m0.084s
## real    0m3.490s
## user    0m0.072s
## sys     0m0.100s

## $ time rpy.fstcopy -i $ATM_MODEL_DFILES/bcmk/2009042700_* -o 2009042700_000.1 --no-overwrite
## real    0m4.923s
## user    0m1.380s
## sys     0m0.147s
## real    0m4.608s
## user    0m1.386s
## sys     0m0.149s

## $ time rpy.fstcopy -v -i $ATM_MODEL_DFILES/bcmk/2009042700_* -o 2009042700_000.2
## real    0m5.082s
## user    0m1.378s
## sys     0m0.125s
## real    0m5.086s
## user    0m1.316s
## sys     0m0.156s

    desc="Copy selected records from RPNStd file(s) to another with metadata zapping option using fastio+image options."
    epilog="-- Options are excluding records according the provided value(s).\n++ Options are selecting records according the provided value(s).\n\nThe default selection critera for all keys is a 'wildcard',\ni.e. all records are selected."
    usage = "%(prog)s -i inputFile -o outputFile [options]"
    parser = argparse.ArgumentParser(
        description=desc, usage=usage, epilog=epilog,
        prefix_chars='-+', formatter_class=argparse.RawDescriptionHelpFormatter)

    ## group = parser.add_mutually_exclusive_group()

    parser.add_argument("-v", "--verbose",
                        action="count", default=0,
                        help="increase output verbosity")
                        ## action="store_true")
                        ## action='append')
                        ##choices=range(5, 10)
 
    parser.add_argument("-i", "--input", dest="inputFile",
                        nargs='+', required=True, type=str, default=[],
                        help="Input RPN Std File name")
    parser.add_argument("-o", "--output", dest="outputFile",
                        type=str, default='',
                        help="Output RPN Std File name")

    parser.add_argument("--overwrite", action="store_true",
                        dest="overwrite",
                        help="Overrite existing rec in out put file with"+
                             " same meta if any, default is Not to overwrite")


    parser.add_argument("++nomvar",  dest="f_nomvar",
                        nargs='*', type=str, default=[],
                        metavar='NOMVAR',
                        help="Filter records by nomvar values")
    parser.add_argument("++typvar",  dest="f_typvar",
                        nargs='*', type=str, default=[],
                        metavar='TYPVAR',
                        help="Filter records by typvar values")
    parser.add_argument("++etiket",  dest="f_etiket",
                        nargs='*', type=str, default=[],
                        metavar='ETIKET',
                        help="Filter records by etiket values")

    parser.add_argument("++ip1",  dest="f_ip1",
                        nargs='*', type=int, default=[],
                        metavar='IP1',
                        help="Filter records by ip1 values")
    parser.add_argument("++ip2",  dest="f_ip2",
                        nargs='*', type=int, default=[],
                        metavar='IP2',
                        help="Filter records by ip2 values")
    parser.add_argument("++ip3",  dest="f_ip3",
                        nargs='*', type=int, default=[],
                        metavar='IP3',
                        help="Filter records by ip3 values")

    parser.add_argument("++datev",  dest="f_datev",
                        nargs='*', type=int, default=[],
                        metavar='DATEV',
                        help="Filter records by Valid date (CMC date Stamp)")
    ## parser.add_argument("++vdatev", dest="f_vdatev",
    ##                     nargs='*', type=str, default=[],
    ##                     metavar='YYYYMMDD.hhmmss',
    ##                     help="Filter records by Valid date (YYYYMMDD.hhmmss)")

    parser.add_argument("--nomvar",  dest="e_nomvar",
                        nargs='*', type=str, default=[],
                        metavar='NOMVAR',
                        help="Filter out records by nomvar values")
    parser.add_argument("--typvar",  dest="e_typvar",
                        nargs='*', type=str, default=[],
                        metavar='TYPVAR',
                        help="Filter out records by typvar values")
    parser.add_argument("--etiket",  dest="e_etiket",
                        nargs='*', type=str, default=[],
                        metavar='ETIKET',
                        help="Filter out records by etiket values")

    parser.add_argument("--ip1",  dest="e_ip1",
                        nargs='*', type=int, default=[],
                        metavar='IP1',
                        help="Filter out records by ip1 values")
    parser.add_argument("--ip2",  dest="e_ip2",
                        nargs='*', type=int, default=[],
                        metavar='IP2',
                        help="Filter out records by ip2 values")
    parser.add_argument("--ip3",  dest="e_ip3",
                        nargs='*', type=int, default=[],
                        metavar='IP3',
                        help="Filter out records by ip3 values")

    parser.add_argument("--datev",  dest="e_datev",
                        nargs='*', type=int, default=[],
                        metavar='DATEV',
                        help="Filter out records by Valid date (CMC date Stamp)")
    ## parser.add_argument("--vdatev", dest="e_vdatev",
    ##                     nargs='*', type=str, default=[],
    ##                     metavar='YYYYMMDD.hhmmss',
    ##                     help="Filter out records by Valid date (YYYYMMDD.hhmmss)")

    parser.add_argument("-z", "--zap", dest="zap",
                        nargs='*', type=str, default=[],
                        metavar='KEY=VAL',
                        help="Zap key=value (e.g. ip1=123)")

    args = parser.parse_args()

    keylist = ('nomvar', 'typvar', 'etiket', 'ip1', 'ip2', 'ip3', 'datev')
    (matchIn, matchOut) = ({}, {})
    for key in keylist:
        try:
            if key in ('nomvar', 'typvar', 'etiket'):
                matchIn[key] = [x.strip().lower() for x in getattr(args,'f_'+key)]
            else:
                matchIn[key] = getattr(args,'f_'+key)
        except:
            matchIn[key] = []
        try:
            if key in ('nomvar', 'typvar', 'etiket'):
                matchOut[key] = [x.strip().lower() for x in getattr(args,'e_'+key)]
            else:
                matchOut[key] = getattr(args,'e_'+key)
        except:
            matchOut[key] = []
        if args.verbose > 1:
            print('Selecting {0:6s} in:{1:10s}, out:{2}'.format(key,str(matchIn[key]),str(matchOut[key])))

    zapValues0 = {
        'datev' : -1, 'dateo' : -1, 'deet' : -1, 'npas' : -1,
        'ni' : -1, 'nj' : -1, 'nk' : -1,
        'ip1' : -1, 'ip2' : -1, 'ip3' : -1,
        'typvar' : ' ', 'nomvar' : ' ', 'etiket' : ' ',
        'grtyp' : ' ', 'ig1' : -1, 'ig2' : -1, 'ig3' : -1, 'ig4' : -1,
        'datyp' : -1, 'keep_dateo' : False
        }
    zapValues = zapValues0.copy()

    for zap in args.zap:
        keyval    = zap.split('=',1)
        keyval[0] = keyval[0].lower().strip()
        if (len(keyval) < 2 or len(keyval[1].strip()) == 0 or
            keyval[0] not in zapValues.keys()):
            sys.stderr.write("WARNING: ignoring zap parameter (malformed or unknown key): {0}\n".format(zap))
        else:
            try:
                if isinstance(zapValues[keyval[0]], bool):
                    val = not keyval[1].lower().strip() in ('f', 'false', '0')
                elif isinstance(zapValues[keyval[0]], int):
                    val = int(keyval[1])
                else:
                    val = keyval[1]
            except:
                sys.stderr.write("WARNING: ignoring zap parameter, wrong type: {0}\n".format(zap))
                raise
                continue
            if args.verbose > 1:
                print('Zapping {0:6s} = {1}'.format(keyval[0], val))
            zapValues[keyval[0]] = val
    for key in zapValues.keys():
        if zapValues[key] == zapValues0[key] and key != 'keep_dateo':
            zapValues[key] = None

    try:
        copy_rec_fname(args.inputFile, args.outputFile, args.overwrite,
                       matchIn, matchOut, zapValues, args.verbose)
    except:
        raise
        sys.exit(1)

# -*- Mode: C; tab-width: 4; indent-tabs-mode: nil -*-
# vim: set expandtab ts=4 sw=4:
# kate: space-indent on; indent-mode cstyle; indent-width 4; mixedindent off;
