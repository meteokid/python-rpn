#!/usr/bin/env python
import optparse,sys,os,re,shutil
from rpnpy.ftnnml import *

if __name__ == "__main__":
    
    cleanName    = lambda x: x.lower().replace('\n',' ').strip()

    # Command line arguments
    desc="Set a value, rename variable name or namelists, create new variable or namelist in a Fortran namelist file"
    usage = """
    %prog [options] [-n namelist] key1=value1 [key2=value2] ...
    %prog [options] nml1/key1=value [nml2/key2=value] ..."""
    parser = optparse.OptionParser(usage=usage,description=desc)
    parser.add_option("-f","--file",dest="nml_file",default="./gem_settings.nml",
                      help="Name of FILE containing namelist [default 'gem_settings.nml']",metavar="FILE")
    parser.add_option("-b","--backup",dest="backup",action="store_true",
                      help="Create a backup (.bkp) of the input FILE",metavar="FILE")
    parser.add_option("-n","--namelist",dest="namelist",default=None,
                      help="NAMELIST to search for keys",metavar="NAMELIST")
    parser.add_option("-c","--clean",dest="clean",action="store_true",
                      help="Clean up nml file from supurious content",metavar="FILE")
    parser.add_option("-d","--downcase",dest="downcase",action="store_true",
                      help="Downcase all nml and var names",metavar="FILE")
    (options,args) = parser.parse_args()

    # Create backup if requested
    if options.backup:
        bkpfile = options.nml_file+'.bkp'
        try:
            shutil.copy(options.nml_file,bkpfile)
        except IOError:
            sys.stderr.write('ERROR: Aborting because requested backup cannot be created\n')
            raise

    # Check for required inputs
    keymode=0
    try:
        args[0].index('=')
    except IndexError: 
        parser.print_help()
        sys.exit(1)
    except ValueError: 
        keymode=1

    namelist = (options.namelist if options.namelist else '')
    setlist  = args
    if keymode:
        try:
            namelist = args[0]
            setlist  = args[1:]
        except IndexError: 
            parser.print_help()
            sys.exit(1)
    
    # Add/modify value for key in settings file
    cfg = FtnNmlFile(options.nml_file)
    for entry in setlist:
        try:
            (key,value) = re.split('=',entry)
        except ValueError:
            sys.stderr.write('WARNING: Key/value pairs must be written as key=value or nml/key=value... skipping '+entry+'\n')
            continue
        try:
            (nml2, key2) = re.split('/',key)
        except ValueError:
            (nml2, key2) = (namelist, key)
        (nml2, key2) = (cleanName(nml2), cleanName(key2))
        ## if nml2 in cfg.keys():
        ##     print repr(cfg.get(nml2))
        if not nml2 in cfg.keys():
            cfg.add(FtnNmlSection(nml2))
        ## print repr(cfg.get(nml2))
        if not key2 in cfg.get(nml2).keys():
            cfg.get(nml2).add(FtnNmlKeyVal(key2,FtnNmlVal(value)))
        else:
            cfg.get(nml2).get(key2).get('v').set(value)
    
    # Write modified settings file
    try:
        cfg.write(options.nml_file,clean=options.clean,uplowcase=options.downcase)
    except IOError:
        sys.stderr.write('ERROR: Cannot write to '+options.nml_file+'\n')
        raise

# -*- Mode: C; tab-width: 4; indent-tabs-mode: nil -*-
# vim: set expandtab ts=4 sw=4:
# kate: space-indent on; indent-mode cstyle; indent-width 4; mixedindent off;
