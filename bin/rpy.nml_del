#!/usr/bin/env python
import optparse,sys,re,shutil
from rpnpy.ftnnml import *

if __name__ == "__main__":
    
    # Command line arguments
    desc="Delete a variable or namelist from a Fortran namelist file"
    usage = """
    %prog [options] key1 [key2] ...
    %prog [options] nml1/key1 [nml2/key2] ..."""
    parser = optparse.OptionParser(usage=usage,description=desc)
    parser.add_option("-f","--file",dest="nml_file",default="./gem_settings.nml",
                      help="Name of FILE containing namelist [default 'gem_settings.nml']",metavar="FILE")
    parser.add_option("-b","--backup",dest="backup",action="store_true",
                      help="Create a backup (.bkp) of the input FILE",metavar="FILE")
    parser.add_option("-n","--namelist",dest="namelist",default=None,
                      help="NAMELIST to search for keys [default all]",metavar="NAMELIST")
    parser.add_option("-c","--clean",dest="clean",action="store_true",
                      help="Clean up nml file from supurious content",metavar="FILE")
    parser.add_option("-d","--downcase",dest="downcase",action="store_true",
                      help="Downcase all nml and var names",metavar="FILE")
    (options,args) = parser.parse_args()
    if not len(args):
        parser.print_help()
        sys.exit(1)   

    # Create backup if requested
    if options.backup:
        bkpfile = options.nml_file+'.bkp'
        try:
            shutil.copy(options.nml_file,bkpfile)
        except IOError:
            sys.stderr.write('ERROR: Aborting because requested backup cannot be created\n')
            raise

    # Add/modify value for key in settings file
    cfg = FtnNmlFile(options.nml_file)
    for key in args:
        try:
            (nml2,key2) = re.split('/',key)
        except ValueError:
            (nml2, key2) = (options.namelist, key)
        try:
            cfg.get(nml2).rm(key2)
        except:
            sys.stdout.write('WARNING: Key not found ... skipping '+key+'\n')
            continue
        
    # Write modified settings file
    try:
        cfg.write(options.nml_file,clean=options.clean,uplowcase=options.downcase)
    except IOError:
        sys.stderr.write('ERROR: Cannot write to '+options.nml_file+'\n')
        raise


# -*- Mode: C; tab-width: 4; indent-tabs-mode: nil -*-
# vim: set expandtab ts=4 sw=4:
# kate: space-indent on; indent-mode cstyle; indent-width 4; mixedindent off;
