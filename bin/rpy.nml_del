#!/usr/bin/env python
import re
import sys
import shutil
import argparse
import logging
from rpnpy.ftnnml import *

if __name__ == "__main__":
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
    
    # Command line arguments
    desc="Delete a variable or namelist from a Fortran namelist file"
    usage = """
    %(prog)s [options] key1 [key2] ...
    %(prog)s [options] nml1/key1 [nml2/key2] ...
    %(prog)s [options] -- nml1/key1 [nml2/key2] ..."""
    epilog="""
    """
    parser = argparse.ArgumentParser(
        description=desc, usage=usage, epilog=epilog, 
        prefix_chars='-+', formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-f", "--file", dest="nml_file", 
                        type=str, default="./gem_settings.nml", 
                        metavar="NML_FILE", 
                        help="Name of FILE containing namelist [default 'gem_settings.nml']")
    parser.add_argument("-b", "--backup", dest="backup", 
                        action="store_true", 
                        help="Create a backup (.bkp) of the input FILE")
    parser.add_argument("-n", "--namelist", dest="nml_name", 
                        type=str, default="", 
                        metavar="NAMELIST", 
                        help="NAMELIST to search for keys")
    parser.add_argument("-c", "--clean", dest="clean", 
                        action="store_true", 
                        help="Clean up nml file from supurious content")
    parser.add_argument("-d", "--downcase", dest="downcase", 
                        action="store_true", 
                        help="Downcase all nml and var names")

    parser.add_argument(dest="nml_keys", 
                        nargs='+', type=str, default=[], 
                        metavar='[key1] [nml2/key2]', 
                        help="")
    args = parser.parse_args()
    
    # Create backup if requested
    if args.backup:
        bkpfile = args.nml_file+'.bkp'
        try:
            shutil.copy(args.nml_file, bkpfile)
        except IOError:
            logging.error('Aborting because requested backup cannot be created\n')
            sys.exit(1)   

    # Add/modify value for key in settings file
    cfg = FtnNmlFile(args.nml_file)
    for key in args.nml_keys:
        try:
            (nml2, key2) = re.split('/', key)
        except ValueError:
            (nml2, key2) = (args.nml_name, key)
        try:
            cfg.get(nml2).rm(key2)
        except:
            logging.warning('Key not found ... skipping {}\n'.format(key))
            continue
        
    # Write modified settings file
    try:
        cfg.write(args.nml_file, clean=args.clean, uplowcase=args.downcase)
    except IOError:
        logging.error('Cannot write to {}\n'.format(args.nml_file))
        sys.exit(1)   



# -*- Mode: C; tab-width: 4; indent-tabs-mode: nil -*-
# vim: set expandtab ts=4 sw=4:
# kate: space-indent on; indent-mode cstyle; indent-width 4; mixedindent off;
