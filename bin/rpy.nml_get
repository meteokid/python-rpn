#!/usr/bin/env python
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Author: Stephane Chamberland <stephane.chamberland@canada.ca>
# Copyright: LGPL 2.1
"""
"""
import re
import sys
import optparse
from rpnpy.ftnnml import *

if __name__ == "__main__":

    cleanName    = lambda x: x.lower().replace('\n',' ').strip()
    
    # Command line arguments
    desc="Get list of values, variable names and namelists names from a Fortran namelist file"
    usage = """
    %prog [options] key1 [key2] ...
    %prog [options] nml1/key1 [nml2/key2] ..."""
    parser = optparse.OptionParser(usage=usage,description=desc)
    parser.add_option("-f","--file", dest="nml_file",
                      default="./gem_settings.nml",
                      help="Name of FILE containing namelist [default 'gem_settings.nml']",metavar="FILE")
    parser.add_option("-o","--output", dest="prefix",
                      default=None,
                      help="PREFIX for output file name [default STDOUT]",
                      metavar="PREFIX")
    parser.add_option("-n","--namelist", dest="namelist",
                      default=None,
                      help="NAMELIST to search for keys [default all]",
                      metavar="NAMELIST")
    parser.add_option("-k","--keys", dest="keys",
                      action="store_true",
                      help="Include KEY in output expressions (useful for 'eval')",
                      metavar="KEY")
    
    parser.add_option("-l","--listkeys", dest="listkeys",
                      action="store_true",
                      help="Print the list of vars (keys) of the specified namelist, of all namelists otherwise")
    parser.add_option("-v","--listkeyval", dest="listkeyval",
                      action="store_true",
                      help="Print the list nml/key=val of the specified namelist, of all namelists otherwise")
    parser.add_option("-L","--listnml", dest="listnml",
                      action="store_true",
                      help="Print the list of all namelists names")
    parser.add_option("-p","--prettyprint", dest="pprint",
                      action="store_true",
                      help="Pretty print the namelist file or specified namelist")
    (options,args) = parser.parse_args()
    if not (len(args) or options.listkeys or options.listnml
            or options.pprint or options.listkeyval):
        parser.print_help()
        sys.exit(1)   

    cfg = FtnNmlFile(options.nml_file)

    if options.listnml:
        print " ".join(cfg.keys())
        sys.exit(0)
        
    if options.listkeys:
        mylist = ([options.namelist] if options.namelist else cfg.keys())
        print " ".join([" ".join(cfg.get(nml).keys()) for nml in mylist])
        sys.exit(0)
        
    if options.listkeyval:
        mylist = ([options.namelist] if options.namelist else cfg.keys())
        for nml in ([options.namelist] if options.namelist else sorted(cfg.keys())):
            for myvar in sorted(cfg.get(nml).keys()):
                print "%s/%s" % (nml,cfg.get(nml).get(myvar).toStr(clean=True).strip())
        sys.exit(0)
        
    if options.pprint:
        for nml in ([options.namelist] if options.namelist else sorted(cfg.keys())):
            print cfg.get(nml).toStr(clean=True,uplowcase=True)
        sys.exit(0)
        
    # Generate output
    outputSuffix = '.txt'
    for entry in args:
        (value, outFile) = ('', None)
        try:
            (nml2, key2) = re.split('/',entry)
        except ValueError:
            (nml2, key2) = (options.namelist, entry)
        expr = (key2+'=' if options.keys else '')
        try:
            if not nml2:
                for nmlname in cfg.keys():
                    if cleanName(key2) in cfg.get(nmlname).keys():
                        nml2 = nmlname
            if nml2:
                value = cfg.get(nml2).get(key2).get('v')
            else:
                raise KeyError(" Oops! Key not found: %s" % (key2))
        except KeyError:
            sys.stderr.write('ERROR: '+str(sys.exc_info()[1])+'\n')
            #raise
            continue
        if options.prefix:
            outFile = options.prefix+key2+outputSuffix
            try:
                fd = open(outFile,"w")
            except OSError:
                sys.stderr.write("ERROR: cannot open output file "+outFile+" for writing\n")
                sys.exit(1)
        else:
            fd = sys.stdout            
        fd.write(expr+str(value)+'\n')        
        if outFile: fd.close()

# -*- Mode: C; tab-width: 4; indent-tabs-mode: nil -*-
# vim: set expandtab ts=4 sw=4:
# kate: space-indent on; indent-mode cstyle; indent-width 4; mixedindent off;
