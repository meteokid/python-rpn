!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r v4d_corrval_north_ad - ADJ of v4d_corrval_north  
!
      subroutine v4d_corrval_north_ad (zo,npts,zi,zinorth,ax,ay,cx,cy,i1,i2,j1,j2,nk, &
                                       jmin,jmax,ni,pxzone,pyzone,indzone,nzone,grtypi,degree)
!
      implicit none
#include <arch_specific.hf>
!
      integer npts,i1,i2,j1,j2,nk,jmin,jmax,ni,degree
!
      real zo(nk,npts),zi(i1:i2,j1:j2,nk),zinorth(i1:i2,nk), &
           ax(i1:i2),ay(j1:j2),cx(i1:i2,6),cy(j1:j2,6)
!
      character*1 grtypi
!
      integer nzone,indzone(nzone)
      real pxzone(nzone),pyzone(nzone)
!
!author M.Tanguay
!
!revision
! v3_00 - Tanguay M.        - initial MPI version
! v3_31 - Tanguay M.        - Add OPENMP directives 
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!  see id section
!
!Adjoint of
!arguments
! Name         I/O        Description
!----------------------------------------------------------------
! zo            O         Interpolated scalar field corrected at pxzone,pyzone
! npts          I         Number of positions in zo
! zi            I         Scalar field on INPUT grid
! zinorth       I         Scalar field on segment of latitude circle at north pole
! ax            I         X axe of INPUT grid
! ay            I         Y axe of INPUT grid
! cx            I         AX difference on INPUT grid
! cy            I         AY difference on INPUT grid
! i1-i2         I         Dimension x in INPUT grid
! j1-j2         I         Dimension y in INPUT grid
! nk            I         Dimension z in INPUT grid
! jmin          I         Lower  limit j
! jmax          I         Higher limit j
! ni            I         Period if grid='G', Heart if grid = 'Z'
! pxzone        I         Position px near north pole where zo is corrected
! pyzone        I         Position py near north pole where zo is corrected
! indzone       I         Index of positions where zo is corrected
! nzone         I         Number of positions pxzone,pyzone to correct
! grtypi        I         Type of INPUT grid
! degree        I         Degree of interpolation
!----------------------------------------------------------------
!
      integer i,j,k,pnerr,j1x,j2x,status
!
      real ay_ext(0:3),cy_ext(0:3,6)
      real, allocatable, dimension(:,:,:) :: lines
      real, pointer,     dimension(:,:)   :: corrs
!
      real*8, parameter :: ZERO_8 = 0.0
!     _______________________________________________________________________
!
      if(degree.ne.1.and.degree.ne.3) &
         call handle_error(-1,'v4d_corrval_north_ad','degree.ne.1.and.degree.ne.3')
!     _______________________________________________________________________
!
      allocate( lines(i1:i2,4,nk), STAT=status )
      allocate( corrs(nk,nzone),   STAT=status )
!
      j1x = jmax-2
      j2x = jmax+1
!
!     ZERO adjoint variables
!     ----------------------
!$omp parallel do
      do k=1,nk
!
        do i=1,nzone
          corrs(k,i) = ZERO_8
        enddo
!
        do j=1,4
        do i=i1,i2        
          lines(i,j,k) = ZERO_8
        enddo
        enddo
!
      enddo
!$omp end parallel do
!
!     Adjoint of
!     Replace corrected zo near north pole
!     ------------------------------------
      do i = nzone,1,-1
!
        do k=nk,1,-1
          corrs(k,i)          = zo(k,indzone(i)) + corrs(k,i)
          zo   (k,indzone(i)) = ZERO_8
        enddo
!
      enddo
!
!     Adjoint of
!     case LINEAR
!     -----------
      if(degree.eq.1) then
!
         ay_ext(0) = ay(jmax-2)
         ay_ext(1) = ay(jmax-1)
         ay_ext(2) = ay(jmax  )
         ay_ext(3) = 90.0
!
         if(grtypi.eq.'Z') then
            call v4d_irgdint_1_nw_ad (corrs,pxzone,pyzone,nzone,ax,ay_ext,lines, &
                                      i1,i2,j1x,j2x,nk,j1x,j2x)
         endif
         if(grtypi.eq.'G') then
            call v4d_irgdint_1_w_ad  (corrs,pxzone,pyzone,nzone,ax,ay_ext,lines, &
                                      ni,j1x,j2x,nk)
         endif
!
      endif
!
!     Adjoint of
!     case CUBIC
!     ----------
      if(degree.eq.3) then
!
         ay_ext(0) = ay(jmax-2)
         ay_ext(1) = ay(jmax-1)
         ay_ext(2) = ay(jmax  )
         ay_ext(3) = 90.0
!
         do j=0+1,3-2
           cy_ext(j,1) = 1. / (ay_ext(j  ) - ay_ext(j-1))
           cy_ext(j,2) = 1. / (ay_ext(j+1) - ay_ext(j-1))
           cy_ext(j,3) = 1. / (ay_ext(j+1) - ay_ext(j  ))
           cy_ext(j,4) = 1. / (ay_ext(j+2) - ay_ext(j-1))
           cy_ext(j,5) = 1. / (ay_ext(j+2) - ay_ext(j  ))
           cy_ext(j,6) = 1. / (ay_ext(j+2) - ay_ext(j+1))
         enddo
!
         if(grtypi.eq.'Z') then
            call v4d_irgdint_3_nw_ad (corrs,pxzone,pyzone,nzone,ax,ay_ext,cx,cy_ext,lines, &
                                      i1,i2,j1x,j2x,nk,j1x,j2x)
         endif
         if(grtypi.eq.'G') then
            call v4d_irgdint_3_w_ad  (corrs,pxzone,pyzone,nzone,ax,ay_ext,cx,cy_ext,lines, &
                                      ni,j1x,j2x,nk)
         endif
!
      endif
!
!$omp parallel do
      do k=nk,1,-1
!
!       Adjoint of
!       Recover segment of circle at north pole
!       ---------------------------------------
        do i=i1,i2
          zinorth(i,k) = lines(i,4,k) + zinorth(i,k)
          lines(i,4,k) = ZERO_8
        enddo
!
!       Adjoint of
!       Store segments of 3 last circles near north pole
!       ------------------------------------------------
        do j=3,1,-1
          do i=i1,i2
            zi   (i,jmax-3+j,k) = lines(i,j,k) + zi(i,jmax-3+j,k)
            lines(i,j,       k) = ZERO_8
          enddo
        enddo
!
      enddo
!$omp end parallel do
!
      deallocate( lines, STAT=status )
      deallocate( corrs, STAT=status )
!
      return
      end
