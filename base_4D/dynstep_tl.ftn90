!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r dynstep_tl -  TLM of dynstep 
!
#include "model_macros_f.h"
!
      subroutine dynstep_tl
!
      implicit none
!
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - ADJ of vertical sponge layer
! v2_31 - Tanguay M.        - adapt ADJ to diffusion in gem_run
! v3_03 - Tanguay M.        - Adjoint Lam configuration
! v3_30 - Tanguay M.        - Adapt TL/AD to Lam_ctebcs_L
! v4_04 - Tanguay M.        - Staggered version TL/AD
! v4_12 - Tanguay M.        - Adapt TL/AD to revised blending
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!     TLM of dynstep
!
!arguments
!       none
!
!implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "orh.cdk"
#include "init.cdk"
#include "lctl.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lam.cdk"
#include "step.cdk"
#include "type.cdk"
#include "vtopo.cdk"
!
      integer itraj
      logical first_L, secon_L
!
      logical done_intt_L
      data done_intt_L /.false./
      save done_intt_L
!*
!     ---------------------------------------------------------------
!
      if (G_lam) call handle_error(-1,'dynstep_tl','LAM: need to be revised')
!
      if (Lun_debug_L) write(Lun_out,1000)
!
!     first_L is TRUE  for the first timestep
!           or the first timestep after digital filter initialisation
!
      first_L = (Lctl_step.eq.1).or.(Rstri_idon_L .and.  &
                 Lctl_step.eq.(Init_dfnp+1)/2)
!
!     secon_L is TRUE  for the second timestep
!            or the second timestep after digital filter initialisation
!
      secon_L = (Lctl_step.eq.2).or.(Rstri_idon_L .and.  &
                 Lctl_step.eq.(Init_dfnp+1)/2 + 1)
!
!     Orh_crank_L is TRUE for a time step using C-N procedure
!
      Orh_crank_L= first_L .or. ( secon_L .and. ( Schm_xwvt3 .gt. 0 ))  &
                           .or. ( mod(Lctl_step-1,Schm_modcn) .eq. 0 )
!
      itraj = Schm_itraj
!
      if ( first_L) then
         call pospers_tl ()
         itraj = max( 5, Schm_itraj )
      endif
!
! Perform time interpolation of Lateral BCs for LAM configurations
!
      call frstgss    ()

!     Recover TRAJ predictive variables
!     ---------------------------------
      call v4d_rwtraj (2)

      call frstgss_tr ()
!
      call nest_bcs (done_intt_L)
!
      if ( Orh_crank_L ) then
!     
!        CN iterations
!     
         if (Lun_debug_L) write(Lun_out,1005) Schm_itcn-1

         do Orh_icn = 1,Schm_itcn-1
!     
            call tstpdyn_tl (itraj)
            itraj = Schm_itraj
!     
         end do
         if (Lun_debug_L) write(Lun_out,1006)
!     
         Orh_icn=Schm_itcn
!     
      else
!     
         Orh_icn = 1
!     
      endif
!     
!     ------------------------------------------------------------
!     Perform the timestep
!     ------------------------------------------------------------
!     
      call tstpdyn_tl ( Schm_itraj )
!     
!     ------------------------------------------------------------
!     C	  When the timestep is completed, rename all the
!     C        variables at time level t1 -> t0 and rename all the
!     C        variables at time level t0 -> t1 for the next timestep
!     ------------------------------------------------------------
!
      call t02t1_tl ()
!
!     --------------------------------------------------------------
!     Blending solution for LAM config
!     --------------------------------------------------------------
!
!!!   call nest_gwa ()
!
!     ===================
!     END OF ONE TIMESTEP
!     ===================
!
      if ( Lctl_step-Vtopo_start .eq. Vtopo_ndt) Vtopo_L = .false.
      if ( G_lam.and.(Lctl_step.eq.Step_total) ) done_intt_L = .true.
!
 1000 format( &
      /,'CONTROL OF DYNAMICAL STEP: (S/R DYNSTEP_TL)', &
      /,'========================================'/)
 1005 format( &
      /3X,'TLM of ##### Crank-Nicholson iterations: ===> PERFORMING',I3, &
          ' timestep(s) #####'/)
 1006 format( &
      /3X,'TLM of ##### Crank-Nicholson iterations: ===> DONE... #####'/)
!
      return
      end
