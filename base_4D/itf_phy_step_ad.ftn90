!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_step - Apply the physical processes: CMC/RPN package
!
#include "model_macros_f.h"
!
      subroutine itf_phy_step_ad (F_stepno)

!!!   Use itf_phy_iface  , Only : physics_wrapper
      implicit none
#include <arch_specific.hf>
!
      integer, INTENT(IN) :: F_stepno
!!!Subroutine itf_phy_slb_ad (geofld, Phy_busdyn3D, Phy_busper3D, Phy_busvol3D, &
Interface
!!!Subroutine itf_phy_slb_ad (geofld,     busdyn3D,     busper3D,     busvol3D, &
Subroutine    itf_phy_slb_ad (busent3D,   busdyn3D,     busper3D,     busvol3D, &
                    esiz, dsiz, fsiz, vsiz,   &
                    dt, kount, ni, nj, nk, pslic) 

!!!      Real, Dimension(:), Pointer :: geofld, Phy_busdyn3D, Phy_busper3D, &
!!!                                     Phy_busvol3D
!!!      Real, Dimension(:,:), Pointer :: busdyn3D, busper3D, busvol3D
         Real, Dimension(:,:), Pointer :: busent3D, busdyn3D, busper3D, busvol3D
!!!      Real, Dimension(:  ), Pointer :: geofld
         Integer :: esiz, dsiz, fsiz, vsiz
         Real    :: dt
         Integer :: ni, nj, nk, pslic
End Subroutine itf_phy_slb_ad
End Interface
!
!author
!     Lubos Spacek    - Nov 2010
!
!revision
! v4_20 - Spacek, L.       - Initial revision
! v4_40 - Tanguay,M.       - BUSDYN_3d
!
!object
!	Computes the physical processes and apply the resulting
!	tendencies to the dynamic variables of the model:
!	CMC/RPN package
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_stepno      O           step number
!----------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
#include "itf_phy_buses.cdk"
#include "itf_phy_config.cdk"
#include "out3.cdk"
#include "cstv.cdk"
!
      integer, save :: pslic
      integer j, gmmstat
!
      real dt
!!!   real busper, busvol, busdyn
!!!   pointer (pabusper,busper(*))
!!!   pointer (pabusvol,busvol(*))
!!!   pointer (pabusdyn,busdyn(*))
!
      real, pointer, dimension (:,:) :: BUSENT_3d  => null()
      real, pointer, dimension (:,:) :: BUSDYN_3d  => null()
      real, pointer, dimension (:,:) :: BUSVOL_3d  => null()
      type(gmm_metadata) :: meta
!
!     ---------------------------------------------------------------
!
      gmmstat = gmm_get ('BUSENT_3d',BUSENT_3d,meta)

      gmmstat = gmm_get ('BUSPER_3d',BUSPER_3d,meta)
      gmmstat = gmm_get ('BUSDYN_3d',BUSDYN_3d,meta)
      gmmstat = gmm_get ('BUSVOL_3d',BUSVOL_3d,meta)
!
!     Nullify the adjoint variables

!!!   Phy_busvol3D = 0.0; Phy_busdyn3D = 0.0; phy_tend     = 0.0;
      BUSVOL_3d    = 0.0; BUSDYN_3d    = 0.0; phy_tend     = 0.0;

!     Trajectory first 
       Do j=1,p_nj
!!!       pabusdyn = loc (Phy_busdyn3D((j-1)*p_bdyn_siz+1))
!!!       pabusper = loc (Phy_busper3D((j-1)*p_bper_siz+1))
!!!       Call itf_phy_fillbus_tr(busdyn,busper,j,F_stepno,p_nk)
          Call itf_phy_fillbus_tr(BUSDYN_3d(1,j),BUSPER_3d(1,j),j,F_stepno,p_nk)
       Enddo

!
      call itf_phy_apply_ad ( F_stepno.gt.0 )

      call pe_rebind (Ptopo_smtphy,(Ptopo_myproc.eq.0).and. &
                                   (F_stepno    .eq.0)  )

      if (Lun_out.gt.0) write(Lun_out,1000) F_stepno
!
      pslic= 0
      dt   = Cstv_dt_8

!$omp parallel do
      do j = 1, p_nj
!!!      pabusvol = loc (Phy_busvol3D((j-1)*p_bvol_siz+1))
!!!      call itf_phy_extract_ad ( busvol, j, p_nk )
         call itf_phy_extract_ad ( BUSVOL_3d(1,j), j, p_nk )
      end do
!$omp end parallel do
!

!$omp parallel
!!!   call itf_phy_slb_ad ( geofld ,Phy_busdyn3D ,Phy_busper3D ,Phy_busvol3D, &
!!!   call itf_phy_slb_ad ( geofld ,   BUSDYN_3d    ,BUSPER_3d    ,BUSVOL_3d   , &
      call itf_phy_slb_ad ( BUSENT_3d ,BUSDYN_3d    ,BUSPER_3d    ,BUSVOL_3d   , &
                             p_bent_siz, p_bdyn_siz, p_bper_siz, p_bvol_siz,     &
                             dt, F_stepno, p_ni, p_nj, p_nk, pslic )
!$omp end parallel

      call pe_rebind (Ptopo_smtdyn,(Ptopo_myproc.eq.0).and. &
                                   (F_stepno    .eq.0) )
!
      call itf_phy_prep_ad (F_stepno)

 1000 format(/'PERFORM A PHYSICS STEP: stepno= ',i6, &
              ' (S/R itf_phy_step_ad)'/57('='))
!
!     ---------------------------------------------------------------
!
      return
      end
