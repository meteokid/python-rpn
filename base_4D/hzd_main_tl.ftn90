!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r hzd_main_tl - TLM of hzd_main 
!
#include "model_macros_f.h"
!
      subroutine hzd_main_tl 
      implicit none
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - ADJ of HO option
!                           - replace xfis by topo
! v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate
!                           - change name
! v3_01 - Tanguay M.        - TLM of Eigv_parity_L not done yet
! v3_02 - Tanguay M.        - TLM of Eigv_parity_L done
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ
!                           - Introduce Hzd_hzdmain_n_L
! v3_30 - Tanguay M.        - activate Hzd_type_S='EXPLICIT'
! v4_04 - Tanguay M.        - Staggered version TL/AD
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_30 - Tanguay M.        - Revision
!
!object
!	
!arguments
!     none
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "hzd.cdk"
#include "vt1.cdk"
#include "vt1_m.cdk"
#include "vspng.cdk"

      logical no_hzd,no_vspng
      integer i
      real, pointer, dimension(:,:,:) :: tr,tr_m
!
!     _________________________________________________________________
!
      no_hzd   = (.not.Hzd_ho_L) .or.  (.not.Hzd_hzdmain_0_L)
      no_vspng = (Vspng_nk.lt.1)

      if (no_hzd .and. no_vspng) return

      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(wt1)'
!
!     TRAJECTORY
!     ----------
      gmmstat = gmm_get(gmmk_ut1_m_s,ut1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(ut1_m)'
      gmmstat = gmm_get(gmmk_vt1_m_s,vt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(vt1_m)'
      gmmstat = gmm_get(gmmk_zdt1_m_s,zdt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(zdt1_m)'
      gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(tt1_m)'
      gmmstat = gmm_get(gmmk_wt1_m_s,wt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(wt1_m)'

!!!   call itf_ens_hzd ( ut1, vt1, tt1, LDIST_DIM, G_nk+1)

      call iw2rwnd ( ut1_m, vt1_m, LDIST_DIM, G_nk, 1 )
      call iw2rwnd ( ut1  , vt1  , LDIST_DIM, G_nk, 1 )
!
!***************************
!  1. Horizontal diffusion *
!***************************
!
      if ( .not. no_hzd ) then

         call hzd_ctrl ( ut1, 'U', G_nk  )
         call hzd_ctrl ( vt1, 'V', G_nk  )
         
         call hzd_ctrl (zdt1, 'S', G_nk+1)
         call hzd_ctrl ( wt1, 'S', G_nk+1)
!
!        TRAJECTORY
!        ----------
         call hzd_ctrl ( ut1_m, 'U', G_nk  )
         call hzd_ctrl ( vt1_m, 'V', G_nk  )

         call hzd_ctrl (zdt1_m, 'S', G_nk+1)
         call hzd_ctrl ( wt1_m, 'S', G_nk+1)

         do i=1, Hzd_tr3d_ntr
            nullify (tr)
            gmmstat = gmm_get('TR/'//trim(Hzd_tr3d_name_S(i))//':P',tr,meta3d)
            if (gmmstat.eq.0) call hzd_ctrl ( tr, 'S_TR', G_nk+1 )
!
!           TRAJECTORY
!           ----------
            gmmstat = gmm_get('TRM/'//trim(Hzd_tr3d_name_S(i))//':P',tr_m,meta3d)
            if (gmmstat.eq.0) call hzd_ctrl ( tr_m, 'S_TR', G_nk+1 )

         end do

      endif
!     
!***********************
!  2. Vertical sponge  *
!***********************
!
      if ( .not. no_vspng ) then
         if (G_lam) then
            call vspng_drv_lam_tl (ut1,  vt1,  zdt1,  wt1,  tt1, &
                                   ut1_m,vt1_m,zdt1_m,wt1_m,tt1_m,LDIST_DIM,G_nk)
         else
            call vspng_drv_tl (ut1,  vt1,  zdt1,  wt1,  tt1, &
                               ut1_m,vt1_m,zdt1_m,wt1_m,tt1_m,LDIST_DIM,G_nk)
         endif
      endif

      call iw2rwnd ( ut1_m, vt1_m, LDIST_DIM, G_nk, 2 )
      call iw2rwnd ( ut1  , vt1  , LDIST_DIM, G_nk, 2 )
!
!!!   call psadj ()
!
!!!   call itf_ens_hzd ( ut1, vt1, tt1, LDIST_DIM, G_nk+1 )
!
!!!   call pw_update_UVT ('P')
!
!     _________________________________________________________________
!
      return
      end
