!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r frstgss_ad - ADJ of frstgss 
!
#include "model_macros_f.h"
!
      subroutine frstgss_ad ()
!
      implicit none
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
! v2_31 - Tanguay M.        - introduce Lun_debug_L 
! v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
! v3_21 - Tanguay M.        - Revision Openmp
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!    see id section
!	
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cori.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
!
      character*16 tr_name
      real*8, parameter :: ZERO_8 = 0.0
      integer i, j, k
      real, pointer, dimension(:,:,:) :: tr0,tr1
!     ______________________________________________________
!
      if (Lun_debug_L) write (Lun_out,1000)
!
      if ( Cori_cornl_L ) then
         gmmstat = gmm_get(gmmk_ut0_s,ut0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(ut0)'
         gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(ut1)'
         gmmstat = gmm_get(gmmk_vt0_s,vt0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(vt0)'
         gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(vt1)'
      endif
      if ( .not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt0_s,qt0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(qt0)'
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(qt1)'
      endif
!
      if ( .not. Schm_hydro_L) then
!$omp parallel do
         do k=0,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            qt1(i,j,k) = qt0(i,j,k) + qt1(i,j,k)
            qt0(i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp end parallel do
      endif
!
      if ( Cori_cornl_L ) then
!$omp parallel do
         do k=1,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            vt1(i,j,k) = vt0(i,j,k) + vt1(i,j,k)
            vt0(i,j,k) = ZERO_8 
            ut1(i,j,k) = ut0(i,j,k) + ut1(i,j,k)
            ut0(i,j,k) = ZERO_8 
         end do
         end do
         end do
!$omp end parallel do
      endif
!
      gmmstat = gmm_get(gmmk_tt0_s,tt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(tt0)'
      gmmstat = gmm_get(gmmk_st0_s,st0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(st0)'
      gmmstat = gmm_get(gmmk_zdt0_s,zdt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(zdt0)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(st1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_wt0_s,wt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(wt0)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_ad ERROR at gmm_get(wt1)'
!
!$omp parallel
!
!$omp do 
      do j= 1 , l_nj
      do i= 1 , l_ni
         st1  (i,j) = st0  (i,j) + st1  (i,j)
         st0  (i,j) = ZERO_8 
!
         tt1 (i,j,l_nk+2) = tt0 (i,j,l_nk+2) + tt1 (i,j,l_nk+2)
         tt0 (i,j,l_nk+2) = ZERO_8
      end do
      end do
!$omp end do 
!
!$omp do 
      do k= 1 , l_nk+1
      do j= 1 , l_nj
      do i= 1 , l_ni
         wt1 (i,j,k) = wt0 (i,j,k) + wt1 (i,j,k)
         wt0 (i,j,k) = ZERO_8
         zdt1(i,j,k) = zdt0(i,j,k) + zdt1(i,j,k)
         zdt0(i,j,k) = ZERO_8
         tt1 (i,j,k) = tt0 (i,j,k) + tt1 (i,j,k) 
         tt0 (i,j,k) = ZERO_8
      end do
      end do
      end do
!$omp end do 
!
!$omp end parallel 
!
! For humidity
      tr_name = 'TR/HU:M'
      gmmstat = gmm_get(tr_name,tr0,meta3d)
      tr_name = 'TR/HU:P'
      gmmstat = gmm_get(tr_name,tr1,meta3d)
      do j= 1 , l_nj
      do i= 1 , l_ni
         tr1 (i,j,l_nk+2) = tr0 (i,j,l_nk+2) + tr1 (i,j,l_nk+2)
         tr0 (i,j,l_nk+2) = ZERO_8
      enddo
      enddo
!
1000  format(3X,' ADJ of FIRST GUESS: (S/R FRSTGSS_AD)')

      return
      end
