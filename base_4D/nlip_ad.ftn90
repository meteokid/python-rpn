!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r nlip_2_ad - ADJ of nlip_2_tl 
!
#include "model_macros_f.h"
!
      subroutine nlip_2_ad ( F_nu, F_nv, F_nt  , F_nc, F_nw, F_nf, F_nb , &
                             F_u , F_v , F_t   , F_s , F_q , F_zd, F_fip, &
                             F_rp, F_rc, F_BsPq, F_mu, &
!
                             F_t_m, F_s_m, F_BsPq_m, F_fip_m, F_mu_m, &
!
                             DIST_DIM, Nk )
!
      implicit none
!
      integer DIST_DIM, Nk
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk+1)  ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk+1)  ,F_nf   (DIST_SHAPE,Nk+1)  , &
              F_nb   (DIST_SHAPE)       ,F_zd   (DIST_SHAPE,Nk+1)  , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk+1)  ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,0:Nk+1),F_fip  (DIST_SHAPE,0:Nk+1), &
              F_rp   (DIST_SHAPE,Nk)    ,F_rc   (DIST_SHAPE,Nk)    , &
              F_BsPq (DIST_SHAPE,0:Nk+1),F_mu   (DIST_SHAPE,Nk+1) 
!
      real    F_t_m    (DIST_SHAPE,Nk+1)  , &
              F_s_m    (DIST_SHAPE)       , &
              F_BsPq_m (DIST_SHAPE,0:Nk+1), &
              F_fip_m  (DIST_SHAPE,0:Nk+1), &
              F_mu_m   (DIST_SHAPE,Nk+1)
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_30 - Edouard S.        - remove pi' at the top
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version
! v3_00 - Tanguay M.        - adapt to restructured nlip_2 
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_12 - Tanguay M.        - OPENMP TL/AD
! v4_13 - Tanguay M.        - Adjustments GEM413
! v4_30 - Tanguay M.        - Revision
!
!object 
!     see id section
!
!arguments
!     see documentation of appropriate comdecks
!
!implicits
#include "glb_ld.cdk"
#include "lam.cdk"
!
      integer i02, in2, j02, jn2, k0
!
      i02=1+pil_w
      in2=l_ni-pil_e
      j02=1+pil_s
      jn2=l_nj-pil_n

      k0=1+Lam_gbpil_T
!
      call nlip_2_2_ad  ( F_nu, F_nv, F_nt  , F_nc, F_nw, F_nf, F_nb , &
                          F_u , F_v , F_t   , F_s , F_q , F_zd, F_fip, &
                          F_rp, F_rc, F_BsPq, F_mu, &
!
                          F_t_m, F_s_m, F_BsPq_m, F_fip_m, F_mu_m, &
!
                          DIST_DIM, Nk, &
                          i02,j02,in2,jn2,k0 )
!
      return
      end
!
! 2nd stage added for OpenMP
!
      subroutine nlip_2_2_ad(F_nu, F_nv, F_nt  , F_nc, F_nw, F_nf, F_nb , &
                             F_u , F_v , F_t   , F_s , F_q , F_zd, F_fip, &
                             F_rp, F_rc, F_BsPq, F_mu, &
!
                             F_t_m, F_s_m, F_BsPq_m, F_fip_m, F_mu_m, &
!
                             DIST_DIM, Nk, &
                             i02,j02,in2,jn2,k0 )
!
      implicit none
!
      integer DIST_DIM, Nk,i02,j02,in2,jn2,k0
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk+1)  ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk+1)  ,F_nf   (DIST_SHAPE,Nk+1)  , &
              F_nb   (DIST_SHAPE)       ,F_zd   (DIST_SHAPE,Nk+1)  , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk+1)  ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,0:Nk+1),F_fip  (DIST_SHAPE,0:Nk+1), &
              F_rp   (DIST_SHAPE,Nk)    ,F_rc   (DIST_SHAPE,Nk)    , &
              F_BsPq (DIST_SHAPE,0:Nk+1),F_mu   (DIST_SHAPE,Nk+1)
!
      real    F_t_m    (DIST_SHAPE,Nk+1)  , &
              F_s_m    (DIST_SHAPE)       , &
              F_BsPq_m (DIST_SHAPE,0:Nk+1), &
              F_fip_m  (DIST_SHAPE,0:Nk+1), &
              F_mu_m   (DIST_SHAPE,Nk+1)
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_30 - Edouard S.        - remove pi' at the top
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version
! v3_00 - Tanguay M.        - adapt to restructured nlip_2 
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v3_21 - Tanguay M.        - Revision Openmp
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_12 - Tanguay M.        - OPENMP TL/AD
! v4_13 - Tanguay M.        - Adjustments GEM413
! v4_30 - Tanguay M.        - Revision
!
!object 
!     see id section
!
!arguments
!     see documentation of appropriate comdecks
!
!implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "cori.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "that.cdk"
!
      integer i, j, k, i0, in, inu, j0, jn, jnv, nij
      real    ndiv,w_nt
      real*8  b1_8,b2_8,b3_8,b4_8,c1_8,c2_8,c3_8,p4_8, &
              w1_8,w2_8,w3_8,barz_8,barzp_8,wk2_8(DIST_SHAPE),w11_8
!
      real*8  w1_m_8,w2_m_8,w3_m_8,barz_m_8,barzp_m_8
!
      real*8 ONE_8, HALF_8, ZERO_8
!
      parameter ( ONE_8=1.d0, HALF_8=.5d0, ZERO_8=0.0 )
!
      real*8, dimension(i02:in2,j02:jn2)      :: xtmp_8,ytmp_8
      real*8, dimension(i02:in2,j02:jn2)      :: xtmp_m_8,inv2_m_8
!
! --------------------------------------------------------------------
!
      if (   Schm_opentop_L) call handle_error(-1,'nlip_2_ad','  Schm_opentop_L not done')
      if (.not.Schm_hydro_L) call handle_error(-1,'nlip_2_ad','NOT Schm_hydro_L not done')
!
!     ZERO adjoint work variables
!     ---------------------------
      w1_8   = ZERO_8
      w2_8   = ZERO_8
      w3_8   = ZERO_8
      barz_8 = ZERO_8
      barzp_8= ZERO_8
!
      wk2_8  = ZERO_8
      ndiv   = ZERO_8
      w_nt   = ZERO_8
!
      xtmp_8 = ZERO_8
      ytmp_8 = ZERO_8
!
!     TRAJECTORY
!     ----------
      call rpn_comm_xch_halo( F_t_m   , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_BsPq_m, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
        call rpn_comm_xch_halo( F_mu_m,LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_fip_m,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
!
      b1_8 = Ver_gamma_8 / Cstv_tau_8
      b2_8 = Ver_gamma_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b3_8 = ONE_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b4_8 = ONE_8 / ( Dcst_cappa_8 * Cstv_tau_8*Cstv_tau_8*Cstv_Tstr_8 )
!
      c1_8 = Dcst_rgasd_8 / Dcst_rayt_8**2
      c2_8 = ONE_8 / Dcst_rayt_8**2
      c3_8 = Ver_epsilon_8 / Dcst_cappa_8
!
!     Indices
      i0  = 1+pil_w
      in  = l_ni -pil_e
      inu = l_niu-pil_e
      j0  = 1+pil_s
      jn  = l_nj -pil_n
      jnv = l_njv-pil_n
!
      nij = (in - i0 + 1)*(jn - j0 + 1)
!
! ADJ of                                                  
!**********************************************************
! The full contributions to the RHS of Helmholtz equation *
!**********************************************************
!
      do j= j0, jn
      do i= i0, in
         F_nt(i,j,l_nk+1) = - Dcst_rayt_8**2 * Ver_cssp_8 * F_rp(i,j,l_nk) + F_nt(i,j,l_nk+1)
!
         F_nb(i,j) =   Dcst_rayt_8**2 * Ver_cstp_8 * F_rp(i,j,k0) + F_nb(i,j)
      end do
      end do
!
!     ADJ of
!     Applying boundary conditions
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if(Schm_opentop_L) then
         do j= j0, jn
         do i= i0, in
             F_nt(i,j,k0) =       F_nb(i,j) + F_nt(i,j,k0)
             F_t (i,j,k0) =  b4_8*F_nb(i,j) + F_t (i,j,k0)
             F_nb(i,j)    = -b3_8*F_nb(i,j)
         end do
         end do
! 
         do k=1,k0-1
         do j= j0, jn
         do i= i0, in
            F_rp(i,j,k) = 0.0
         end do
         end do
         end do
      else
         do j= j0, jn
         do i= i0, in
             F_nt(i,j,k0) = F_nb(i,j) + F_nt(i,j,k0)
             F_nb(i,j)    = ZERO_8
         end do
         end do
      endif
!
!     ADJ of
!     Finish computations of NP (combining Nc', Nt", Nf")
!     Substract NP from RP(Rc") and store result(RP-NP) in RP
!     -------------------------------------------------------
!
      do k=k0,l_nk
!
         if (.not. Schm_hydro_L) then
            w3_8=c3_8*Ver_dz_8%m(k)
            do j= j0, jn
            do i= i0, in
               F_nf(i,j,k+1) = w3_8 * ( Ver_wp_8%m(k) * F_rp(i,j,k) ) + F_nf(i,j,k+1)
               F_nf(i,j,k  ) = w3_8 * ( Ver_wm_8%m(k) * F_rp(i,j,k) ) + F_nf(i,j,k  )
            end do
            end do
         endif
!
         w1_8=ONE_8 + Ver_dz_8%m(k) * Ver_wp_8%m(k)
         w2_8=ONE_8 - Ver_dz_8%m(k) * Ver_wm_8%m(k)
         do j= j0, jn
         do i= i0, in
!
            F_rc(i,j,k)  = Dcst_rayt_8**2 * (                   F_rp(i,j,k) ) + F_rc(i,j,k)
            F_nc(i,j,k)  = Dcst_rayt_8**2 * ( - Ver_dz_8%m(k) * F_rp(i,j,k) ) + F_nc(i,j,k)
            F_nt(i,j,k+1)= Dcst_rayt_8**2 * (            w1_8 * F_rp(i,j,k) ) + F_nt(i,j,k+1)
            F_nt(i,j,k)  = Dcst_rayt_8**2 * (          - w2_8 * F_rp(i,j,k) ) + F_nt(i,j,k)
            F_rp(i,j,k)  = ZERO_8
!
         end do
         end do
!
      enddo
!
! ADJ of
!*******************************************************************
! The nonlinear deviation of the continuity equation               *
! Horizontal Divergence of (Nu,Nv) combined with Nc (stored in Nc) *
!*******************************************************************
!
      do k=l_nk,k0,-1
!
!        ADJ of
!        Compute Nc'
!        ~~~~~~~~~~~
         do j= j0, jn
         do i= i0, in
!
            ndiv        =                  F_nc(i,j,k) 
            F_nc(i,j,k) =  - Cstv_invT_8 * F_nc(i,j,k)
!
            F_nu(i,  j,  k) = Geomg_invcy2_8(j) * (  ndiv ) * Geomg_invDX_8(i) + F_nu(i,  j,  k)
            F_nu(i-1,j,  k) = Geomg_invcy2_8(j) *( - ndiv ) * Geomg_invDX_8(i) + F_nu(i-1,j,  k)
            F_nv(i,  j,  k) = Geomg_invcy2_8(j) *(   ndiv ) * Geomg_invDY_8(j) + F_nv(i,  j,  k)
            F_nv(i,  j-1,k) = Geomg_invcy2_8(j) *( - ndiv ) * Geomg_invDY_8(j) + F_nv(i,  j-1,k) 
!
         end do
         end do
!
!        TRAJECTORY
!        ----------
         do j = j0, jn
         do i = i0, in
!
            xtmp_m_8(i,j) = ONE_8 + Ver_dbdz_8%m(k)  * F_s_m(i,j)
!
         end do
         end do
!
         call vrec(inv2_m_8, xtmp_m_8, nij)
!
!        ADJ of
!        Compute Nc
!        ~~~~~~~~~~
!
         if(.not.Schm_hydro_L) then
             do j= j0,jn
             do i= i0,in
                F_nw(i,j,k+1) = - b1_8 * ( Ver_wp_8%m(k) * F_nc(i,j,k) ) + F_nw(i,j,k+1)
                F_nw(i,j,k  ) = - b1_8 * ( Ver_wm_8%m(k) * F_nc(i,j,k) ) + F_nw(i,j,k  )
             end do
             end do
         endif
!
         do j = j0, jn
         do i = i0, in
!
            w1_8        = Cstv_invT_8 * F_nc(i,j,k) 
            F_nc(i,j,k) = ZERO_8  
!
            ytmp_8(i,j) =                       w1_8 
            F_s   (i,j) =  - Ver_dbdz_8%m(k) *  w1_8 + F_s   (i,j)
!
         end do
         end do
!
         do j = j0, jn
         do i = i0, in
!
            xtmp_8(i,j) = ytmp_8(i,j) * inv2_m_8(i,j) 
!
         end do
         end do
!
         do j = j0, jn
         do i = i0, in
!
            F_s(i,j) = Ver_dbdz_8%m(k) * xtmp_8(i,j) + F_s(i,j)
!
         end do
         end do
!
      end do
!
!     ADJ
!     ---
      call rpn_comm_adj_halo( F_nv, LDIST_DIM,l_ni,l_njv,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      call rpn_comm_adj_halo( F_nu, LDIST_DIM,l_niu,l_nj,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      do k= 1,l_nk
!
!        Zero F_nv halo
!        --------------
         call v4d_zerohalo ( F_nv(l_minx,l_miny,k),l_ni, l_njv,LDIST_DIM, 1)
!
!        Zero F_nu halo
!        --------------
         call v4d_zerohalo ( F_nu(l_minx,l_miny,k),l_niu,l_nj, LDIST_DIM, 1)
!
      enddo
!
! ADJ of
!************************************
! The nonlinear deviations of the w *
! and calculation of Nt" and Nf"    *
!************************************
!
      do k=l_nk+1,k0,-1
!
         do j= j0, jn
         do i= i0, in
!
!           ADJ of
!           Compute Nf"
!           ~~~~~~~~~~~
            w_nt        = b2_8 * F_nf(i,j,k) 
            F_nf(i,j,k) = ZERO_8
!
!           ADJ of
!           Compute Nt"
!           ~~~~~~~~~~~
            w_nt        = b2_8 * F_nt(i,j,k) + w_nt
            F_nt(i,j,k) = ZERO_8
!
            F_nt(i,j,k) = w_nt + F_nt(i,j,k)
!
         end do
         end do
!
         if (.not.Schm_hydro_L) then
!           ~~~~~~~~~~~~~~~
!           non-hydrostatic
!           ~~~~~~~~~~~~~~~
            do j= j0, jn
            do i= i0, in
!
!              ADJ of
!              Combine Nt' and Nw'
!              ~~~~~~~~~~~~~~~~~~~
               F_nw(i,j,k) = b1_8 * F_nt(i,j,k) + F_nw(i,j,k) 
!
!              ADJ of
!              Compute Nw'
!              ~~~~~~~~~~~
               F_mu(i,j,k)   = - Dcst_grav_8 * (                       F_nw(i,j,k) )   + F_mu(i,j,k)
               F_q (i,j,k)   = - Dcst_grav_8 * ( - Ver_idz_8%t(k) * (  F_nw(i,j,k) ) ) + F_q (i,j,k)
               F_q (i,j,k-1) = - Dcst_grav_8 * ( - Ver_idz_8%t(k) * (- F_nw(i,j,k) ) ) + F_q (i,j,k-1)
               F_nw(i,j,k)   = ZERO_8   
!
            end do
            end do
         endif
!
      end do
!
! ADJ of
!********************************************************
! The nonlinear deviation of the thermodynamic equation *
!********************************************************
!
!     ADJ of
!     Compute Nt'
!     ~~~~~~~~~~
!
!     TRAJECTORY
!     ----------
      do k=l_nk+1,k0,-1
!
         w11_8 = ONE_8 / Cstv_tstr_8
         do j= j0, jn
         do i= i0, in
!
            xtmp_m_8(i,j) = F_t_m(i,j,k) * w11_8
!
         end do
         end do
!
         call vrec(inv2_m_8, xtmp_m_8, nij)

         w1_8 = Ver_idz_8%t(k) / Cstv_RTstr_8
!
         do j= j0, jn
         do i= i0, in
!
            w2_8        = Cstv_invT_8 * F_nt(i,j,k) 
            F_zd(i,j,k) = F_nt(i,j,k) * dln_that%t(k) + F_zd(i,j,k)
            F_nt(i,j,k) = ZERO_8
!
            ytmp_8(i,j)    =                       w2_8        
            F_fip (i,j,k)  = w1_8            * (   w2_8 ) + F_fip (i,j,k)
            F_fip (i,j,k-1)= w1_8            * ( - w2_8 ) + F_fip (i,j,k-1)
            F_s   (i,j)    = Ver_dbdz_8%t(k) *     w2_8   + F_s   (i,j)
!
         end do
         end do
!
         if(Schm_opentop_L.and.k.eq.k0) then
            do j= j0, jn
            do i= i0, in
               ytmp_8(i,j) = F_nb(i,j)  + ytmp_8(i,j)
               F_nb  (i,j) = ZERO_8
            end do
            end do
         endif
!
         do j= j0, jn
         do i= i0, in
            xtmp_8(i,j) = ytmp_8(i,j) * inv2_m_8(i,j) 
!
            F_t   (i,j,k) = xtmp_8(i,j) * w11_8 + F_t(i,j,k)
         end do
         end do
!
      end do
!
!***********************************************************
! ADJ of                                                   *
! The nonlinear deviation of horizontal momentum equations *
!***********************************************************
!
!     ADJ of
!     Set  Nv=0  on the north and south boundaries  of the LAM grid
!     and        at the north and south poles       of the GLOBAL grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      if (l_north) then
!
            do k=1,l_nk
            do i=1+pil_w,l_ni-pil_e
!
               F_nv(i,l_nj-pil_n,k) = 0.
!
            end do
            enddo
!
      endif
      if (l_south) then
!
            do k=1,l_nk
            do i=1+pil_w,l_ni-pil_e
!
               F_nv(i,pil_s,k) = 0.
!
            end do
            enddo
!
      endif
!
!     ADJ of
!     Set  Nu=0  on the east and west boundaries of the LAM grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (G_lam) then
         if (l_east) then
!
            do k=1,l_nk
            do j=1+pil_s,l_nj-pil_n
!
                F_nu(l_ni-pil_e,j,k) = 0.
!
            end do
            enddo
!
         endif
         if (l_west) then
!
             do k=1,l_nk
             do j=1+pil_s,l_nj-pil_n
!
                F_nu(pil_w,j,k) = 0.
!
             end do
             enddo
         endif
      endif
!
      do 100 k=l_nk,1,-1
!
      if (.not. Schm_hydro_L) then
!
!        Add nonhydrostatic contributions to Nv
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!        Mu term: mu barYZ * dfi'/dY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= jnv,j0,-1
         do i= in,i0,-1
!
!           TRAJECTORY
!           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i,j  ,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i,j  ,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i,j+1,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i,j+1,k)
            w1_m_8 = ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 &
                             + intuv_c0yyv_8(j)   * barzp_m_8
            w2_m_8 = ( F_fip_m(i,j+1,k) - F_fip_m(i,j,k) ) * Geomg_invDYv_8(j)
!
!           ADJ
!           ---
            w2_8 = c2_8 * (      w1_m_8 * F_nv(i,j,k) ) 
            w1_8 = c2_8 * ( F_nv(i,j,k) * w2_m_8      ) 
!
            F_fip(i,j+1,k) =  (  w2_8 ) * Geomg_invDYv_8(j) + F_fip(i,j+1,k)
            F_fip(i,j,  k) =  (- w2_8 ) * Geomg_invDYv_8(j) + F_fip(i,j,k) 
!
            barz_8  = ( ONE_8 - intuv_c0yyv_8(j) ) *  w1_8 
            barzp_8 =           intuv_c0yyv_8(j)   *  w1_8 
!
            F_mu(i,j+1,k+1) = Ver_wp_8%m(k) * ( barzp_8 ) + F_mu(i,j+1,k+1)
            F_mu(i,j+1,k)   = Ver_wm_8%m(k) * ( barzp_8 ) + F_mu(i,j+1,k)
!
            F_mu(i,j  ,k+1) = Ver_wp_8%m(k) * ( barz_8  ) + F_mu(i,j  ,k+1)
            F_mu(i,j  ,k)   = Ver_wm_8%m(k) * ( barz_8  ) + F_mu(i,j  ,k)
!
         end do
         end do
!
!        Add nonhydrostatic contributions to Nu
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!        Mu term: mu barXZ * dfi'/dX
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= jn,j0,-1
         do i= inu,i0,-1
!
!           TRAJECTORY
!           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i  ,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i  ,j,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i+1,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i+1,j,k)
            w1_m_8 = ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8 &
                             + intuv_c0xxu_8(i)   * barzp_m_8
            w2_m_8 = ( F_fip_m(i+1,j,k)-F_fip_m(i,j,k) ) * Geomg_invDXu_8(i)
!
!           ADJ
!           ---
            w2_8 = c2_8 * (      w1_m_8 * F_nu(i,j,k) ) 
            w1_8 = c2_8 * ( F_nu(i,j,k) * w2_m_8      ) 
!
            F_fip(i+1,j,k) = ( w2_8) * Geomg_invDXu_8(i) + F_fip(i+1,j,k)
            F_fip(i,  j,k) = (-w2_8) * Geomg_invDXu_8(i) + F_fip(i,  j,k)            
!
            barz_8  = ( ONE_8 - intuv_c0xxu_8(i) ) *  w1_8 
            barzp_8 =           intuv_c0xxu_8(i)   *  w1_8 
!
            F_mu(i+1,j,k+1) = Ver_wp_8%m(k) * ( barzp_8 ) + F_mu(i+1,j,k+1) 
            F_mu(i+1,j,k)   = Ver_wm_8%m(k) * ( barzp_8 ) + F_mu(i+1,j,k) 
!
            F_mu(i,j,k+1)   = Ver_wp_8%m(k) * ( barz_8  ) + F_mu(i,j,k+1) 
            F_mu(i,j,k)     = Ver_wm_8%m(k) * ( barz_8  ) + F_mu(i,j,k) 
!
         end do
         end do
!
      endif
!
!     ADJ of
!     Compute Nv for hydrostatic version
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      if (Cori_cornl_L) then
!
!        ADJ of
!        Coriolis term: + f * U barXY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j = jnv,j0,-1
         do i = in,i0,-1
            wk2_8(i,j-1) = Cori_fcorv_8(i,j)  * &
           (inuvl_wyyv3_8(j,1)*F_nv(i,j,k)) + wk2_8(i,j-1)
            wk2_8(i,j  ) = Cori_fcorv_8(i,j)  * &
           (inuvl_wyyv3_8(j,2)*F_nv(i,j,k)) + wk2_8(i,j  )
            wk2_8(i,j+1) = Cori_fcorv_8(i,j)  * &
           (inuvl_wyyv3_8(j,3)*F_nv(i,j,k)) + wk2_8(i,j+1)
            wk2_8(i,j+2) = Cori_fcorv_8(i,j)  * &
           (inuvl_wyyv3_8(j,4)*F_nv(i,j,k)) + wk2_8(i,j+2)
         end do
         end do
!
!        ADJ of
!        U barX stored in wk2
!        ~~~~~~~~~~~~~~~~~~~~
         do j = jnv+2,j0-1,-1
         do i = in,i0,-1
            F_u   (i-2,j,k) = inuvl_wxux3_8(i,1)*wk2_8(i,j) + F_u(i-2,j,k)
            F_u   (i-1,j,k) = inuvl_wxux3_8(i,2)*wk2_8(i,j) + F_u(i-1,j,k)
            F_u   (i  ,j,k) = inuvl_wxux3_8(i,3)*wk2_8(i,j) + F_u(i  ,j,k)
            F_u   (i+1,j,k) = inuvl_wxux3_8(i,4)*wk2_8(i,j) + F_u(i+1,j,k)
            wk2_8 (i  ,j)   = ZERO_8 
         end do
         end do
!
      endif
!
!     ADJ of
!     Pressure gradient term: RT' barYZ * dBsPq/dY
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= jnv,j0,-1
      do i= in,i0,-1
!
!        TRAJECTORY
!        ----------
         barz_m_8  = Ver_wp_8%m(k)*F_t_m(i,j  ,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i,j  ,k)
         barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i,j+1,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i,j+1,k)
         w2_m_8 = ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 &
                          + intuv_c0yyv_8(j)   * barzp_m_8 - Cstv_tstr_8
         w3_m_8 = ( F_BsPq_m(i,j+1,k) - F_BsPq_m(i,j,k) ) * Geomg_invDYv_8(j) 
!
!        ADJ
!        ---
         w3_8        = c1_8 * (       w2_m_8 * F_nv(i,j,k) ) 
         w2_8        = c1_8 * ( F_nv(i,j,k)  * w3_m_8      ) 
         F_nv(i,j,k) = ZERO_8
!
         F_BsPq(i,j+1,k)  = (   w3_8 ) * Geomg_invDYv_8(j) + F_BsPq(i,j+1,k)
         F_BsPq(i,j,  k)  = ( - w3_8 ) * Geomg_invDYv_8(j) + F_BsPq(i,j,  k)
!
         barz_8  = ( ONE_8 - intuv_c0yyv_8(j) ) * w2_8 
         barzp_8 =           intuv_c0yyv_8(j)   * w2_8  
!
         F_t(i,j+1,k+1) = Ver_wp_8%m(k) * ( barzp_8 ) + F_t(i,j+1,k+1)
         F_t(i,j+1,k)   = Ver_wm_8%m(k) * ( barzp_8 ) + F_t(i,j+1,k)
!
         F_t(i,j,k+1)   = Ver_wp_8%m(k) * ( barz_8  ) + F_t(i,j,k+1) 
         F_t(i,j,k)     = Ver_wm_8%m(k) * ( barz_8  ) + F_t(i,j,k)
!
      end do
      end do
!
!     ADJ of
!     Compute Nu for hydrostatic version
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      if (Cori_cornl_L) then
!
!        ADJ of
!        Coriolis term: - f * V barXY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= jn,j0,-1
         do i= inu,i0,-1
         wk2_8(i-1,j) = - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,1)*F_nu(i,j,k)) + wk2_8(i-1,j)
         wk2_8(i  ,j) = - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,2)*F_nu(i,j,k)) + wk2_8(i  ,j)
         wk2_8(i+1,j) = - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,3)*F_nu(i,j,k)) + wk2_8(i+1,j)
         wk2_8(i+2,j) = - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,4)*F_nu(i,j,k)) + wk2_8(i+2,j) 
         end do
         end do
!
!        ADJ of
!        V barY stored in wk2
!        ~~~~~~~~~~~~~~~~~~~~
         do j = jn,j0,-1
         do i = inu+2,i0-1,-1
            F_v   (i,j+1,k) = inuvl_wyvy3_8(j,4) * wk2_8(i,j) + F_v(i,j+1,k)
            F_v   (i,j  ,k) = inuvl_wyvy3_8(j,3) * wk2_8(i,j) + F_v(i,j  ,k)
            F_v   (i,j-1,k) = inuvl_wyvy3_8(j,2) * wk2_8(i,j) + F_v(i,j-1,k) 
            F_v   (i,j-2,k) = inuvl_wyvy3_8(j,1) * wk2_8(i,j) + F_v(i,j-2,k)
            wk2_8 (i,j    ) = ZERO_8 
         end do
         end do
!
      endif
!
!     ADJ of
!     Pressure gradient term: RT' barXZ * dBsPq/dX
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= jn,j0,-1
      do i= inu,i0,-1
!
!        TRAJECTORY
!        ----------
         barz_m_8  = Ver_wp_8%m(k)*F_t_m(i  ,j,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i  ,j,k)
         barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i+1,j,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i+1,j,k)
         w2_m_8 = ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8 &
                          + intuv_c0xxu_8(i)   * barzp_m_8 - Cstv_tstr_8
         w3_m_8 = ( F_BsPq_m(i+1,j,k) - F_BsPq_m(i,j,k) ) * Geomg_invDXu_8(i) 
!
!        ADJ 
!        ---
         w3_8        = c1_8 * (      w2_m_8 * F_nu(i,j,k) ) 
         w2_8        = c1_8 * ( F_nu(i,j,k) *  w3_m_8     ) 
         F_nu(i,j,k) = ZERO_8
!
         F_BsPq(i+1,j,k) = (   w3_8 ) * Geomg_invDXu_8(i) + F_BsPq(i+1,j,k)
         F_BsPq(i,  j,k) = ( - w3_8 ) * Geomg_invDXu_8(i) + F_BsPq(i,  j,k)
!
         barz_8  = ( ONE_8 - intuv_c0xxu_8(i) ) * w2_8   
         barzp_8 =           intuv_c0xxu_8(i)   * w2_8   
!
         F_t(i+1,j,k+1) = Ver_wp_8%m(k) * ( barzp_8 ) + F_t(i+1,j,k+1)
         F_t(i+1,j,k)   = Ver_wm_8%m(k) * ( barzp_8 ) + F_t(i+1,j,k) 
!
         F_t(i,j,k+1)   = Ver_wp_8%m(k) * ( barz_8  ) + F_t(i,j,k+1) 
         F_t(i,j,k)     = Ver_wm_8%m(k) * ( barz_8  ) + F_t(i,j,k)
!
      end do
      end do
!
 100  continue
!
      if (Cori_cornl_L) then
!
        call rpn_comm_adj_halo( F_v,LDIST_DIM,l_ni,l_njv,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_adj_halo( F_u,LDIST_DIM,l_niu,l_nj,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
!       Zero F_u-F_v halo
!       -----------------
        do k= 1,G_nk
           call v4d_zerohalo ( F_v(l_minx,l_miny,k),l_ni,l_njv,LDIST_DIM, 1)
           call v4d_zerohalo ( F_u(l_minx,l_miny,k),l_niu,l_nj,LDIST_DIM, 1)
        enddo
!
      endif
!
      if (.not. Schm_hydro_L) then
!
        call rpn_comm_adj_halo( F_fip,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_adj_halo( F_mu,LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
!     Zero F_fip halo
!     ---------------
      do k= 0,G_nk+1
         call v4d_zerohalo ( F_fip(l_minx,l_miny,k),l_ni,l_nj,LDIST_DIM, 1)
      enddo
!
!     Zero F_mu halo
!     --------------
      do k= 1,G_nk+1
         call v4d_zerohalo ( F_mu(l_minx,l_miny,k),l_ni,l_nj,LDIST_DIM, 1)
      enddo
!
      endif
!
      call rpn_comm_adj_halo( F_BsPq,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_adj_halo( F_t,LDIST_DIM,l_ni,l_nj,G_nk+1, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      do k= 0,G_nk+1
         call v4d_zerohalo ( F_BsPq(l_minx,l_miny,k),l_ni,l_nj,LDIST_DIM, 1)
      enddo
      do k= 1,G_nk+1
         call v4d_zerohalo ( F_t(l_minx,l_miny,k),l_ni,l_nj,LDIST_DIM, 1)
      enddo
!
!     __________________________________________________________________
!
      return
      end
