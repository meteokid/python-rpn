!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r hzd_main_ad - ADJ of hzd_main_tl 
!
#include "model_macros_f.h"
!
      subroutine hzd_main_ad 
      implicit none
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - ADJ of HO option
!                           - replace xfis by topo
! v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate
!                           - change name
! v3_01 - Tanguay M.        - ADJ of Eigv_parity_L not done yet
! v3_02 - Tanguay M.        - ADJ of Eigv_parity_L done
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
!                           - Remove topo
! v3_20 - Tanguay M.        - Introduce Hzd_hzdmain_n_L
! v3_30 - Tanguay M.        - activate Hzd_type_S='EXPLICIT'
! v4_04 - Tanguay M.        - Staggered version TL/AD
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
!
!object
!	
!arguments
!     none
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "hzd.cdk"
#include "vt1.cdk"
#include "vt1_m.cdk"
#include "vspng.cdk"

      logical no_hzd,no_vspng
      integer i
      real, pointer, dimension(:,:,:) :: tr,tr_m
!
!     _________________________________________________________________
!
      no_hzd   = (.not.Hzd_ho_L) .or.  (.not.Hzd_hzdmain_0_L)
      no_vspng = (Vspng_nk.lt.1)

      if (no_hzd .and. no_vspng) return

      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(wt1)'
!
!     TRAJECTORY
!     ----------
      gmmstat = gmm_get(gmmk_ut1_m_s,ut1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(ut1_m)'
      gmmstat = gmm_get(gmmk_vt1_m_s,vt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(vt1_m)'
      gmmstat = gmm_get(gmmk_zdt1_m_s,zdt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(zdt1_m)'
      gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(tt1_m)'
      gmmstat = gmm_get(gmmk_wt1_m_s,wt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(wt1_m)'

!!!   call pw_update_UVT ('P')

!
!ADJ of
!***********************
!  2. Vertical sponge  *
!***********************
!
!     NOTE: iw2rwnd_ad = iw2rwnd
!     --------------------------
      call iw2rwnd ( ut1  , vt1  , LDIST_DIM, G_nk, 2 )
!
      if ( .not. no_vspng ) then
         if (G_lam) then
            call vspng_drv_lam_ad (ut1,vt1,zdt1,wt1,tt1,LDIST_DIM,G_nk)
         else
            call vspng_drv_ad (ut1,vt1,zdt1,wt1,tt1,LDIST_DIM,G_nk)
         endif
      endif
!
!
!ADJ of
!***************************
!  1. Horizontal diffusion *
!***************************
!
      if ( .not. no_hzd ) then
         do i=1, Hzd_tr3d_ntr
            nullify (tr)
            gmmstat = gmm_get('TR/'//trim(Hzd_tr3d_name_S(i))//':P',tr,meta3d)
            if (gmmstat.eq.0) call hzd_ctrl_ad ( tr, 'S_TR', G_nk+1 )
         end do

         call hzd_ctrl_ad ( wt1, 'S', G_nk+1)
         call hzd_ctrl_ad (zdt1, 'S', G_nk+1)

         call hzd_ctrl_ad ( vt1, 'V', G_nk  )
         call hzd_ctrl_ad ( ut1, 'U', G_nk  )

      endif

!     NOTE: iw2rwnd_ad = iw2rwnd
!     --------------------------
      call iw2rwnd ( ut1  , vt1  , LDIST_DIM, G_nk, 1 )

!     _________________________________________________________________
!
      return
      end
