!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r rhs_ad - ADJ of rhs_tl 
!
#include "model_macros_f.h"
!
      subroutine rhs_ad()
!
      implicit none
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - reduce standard output as in model
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate
!                           - adapt for tracers in tr3d
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
! v3_11 - Tanguay M.        - Correction TRAJ wk1m NoHyd
!                           - AIXport+Opti+OpenMP for TLM-ADJ
! v3_21 - Tanguay M.        - Revision Openmp
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_12 - Tanguay M.        - Remove fipt1
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!     see id section
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "orh.cdk"
#include "p_geof.cdk" 
#include "rhsc.cdk"
#include "vt1.cdk" 
#include "vt1_m.cdk" 
#include "vtx.cdk" 
#include "vtx_m.cdk" 
#include "nest.cdk"
!
      integer  i, j, k
!     __________________________________________________________________
!
!
      if (Lun_debug_L) write (Lun_out,1000)
!
      gmmstat = gmm_get(gmmk_ruw1_s,ruw1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(ruw1)'
      gmmstat = gmm_get(gmmk_rvw1_s,rvw1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(rvw1)'
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(wt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_bspqtx_s,bspqtx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(bspqtx)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(st1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(fiptx)'
      gmmstat = gmm_get(gmmk_orhsu_s,orhsu,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(orhsu)'
      gmmstat = gmm_get(gmmk_orhsv_s,orhsv,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(orhsv)'
      gmmstat = gmm_get(gmmk_orhsc_s,orhsc,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(orhsc)'
      gmmstat = gmm_get(gmmk_orhst_s,orhst,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(orhst)'
      gmmstat = gmm_get(gmmk_orhsf_s,orhsf,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(orhsf)'
      if (G_lam) then
         gmmstat = gmm_get(gmmk_rhsu_s,rhsu,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(rhsu)'
         gmmstat = gmm_get(gmmk_rhsv_s,rhsv,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(rhsv)'
         gmmstat = gmm_get(gmmk_nest_u_s,nest_u,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(nest_u)'
         gmmstat = gmm_get(gmmk_nest_v_s,nest_v,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(nest_v)'
      endif
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_mutx_s,mutx,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(mutx)'
         gmmstat = gmm_get(gmmk_orhsw_s,orhsw,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(orhsw)'
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(qt1)'
      endif

      gmmstat = gmm_get(gmmk_fis0_s,fis0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(fis0)'
!
!     TRAJECTORY
!     ----------
      gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(tt1_m)'
      gmmstat = gmm_get(gmmk_bspqtx_m_s,bspqtx_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(bspqtx_m)'
      gmmstat = gmm_get(gmmk_st1_m_s,st1_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(st1_m)'
      gmmstat = gmm_get(gmmk_fiptx_m_s,fiptx_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(fiptx_m)'

      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt1_m_s,qt1_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(qt1_m)'
         gmmstat = gmm_get(gmmk_mutx_m_s,mutx_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_ad ERROR at gmm_get(mutx_m)'
      endif
!
!     ADJ of
!     Perform the computation in the first 
!     cycle of Crank-Nicholson procedure only
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      call rhsp_2_ad  ( orhsu, orhsv, orhsc, orhst, orhsw,  orhsf, &
                        ruw1,  rvw1,  rhsu,  rhsv,  nest_u, nest_v, &
                        ut1,   vt1,   wt1,   tt1,   st1,    zdt1, &
                        bspqtx,fiptx, mutx, &
!
                        tt1_m, bspqtx_m, st1_m, fiptx_m, mutx_m, &
!
                        LDIST_DIM,l_nk  )
!
      call diag_fip_ad (fiptx,st1  ,tt1  ,qt1, &
                              st1_m,tt1_m,LDIST_DIM,l_nk)
!
      call diag_var_ad (bspqtx,mutx,st1,qt1, &
                        st1_m,qt1_m, &
                        1,l_ni,1,l_nj,1,l_nk)       
!
1000  format(3X,'ADJ of COMPUTE THE RIGHT-HAND-SIDES: (S/R RHS_AD)')
!
!     __________________________________________________________________
!
      return
      end
