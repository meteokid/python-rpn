!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r pw_update - Update physical quantities
!
#include "model_macros_f.h"
!
      subroutine pw_update_UVT_tl (pom)
      implicit none
!
      character*1 pom
!
!author
!     Lubos Spacek    - Nov 2010
!
!revision
! v4_20 - Spacek, L.       - Initial revision
!
#include "gmm.hf"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "dcst.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "pw.cdk"
#include "geomn.cdk"
!
      integer i, j, k, km1, gmmstat
      real con(YDIST_SHAPE)
      real*8 r0,ONE_8,CLXXX_8,deg2rad_8
      parameter( ONE_8   = 1.0, CLXXX_8 = 180.0 )
      real, pointer, dimension (:,:,:) :: pw_uu  => null()
      real, pointer, dimension (:,:,:) :: pw_vv  => null()
      real, pointer, dimension (:,:,:) :: pw_tt  => null()
      real, pointer, dimension (:,:,:) :: uu     => null()
      real, pointer, dimension (:,:,:) :: vv     => null()
      real, pointer, dimension (:,:,:) :: tt     => null()           ! delete
      type(gmm_metadata) :: meta3d
!     ________________________________________________________________
!
      deg2rad_8   = acos( -ONE_8 )/CLXXX_8
      con(1:l_nj) = 1.0/cos(geomg_y_8(1:l_nj)) * Dcst_rayt_8
!
      if (pom.eq."P") then
         gmmstat = gmm_get (gmmk_pw_uu_plus_s, pw_uu, meta3d)
         gmmstat = gmm_get (gmmk_pw_vv_plus_s, pw_vv, meta3d)
         gmmstat = gmm_get (gmmk_pw_tt_plus_s, pw_tt, meta3d)
         gmmstat = gmm_get (gmmk_ut1_s, uu, meta3d)
         gmmstat = gmm_get (gmmk_vt1_s, vv, meta3d)
      else
         gmmstat = gmm_get (gmmk_pw_uu_moins_s, pw_uu, meta3d)
         gmmstat = gmm_get (gmmk_pw_vv_moins_s, pw_vv, meta3d)
         gmmstat = gmm_get (gmmk_pw_tt_moins_s, pw_tt, meta3d)
         gmmstat = gmm_get (gmmk_ut0_s, uu, meta3d)
         gmmstat = gmm_get (gmmk_vt0_s, vv, meta3d)
      endif
!
      do k=1,l_nk+2
         km1=max(k-1,1)
         pw_uu (1:l_ni,1:l_nj,k) = uu (1:l_ni,1:l_nj,km1)
         pw_vv (1:l_ni,1:l_nj,k) = vv (1:l_ni,1:l_nj,km1)
      end do

      call itf_phy_uvgridscal (pw_uu , pw_vv , LDIST_DIM, l_nk+2, .true.)

      do k= 1, l_nk+2
      do j= 1, l_nj
         pw_uu (1:l_ni,j,k) = pw_uu (1:l_ni,j,k) * con(j)
         pw_vv (1:l_ni,j,k) = pw_vv (1:l_ni,j,k) * con(j)
      enddo
      enddo
!
!     Compute temperature from virtual temperature
!     --------------------------------------------
!
      call tt2virt_tl (pw_tt, .false., pom)
!
!     ________________________________________________________________
!
      return
      end
