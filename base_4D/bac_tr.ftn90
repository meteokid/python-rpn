!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r  bac_tr - Equivalent to bac for TRAJECTORY 
!
#include "model_macros_f.h"
!
      subroutine bac_tr( Itr, Itnlh )
!
      implicit none
!
      integer Itr, Itnlh
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - replace xfis by topo
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
!                           - adapt for tracers in tr3d  
! v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_10 - Tanguay M.        - Open top TL/AD
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_30 - Tanguay M.        - Revision
!
!object
!     see id section
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
!  Itr          I           current nonlinear iteration number
!  Itnlh        I           total number of nonlinear iterations
!----------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc_m.cdk"
#include "nl_m.cdk"
#include "vt0_m.cdk"
#include "vtx_m.cdk"
#include "lctl.cdk"
#include "nest_m.cdk"
!
!     ______________________________________________________
!
      if (Lun_debug_L) write(Lun_out,1000)
!
      gmmstat = gmm_get(gmmk_rhsu_m_s,rhsu_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(rhsu_m)'
      gmmstat = gmm_get(gmmk_rhsv_m_s,rhsv_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(rhsv_m)'
      gmmstat = gmm_get(gmmk_rhst_m_s,rhst_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(rhst_m)'
      gmmstat = gmm_get(gmmk_rhsf_m_s,rhsf_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(rhsf_m)'
      gmmstat = gmm_get(gmmk_rhsb_m_s,rhsb_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(rhsb_m)'
      gmmstat = gmm_get(gmmk_wt0_m_s,wt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(wt0_m)'
      gmmstat = gmm_get(gmmk_tt0_m_s,tt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(tt0_m)'
      gmmstat = gmm_get(gmmk_st0_m_s,st0_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(st0_m)'
      gmmstat = gmm_get(gmmk_zdt0_m_s,zdt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(zdt0_m)'
      gmmstat = gmm_get(gmmk_fiptx_m_s,fiptx_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(fiptx_m)'
!
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_rhsw_m_s,rhsw_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(rhsw_m)'
      endif
!
      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(topo)'
      gmmstat = gmm_get(gmmk_ut0_m_s,ut0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(ut0_m)'
      gmmstat = gmm_get(gmmk_vt0_m_s,vt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(vt0_m)'
      gmmstat = gmm_get(gmmk_wt0_m_s,wt0_m,meta3d)

      nullify(qt0_m,nest_q_m)
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt0_m_s,qt0_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(qt0_m)'
         if (Schm_opentop_L) then
           gmmstat = gmm_get(gmmk_nest_q_m_s,nest_q_m,meta3d)
           if (GMM_IS_ERROR(gmmstat)) print *,'bac_tr ERROR at gmm_get(nest_q_m)'
         endif
      endif
!
      call  bacp_2 (   Itr   , Itnlh , fiptx_m, topo   , &
                       ut0_m , vt0_m , wt0_m  , tt0_m  , &
                       st0_m , zdt0_m, qt0_m  , fiptx_m, nest_q_m, &
                       rhsu_m, rhsv_m, rhst_m , rhsw_m , rhsf_m, rhsb_m , &
                       nl_m_u, nl_m_v, nl_m_t , nl_m_w , nl_m_f, nl_m_b , &
                       LDIST_DIM, l_nk )
!
1000  format (5X,'TRAJ of BACK SUBSTITUTION: (S/R BAC_TR)')

      return
      end
