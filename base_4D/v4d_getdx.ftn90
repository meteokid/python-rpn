!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r v4d_getdx - Read increments (or adjoint increments)
!                  from 3D-Var and prepare them for GEM 
!
#include "model_macros_f.h"
!
      subroutine v4d_getdx(kstatus)
!
      use v4d_prof, only: Pr_mode_S, Pr_llfrm_L, Pr_dsnooze_8, Pr_nsim4d
      use v4dz,     only: V4dzgauss_ni,V4dzgauss_nj,V4dzgauss_nk
!
      implicit none
!
      integer, intent(inout):: kstatus
!
!author
!     P. Gauthier
!
!revision
! v3_00 - P. Gauthier        - initial MPI version
! v3_00 - M. Tanguay         - add v4d_gauss2gem_ad/Simon's exchange
! v3_01 - Tanguay/Buehner    - introduce gem2gauss for singular vectors
! v3_02 - Tanguay M.         - locate HU in tracers 
! v3_02 - Buehner M.         - read simulation no. and verify consistency
! v3_11 - Tanguay M.         - Remove V4dg_ga_eq_ge_L
! v3_30 - Fillion/Tanguay    - Adapt diagnostics for LAM
! v4_12 - Tanguay M.         - Reset Communication 3D_Var-(TL/AD)
! v4_40 - Tanguay/Morneau    - Adapt to vertical stag grid 
!
!object
!     -------------------------
!     If V4dg_di_L or V4dg_tl_L
!     -------------------------
!     1) Proc0: Read increments from 3D-Var
!     2) Proc0: Transfert from Gaussian grid to GEM scalar grid
!     3) All processors: Conversion from 3D-Var to GEM variables 
!
!     ------------
!     If V4dg_ad_L
!     ------------
!     1) Proc0: Read adjoint increments from 3D-Var
!     2) Proc0: Adjoint of [Transfert from GEM scalar grid to Gaussian grid]  
!     3) All processors: Adjoint of [Conversion from GEM to 3D-Var variables] 
!
!arguments
! Name         I/O                 Description
!----------------------------------------------------------------
! kstatus      I                   Status of the job
!----------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt1.cdk"
#include "vt1_m.cdk"
#include "ptopo.cdk"
#include "tr3d.cdk"
#include "path.cdk"
#include <prof_f.h>
      include "v4dg.inc"
!
!     Local variables
!     ---------------
      type(gmm_metadata) :: meta2d,meta3d
      integer :: gmmstat
      integer idim(2),istat,ihdlin,icount,nvar,jlon,jlat,jlev,i,j,k, &
              ierr,nigauss,njgauss,nkgauss,status,ininj,nsim3d,nstag,inn
!
      real*8,pointer    :: dlbufm_8(:,:), dlbuft_8(:,:), dlbuff2d_8(:)
      real,  allocatable:: zbufm(:,:,:),zbuft(:,:,:),zbuff2d(:,:), &
                           gut1 (:,:,:),gvt1(:,:,:),gtt1(:,:,:), &
                           ghut1(:,:,:),gst1(:,:)
!
      character*256 pathdwgf_S,pathdwga_S
!     
      integer  prof_rdrec
      external prof_rdrec
!
      character*16 tr_name
      real, pointer, dimension(:,:,:) :: hut1,hut1_m
!
      logical plpr_L
!
!     ______________________________________________________
!
      if (V4dg_di_L) call handle_error(-1,'V4D_GETDX','V4dg_di_L')
!     ______________________________________________________
!
      write(Lun_out,2000)
!
!     Nullify pointers for prof_gvar
!     ------------------------------
      nullify (dlbufm_8,dlbuft_8,dlbuff2d_8)
!
!     Flag for diagnostics
!     --------------------
      plpr_L=.false.
!
!     Get fields in memory
!     --------------------
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_getdx ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_getdx ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_getdx ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_getdx ERROR at gmm_get(st1)'
!
!     Load humidity field
!     -------------------
      tr_name = 'TR/HU:P'
      gmmstat = gmm_get(tr_name,hut1,meta3d)
!
      if (V4dg_tl_L.or.V4dg_ad_L) then
!
         gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'v4d_getdx ERROR at gmm_get(tt1_m)'
         gmmstat = gmm_get(gmmk_st1_m_s,st1_m,meta2d)
         if (GMM_IS_ERROR(gmmstat)) print *,'v4d_getdx ERROR at gmm_get(st1_m)'
!
!        Load TRAJ humidity field
!        ------------------------
         tr_name = 'TRM/HU:P'
         gmmstat = gmm_get(tr_name,hut1_m,meta3d)
!
      end if
!     
      kstatus = 0
!
      if (Ptopo_myproc.eq.0) then
!
!     -----------------------------
!     Open PROF file sent by 3D-Var 
!     -----------------------------
!
!        Open dwgf PROF file containing increments from 3D-Var
!        -----------------------------------------------------
         if (V4dg_di_L.or.V4dg_tl_L) then
!
             write(Lun_out,*) 'Opening file dwgf PROF file'
!
             pathdwgf_S = trim(Path_xchg_S)//'/dwgf.prof'
             ihdlin = prof_open(pathdwgf_S,'READ',Pr_mode_S,Pr_dsnooze_8)
!
             if (ihdlin.le.0) then
                 write(Lun_out,*) 'Problem opening dwgf PROF file'
                 kstatus = -99
                 goto 1001
             end if
!
!        Open dwga PROF file containing adjoint increments from 3D-Var
!        -------------------------------------------------------------
         elseif (V4dg_ad_L) then
!
             write(Lun_out,*) 'Opening file dwga PROF file'
!
             pathdwga_S = trim(Path_xchg_S)//'/dwga1.prof'
             ihdlin = prof_open(pathdwga_S,'READ',Pr_mode_S,Pr_dsnooze_8)
!
             if (ihdlin.le.0) then
                 write(Lun_out,*) 'Problem opening dwga PROF file'
                 kstatus = -99
                 goto 1001
             end if
!
         end if
!
!     --------------------------------
!     Get parameters from first record  
!     --------------------------------
!
!        Get dimensions NI NJ of Gaussian grid 
!        -------------------------------------
         write(Lun_out,*) 'Accessing first record with 3D fields...'
!
         istat = prof_rdrec(ihdlin)
!
         if (istat.ne.0) then
             write(Lun_out,*) 'Problem accessing first record with 3D fields'
             kstatus = -99 
             goto 1001
         end if
!
         write(Lun_out,*) 'Reading dimensions NI NJ of Gaussian grid...'
!
         istat = prof_gvar(ihdlin,ininj,PRM_NINJ)
!
         if (istat.ne.0) then
             write(Lun_out,*) 'Problem reading dimensions NI NJ of Gaussian grid'
             kstatus = -99
            goto 1001
         end if
!
         call mvbits(ininj,16,16,V4dzgauss_ni,0)
         call mvbits(ininj, 0,16,V4dzgauss_nj,0)
!
!        Get simulation number
!        ---------------------
         istat = prof_gvar(ihdlin,nsim3d,PRM_EVNT)
!
         if (nsim3d.ne.Pr_nsim4d) then
             write(Lun_out,*) 'WRONG SIMULATION NUMBER NSIM3D = ',nsim3d,' NSIM4D = ',Pr_nsim4d
             call handle_error(-1,'v4d_getdx','WRONG SIMULATION NUMBER NSIM3D')
         else
             write(Lun_out,*) 'NSIM3D IS THE RIGHT SIMULATION NUMBER = ',nsim3d
         end if
!
!        Get prm_stag parameter 
!        ----------------------
         istat = prof_gvar(ihdlin,nstag,PRM_STAG)
!
!        If nstag = 1, the staggering was already done by 3D-Var
!        If nstag = 0, the staggering     will be done by GEM     
!        -------------------------------------------------------
         if (nstag.ne.0.and.nstag.ne.1) then
!
             write(Lun_out,*) 'PRM_STAG IS WRONG = ',nstag
             kstatus = -99
             goto 1001
!
         end if
!
      end if
!
 1001 call rpn_comm_bcast(kstatus,     1,"MPI_INTEGER",0,"GRID",ierr)
!
      if (kstatus.ne.0) return 
!
      call rpn_comm_bcast(V4dzgauss_ni,1,"MPI_INTEGER",0,"GRID",ierr)
      call rpn_comm_bcast(V4dzgauss_nj,1,"MPI_INTEGER",0,"GRID",ierr)
!
      call rpn_comm_bcast(nstag,1,"MPI_INTEGER",0,"GRID",ierr)
!
!     -------------------------------------------------------
!     If nstag = 1, the staggering was already done by 3D-Var
!     If nstag = 0, the staggering     will be done by GEM
!     -------------------------------------------------------
      if (nstag.eq.1) then
!
          write(Lun_out,*) 'WIND STAGGERING ALREADY DONE BY 3D-VAR: PRM_STAG = ',nstag
          V4dg_ustag_L = .true.
          V4dg_vstag_L = .true.
!
      elseif (nstag.eq.0) then
!
          write(Lun_out,*) 'WIND STAGGERING WILL BE DONE BY GEM-DM: PRM_STAG = ',nstag
          V4dg_ustag_L = .false.
          V4dg_vstag_L = .false.
!
      end if
!
!     Store dimensions of 3D-Var Gaussian grid 
!     ----------------------------------------
      nigauss = V4dzgauss_ni 
      njgauss = V4dzgauss_nj 
!
      if (Ptopo_myproc.eq.0) then
          if (.not.allocated(gut1 )) allocate(gut1 (nigauss,njgauss,G_nk+1), STAT=status)
          if (.not.allocated(gvt1 )) allocate(gvt1 (nigauss,njgauss,G_nk+1), STAT=status)
          if (.not.allocated(gtt1 )) allocate(gtt1 (nigauss,njgauss,G_nk+2), STAT=status)
          if (.not.allocated(ghut1)) allocate(ghut1(nigauss,njgauss,G_nk+2), STAT=status)
          if (.not.allocated(gst1 )) allocate(gst1 (nigauss,njgauss)     , STAT=status)
      end if
!
      if (Ptopo_myproc.eq.0) then
!
!     ----------------------------------------------------------
!     Get 3D dynamical fields from first record (momentum levels)
!     ----------------------------------------------------------
!
!        U component of winds
!        --------------------
         call v4d_getfld('UU',kstatus)
!
         if (kstatus.ne.0) goto 1002
!
         gut1(:,:,:) = zbufm(:,:,:) 
!
!        V component of winds
!        --------------------
         call v4d_getfld('VV',kstatus)
!
         if (kstatus.ne.0) goto 1002
!
         gvt1(:,:,:) = zbufm(:,:,:) 
!     ---------------------------------------------------------
!     Get 3D dynamical fields from second recond (Thermo levels)
!     ---------------------------------------------------------
         write(Lun_out,*) 'Accessing second record with 3D fields (thermo levels)'
!
         istat = prof_rdrec(ihdlin)
!
         if (istat.ne.0) then
           write(Lun_out,*) &
                'Problem accessing second record with 3D fields'
             kstatus = -99 
             goto 1002
         end if
!     
!        Temperature
!        -----------
         call v4d_getfld('TT',kstatus) 
!
         if (kstatus.ne.0) goto 1002
!     
         gtt1(:,:,:) = zbuft(:,:,:)
!     
!        Specific humidity
!        -----------------
         call v4d_getfld('HU',kstatus) 
!
         if (kstatus.ne.0) goto 1002
!    
         ghut1(:,:,:) = zbuft(:,:,:) 
!
!     ----------------------------------------------
!     Get all 2D dynamical fields from third record 
!     ----------------------------------------------
!     
!        Read third record with 2D fields
!        --------------------------------- 
         write(Lun_out,*) 'Accessing third record with 2D fields...'
!
         istat = prof_rdrec(ihdlin)
!
         if (istat.ne.0) then
             write(Lun_out,*) 'Problem accessing third record with 2D fields'
             kstatus = -99 
             goto 1002
         end if
!
!        Surface pressure
!        ----------------
         call v4d_getfld('PS',kstatus) 
!
         if (kstatus.ne.0) goto 1002
!     
         gst1(:,:) = zbuff2d(:,:) 
!
         if (associated(dlbufm_8 )) deallocate(dlbufm_8  )
         if (associated(dlbuft_8 )) deallocate(dlbuft_8  )
         if (allocated ( zbufm   )) deallocate( zbufm    )
         if (allocated ( zbuft   )) deallocate( zbuft    )
!
         if (associated(dlbuff2d_8))deallocate(dlbuff2d_8)
         if (allocated ( zbuff2d  ))deallocate( zbuff2d  )
!
      end if
!
 1002 call rpn_comm_bcast(kstatus,     1,"MPI_INTEGER",0,"GRID",ierr)
!
      if (kstatus.ne.0) return
!
      if (Ptopo_myproc.eq.0) then
!
!     ---------------
!     Close PROF file 
!     ---------------
!
!        Close dwgf PROF file
!        --------------------
         if (V4dg_di_L.or.V4dg_tl_L) then
!
            write(Lun_out,*) 'Closing file dwgf PROF file'
!
            istat = prof_close(ihdlin,Pr_llfrm_L)
!
            if (istat.ne.0) then
                write(Lun_out,*) 'Problem closing file dwgf PROF file'
                kstatus = -99
                goto 1003
            end if
!
!        Close dwga PROF file
!        --------------------
         elseif (V4dg_ad_L) then
!
            write(Lun_out,*) 'Closing file dwga PROF file'
!
            istat = prof_close(ihdlin,Pr_llfrm_L)
!
            if (istat.ne.0) then
                write(Lun_out,*) 'Problem closing file dwga PROF file'
                kstatus = -99
                goto 1003
            end if
!
         end if
!
      end if
!
 1003 call rpn_comm_bcast(kstatus,1,"MPI_INTEGER",0,"GRID",ierr)
!
      if (kstatus.ne.0) return 
!
!     --------------------------------------------------------------
!     Transfert from Gaussian grid to GEM scalar grid (or vis-versa)
!     --------------------------------------------------------------
!
!        Transfert from Gaussian grid to GEM scalar grid
!        -----------------------------------------------
         if (V4dg_di_L.or.V4dg_tl_L) then
            call v4d_gauss2gem( ut1, vt1, tt1, hut1, st1, LDIST_DIM, &
                               gut1,gvt1,gtt1,ghut1,gst1,nigauss,njgauss,G_nk)
!
!        Adjoint of [Transfert from GEM scalar grid to Gaussian grid] 
!        ------------------------------------------------------------
         elseif (V4dg_ad_L) then
            call v4d_gem2gauss_ad( ut1, vt1, tt1, hut1, st1, LDIST_DIM, &
                                  gut1,gvt1,gtt1,ghut1,gst1,nigauss,njgauss,G_nk)
!
         end if
!
         if (plpr_L) then
             inn= 0
             if (G_lam) then
                inn=1
             end if
             write(Lun_out,*) 'AFTER GAUSS2GEM or AFTER GEM2GAUSS_AD'
             call glbstat2(ut1 ,'UU','GETDX',LDIST_DIM,1,G_nk+1,G_ni-inn,1,G_nj,  1,G_nk+1)
             call glbstat2(vt1 ,'VV','GETDX',LDIST_DIM,1,G_nk+1,G_ni    ,1,G_nj-1,1,G_nk+1)
             call glbstat2(tt1 ,'TT','GETDX',LDIST_DIM,1,G_nk+2,G_ni    ,1,G_nj,  1,G_nk+2)
             call glbstat2(st1 ,'4S','GETDX',LDIST_DIM,1,     1,1,G_ni  ,1,G_nj,  1,     1)
             call glbstat2(hut1,'HU','GETDX',LDIST_DIM,1,G_nk+2,1,G_ni  ,1,G_nj,  1,G_nk+2)
             write(Lun_out,*) '-----------------------'
         end if
!
      if (Ptopo_myproc.eq.0) then
         if (allocated (gut1  )) deallocate(gut1    )
         if (allocated (gvt1  )) deallocate(gvt1    )
         if (allocated (gtt1  )) deallocate(gtt1    )
         if (allocated (ghut1 )) deallocate(ghut1   )
         if (allocated (gst1  )) deallocate(gst1    )
      end if
!
!     ------------------------------------------------------
!     Conversion from 3D-Var to GEM variables (or vis-versa)
!     ------------------------------------------------------
!
!        Conversion from 3D-Var to GEM
!        -----------------------------
         if (V4dg_di_L.or.V4dg_tl_L) then
!
!           Direct (nonlinear)
!           ------------------ 
            if (V4dg_di_L) then 
                call v4d_varconv(ut1,vt1,tt1,hut1,st1,LDIST_DIM,l_nk,.TRUE.)
!     
!           TLM 
!           ---
            elseif (V4dg_tl_L) then
                call v4d_varconv_tl(ut1,vt1,tt1,hut1,st1, &
                                    tt1_m,hut1_m,st1_m,LDIST_DIM,l_nk,.TRUE.)
            end if
!
!        Adjoint of [Conversion from GEM to 3D-Var] 
!        ------------------------------------------
         elseif (V4dg_ad_L) then
                call v4d_varconv_ad(ut1,vt1,tt1,hut1,st1, &
                                    tt1_m,hut1_m,st1_m,LDIST_DIM,l_nk,.FALSE.)
         end if
!
         if (plpr_L) then
            write(Lun_out,*) 'AFTER VARCONV or VARCONV_AD'
            if (G_lam) then
            call glbstat2(ut1 ,'UU','GETDX',LDIST_DIM,1,G_nk+1,1,G_ni-1,1,G_nj,  1,G_nk+1)
            else
            call glbstat2(ut1 ,'UU','GETDX',LDIST_DIM,1,G_nk+1,1,G_ni  ,1,G_nj,  1,G_nk+1)
            end if
            call glbstat2(vt1 ,'VV','GETDX',LDIST_DIM,1,G_nk+1,1,G_ni  ,1,G_nj-1,1,G_nk+1)
            call glbstat2(tt1 ,'TT','GETDX',LDIST_DIM,1,G_nk+2,1,G_ni  ,1,G_nj,  1,G_nk+2)
            call glbstat2(st1 ,'4S','GETDX',LDIST_DIM,1,     1,1,G_ni  ,1,G_nj,  1,     1)
            call glbstat2(hut1,'HU','GETDX',LDIST_DIM,1,G_nk+2,1,G_ni  ,1,G_nj,  1,G_nk+2)
            write(Lun_out,*) '-----------------------'
         end if
!
      write(Lun_out,2001) kstatus
!
 2000 format(/,'V4D_GETDX: Read Model state sent by 3D-Var', &
             /,'==========================================')
 2001 format(/,'V4D_GETDX: Model state received from 3D-Var --- Status = ',I8, &
             /,'======================================================')
!
      return
!
!     Host subroutine
!     ---------------
      contains
      subroutine v4d_getfld(cdvar,kstatus)
!
      implicit none
!
      character*2, intent(in):: cdvar
      integer, intent(inout) :: kstatus
!
!author
!     P. Gauthier
!
!revision
! v3_00 - P. Gauthier        - initial MPI version
! v3_01 - M. Tanguay         - introduce gem2gauss for singular vectors
! v3_11 - P. Gauthier        - Adjust latitude reversing when V4dg_vstag_L 
! v3_30 - Fillion/Tanguay    - Allow Limited-Area option 
! v4_30 - Tanguay M.         - Revision
!
!object
!
!arguments
! Name         I/O                 Description
!----------------------------------------------------------------
! cdvar        I                   Type of profile
! kstatus      I                   Status of the job
!----------------------------------------------------------------
!
!implicits
      include "v4dg.inc"
!
      integer njx
!
!     Read 3D field if request 
!     ------------------------
      select case(cdvar)
      case('UU')
         istat = prof_gvar(ihdlin,dlbufm_8,V3D_UTRU)
      case('VV')
         istat = prof_gvar(ihdlin,dlbufm_8,V3D_VTRU)
      case('TT')
         istat = prof_gvar(ihdlin,dlbuft_8,V3D_TEMP)
      case('HU')
         istat = prof_gvar(ihdlin,dlbuft_8,V3D_SPHU)
!
!     Read 2D field if request 
!     ------------------------
      case('PS')
         istat = prof_gvar(ihdlin,dlbuff2d_8,V2D_PSUR)
      end select
!     
      select case(cdvar)
!     
!     Change accuracy and reverse latitude if 3D momentum field   
!     ---------------------------------------------------------
      case('UU','VV')
         idim = ubound(dlbufm_8)
         write(Lun_out,*)' - Dimension of ',cdvar,' field 3D ',idim
         if(istat.ne.0) then
            write(Lun_out,*)'Problem in getting ',cdvar,' field 3D'
            kstatus = -99
         else
!
            nkgauss=G_nk+1
            if(idim(1).ne.nigauss*njgauss) kstatus = -99 
!
            if(idim(2).ne.nkgauss) then
               kstatus = -99
            else
               write(Lun_Out,*) &
               ' 3D-Var and GEM levels are equal, nkgauss : ',nkgauss
            endif
!
!              Transfer real*8 to real
!              -----------------------
               if(.not.allocated(zbufm))allocate(zbufm(nigauss,njgauss,nkgauss))
               zbufm(:,:,:) = 0.
!
               if(.not.G_lam) then
                 njx = njgauss
                 if(cdvar.eq.'VV'.and.V4dg_vstag_L) njx = njgauss -1
                 do jlev = 1, nkgauss 
                    icount = 0
                    do jlat = 1,njx
                       do jlon = 1,nigauss
                          icount = icount+1
                          zbufm(jlon,njx -jlat+1,jlev) = dlbufm_8(icount,jlev) 
                       end do
                    end do
                 end do
               else
                 njx = njgauss
                 if(cdvar.eq.'VV'.and.V4dg_vstag_L) njx = njgauss -1
                 do jlev = 1, nkgauss
                    icount = 0
                    do jlat = 1,njx
                       do jlon = 1,nigauss
                          icount = icount+1
                          zbufm(jlon,jlat,jlev) = dlbufm_8(icount,jlev) 
                       end do
                    end do
                 end do
               endif
!
         end if

!     
!     Change accuracy and reverse latitude if 3D thermo field   
!     ---------------------------------------------------------
      case('TT','HU')
         idim = ubound(dlbuft_8)
         write(Lun_out,*)' - Dimension of ',cdvar,' field 3D ',idim
         if(istat.ne.0) then
            write(Lun_out,*)'Problem in getting ',cdvar,' field 3D'
            kstatus = -99
         else
!
            nkgauss=G_nk+2
            if(idim(1).ne.nigauss*njgauss) kstatus = -99 
!
            if(idim(2).ne.nkgauss) then
               kstatus = -99
            else
               write(Lun_Out,*) &
               ' 3D-Var and GEM levels are equal, nkgauss : ',nkgauss
            endif
!
!              Transfer real*8 to real
!              -----------------------
               if(.not.allocated(zbuft))allocate(zbuft(nigauss,njgauss,nkgauss))
               zbuft(:,:,:) = 0.
!
               if(.not.G_lam) then
                 njx = njgauss
                 do jlev = 1, nkgauss 
                    icount = 0
                    do jlat = 1,njx
                       do jlon = 1,nigauss
                          icount = icount+1
                          zbuft(jlon,njx -jlat+1,jlev) = dlbuft_8(icount,jlev) 
                       end do
                    end do
                 end do
               else
                 njx = njgauss
                 do jlev = 1, nkgauss
                    icount = 0
                    do jlat = 1,njx
                       do jlon = 1,nigauss
                          icount = icount+1
                          zbuft(jlon,jlat,jlev) = dlbuft_8(icount,jlev) 
                       end do
                    end do
                 end do
               endif
!
         end if
!
!     Change accuracy and reverse latitude if 2D field   
!     ------------------------------------------------
      case('PS')
         idim(1) = size ( dlbuff2d_8, 1 ) 
         write(Lun_out,*)' - Dimension of ',cdvar,' field 2D ',idim(1)
         if (istat.ne.0) then
            write(Lun_out,*)'Problem in getting ',cdvar,' field 2D'
            kstatus = -99
         else
            if(idim(1).ne.nigauss*njgauss) then
               kstatus = -99
            else
!
!              Transfer real*8 to real
!              -----------------------
               if(.not.allocated(zbuff2d)) allocate(zbuff2d(nigauss,njgauss))
               zbuff2d(:,:) = 0.
               icount = 0
               if(.not.G_lam) then
                  do jlat = 1,njgauss
                     do jlon = 1,nigauss
                        icount = icount+1
                        zbuff2d(jlon,njgauss -jlat+1) = dlbuff2d_8(icount) 
                     end do
                  end do
               else
                  do jlat = 1,njgauss
                     do jlon = 1,nigauss
                        icount = icount+1
                        zbuff2d(jlon,jlat) = dlbuff2d_8(icount) 
                     end do
                  end do
               endif
            end if
         end if
      end select
!
      end subroutine v4d_getfld
      end subroutine v4d_getdx
