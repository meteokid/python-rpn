!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r v4d_corrvec_north_ad - ADJ of v4d_corrvec_north  
!
      subroutine v4d_corrvec_north_ad (zuo,zvo,npts,zui,zvi,zuinorth,zvinorth,ax,ay,cx,cy, &
                                       i1,i2,j1,j2,nk,jmin,jmax,ni,pxzone,pyzone,indzone,nzone, &
                                       grtypi,degree)
!
      implicit none
!
      integer npts,i1,i2,j1,j2,nk,jmin,jmax,ni,degree
!
      real zuo(nk,npts),zvo(nk,npts),zui(i1:i2,j1:j2,nk),zvi(i1:i2,j1:j2,nk), &
           zuinorth(i1:i2,nk),zvinorth(i1:i2,nk),ax(i1:i2),ay(j1:j2), &
           cx(i1:i2,6),cy(j1:j2,6)
!
      character*1 grtypi
!
      integer nzone,indzone(nzone)
      real pxzone(nzone),pyzone(nzone)
!
!author M.Tanguay
!
!revision
! v3_00 - Tanguay M.        - initial MPI version
! v3_31 - Tanguay M.        - Add OPENMP directives 
! v4_30 - Tanguay M.        - Revision
!
!object
!  see id section
!
!Adjoint of
!arguments
! Name         I/O        Description
!----------------------------------------------------------------
! zuo zvo       O         Interpolated wind fields corrected at pxzone,pyzone
! npts          I         Number of positions in zuo zvo
! zui zvi       I         Wind fields on INPUT grid
! zui zvi north I         Wind fields on segment of latitude circle at north pole
! ax            I         X axe of INPUT grid
! ay            I         Y axe of INPUT grid
! cx            I         AX difference on INPUT grid
! cy            I         AY difference on INPUT grid
! i1-i2         I         Dimension x in INPUT grid
! j1-j2         I         Dimension y in INPUT grid
! nk            I         Dimension z in INPUT grid
! jmin          I         Lower  limit j
! jmax          I         Higher limit j
! ni            I         Period if grid='G', Heart if grid = 'Z'
! pxzone        I         Position px near north pole where zuo,zvo are corrected
! pyzone        I         Position py near north pole where zuo,zvo are corrected
! indzone       I         Index of positions where zuo,zvo are corrected
! nzone         I         Number of positions pxzone,pyzone to correct
! grtypi        I         Type of INPUT grid
! degree        I         Degree of interpolation
!----------------------------------------------------------------
!
      integer i,j,k,pnerr,j1x,j2x,status
!
      real ay_ext(0:3),cy_ext(0:3,6)
      real, allocatable, dimension(:,:,:) :: lineu,linev
      real, pointer,     dimension(:,:)   :: corru,corrv
!
      real*8, parameter :: ZERO_8 = 0.0
!     _______________________________________________________________________
!
      if(degree.ne.1.and.degree.ne.3) &
         call handle_error(-1,'v4d_corrvec_north_ad','degree.ne.1.and.degree.ne.3')
!     _______________________________________________________________________
!
      allocate( lineu(i1:i2,4,nk), STAT=status )
      allocate( linev(i1:i2,4,nk), STAT=status )
      allocate( corru(nk,nzone),   STAT=status )
      allocate( corrv(nk,nzone),   STAT=status )
!
      j1x = jmax-2
      j2x = jmax+1
!
!     ZERO adjoint variables
!     ----------------------
!$omp parallel do
      do k=1,nk
!
        do i=1,nzone
          corru(k,i) = ZERO_8
          corrv(k,i) = ZERO_8
        enddo
!
        do j=1,4
        do i=i1,i2
          lineu(i,j,k) = ZERO_8
          linev(i,j,k) = ZERO_8
        enddo
        enddo
!
      enddo
!$omp end parallel do
!
!     Adjoint of
!     Replace corrected zuo,zvo near north pole
!     -----------------------------------------
      do i = nzone,1,-1
!
        do k=nk,1,-1
          corrv(k,i)          = zvo(k,indzone(i)) + corrv(k,i)
          zvo  (k,indzone(i)) = ZERO_8
          corru(k,i)          = zuo(k,indzone(i)) + corru(k,i)
          zuo  (k,indzone(i)) = ZERO_8
        enddo
!
      enddo
!
!     Adjoint of
!     case LINEAR
!     -----------
      if(degree.eq.1) then
!
         ay_ext(0) = ay(jmax-2)
         ay_ext(1) = ay(jmax-1)
         ay_ext(2) = ay(jmax  )
         ay_ext(3) = 90.0
!
         if(grtypi.eq.'Z') then
            call v4d_irgdint_1_nw_ad (corrv,pxzone,pyzone,nzone,ax,ay_ext,linev, &
                                      i1,i2,j1x,j2x,nk,j1x,j2x)
            call v4d_irgdint_1_nw_ad (corru,pxzone,pyzone,nzone,ax,ay_ext,lineu, &
                                      i1,i2,j1x,j2x,nk,j1x,j2x)
         endif
         if(grtypi.eq.'G') then
            call v4d_irgdint_1_w_ad  (corrv,pxzone,pyzone,nzone,ax,ay_ext,linev, &
                                      ni,j1x,j2x,nk)
            call v4d_irgdint_1_w_ad  (corru,pxzone,pyzone,nzone,ax,ay_ext,lineu, &
                                      ni,j1x,j2x,nk)
         endif
!
      endif
!
!     Adjoint of
!     case CUBIC 
!     ----------
      if(degree.eq.3) then
!
!        TRAJECTORY
!        ----------
         ay_ext(0) = ay(jmax-2)
         ay_ext(1) = ay(jmax-1)
         ay_ext(2) = ay(jmax  )
         ay_ext(3) = 90.0
!
         do j=0+1,3-2
           cy_ext(j,1) = 1. / (ay_ext(j  ) - ay_ext(j-1))
           cy_ext(j,2) = 1. / (ay_ext(j+1) - ay_ext(j-1))
           cy_ext(j,3) = 1. / (ay_ext(j+1) - ay_ext(j  ))
           cy_ext(j,4) = 1. / (ay_ext(j+2) - ay_ext(j-1))
           cy_ext(j,5) = 1. / (ay_ext(j+2) - ay_ext(j  ))
           cy_ext(j,6) = 1. / (ay_ext(j+2) - ay_ext(j+1))
         enddo
!
         if(grtypi.eq.'Z') then
            call v4d_irgdint_3_nw_ad (corrv,pxzone,pyzone,nzone,ax,ay_ext,cx,cy_ext,linev, &
                                      i1,i2,j1x,j2x,nk,j1x,j2x)
            call v4d_irgdint_3_nw_ad (corru,pxzone,pyzone,nzone,ax,ay_ext,cx,cy_ext,lineu, &
                                      i1,i2,j1x,j2x,nk,j1x,j2x)
         endif
         if(grtypi.eq.'G') then
            call v4d_irgdint_3_w_ad  (corrv,pxzone,pyzone,nzone,ax,ay_ext,cx,cy_ext,linev, &
                                      ni,j1x,j2x,nk)
            call v4d_irgdint_3_w_ad  (corru,pxzone,pyzone,nzone,ax,ay_ext,cx,cy_ext,lineu, &
                                      ni,j1x,j2x,nk)
         endif
!
      endif
!
!$omp parallel do
      do k=nk,1,-1
!
!       Adjoint of
!       Recover segment of circle at north pole
!       ---------------------------------------
        do i=i1,i2
          zvinorth(i,k) = linev(i,4,k) + zvinorth(i,k)
          linev (i,4,k) = ZERO_8
          zuinorth(i,k) = lineu(i,4,k) + zuinorth(i,k)
          lineu (i,4,k) = ZERO_8
        enddo
!
!       Adjoint of
!       Store segments of 3 last circles near north pole
!       ------------------------------------------------
        do j=3,1,-1
          do i=i1,i2
            zvi  (i,jmax-3+j,k) = linev(i,j,k) + zvi(i,jmax-3+j,k)
            linev(i,j,       k) = ZERO_8
            zui  (i,jmax-3+j,k) = lineu(i,j,k) + zui(i,jmax-3+j,k)
            lineu(i,j,       k) = ZERO_8
          enddo
        enddo
!
      enddo
!$omp end parallel do
!
      deallocate( lineu, STAT=status )
      deallocate( linev, STAT=status )
      deallocate( corru, STAT=status )
      deallocate( corrv, STAT=status )
!
      return
      end
