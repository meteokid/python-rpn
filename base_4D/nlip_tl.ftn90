!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r nlip_2_tl - TLM of nlip_2 
!
#include "model_macros_f.h"
!
      subroutine nlip_2_tl ( F_nu, F_nv, F_nt  , F_nc, F_nw, F_nf , F_nb , &
                             F_u , F_v , F_t   , F_s , F_q , F_zd , F_fip, &
                             F_rp, F_rc, F_BsPq, F_mu, &
!
                             F_nu_m, F_nv_m, F_nt_m  , F_nc_m, F_nw_m, F_nf_m, F_nb_m , &
                             F_u_m , F_v_m , F_t_m   , F_s_m , F_q_m , F_zd_m, F_fip_m, &
                             F_rp_m, F_rc_m, F_BsPq_m, F_mu_m, &
!
                             DIST_DIM, Nk )
!
      implicit none
!
      integer DIST_DIM, Nk
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk+1)  ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk+1)  ,F_nf   (DIST_SHAPE,Nk+1)  , &
              F_nb   (DIST_SHAPE)       ,F_zd   (DIST_SHAPE,Nk+1)  , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk+1)  ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,0:Nk+1),F_fip  (DIST_SHAPE,0:Nk+1), &
              F_rp   (DIST_SHAPE,Nk)    ,F_rc   (DIST_SHAPE,Nk)    , &
              F_BsPq (DIST_SHAPE,0:Nk+1),F_mu   (DIST_SHAPE,Nk+1)
!
      real    F_nu_m   (DIST_SHAPE,Nk)    ,F_nv_m   (DIST_SHAPE,Nk)    , &
              F_nt_m   (DIST_SHAPE,Nk+1)  ,F_nc_m   (DIST_SHAPE,Nk)    , &
              F_nw_m   (DIST_SHAPE,Nk+1)  ,F_nf_m   (DIST_SHAPE,Nk+1)  , &
              F_nb_m   (DIST_SHAPE)       ,F_zd_m   (DIST_SHAPE,Nk+1)  , &
              F_u_m    (DIST_SHAPE,Nk)    ,F_v_m    (DIST_SHAPE,Nk)    , &
              F_t_m    (DIST_SHAPE,Nk+1)  ,F_s_m    (DIST_SHAPE)       , &
              F_q_m    (DIST_SHAPE,0:Nk+1),F_fip_m  (DIST_SHAPE,0:Nk+1), &
              F_rp_m   (DIST_SHAPE,Nk)    ,F_rc_m   (DIST_SHAPE,Nk)    , &
              F_BsPq_m (DIST_SHAPE,0:Nk+1),F_mu_m   (DIST_SHAPE,Nk+1)
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_30 - Edouard S.        - remove pi' at the top (pptt0)
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version
! v3_00 - Tanguay M.        - adapt to restructured nlip_2 
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_12 - Tanguay M.        - OPENMP TL/AD
! v4_12 - Tanguay M.        - TL/AD Open top
! v4_13 - Tanguay M.        - Adjustments GEM413
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!     see id section 
!
!arguments
!     see documentation of appropriate comdecks
!
!implicits
#include "glb_ld.cdk"
#include "lam.cdk"
!
      integer i02, in2, j02, jn2, k0
!
      i02=1+pil_w
      in2=l_ni-pil_e
      j02=1+pil_s
      jn2=l_nj-pil_n

      k0=1+Lam_gbpil_T
!
      call nlip_2_2_tl  ( F_nu, F_nv, F_nt  , F_nc, F_nw, F_nf, F_nb , &
                          F_u , F_v , F_t   , F_s , F_q , F_zd, F_fip, &
                          F_rp, F_rc, F_BsPq, F_mu, &
!
                          F_nu_m, F_nv_m, F_nt_m  , F_nc_m, F_nw_m, F_nf_m, F_nb_m , &
                          F_u_m , F_v_m , F_t_m   , F_s_m , F_q_m , F_zd_m, F_fip_m, &
                          F_rp_m, F_rc_m, F_BsPq_m, F_mu_m, &
!
                          DIST_DIM, Nk, &
                          i02,j02,in2,jn2,k0 )
!
      return
      end
!
! 2nd stage added for OpenMP
!
      subroutine nlip_2_2_tl(F_nu, F_nv, F_nt  , F_nc, F_nw, F_nf, F_nb , &
                             F_u , F_v , F_t   , F_s , F_q , F_zd, F_fip, &
                             F_rp, F_rc, F_BsPq, F_mu, &
!
                             F_nu_m, F_nv_m, F_nt_m  , F_nc_m, F_nw_m, F_nf_m, F_nb_m , &
                             F_u_m , F_v_m , F_t_m   , F_s_m , F_q_m , F_zd_m, F_fip_m, &
                             F_rp_m, F_rc_m, F_BsPq_m, F_mu_m, &
!
                             DIST_DIM, Nk, &
                             i02,j02,in2,jn2,k0 )
!
      implicit none
!
      integer DIST_DIM, Nk,i02,j02,in2,jn2,k0
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk+1)  ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk+1)  ,F_nf   (DIST_SHAPE,Nk+1)  , &
              F_nb   (DIST_SHAPE)       ,F_zd   (DIST_SHAPE,Nk+1)  , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk+1)  ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,0:Nk+1),F_fip  (DIST_SHAPE,0:Nk+1), &
              F_rp   (DIST_SHAPE,Nk)    ,F_rc   (DIST_SHAPE,Nk)    , &
              F_BsPq (DIST_SHAPE,0:Nk+1),F_mu   (DIST_SHAPE,Nk+1)
!
      real    F_nu_m   (DIST_SHAPE,Nk)    ,F_nv_m   (DIST_SHAPE,Nk)    , &
              F_nt_m   (DIST_SHAPE,Nk+1)  ,F_nc_m   (DIST_SHAPE,Nk)    , &
              F_nw_m   (DIST_SHAPE,Nk+1)  ,F_nf_m   (DIST_SHAPE,Nk+1)  , &
              F_nb_m   (DIST_SHAPE)       ,F_zd_m   (DIST_SHAPE,Nk+1)  , &
              F_u_m    (DIST_SHAPE,Nk)    ,F_v_m    (DIST_SHAPE,Nk)    , &
              F_t_m    (DIST_SHAPE,Nk+1)  ,F_s_m    (DIST_SHAPE)       , &
              F_q_m    (DIST_SHAPE,0:Nk+1),F_fip_m  (DIST_SHAPE,0:Nk+1), &
              F_rp_m   (DIST_SHAPE,Nk)    ,F_rc_m   (DIST_SHAPE,Nk)    , &
              F_BsPq_m (DIST_SHAPE,0:Nk+1),F_mu_m   (DIST_SHAPE,Nk+1)
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_30 - Edouard S.        - remove pi' at the top (pptt0)
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version
! v3_00 - Tanguay M.        - adapt to restructured nlip_2 
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v3_21 - Tanguay M.        - Revision Openmp
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_13 - Tanguay M.        - Adjustments GEM413
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!     see id section 
!
!arguments
!     see documentation of appropriate comdecks
!
!implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "cori.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "that.cdk"
!
      integer i, j, k, i0, in, inu, j0, jn, jnv, nij 
      real    ndiv,w_nt
      real*8  b1_8,b2_8,b3_8,b4_8,c1_8,c2_8,c3_8, &
              w1_8,w2_8,w3_8,barz_8,barzp_8,wk2_8(DIST_SHAPE)
!
      real    ndiv_m,w_nt_m
      real*8  w1_m_8,w2_m_8,w3_m_8,barz_m_8,barzp_m_8,wk2_m_8(DIST_SHAPE) 
!
      real*8, parameter :: ONE_8 = 1.0
!
      real*8, dimension(i02:in2,j02:jn2) :: xtmp_8, ytmp_8
      real*8, dimension(i02:in2,j02:jn2) :: xtmp_m_8, ytmp_m_8, inv2_m_8
!
! --------------------------------------------------------------------
      if (   Schm_opentop_L) call handle_error(-1,'nlip_2_tl','  Schm_opentop_L not done')
      if (.not.Schm_hydro_L) call handle_error(-1,'nlip_2_tl','NOT Schm_hydro_L not done')
!
!
!     TRAJECTORY
!     ----------
      call rpn_comm_xch_halo( F_t_m   , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_BsPq_m, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_zd_m  , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
        call rpn_comm_xch_halo( F_mu_m,LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_fip_m,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
      if (Cori_cornl_L) then
        call rpn_comm_xch_halo( F_u_m ,LDIST_DIM,l_niu,l_nj,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_v_m ,LDIST_DIM,l_ni,l_njv,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
!
!     TLM
!     ---
      call rpn_comm_xch_halo( F_t   , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_BsPq, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_zd  , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
        call rpn_comm_xch_halo( F_mu,LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_fip,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
      if (Cori_cornl_L) then
        call rpn_comm_xch_halo( F_u ,LDIST_DIM,l_niu,l_nj,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_v ,LDIST_DIM,l_ni,l_njv,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
!
      b1_8 = Ver_gamma_8 / Cstv_tau_8
      b2_8 = Ver_gamma_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b3_8 = ONE_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b4_8 = ONE_8 / ( Dcst_cappa_8 * Cstv_tau_8*Cstv_tau_8*Cstv_Tstr_8 )
!
      c1_8 = Dcst_rgasd_8 / Dcst_rayt_8**2
      c2_8 = ONE_8 / Dcst_rayt_8**2
      c3_8 = Ver_epsilon_8 / Dcst_cappa_8
!
!$omp parallel private(xtmp_8,ytmp_8,w_nt,        &
!$omp          xtmp_m_8,ytmp_m_8,inv2_m_8,w_nt_m, &
!$omp          barz_8,barzp_8,barz_m_8,barzp_m_8, &
!$omp          ndiv,wk2_8,ndiv_m,wk2_m_8,         &
!$omp          w1_8,w2_8,w3_8,w1_m_8,w2_m_8,w3_m_8)
!
!***********************************************************
! The nonlinear deviation of horizontal momentum equations *
!***********************************************************
!
!     Indices
      i0  = 1+pil_w
      in  = l_ni -pil_e
      inu = l_niu-pil_e
      j0  = 1+pil_s
      jn  = l_nj -pil_n
      jnv = l_njv-pil_n
!
      nij = (in - i0 + 1)*(jn - j0 + 1)
!
!$omp do
      do 100 k=k0,l_nk
!
!     Compute Nu for hydrostatic version 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!     Pressure gradient term: RT' barXZ * dBsPq/dX
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= j0, jn
      do i= i0, inu
!
!        TRAJECTORY
!        ----------
         barz_m_8  = Ver_wp_8%m(k)*F_t_m(i  ,j,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i  ,j,k)
         barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i+1,j,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i+1,j,k)
         w2_m_8 = ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8 &
                          + intuv_c0xxu_8(i)   * barzp_m_8 - Cstv_tstr_8
         w3_m_8 = ( F_BsPq_m(i+1,j,k) - F_BsPq_m(i,j,k) ) * Geomg_invDXu_8(i) 
         F_nu_m(i,j,k) = c1_8 * ( w2_m_8 * w3_m_8 )
!
!        TLM 
!        ---
         barz_8  = Ver_wp_8%m(k)*F_t(i  ,j,k+1) &
                  +Ver_wm_8%m(k)*F_t(i  ,j,k)
         barzp_8 = Ver_wp_8%m(k)*F_t(i+1,j,k+1) &
                  +Ver_wm_8%m(k)*F_t(i+1,j,k)
         w2_8 = ( ONE_8 - intuv_c0xxu_8(i) ) * barz_8 &
                        + intuv_c0xxu_8(i)   * barzp_8 
         w3_8 = ( F_BsPq(i+1,j,k) - F_BsPq(i,j,k) ) * Geomg_invDXu_8(i) 
         F_nu(i,j,k) = c1_8 * ( w2_m_8 * w3_8 + w2_8 * w3_m_8)
!
      end do
      end do
!
      if (Cori_cornl_L) then
!
!        V barY stored in wk2
!        ~~~~~~~~~~~~~~~~~~~~
         do j = j0, jn
         do i = i0-1, inu+2
!
!           TRAJECTORY
!           ----------
            wk2_m_8(i,j) = inuvl_wyvy3_8(j,1) * F_v_m(i,j-2,k) & 
                         + inuvl_wyvy3_8(j,2) * F_v_m(i,j-1,k) & 
                         + inuvl_wyvy3_8(j,3) * F_v_m(i,j  ,k) & 
                         + inuvl_wyvy3_8(j,4) * F_v_m(i,j+1,k)          
!           TLM 
!           ---
            wk2_8(i,j)  = inuvl_wyvy3_8(j,1) * F_v(i,j-2,k) & 
                        + inuvl_wyvy3_8(j,2) * F_v(i,j-1,k) & 
                        + inuvl_wyvy3_8(j,3) * F_v(i,j  ,k) & 
                        + inuvl_wyvy3_8(j,4) * F_v(i,j+1,k)          
         end do
         end do
!
!        Coriolis term: - f * V barXY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0, inu
!           TRAJECTORY
!           ----------
            F_nu_m(i,j,k) = F_nu_m(i,j,k) - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,1)*wk2_m_8(i-1,j)+inuvl_wxxu3_8(i,2)*wk2_m_8(i  ,j) &
          + inuvl_wxxu3_8(i,3)*wk2_m_8(i+1,j)+inuvl_wxxu3_8(i,4)*wk2_m_8(i+2,j))
!
!           TLM 
!           ---
            F_nu(i,j,k) = F_nu(i,j,k) - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,1)*wk2_8(i-1,j)+inuvl_wxxu3_8(i,2)*wk2_8(i  ,j) &
          + inuvl_wxxu3_8(i,3)*wk2_8(i+1,j)+inuvl_wxxu3_8(i,4)*wk2_8(i+2,j))
         end do
         end do
      endif
!
!     Compute Nv for hydrostatic version
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!     Pressure gradient term: RT' barYZ * dBsPq/dY
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= j0, jnv
      do i= i0, in
!
!        TRAJECTORY
!        ----------
         barz_m_8  = Ver_wp_8%m(k)*F_t_m(i,j  ,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i,j  ,k)
         barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i,j+1,k+1) &
                    +Ver_wm_8%m(k)*F_t_m(i,j+1,k)
         w2_m_8 = ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 &
                          + intuv_c0yyv_8(j)   * barzp_m_8 - Cstv_tstr_8
         w3_m_8 = ( F_BsPq_m(i,j+1,k) - F_BsPq_m(i,j,k) ) * Geomg_invDYv_8(j) 
         F_nv_m(i,j,k) = c1_8 * ( w2_m_8 * w3_m_8 )
!
!        TLM
!        ---
         barz_8  = Ver_wp_8%m(k)*F_t(i,j  ,k+1) &
                  +Ver_wm_8%m(k)*F_t(i,j  ,k)
         barzp_8 = Ver_wp_8%m(k)*F_t(i,j+1,k+1) &
                  +Ver_wm_8%m(k)*F_t(i,j+1,k)
         w2_8 = ( ONE_8 - intuv_c0yyv_8(j) ) * barz_8 &
                        + intuv_c0yyv_8(j)   * barzp_8 
         w3_8 = ( F_BsPq(i,j+1,k) - F_BsPq(i,j,k) ) * Geomg_invDYv_8(j) 
         F_nv(i,j,k) = c1_8 * ( w2_m_8 * w3_8 + w2_8 * w3_m_8 )
!
      end do
      end do
!
      if (Cori_cornl_L) then
!
!        U barX stored in wk2
!        ~~~~~~~~~~~~~~~~~~~~
         do j = j0-1, jnv+2
         do i = i0, in

!           TRAJECTORY
!           ----------
            wk2_m_8(i,j)  = inuvl_wxux3_8(i,1)*F_u_m(i-2,j,k) & 
                          + inuvl_wxux3_8(i,2)*F_u_m(i-1,j,k) & 
                          + inuvl_wxux3_8(i,3)*F_u_m(i  ,j,k) & 
                          + inuvl_wxux3_8(i,4)*F_u_m(i+1,j,k) 
!
!           TLM 
!           ---
            wk2_8(i,j)  = inuvl_wxux3_8(i,1)*F_u(i-2,j,k) &
                        + inuvl_wxux3_8(i,2)*F_u(i-1,j,k) &
                        + inuvl_wxux3_8(i,3)*F_u(i  ,j,k) &
                        + inuvl_wxux3_8(i,4)*F_u(i+1,j,k)
         end do
         end do
!
!        Coriolis term: + f * U barXY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j = j0, jnv
         do i = i0, in
!           TRAJECTORY
!           ----------
            F_nv_m(i,j,k) =   F_nv_m(i,j,k) + Cori_fcorv_8(i,j) * &
           (inuvl_wyyv3_8(j,1)*wk2_m_8(i,j-1)+inuvl_wyyv3_8(j,2)*wk2_m_8(i,j  ) &
          + inuvl_wyyv3_8(j,3)*wk2_m_8(i,j+1)+inuvl_wyyv3_8(j,4)*wk2_m_8(i,j+2))
!
!           TLM 
!           ---
            F_nv(i,j,k) =   F_nv(i,j,k) + Cori_fcorv_8(i,j) * &
           (inuvl_wyyv3_8(j,1)*wk2_8(i,j-1)+inuvl_wyyv3_8(j,2)*wk2_8(i,j  ) &
          + inuvl_wyyv3_8(j,3)*wk2_8(i,j+1)+inuvl_wyyv3_8(j,4)*wk2_8(i,j+2))
         end do
         end do
!
      endif
!
      if (.not. Schm_hydro_L) then
!
!        Add nonhydrostatic contributions to Nu
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!        Mu term: mu barXZ * dfi'/dX
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0, inu
!
!           TRAJECTORY
!           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i  ,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i  ,j,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i+1,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i+1,j,k)
            w1_m_8 = ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8 &
                             + intuv_c0xxu_8(i)   * barzp_m_8
            w2_m_8 = ( F_fip_m(i+1,j,k)-F_fip_m(i,j,k) ) * Geomg_invDXu_8(i) 
            F_nu_m(i,j,k) = F_nu_m(i,j,k) + c2_8 * w1_m_8 * w2_m_8
!
!           TLM 
!           ---
            barz_8  = Ver_wp_8%m(k)*F_mu(i  ,j,k+1) &
                     +Ver_wm_8%m(k)*F_mu(i  ,j,k)
            barzp_8 = Ver_wp_8%m(k)*F_mu(i+1,j,k+1) &
                     +Ver_wm_8%m(k)*F_mu(i+1,j,k)
            w1_8 = ( ONE_8 - intuv_c0xxu_8(i) ) * barz_8 &
                           + intuv_c0xxu_8(i)   * barzp_8
            w2_8 = ( F_fip(i+1,j,k)-F_fip(i,j,k) ) * Geomg_invDXu_8(i) 
            F_nu(i,j,k) = F_nu(i,j,k) + c2_8 * (w1_m_8 * w2_8 + w1_8 * w2_m_8)
!
         end do
         end do
!
!        Add nonhydrostatic contributions to Nv
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!        Mu term: mu barYZ * dfi'/dY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jnv
         do i= i0, in
!
!           TRAJECTORY
!           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i,j  ,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i,j  ,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i,j+1,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i,j+1,k)
            w1_m_8 = ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 &
                             + intuv_c0yyv_8(j)   * barzp_m_8
            w2_m_8 = ( F_fip_m(i,j+1,k) - F_fip_m(i,j,k) ) * Geomg_invDYv_8(j) 
            F_nv_m(i,j,k) = F_nv_m(i,j,k) + c2_8 * w1_m_8 * w2_m_8
!
!           TLM 
!           ---
            barz_8  = Ver_wp_8%m(k)*F_mu(i,j  ,k+1) &
                     +Ver_wm_8%m(k)*F_mu(i,j  ,k)
            barzp_8 = Ver_wp_8%m(k)*F_mu(i,j+1,k+1) &
                     +Ver_wm_8%m(k)*F_mu(i,j+1,k)
            w1_8 = ( ONE_8 - intuv_c0yyv_8(j) ) * barz_8 &
                           + intuv_c0yyv_8(j)   * barzp_8
            w2_8 = ( F_fip(i,j+1,k) - F_fip(i,j,k) ) * Geomg_invDYv_8(j) 
            F_nv(i,j,k) = F_nv(i,j,k) + c2_8 * (w1_m_8 * w2_8 + w1_8 * w2_m_8)
!
         end do
         end do

      endif
!
 100   continue
!$omp enddo
!
!     Set  Nu=0  on the east and west boundaries of the LAM grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      if (G_lam) then
         if (l_west) then
!$omp do
             do k=1,l_nk
             do j=1+pil_s,l_nj-pil_n
!
!               TRAJECTORY 
!               ----------
                F_nu_m(pil_w,j,k) = 0.
!
!               TLM
!               ---
                F_nu(pil_w,j,k) = 0.
             end do
             enddo
!$omp enddo
         endif
         if (l_east) then
!$omp do
            do k=1,l_nk
            do j=1+pil_s,l_nj-pil_n
!
!              TRAJECTORY 
!              ----------
               F_nu_m(l_ni-pil_e,j,k) = 0.
!
!              TLM
!              ---
               F_nu(l_ni-pil_e,j,k) = 0.
            end do
            enddo
!$omp enddo
         endif
      endif
!
!     Set  Nv=0  on the north and south boundaries  of the LAM grid
!     and        at the north and south poles       of the GLOBAL grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (l_south) then
!$omp do
            do k=1,l_nk
            do i=1+pil_w,l_ni-pil_e
!
!              TRAJECTORY 
!              ----------
               F_nv_m(i,pil_s,k) = 0.
!
!              TLM
!              ---
               F_nv(i,pil_s,k) = 0.
            end do
            enddo
!$omp enddo
      endif
      if (l_north) then
!$omp do
            do k=1,l_nk
            do i=1+pil_w,l_ni-pil_e
!
!              TRAJECTORY 
!              ----------
               F_nv_m(i,l_nj-pil_n,k) = 0.
!
!              TLM
!              ---
               F_nv(i,l_nj-pil_n,k) = 0.
            end do
            enddo
!$omp enddo
      endif
!
!********************************************************
! The nonlinear deviation of the thermodynamic equation *
!********************************************************
!
!     Compute Nt'
!     ~~~~~~~~~~
!$omp do
      do k=k0,l_nk+1
!
         w1_8 = ONE_8 / Cstv_tstr_8
         do j= j0, jn
         do i= i0, in
!
!           TRAJECTORY
!           ----------
            xtmp_m_8(i,j) = F_t_m(i,j,k) * w1_8
!
!           TLM
!           ---
            xtmp_8(i,j) = F_t(i,j,k) * w1_8
!
         end do
         end do
!
         call vlog(ytmp_m_8, xtmp_m_8, nij)
         call vrec(inv2_m_8, xtmp_m_8, nij)
!
         do j = j0, jn
         do i = i0, in
!
!           TLM
!           ---
            ytmp_8(i,j) = xtmp_8(i,j) * inv2_m_8(i,j)
!
         end do
         end do
!
         if(Schm_opentop_L.and.k.eq.k0) then
            do j= j0, jn
            do i= i0, in
!
!              TRAJECTORY
!              ----------
               F_nb_m(i,j) = Cstv_invT_8*ytmp_m_8(i,j)
!
!              TLM
!              ---
               F_nb(i,j) = Cstv_invT_8*ytmp_8(i,j)
!
            end do
            end do
         endif
!
         w1_8 = Ver_idz_8%t(k) / Cstv_RTstr_8
         do j= j0, jn
         do i= i0, in
!
!           TRAJECTORY
!           ----------
            w2_m_8 = ytmp_m_8(i,j) + w1_8 * ( F_fip_m(i,j,k) - F_fip_m(i,j,k-1) ) &
                                   + Ver_dbdz_8%t(k) * F_s_m(i,j)
            F_nt_m(i,j,k) = Cstv_invT_8 * ( w2_m_8 - ln_that%t(k) ) + F_zd_m(i,j,k)*dln_that%t(k)
!
!           TLM
!           ---
            w2_8 = ytmp_8(i,j) + w1_8 * ( F_fip(i,j,k) - F_fip(i,j,k-1) ) &
                                   + Ver_dbdz_8%t(k) * F_s(i,j)
            F_nt(i,j,k) = Cstv_invT_8 * ( w2_8 ) + F_zd(i,j,k)*dln_that%t(k)
!
         end do
         end do
!
      end do
!$omp enddo
!
!************************************
! The nonlinear deviations of the w *
! and calculation of Nt" and Nf"    *
!************************************
!
!$omp do
      do k=k0,l_nk+1
!
         if (.not.Schm_hydro_L) then
!           ~~~~~~~~~~~~~~~
!           non-hydrostatic
!           ~~~~~~~~~~~~~~~
            do j= j0, jn
            do i= i0, in
!
!
!              Compute Nw'
!              ~~~~~~~~~~~
!
!              TRAJECTORY
!              ----------
               F_nw_m(i,j,k) = - Dcst_grav_8 * ( F_mu_m  (i,j,k) &
                      - Ver_idz_8%t(k) * ( F_q_m(i,j,k) - F_q_m(i,j,k-1) ) )
!
!              TLM
!              ---
               F_nw(i,j,k) = - Dcst_grav_8 * ( F_mu  (i,j,k) &
                      - Ver_idz_8%t(k) * ( F_q(i,j,k) - F_q(i,j,k-1) ) )
!
!              Combine Nt' and Nw'
!              ~~~~~~~~~~~~~~~~~~~
!
!              TRAJECTORY
!              ----------
               F_nt_m(i,j,k) = F_nt_m(i,j,k) + b1_8 * F_nw_m(i,j,k)
!
!              TLM
!              ---
               F_nt(i,j,k) = F_nt(i,j,k) + b1_8 * F_nw(i,j,k)
!
            end do
            end do
         endif
!
         do j= j0, jn
         do i= i0, in
!
!           TRAJECTORY
!           ----------
            w_nt_m        = F_nt_m(i,j,k)
!           Compute Nt"
!           ~~~~~~~~~~~
            F_nt_m(i,j,k) = b2_8 * w_nt_m
!           Compute Nf"
!           ~~~~~~~~~~~
            F_nf_m(i,j,k) = b2_8 * w_nt_m
!
!           TLM
!           ---
            w_nt        = F_nt(i,j,k)
!           Compute Nt"
!           ~~~~~~~~~~~
            F_nt(i,j,k) = b2_8 * w_nt
!           Compute Nf"
!           ~~~~~~~~~~~
            F_nf(i,j,k) = b2_8 * w_nt
!
         end do
         end do
!
      end do
!$omp enddo
!
!*******************************************************************
! The nonlinear deviation of the continuity equation               *
! Horizontal Divergence of (Nu,Nv) combined with Nc (stored in Nc) *
!*******************************************************************
!
!$omp single
!     TRAJECTORY
!     ----------
      call rpn_comm_xch_halo( F_nu_m, LDIST_DIM,l_niu,l_nj,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_nv_m, LDIST_DIM,l_ni,l_njv,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
!     TLM
!     ---
      call rpn_comm_xch_halo( F_nu, LDIST_DIM,l_niu,l_nj,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_nv, LDIST_DIM,l_ni,l_njv,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!$omp end single
!
!$omp do
      do k=k0,l_nk
!
!        Compute Nc
!        ~~~~~~~~~~
!
         do j = j0, jn
         do i = i0, in
!
!           TRAJECTORY
!           ----------
            xtmp_m_8(i,j) = ONE_8 + Ver_dbdz_8%m(k) * F_s_m(i,j)
!
!           TLM
!           ---
            xtmp_8(i,j) = Ver_dbdz_8%m(k) * F_s(i,j)
!
         end do
         end do
         call vlog(ytmp_m_8, xtmp_m_8, nij)
         call vrec(inv2_m_8, xtmp_m_8, nij)
         do j = j0, jn
         do i = i0, in
!
!           TLM
!           ---
            ytmp_8(i,j) = xtmp_8(i,j) * inv2_m_8(i,j) 
!
         end do
         end do
!
         do j = j0, jn
         do i = i0, in
!
!           TRAJECTORY
!           ----------
            w1_m_8 = ytmp_m_8(i,j) - Ver_dbdz_8%m(k) * F_s_m(i,j)
            F_nc_m(i,j,k) = Cstv_invT_8 * w1_m_8
!
!           TLM 
!           ---
            w1_8 = ytmp_8(i,j) - Ver_dbdz_8%m(k) * F_s(i,j)
            F_nc(i,j,k) = Cstv_invT_8 * w1_8
!
         enddo
         enddo
!
         if(.not.Schm_hydro_L) then
             do j= j0,jn
             do i= i0,in
!
!               TRAJECTORY
!               ----------
                F_nc_m(i,j,k) = F_nc_m(i,j,k) - b1_8 * &
                            ( Ver_wp_8%m(k) * F_nw_m(i,j,k+1) &
                            + Ver_wm_8%m(k) * F_nw_m(i,j,k  ) )
!
!               TLM
!               ---
                F_nc(i,j,k) = F_nc(i,j,k) - b1_8 * &
                            ( Ver_wp_8%m(k) * F_nw(i,j,k+1) &
                            + Ver_wm_8%m(k) * F_nw(i,j,k  ) )
!
             end do
             end do
         endif
!
!        Compute Nc'
!        ~~~~~~~~~~~
         do j= j0,jn
         do i= i0,in
!
!           TRAJECTORY
!           ----------
            ndiv_m = Geomg_invcy2_8(j) * ( &  
                     (F_nu_m(i,j,k)-F_nu_m(i-1,j,k))*Geomg_invDX_8(i) &  
                   + (F_nv_m(i,j,k)-F_nv_m(i,j-1,k))*Geomg_invDY_8(j) )
!
!           TLM 
!           ---
            ndiv   = Geomg_invcy2_8(j) * ( &  
                     (F_nu(i,j,k)-F_nu(i-1,j,k))*Geomg_invDX_8(i) &  
                   + (F_nv(i,j,k)-F_nv(i,j-1,k))*Geomg_invDY_8(j) )
!
!           TRAJECTORY
!           ----------
            F_nc_m(i,j,k) = ndiv_m - Cstv_invT_8 * F_nc_m(i,j,k)
!
!           TLM
!           ---
            F_nc(i,j,k) = ndiv - Cstv_invT_8 * F_nc(i,j,k)
!
         end do
         end do
!
      end do
!$omp enddo
!
!**********************************************************
! The full contributions to the RHS of Helmholtz equation *
!**********************************************************
!
!     Finish computations of NP (combining Nc', Nt", Nf")
!     Substract NP from RP(Rc") and store result(RP-NP) in RP
!     -------------------------------------------------------
!
!$omp do
      do k=k0,l_nk
         w1_8=ONE_8 + Ver_dz_8%m(k) * Ver_wp_8%m(k)
         w2_8=ONE_8 - Ver_dz_8%m(k) * Ver_wm_8%m(k)
         do j= j0, jn
         do i= i0, in
!
!           TRAJECTORY
!           ----------
            F_rp_m(i,j,k) = Dcst_rayt_8**2 * ( F_rc_m(i,j,k) &
                             - Ver_dz_8%m(k) * F_nc_m(i,j,k) &
                             + w1_8 * F_nt_m(i,j,k+1) - w2_8 * F_nt_m(i,j,k) )
!
!           TLM
!           ---
            F_rp(i,j,k) = Dcst_rayt_8**2 * ( F_rc(i,j,k) &
                             - Ver_dz_8%m(k) * F_nc(i,j,k) &
                             + w1_8 * F_nt(i,j,k+1) - w2_8 * F_nt(i,j,k) )
!
         end do
         end do
         if (.not. Schm_hydro_L) then
            w3_8=c3_8*Ver_dz_8%m(k)
            do j= j0, jn
            do i= i0, in
!
!              TRAJECTORY
!              ----------
               F_rp_m(i,j,k) = F_rp_m(i,j,k) + w3_8 * &
                                ( Ver_wp_8%m(k) * F_nf_m(i,j,k+1) &
                                + Ver_wm_8%m(k) * F_nf_m(i,j,k  ) )
!
!              TLM
!              --- 
               F_rp(i,j,k) = F_rp(i,j,k) + w3_8 * &
                                ( Ver_wp_8%m(k) * F_nf(i,j,k+1) &
                                + Ver_wm_8%m(k) * F_nf(i,j,k  ) )
            end do
            end do
         endif
!
       enddo
!$omp enddo
!
!     Applying boundary conditions
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      if(Schm_opentop_L) then
!$omp do
         do k=1,k0-1
         do j= j0, jn
         do i= i0, in
!
!           TRAJECTORY
!           ---------- 
            F_rp_m(i,j,k) = 0.0
!
!           TLM
!           --- 
            F_rp(i,j,k) = 0.0
!
         end do
         end do
         end do
!$omp enddo
!$omp do
         do j= j0, jn
         do i= i0, in
!
!            TRAJECTORY
!            ---------- 
             F_nb_m(i,j) = F_nt_m(i,j,k0)-b3_8*F_nb_m(i,j)+b4_8*F_t_m(i,j,k0)
!
!            TLM
!            --- 
             F_nb(i,j) = F_nt(i,j,k0)-b3_8*F_nb(i,j)+b4_8*F_t(i,j,k0)
!
         end do
         end do
!$omp enddo
      else
!$omp do 
         do j= j0, jn
         do i= i0, in
!
!            TRAJECTORY
!            ---------- 
             F_nb_m(i,j) = F_nt_m(i,j,k0)
!
!            TLM
!            --- 
             F_nb(i,j) = F_nt(i,j,k0)
!
         end do
         end do
!$omp enddo
      endif
!
!$omp do 
      do j= j0, jn
      do i= i0, in
!
!        TRAJECTORY
!        ----------
         F_rp_m(i,j,k0)     = F_rp_m(i,j,k0) &
                            + Dcst_rayt_8**2 * Ver_cstp_8 * F_nb_m(i,j)
         F_rp_m(i,j,l_nk)   = F_rp_m(i,j,l_nk) &
                            - Dcst_rayt_8**2 * Ver_cssp_8 * F_nt_m(i,j,l_nk+1)
!
!        TLM
!        ---
         F_rp(i,j,k0)     = F_rp(i,j,k0) &
                          + Dcst_rayt_8**2 * Ver_cstp_8 * F_nb(i,j)
         F_rp(i,j,l_nk)   = F_rp(i,j,l_nk) &
                          - Dcst_rayt_8**2 * Ver_cssp_8 * F_nt(i,j,l_nk+1)
!
      end do
      end do
!$omp enddo
!
!$omp end parallel
!     __________________________________________________________________
!
      return
      end
