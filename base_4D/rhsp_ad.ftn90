!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r rhsp_2_ad - ADJ of rhsp_2_tl 
!
#include "model_macros_f.h"
!
      subroutine rhsp_2_ad ( F_oru, F_orv, F_orc,F_ort,F_orw,   F_orf, &
                             F_ruw1,F_rvw1,F_ru, F_rv, F_nest_u,F_nest_v, &
                             F_u,   F_v,   F_w,  F_t,  F_s,     F_zd, &
                             F_BsPq,F_fip, F_mu, &
!
                             F_t_m,F_BsPq_m, &
                             F_s_m, &
                             F_fip_m,F_mu_m, &
!
                             DIST_DIM, Nk )

      implicit none
#include <arch_specific.hf>
!
      integer DIST_DIM, Nk
!
      real F_oru   (DIST_SHAPE,  Nk)  ,F_orv   (DIST_SHAPE,  Nk)  , &
           F_orc   (DIST_SHAPE,  Nk)  ,F_ort   (DIST_SHAPE,  Nk+1), &
           F_orw   (DIST_SHAPE,  Nk+1),F_orf   (DIST_SHAPE,  Nk+1), &
           F_ruw1  (DIST_SHAPE,  Nk)  ,F_rvw1  (DIST_SHAPE,  Nk)  , &
           F_ru    (DIST_SHAPE,  Nk)  ,F_rv    (DIST_SHAPE,  Nk)  , &
           F_nest_u(DIST_SHAPE,  Nk)  ,F_nest_v(DIST_SHAPE,  Nk)  , &
           F_u     (DIST_SHAPE,  Nk)  ,F_v     (DIST_SHAPE,  Nk)  , &
           F_w     (DIST_SHAPE,  Nk+1),F_t     (DIST_SHAPE,  Nk+1), &
           F_s     (DIST_SHAPE)       ,F_zd    (DIST_SHAPE,  Nk+1), &
           F_BsPq  (DIST_SHAPE,0:Nk+1),F_fip   (DIST_SHAPE,0:Nk+1), &
           F_mu    (DIST_SHAPE,  Nk+1)
!
      real & 
           F_t_m     (DIST_SHAPE,  Nk+1),F_BsPq_m  (DIST_SHAPE,0:Nk+1), &
           F_s_m     (DIST_SHAPE)       , &
           F_fip_m   (DIST_SHAPE,0:Nk+1),F_mu_m(DIST_SHAPE,  Nk+1)
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version
!                           - adapt for tracers in tr3d
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v3_30 - Tanguay M.        - Validation for LAM Nonhyd 
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_12 - Tanguay M.        - OPENMP TL/AD
! v4_12 - Tanguay M.        - Adapt to revised rhsp
! v4_13 - Tanguay M.        - Adjustments GEM413
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!     see id section 
!
!arguments
!
!implicits
#include "glb_ld.cdk"
#include "cori.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "schm.cdk" 
#include "intuv.cdk" 
#include "inuvl.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "lun.cdk"
#include "that.cdk"
!
      integer i, j, k, i0, j0, in, jn, nij
      real    tdiv
      real*8  c1_8,c2_8,c3_8,BsPqbarz_8,fipbarz_8, & 
              wk1_8(DIST_SHAPE),barz_8,barzp_8,ww1_8, &
              xtmp_8(l_ni,l_nj),ytmp_8(l_ni,l_nj),wk2k_8(DIST_SHAPE,l_nk)
!
      real*8  wk1_m_8 (DIST_SHAPE),barz_m_8,barzp_m_8,xtmp_m_8(l_ni,l_nj)
!
      real*8  ONE_8,ZERO_8
      parameter( ONE_8=1.d0,ZERO_8=0.d0 )
!
!     __________________________________________________________________
!
      if (.not.Cori_cornl_L) call handle_error(-1,'rhsp_2_ad','rhsp_2_AD : NOT Cori_cornl_L NOT DONE')
      if (.not.Schm_hydro_L) call handle_error(-1,'rhsp_2_ad','rhsp_2_AD : NOT Schm_hydro_L NOT DONE')
!
!     Common coefficients 
!     -------------------
      c1_8  = Cstv_Beta_8 * Dcst_rgasd_8 / ( Dcst_rayt_8 * Dcst_rayt_8 )
      c2_8  = Cstv_Beta_8 / ( Dcst_rayt_8 * Dcst_rayt_8 )
!
      if (Cori_cornl_L) then
         c3_8 = Cstv_Beta_8
      else
         c3_8 = Cstv_Beta_8 - ONE_8
      endif
!
!     Exchanging halos for derivatives & interpolation 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!     TRAJECTORY
!     ----------
      call rpn_comm_xch_halo( F_t_m ,  LDIST_DIM,l_ni,l_nj,G_nk+1, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo(F_BsPq_m, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_fip_m, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      nij = l_ni*l_nj
!
!     Zero adjoint variables
!     ----------------------
!NO-H wk1_8     = ZERO_8
      wk2k_8    = ZERO_8
      xtmp_8    = ZERO_8
      ytmp_8    = ZERO_8
      barz_8    = ZERO_8
      barzp_8   = ZERO_8
      tdiv      = ZERO_8
      ww1_8     = ZERO_8
      BsPqbarz_8= ZERO_8
      fipbarz_8 = ZERO_8
!
!$omp parallel private(i,j,i0,j0,jn,in,tdiv,BsPqbarz_8,fipbarz_8,     &
!$omp                  barz_8,barzp_8,ww1_8,barz_m_8,barzp_m_8,       &
!$omp                  xtmp_8,ytmp_8,xtmp_m_8) shared(wk1_m_8,wk2k_8) 
!
! ADJ of
!**********************************************
! Apply HORIZONTAL BOUNDARY CONDITIONS if LAM *
!***********************************************
!
      if (G_lam) then
          if (l_north) then
!
!$omp do
             do k=1,l_nk
             do i= l_ni-pil_e,1+pil_w,-1
!
                F_nest_v(i,l_nj-pil_n,k) = Cstv_invT_8*F_rv (i,l_nj-pil_n,k) + F_nest_v(i,l_nj-pil_n,k)
                F_rv    (i,l_nj-pil_n,k) = ZERO_8
!
             enddo
             enddo
!$omp enddo
!
          endif
          if (l_south) then
!
!$omp do
             do k=1,l_nk
             do i= l_ni-pil_e,1+pil_w,-1
!
                F_nest_v(i,pil_s,k) = Cstv_invT_8*F_rv(i,pil_s,k) + F_nest_v(i,pil_s,k)
                F_rv    (i,pil_s,k) = ZERO_8
!
             enddo
             enddo
!$omp enddo
!
          endif
          if (l_east) then
!
!$omp do
             do k=1,l_nk
             do j= l_nj-pil_n,1+pil_s,-1
!
                F_nest_u(l_ni-pil_e,j,k) = Cstv_invT_8*F_ru(l_ni-pil_e,j,k) + F_nest_u(l_ni-pil_e,j,k)
                F_ru    (l_ni-pil_e,j,k) = ZERO_8
!
             enddo
             enddo
!$omp enddo
!
          endif
          if (l_west) then
!
!$omp do
             do k=1,l_nk
             do j= l_nj-pil_n,1+pil_s,-1
!
                F_nest_u(pil_w,j,k) = Cstv_invT_8*F_ru(pil_w,j,k) + F_nest_u(pil_w,j,k)
                F_ru    (pil_w,j,k) = ZERO_8
!
             enddo
             enddo
!$omp enddo
!
          endif
      endif
!
! ADJ of                                                
!******************************************************
! Interpolate Ru, Rv from U-, V-grid to G-grid, resp. *
!******************************************************
!
!     Indices for computing all fields on mass grid at routine output
!     ---------------------------------------------------------------
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west)  i0 = 4
         if (l_east)  in = l_niu-2
         if (l_south) j0 = 4
         if (l_north) jn = l_njv-2
      endif
!
!$omp do
      do k=1,l_nk
         do j = jn, j0, -1
         do i = in, i0, -1 
!
           F_orv (i,j+1,k) = inuvl_wyvy3_8(j,4) * F_rvw1(i,j,k) + F_orv(i,j+1,k)
           F_orv (i,j  ,k) = inuvl_wyvy3_8(j,3) * F_rvw1(i,j,k) + F_orv(i,j  ,k)
           F_orv (i,j-1,k) = inuvl_wyvy3_8(j,2) * F_rvw1(i,j,k) + F_orv(i,j-1,k)
           F_orv (i,j-2,k) = inuvl_wyvy3_8(j,1) * F_rvw1(i,j,k) + F_orv(i,j-2,k)
           F_rvw1(i,j,  k) = ZERO_8
!
           F_oru (i+1,j,k) = inuvl_wxux3_8(i,4) * F_ruw1(i,j,k) + F_oru(i+1,j,k)
           F_oru (i  ,j,k) = inuvl_wxux3_8(i,3) * F_ruw1(i,j,k) + F_oru(i  ,j,k)
           F_oru (i-1,j,k) = inuvl_wxux3_8(i,2) * F_ruw1(i,j,k) + F_oru(i-1,j,k)
           F_oru (i-2,j,k) = inuvl_wxux3_8(i,1) * F_ruw1(i,j,k) + F_oru(i-2,j,k)
           F_ruw1(i,  j,k) = ZERO_8 

         end do
         end do
      end do
!$omp enddo 
!
!$omp single 
      call rpn_comm_adj_halo ( F_orv,LDIST_DIM,l_ni,l_njv,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      call rpn_comm_adj_halo ( F_oru,LDIST_DIM,l_niu,l_nj,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
!     Zero F_rv halo
!     --------------
      call v4d_zerohalo ( F_orv,l_ni,l_njv,LDIST_DIM, G_nk)
!
!     Zero F_ru halo
!     --------------
      call v4d_zerohalo ( F_oru,l_niu,l_nj,LDIST_DIM, G_nk)

!$omp end single 
!
! ADJ of                                   
!*****************************************
! Compute Rc: RHS of Continuity equation *
!*****************************************
!
!$omp do 
      do j= jn,j0,-1

                         ww1_8=ONE_8
      if(Schm_autobar_L) ww1_8=0.d0
!
         do k = l_nk,1,-1
         do i= in,i0,-1
!
         barz_8        =   Cstv_invT_8 * ( ww1_8 * F_orc (i,j,k) )  
!!!      ytmp_8(i,j)   =   Cstv_invT_8 * (         F_orc (i,j,k) ) 
         tdiv          = - Cstv_Beta_8 *           F_orc (i,j,k)
!!!      F_orc (i,j,k) = ZERO_8
!
         F_BsPq(i,j,k+1) = Ver_wp_8%m(k)*(Ver_wp_8%t(k+1)*barz_8) + F_BsPq(i,j,k+1) 
         F_BsPq(i,j,k)   = Ver_wp_8%m(k)*(Ver_wm_8%t(k+1)*barz_8) + F_BsPq(i,j,k)
         F_BsPq(i,j,k)   = Ver_wm_8%m(k)*(Ver_wp_8%t(k)  *barz_8) + F_BsPq(i,j,k) 
         F_BsPq(i,j,k-1) = Ver_wm_8%m(k)*(Ver_wm_8%t(k)  *barz_8) + F_BsPq(i,j,k-1)
!
         F_zd(i,j,k+1) = (   tdiv )    * Ver_idz_8%m(k) + F_zd(i,j,k+1)
         F_zd(i,j,k)   = ( - tdiv )    * Ver_idz_8%m(k) + F_zd(i,j,k)
         F_zd(i,j,k+1) =  Ver_wp_8%m(k)* tdiv           + F_zd(i,j,k+1)
         F_zd(i,j,k)   =  Ver_wm_8%m(k)* tdiv           + F_zd(i,j,k)

         end do
         end do

      end do
!$omp end do 
!
!$omp do 
      do k = l_nk,1,-1

         do j= jn,j0,-1
         do i= in,i0,-1
!
         tdiv          = - Cstv_Beta_8 *           F_orc (i,j,k)
!
         F_u(i,  j,  k) = Geomg_invcy2_8(j) * (   tdiv * Geomg_invDX_8(i) ) &
                          + F_u(i,  j,  k)
         F_u(i-1,j,  k) = Geomg_invcy2_8(j) * ( - tdiv * Geomg_invDX_8(i) ) &
                          + F_u(i-1,j,  k)
         F_v(i,  j,  k) = Geomg_invcy2_8(j) * (   tdiv * Geomg_invDY_8(j) ) &
                          + F_v(i,  j,  k)
         F_v(i,  j-1,k) = Geomg_invcy2_8(j) * ( - tdiv * Geomg_invDY_8(j) ) &
                          + F_v(i,  j-1,k)
!
         end do
         end do

      end do
!$omp end do 

!$omp do 
      do j= j0, jn

         do k = l_nk,1,-1
         do i= i0, in

         ytmp_8(i,j)   =   Cstv_invT_8 * (         F_orc (i,j,k) ) 
         F_orc (i,j,k) = ZERO_8
!
!        TRAJECTORY
!        ----------
         xtmp_m_8(i,j) = ONE_8 + Ver_dbdz_8%m(k) * F_s_m(i,j)
!
         xtmp_8  (i,j) = ytmp_8 (i,j)/xtmp_m_8(i,j) 
!
         F_s     (i,j) = Ver_dbdz_8%m(k) * xtmp_8(i,j) + F_s(i,j)
!
         end do
         end do

      end do
!$omp end do 
!
! ADJ of                           
!*********************************
! Compute Rw: RHS of  w equation *
!*********************************
!
      if (.not. Schm_hydro_L) then
!$omp do 
      do k = l_nk+1,1,-1 
         do j= j0, jn
         do i= i0, in
!
            F_w   (i,j,k) = Cstv_invT_8 *               F_orw (i,j,k) + F_w (i,j,k)
            F_mu  (i,j,k) = Cstv_Beta_8 * Dcst_grav_8 * F_orw (i,j,k) + F_mu(i,j,k) 
            F_orw (i,j,k) = ZERO_8
!
         end do
         end do
      end do
!$omp end do 
      endif
!
! ADJ of
!********************************************
! Compute Rt: RHS of thermodynamic equation *
! Compute Rf: RHS of FI equation            *
!********************************************

!$omp do 
      do k = l_nk+1,1,-1 
!
                         ww1_8=Dcst_cappa_8
      if(Schm_autobar_L) ww1_8=0.d0
!
         do j= j0, jn
         do i= i0, in

!!!      fipbarz_8     = Cstv_invT_8                * F_orf (i,j,k) 
         F_zd  (i,j,k) = Cstv_Beta_8 * Cstv_RTstr_8 * F_orf (i,j,k) + F_zd (i,j,k)
         F_w   (i,j,k) = Cstv_Beta_8 * Dcst_grav_8  * F_orf (i,j,k) + F_w  (i,j,k)
!!!      F_orf (i,j,k) = ZERO_8
!
!!!      ytmp_8(i,j)   = Cstv_invT_8 * (            F_ort (i,j,k) )
!!!      BsPqbarz_8    = Cstv_invT_8 * (  - ww1_8 * F_ort (i,j,k) )
         F_zd  (i,j,k) = Cstv_Beta_8 * (Dcst_cappa_8-dln_that%t(k)) * F_ort (i,j,k) + F_zd(i,j,k)  
!!!      F_ort (i,j,k) = ZERO_8

         end do
         end do

      end do
!$omp end do 

!$omp do 
      do j= j0, jn

                         ww1_8=Dcst_cappa_8
      if(Schm_autobar_L) ww1_8=0.d0

         do k = l_nk+1,1,-1 
         do i= i0, in

         fipbarz_8    = Cstv_invT_8              * F_orf (i,j,k)
         F_orf(i,j,k) = ZERO_8

         BsPqbarz_8   = Cstv_invT_8 * (  - ww1_8 * F_ort (i,j,k) )
!!!      F_ort(i,j,k) = ZERO_8

         F_fip (i,j,k)   = Ver_wp_8%t(k)* fipbarz_8  + F_fip (i,j,k)
         F_fip (i,j,k-1) = Ver_wm_8%t(k)* fipbarz_8  + F_fip (i,j,k-1)
         F_BsPq(i,j,k)   = Ver_wp_8%t(k)* BsPqbarz_8 + F_BsPq(i,j,k)
         F_BsPq(i,j,k-1) = Ver_wm_8%t(k)* BsPqbarz_8 + F_BsPq(i,j,k-1)

         end do
         end do

      end do
!$omp end do 
!
!$omp do 
      do k = l_nk+1,1,-1 

      ww1_8 = ONE_8 / Cstv_tstr_8
!
         do j= j0, jn
         do i= i0, in

         ytmp_8(i,j)   = Cstv_invT_8 * (            F_ort (i,j,k) )
         F_ort (i,j,k) = ZERO_8
!
!        TRAJECTORY
!        ----------
         xtmp_m_8(i,j)   = F_t_m(i,j,k) * ww1_8
!
         xtmp_8  (i,j)   = ytmp_8(i,j)/xtmp_m_8(i,j) 
!
         F_t     (i,j,k) = xtmp_8(i,j) * ww1_8 + F_t(i,j,k)
!
         end do
         end do
!
      end do
!$omp end do 
!
!     Zero adjoint variables
!     ----------------------
!NO-H wk1_8 = 0. 
!
! ADJ of                               
!*************************************
! Compute TRAJ Ru: RHS of U equation *
!*************************************
!
!     TRAJECTORY
!     ----------
      if (Schm_hydro_L) then
!$omp do 
!!!   do k = l_nk,1,-1
         do j = 1, l_nj
         do i = 1, l_ni
!
            wk1_m_8(i,j) = ONE_8
!
         end do
         end do
!!!   end do
!$omp end do 
      endif
!
! ADJ of                          
!********************************
! Compute Rv: RHS of V equation *
!********************************
!
!     Set indices to compute Rv
!     ------------------------- 
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_njv

!     TRAJECTORY
!     -----------
      if (.not.Schm_hydro_L) then
!$omp do 
      do k = l_nk,1,-1
!
         do j = j0, jn
         do i = i0, in
!
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i  ,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i  ,j,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i+1,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i+1,j,k)
            wk1_m_8(i,j) = ONE_8 + ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8 &
                                           + intuv_c0xxu_8(i)   * barzp_m_8
!
         end do
         end do
      end do
!$omp end do 
      endif
!
      if ( abs(c3_8) .lt. 1.0e-6 ) then
!
!     NOT DONE
!
      else
!
!        Compute Rv with the Coriolis factor
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if (G_lam) then
!           Reset indices to compute Rv
            if (l_west ) i0 = 3
            if (l_east ) in = l_niu-1
            if (l_south) j0 = 2
            if (l_north) jn = l_njv-1
         endif
!
!        ADJ of
!        Compute Rv with the Coriolis factor
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!        ADJ of 
!        Rv with the Coriolis factor
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~

!$omp do 
      do i = i0,in

         do k = l_nk,1,-1
         do j = jn,j0,-1
!
!           TRAJECTORY
!           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_t_m(i,j  ,k+1) &
                       +Ver_wm_8%m(k)*F_t_m(i,j  ,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i,j+1,k+1) &
                       +Ver_wm_8%m(k)*F_t_m(i,j+1,k)
!
            wk2k_8(i,j-1,k) = - c3_8 * Cori_fcorv_8(i,j) & 
                              * ( inuvl_wyyv3_8(j,1)* F_orv(i,j,k) ) + wk2k_8(i,j-1,k)
            wk2k_8(i,j  ,k) = - c3_8 * Cori_fcorv_8(i,j) & 
                              * ( inuvl_wyyv3_8(j,2)* F_orv(i,j,k) ) + wk2k_8(i,j  ,k)
            wk2k_8(i,j+1,k) = - c3_8 * Cori_fcorv_8(i,j) &
                              * ( inuvl_wyyv3_8(j,3)* F_orv(i,j,k) ) + wk2k_8(i,j+1,k)
            wk2k_8(i,j+2,k) = - c3_8 * Cori_fcorv_8(i,j) &
                              * ( inuvl_wyyv3_8(j,4)* F_orv(i,j,k) ) + wk2k_8(i,j+2,k)
!
!NO-H       wk1_8(i,j)   = - c2_8 * F_orv(i,j,k) &
!NO-H                      * ( F_fip_m(i,j+1,k) - F_fip_m(i,j,k) ) &
!NO-H                      * Geomg_invDYv_8(j) + wk1_8(i,j)
!
            F_fip(i,j+1,k)  = - c2_8 * wk1_m_8(i,j) &
                              * (   F_orv(i,j,k) ) &  
                              * Geomg_invDYv_8(j) + F_fip(i,j+1,k)
            F_fip(i,j,  k)  = - c2_8 * wk1_m_8(i,j) &
                              * ( - F_orv(i,j,k) ) &
                              * Geomg_invDYv_8(j) + F_fip(i,  j,k) 
!
            barz_8    = - c1_8*( ( ONE_8 - intuv_c0yyv_8(j) ) * F_orv(i,j,k) ) &
                        * ( F_BsPq_m(i,j+1,k) - F_BsPq_m (i,j,k) ) &
                        * Geomg_invDYv_8(j) 
            barzp_8   = - c1_8*(           intuv_c0yyv_8(j)   * F_orv(i,j,k) ) & 
                        * ( F_BsPq_m(i,j+1,k) - F_BsPq_m (i,j,k) ) &
                        * Geomg_invDYv_8(j) 
!
            F_BsPq(i,j+1,k) = - c1_8 *( ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 &
                                                + intuv_c0yyv_8(j)   * barzp_m_8 ) &
                              * (   F_orv(i,j,k) ) &
                              * Geomg_invDYv_8(j) + F_BsPq(i,j+1,k)
            F_BsPq(i,j,  k) = - c1_8 *( ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 &
                                                + intuv_c0yyv_8(j)   * barzp_m_8 ) &
                              * ( - F_orv(i,j,k) ) &
                              * Geomg_invDYv_8(j) + F_BsPq (i,j, k) 
!
            F_v  (i,j,k)    = Cstv_invT_8 * F_orv(i,j,k) + F_v(i,j,k)
            F_orv(i,j,k)    = ZERO_8
!
            F_t(i,j+1,k+1) = Ver_wp_8%m(k) * ( barzp_8 ) + F_t(i,j+1,k+1)
            F_t(i,j+1,k)   = Ver_wm_8%m(k) * ( barzp_8 ) + F_t(i,j+1,k)
!
            F_t(i,j  ,k+1) = Ver_wp_8%m(k) * ( barz_8 )  + F_t(i,j  ,k+1)
            F_t(i,j  ,k)   = Ver_wm_8%m(k) * ( barz_8 )  + F_t(i,j  ,k) 
!
         end do
         end do

      end do
!$omp end do 

!$omp do 
      do k = l_nk,1,-1
!
!        ADJ of
!        Compute U barY in wk2
!        ~~~~~~~~~~~~~~~~~~~~~
         do j = jn+2,j0-1,-1
         do i = in,i0,-1
            F_u   (i-2,j,k) = inuvl_wxux3_8(i,1)* wk2k_8(i,j,k) + F_u(i-2,j,k) 
            F_u   (i-1,j,k) = inuvl_wxux3_8(i,2)* wk2k_8(i,j,k) + F_u(i-1,j,k)
            F_u   (i  ,j,k) = inuvl_wxux3_8(i,3)* wk2k_8(i,j,k) + F_u(i  ,j,k)
            F_u   (i+1,j,k) = inuvl_wxux3_8(i,4)* wk2k_8(i,j,k) + F_u(i+1,j,k) 
            wk2k_8(i,  j,k) = ZERO_8 
         end do
         end do

      end do
!$omp end do 
!
      endif

!
!     ADJ of
!     Compute (1 + mu) bary barz in wk1
!     ---------------------------------
      if (.not. Schm_hydro_L) then
!$omp do 
      do k = l_nk,1,-1
         do j = jn,j0,-1
         do i = in,i0,-1
!
            barz_8     = ( ONE_8 - intuv_c0yyv_8(j) ) * wk1_8(i,j) 
            barzp_8    =           intuv_c0yyv_8(j)   * wk1_8(i,j)  
            wk1_8(i,j) = ZERO_8
!
            F_mu(i,j+1,k+1)= Ver_wp_8%m(k) * ( barzp_8 ) + F_mu(i,j+1,k+1)
            F_mu(i,j+1,k)  = Ver_wm_8%m(k) * ( barzp_8 ) + F_mu(i,j+1,k)
            barzp_8        = ZERO_8
!
            F_mu(i,j  ,k+1)= Ver_wp_8%m(k) * ( barz_8  ) + F_mu(i,j  ,k+1)
            F_mu(i,j  ,k)  = Ver_wm_8%m(k) * ( barz_8  ) + F_mu(i,j  ,k)
            barz_8         = ZERO_8
!
         end do
         end do
      end do
!$omp end do 
      endif
!
! ADJ of                          
!********************************
! Compute Ru: RHS of U equation *
!********************************
!
!     Set indices to compute Ru
!     -------------------------
      i0 = 1
      in = l_niu
      j0 = 1
      jn = l_nj

!     Compute (1 + mu) barx barz in wk1
!     ---------------------------------
      if (.not.Schm_hydro_L) then
!$omp do 
      do k = l_nk,1,-1
         do j = j0, jn
         do i = i0, in
!
!           TRAJECTORY
!           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i  ,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i  ,j,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i+1,j,k+1) &
                       +Ver_wm_8%m(k)*F_mu_m(i+1,j,k)
            wk1_m_8(i,j) = ONE_8 + ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8 &
                                           + intuv_c0xxu_8(i)   * barzp_m_8
!
         end do
         end do
      end do
!$omp end do 
      endif
!
      if ( abs(c3_8) .lt. 1.0e-6 ) then
!
!     NOT DONE
!
      else
!
!        Compute Ru with the Coriolis factor
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
         if (G_lam) then
!           Reset indices
            if (l_west ) i0 = 2
            if (l_east ) in = l_niu-1
            if (l_south) j0 = 3
            if (l_north) jn = l_njv-1
         endif
!
!        ADJ of
!        Compute Ru with the Coriolis factor
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!$omp do 
      do j= j0,jn
!
!        ADJ of
!        Ru with the Coriolis factor
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do k = l_nk,1,-1
         do i= in,i0,-1
!
!           TRAJECTORY
!           ----------
            barz_m_8 = Ver_wp_8%m(k)*F_t_m(i  ,j,k+1) &
                      +Ver_wm_8%m(k)*F_t_m(i  ,j,k)
            barzp_m_8= Ver_wp_8%m(k)*F_t_m(i+1,j,k+1) &
                      +Ver_wm_8%m(k)*F_t_m(i+1,j,k)
!
            wk2k_8(i-1,j,k)  = c3_8 * Cori_fcoru_8(i,j) &
                               * ( inuvl_wxxu3_8(i,1)*F_oru(i,j,k)) + wk2k_8(i-1,j,k)
            wk2k_8(i  ,j,k)  = c3_8 * Cori_fcoru_8(i,j) &
                               * ( inuvl_wxxu3_8(i,2)*F_oru(i,j,k)) + wk2k_8(i  ,j,k)
            wk2k_8(i+1,j,k)  = c3_8 * Cori_fcoru_8(i,j) &
                               * ( inuvl_wxxu3_8(i,3)*F_oru(i,j,k)) + wk2k_8(i+1,j,k)
            wk2k_8(i+2,j,k)  = c3_8 * Cori_fcoru_8(i,j) &
                               * ( inuvl_wxxu3_8(i,4)*F_oru(i,j,k)) + wk2k_8(i+2,j,k) 
!
!NO-H       wk1_8(i  ,j)     = - c2_8 * F_oru(i,j,k) &
!NO-H                          * ( F_fip_m(i+1,j,k) - F_fip_m(i,j,k) ) &
!NO-H                          * Geomg_invDXu_8(i) + wk1_8(i,j)
!
            F_fip  (i+1,j,k) = - c2_8 * wk1_m_8(i,j) &
                              * (  F_oru(i,j,k) ) & 
                              * Geomg_invDXu_8(i) + F_fip  (i+1,j,k)
            F_fip  (i,  j,k) = - c2_8 * wk1_m_8(i,j) &
                              * (- F_oru(i,j,k) ) & 
                              * Geomg_invDXu_8(i) + F_fip  (i,  j,k)
!
            barz_8   = - c1_8 * ( ( ONE_8 - intuv_c0xxu_8(i) )* F_oru(i,j,k) ) &
                              * ( F_BsPq_m(i+1,j,k) - F_BsPq_m(i,j,k) ) &
                              * Geomg_invDXu_8(i) 
            barzp_8  = - c1_8 * (           intuv_c0xxu_8(i)  * F_oru(i,j,k) ) &
                              * ( F_BsPq_m(i+1,j,k) - F_BsPq_m(i,j,k) ) &
                              * Geomg_invDXu_8(i) 
!
            F_BsPq  (i+1,j,k) = - c1_8 * ( ( ONE_8 - intuv_c0xxu_8(i) )* barz_m_8 &
                                                   + intuv_c0xxu_8(i)  * barzp_m_8 ) &
                              * (   F_oru(i,j,k) ) &
                              * Geomg_invDXu_8(i) + F_BsPq  (i+1,j,k) 
            F_BsPq  (i,  j,k) = - c1_8 * ( ( ONE_8 - intuv_c0xxu_8(i) )* barz_m_8 &
                                                   + intuv_c0xxu_8(i)  * barzp_m_8 ) &
                              * ( - F_oru(i,j,k) ) &
                              * Geomg_invDXu_8(i) + F_BsPq  (i,  j,k) 
!
            F_u  (i,j,k)      = Cstv_invT_8 * F_oru(i,j,k) + F_u(i,j,k)
            F_oru(i,j,k)      = ZERO_8
!
            F_t(i+1,j,k+1)    = Ver_wp_8%m(k) * ( barzp_8 ) + F_t(i+1,j,k+1)
            F_t(i+1,j,k)      = Ver_wm_8%m(k) * ( barzp_8 ) + F_t(i+1,j,k) 
!
            F_t(i  ,j,k+1)    = Ver_wp_8%m(k) * ( barz_8  ) + F_t(i  ,j,k+1) 
            F_t(i  ,j,k)      = Ver_wm_8%m(k) * ( barz_8  ) + F_t(i  ,j,k) 
!
         end do
         end do

      end do
!$omp end do 

!$omp do 
      do k = l_nk,1,-1
!
!        ADJ of
!        Compute V barX in wk2
!        ~~~~~~~~~~~~~~~~~~~~~
         do j = jn,j0,-1
         do i = i0-1,in+2
!
            F_v   (i,j-2,k) = inuvl_wyvy3_8(j,1) * wk2k_8(i,j,k) + F_v(i,j-2,k)
            F_v   (i,j-1,k) = inuvl_wyvy3_8(j,2) * wk2k_8(i,j,k) + F_v(i,j-1,k) 
            F_v   (i,j  ,k) = inuvl_wyvy3_8(j,3) * wk2k_8(i,j,k) + F_v(i,j  ,k)
            F_v   (i,j+1,k) = inuvl_wyvy3_8(j,4) * wk2k_8(i,j,k) + F_v(i,j+1,k)
            wk2k_8(i,j  ,k) = ZERO_8
!
         end do
         end do

      end do
!$omp end do 

      endif

!     ADJ of
!     Compute (1 + mu) barx barz in wk1
!     ---------------------------------
      if (.not.Schm_hydro_L) then
!$omp do 
      do k = l_nk,1,-1
!
         do j = jn,j0,-1
         do i = in,i0,-1
!
            barz_8       = ( ONE_8 - intuv_c0xxu_8(i) ) * wk1_8(i,j) 
            barzp_8      =           intuv_c0xxu_8(i)   * wk1_8(i,j) 
            wk1_8(i,j)   = ZERO_8
!
            F_mu(i+1,j,k+1)= Ver_wp_8%m(k) * ( barzp_8 ) + F_mu(i+1,j,k+1)
            F_mu(i+1,j,k)  = Ver_wm_8%m(k) * ( barzp_8 ) + F_mu(i+1,j,k)
            barzp_8        = ZERO_8
!
            F_mu(i  ,j,k+1)= Ver_wp_8%m(k) * ( barz_8  ) + F_mu(i  ,j,k+1)
            F_mu(i  ,j,k)  = Ver_wm_8%m(k) * ( barz_8  ) + F_mu(i  ,j,k)
            barz_8         = ZERO_8
!
         end do
         end do
      end do
!$omp end do 
      endif
!
!     do k = l_nk,1,-1
!
!     ADJ of 
!     Set wk1 to 1 in the hydrostatic case as mu=0
!     --------------------------------------------
!!!      if (Schm_hydro_L) then
!!!         do j = 1, l_nj
!!!         do i = 1, l_ni
!!!         wk1_8(i,j) = ZERO_8
!!!         end do
!!!         end do
!!!      endif
!
!     enddo
 
!$omp end parallel 
!
!     ADJ of
!     Exchange haloes for derivatives & interpolation
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (.not. Schm_hydro_L) then
      call rpn_comm_adj_halo( F_mu, LDIST_DIM,l_ni,l_nj,G_nk+1, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
!
      call rpn_comm_adj_halo( F_fip, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      call rpn_comm_adj_halo( F_BsPq,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      call rpn_comm_adj_halo( F_t,   LDIST_DIM,l_ni,l_nj,G_nk+1, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      call rpn_comm_adj_halo( F_v,   LDIST_DIM,l_ni,l_njv,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      call rpn_comm_adj_halo( F_u,   LDIST_DIM,l_niu,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
!     Zero F_fip,F_BsPq,F_t,F_v,F_u halo
!     ----------------------------------
      if (.not. Schm_hydro_L) &
      call v4d_zerohalo ( F_mu,   l_ni, l_nj, LDIST_DIM, G_nk+1)
!
      call v4d_zerohalo ( F_fip,  l_ni, l_nj, LDIST_DIM, G_nk+2)
      call v4d_zerohalo ( F_BsPq, l_ni, l_nj, LDIST_DIM, G_nk+2)
      call v4d_zerohalo ( F_t,    l_ni, l_nj, LDIST_DIM, G_nk+1)
      call v4d_zerohalo ( F_v,    l_ni, l_njv,LDIST_DIM, G_nk)
      call v4d_zerohalo ( F_u,    l_niu,l_nj, LDIST_DIM, G_nk)
!
      return
      end
