!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r v4d_rwtraj_phy - For PHYSICS: Read (Write) from (on) TRAJ WA file at each time step 
!
#include "model_macros_f.h"
!
      subroutine v4d_rwtraj_phy (numtr)
!
      implicit none
!
      integer numtr, Nk
!
      real, pointer, dimension(:,:,:)     :: hu_plus
!
!author L.Spacek
!
!revision
! v4_04 - Spacek L.         - initial MPI version
! v4_10 - Spacek L.         - initial GMM version
!
!object
!
!
!arguments
! Name         I/O     Description
!-------------------------------------------------------------------------
! numtr        I       Indicates which portion of TRAJECTORY to Read-Write 
!-------------------------------------------------------------------------
! F_op1-5(*)  I        Optional entry arguments
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "pw.cdk"
#include "pw_m.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "lctl.cdk"
#include "vt1.cdk"
#include "step.cdk"
      include "v4dg.inc"
!
!modules
      integer err,istep,i,j,k,n,iadd
!
      logical plpr_L
!
!     ______________________________________________________
!
!     Flag to trace storing and retrieving of trajectory
!     --------------------------------------------------
      plpr_L = .false.
      plpr_L = plpr_L.and.Lun_out.gt.0 
!
      istep = Lctl_step 
!
      Nk    =l_nk+2 
!
!
!     ---------------------
!     TRAJ (pw_update.ftn)  Sigma coordinates written only once
!     ---------------------
      if (numtr.eq.20) then
!
!        ----------------
!        Read TRAJ Fields 
!        ----------------
!
!        Recover starting address 
!        ------------------------
!
         gmmstat = gmm_get(gmmk_pw_pm_plus_s ,pw_pm_plus  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'pw_pm_plus'
         gmmstat = gmm_get(gmmk_pw_pt_plus_s ,pw_pt_plus  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'pw_pt_plus'

         if (V4dg_phy_wsigm_L ) then

            V4dg_addtab_tl(numtr,1,1,1) = V4dg_addtr 
            iadd                        = V4dg_addtr 
!
!        -----------------
!        Write SIGM Fields (note: this field is written only once)
!        -----------------

             call v4d_rwfld (pw_pm_plus,LDIST_DIM,Nk,               &
                             iadd,plpr_L,'SIGM    ',V4dg_ad_L,0,1)
             call v4d_rwfld (pw_pt_plus,LDIST_DIM,Nk,               &
                             iadd,plpr_L,'SIGT    ',V4dg_ad_L,0,1)
             V4dg_addtab_ad(numtr,1,1,1) = iadd - l_ni*l_nj*Nk
             V4dg_addtr                  = iadd
             V4dg_phy_wsigm_L  = .false.
         else
!        ----------------
!        Read SIGM Fields 
!        ----------------
             if (.not.V4dg_nl_L) then
                 iadd=  V4dg_addtab_tl(numtr,1,1,1)
                 call v4d_rwfld (pw_pm_plus,LDIST_DIM,Nk,           &
                             iadd,plpr_L,'SIGM    ',V4dg_nl_L,0,-1)
                 call v4d_rwfld (pw_pt_plus,LDIST_DIM,Nk,           &
                             iadd,plpr_L,'SIGT    ',V4dg_nl_L,0,-1)
             endif
         endif
      endif

!     -----------------------
!     TRAJ (pw_update.ftn)  Basic physics trajectory
!     -----------------------
      if (numtr.eq.21) then
!
!        ----------------
!        Read TRAJ Fields 
!        ----------------
         if (V4dg_rwtr.eq.0) then
!
!        Recover starting address 
!        ------------------------

         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,1,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,1,1) 

         nullify(utrajp,vtrajp,ttrajp,hutrajp,ptrajp,strajp)

         gmmstat = gmm_get(gmmk_utrajp_s ,utrajp  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'utrajp'
         gmmstat = gmm_get(gmmk_vtrajp_s ,vtrajp  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'vtrajp'
         gmmstat = gmm_get(gmmk_ttrajp_s ,ttrajp  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'ttrajp'
         gmmstat = gmm_get(gmmk_hutrajp_s,hutrajp ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'hutrajp'
         gmmstat = gmm_get(gmmk_ptrajp_s ,ptrajp  ,meta2d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'ptrajp'
         gmmstat = gmm_get(gmmk_strajp_s ,strajp  ,meta2d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'st1m'
!
!        TANGENT LINEAR MODEL
!        --------------------
         if (V4dg_tl_L) then
!
            call v4d_rwfld (utrajp,LDIST_DIM,Nk,  &
                            iadd,plpr_L,'UTRAJP      ',V4dg_ad_L,0,-1)
            call v4d_rwfld (vtrajp,LDIST_DIM,Nk,  &
                            iadd,plpr_L,'VTRAJP      ',V4dg_ad_L,0,-1)
            call v4d_rwfld (ttrajp,LDIST_DIM,Nk,  &
                            iadd,plpr_L,'TTRAJP      ',V4dg_ad_L,0,-1)
            call v4d_rwfld (hutrajp,LDIST_DIM,Nk, &
                            iadd,plpr_L,'HUTRAJP     ',V4dg_ad_L,0,-1)
            call v4d_rwfld (ptrajp,LDIST_DIM,1,   &
                            iadd,plpr_L,'PTRAJP      ',V4dg_ad_L,0,-1)
            call v4d_rwfld (strajp,LDIST_DIM,1,   &
                            iadd,plpr_L,'STRAJP     ',V4dg_ad_L,0,-1)
         endif
!
!        ADJOINT MODEL
!        -------------
         if (V4dg_ad_L) then
!
            call v4d_rwfld (strajp ,LDIST_DIM,1,                 &
                            iadd,plpr_L,'ST1     ',  V4dg_ad_L,  &
                            l_ni*l_nj,-1)
            call v4d_rwfld (ptrajp ,LDIST_DIM,1,                 &
                            iadd,plpr_L,'PP      ',  V4dg_ad_L,  &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (hutrajp,LDIST_DIM,Nk,                &
                            iadd,plpr_L,'HUP     ',  V4dg_ad_L,  &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (ttrajp ,LDIST_DIM,Nk,                &
                            iadd,plpr_L,'TP      ',  V4dg_ad_L,  &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (vtrajp ,LDIST_DIM,Nk,                &
                            iadd,plpr_L,'VP      ',  V4dg_ad_L,  &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (utrajp ,LDIST_DIM,Nk,                &
                            iadd,plpr_L,'UP      ',  V4dg_ad_L,  &
                            l_ni*l_nj*Nk,-1)
!
        endif
!
!        -----------------
!        Write TRAJ Fields 
!        -----------------
!
         elseif(V4dg_rwtr.eq.1) then

!
!        Store starting TLM address
!        --------------------------

         V4dg_addtab_tl(numtr,istep,1,1) = V4dg_addtr 
         iadd                            = V4dg_addtr 
!
         gmmstat = gmm_get(gmmk_pw_uu_plus_s ,pw_uu_plus  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'pw_uu_plus'
         gmmstat = gmm_get(gmmk_pw_vv_plus_s ,pw_vv_plus  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'pw_vv_plus'
         gmmstat = gmm_get(gmmk_pw_tt_plus_s ,pw_tt_plus ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'pw_tt_plus'
         gmmstat = gmm_get('TR/HU:P',hu_plus,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'TR/HU:P'
         gmmstat = gmm_get(gmmk_pw_pm_plus_s,pw_pm_plus,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'pw_pm_plus'
         gmmstat = gmm_get(gmmk_st1_s      ,st1 ,meta2d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'st1'
         where(hu_plus<0)hu_plus=0.0
!
            call v4d_rwfld (pw_uu_plus,LDIST_DIM,Nk,            &
                            iadd,plpr_L,'UTRAJP      ',V4dg_ad_L,0,1)
            call v4d_rwfld (pw_vv_plus,LDIST_DIM,Nk,            &
                            iadd,plpr_L,'VTRAJP      ',V4dg_ad_L,0,1)
            call v4d_rwfld (pw_tt_plus,LDIST_DIM,Nk,            &
                            iadd,plpr_L,'TTRAJP      ',V4dg_ad_L,0,1)
            call v4d_rwfld (hu_plus,LDIST_DIM,Nk,               &
                            iadd,plpr_L,'HUTRAJP     ',V4dg_ad_L,0,1)
            call v4d_rwfld (pw_pm_plus(:,:,l_nk+2),LDIST_DIM,1, &
                            iadd,plpr_L,'PTRAJP      ',V4dg_ad_L,0,1)
            call v4d_rwfld (st1,LDIST_DIM,1,                    &
                            iadd,plpr_L,'STRAJP     ',V4dg_ad_L,0,1)
!
!        Store starting ADJOINT address 
!        ------------------------------
         V4dg_addtab_ad(numtr,istep,1,1) = iadd - l_ni*l_nj
         V4dg_addtr                      = iadd
!
         endif
!
      endif

!
!     --------------------
!     TRAJ Boudary layer coefficients
!     --------------------
      if (numtr.eq.22) then
         if(.not.(V4dg_conf.ne.0 .and. V4dg_oktr_L.and.            &
                  V4dg_phy_pbl.eq.2 .and. istep.gt.0))return
!
!        ----------------
!        Read TRAJ Fields 
!        ----------------
         if (V4dg_rwtr.eq.0) then
!     These trajectories are not read by v4d_rvtraj. They
!     are directly placed into slices by call v4d_rtrnch
!     in itf_phy_fillbus_tr
!
!        -----------------
!        Write TRAJ Fields 
!        -----------------
         elseif(V4dg_rwtr.eq.1) then
!
!        Store starting TLM address
!        --------------------------
         V4dg_addtab_tl(numtr,istep,1,1) = V4dg_addtr 
         iadd                            = V4dg_addtr 
!
!      The coefficients for vertical diffusion are written
!      by slices in v4d_phy_extract_pbl called in itf_phy_slb.
!      The address in the trajectory array is updated in itf_phy_step
!      by call to v4d_rwtraj(22).
!
       iadd = iadd + 2*l_ni*l_nj*Nk + 2*l_ni*l_nj
       if(plpr_L)write(*,*)'Trajectory 22',V4dg_addtr,iadd
!
!        Store starting ADJOINT address 
!        ------------------------------
         V4dg_addtab_ad(numtr,istep,1,1) = iadd - l_ni*l_nj
         V4dg_addtr                      = iadd
         endif
!
      endif
!
!     -----------------------
!     TRAJ (pw_update.ftn) To be read in pw_update_ad
!     -----------------------
      if (numtr.eq.31) then
!
!        ----------------
!        Read TRAJ Fields 
!        ----------------
         if (V4dg_rwtr.eq.0) then
!
!        Recover starting address 
!        ------------------------

         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr-10,istep-2,1,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr-10,istep-2,1,1) 

         nullify(utrajm,vtrajm,ttrajm,hutrajm,ptrajm,strajm)

         gmmstat = gmm_get(gmmk_utrajm_s ,utrajm  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'utrajm'
         gmmstat = gmm_get(gmmk_vtrajm_s ,vtrajm  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'vtrajm'
         gmmstat = gmm_get(gmmk_ttrajm_s ,ttrajm  ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'ttrajm'
         gmmstat = gmm_get(gmmk_hutrajm_s,hutrajm ,meta3d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'hutrajm'
         gmmstat = gmm_get(gmmk_ptrajm_s ,ptrajm  ,meta2d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'ptrajm'
         gmmstat = gmm_get(gmmk_strajm_s ,strajm  ,meta2d)
         if (GMM_IS_ERROR(gmmstat)) write (Lun_out,6000)'strajm'
!
!        ADJOINT MODEL
!        -------------
         if (V4dg_ad_L) then
!
            call v4d_rwfld (strajm ,LDIST_DIM,1,                    &
                            iadd,plpr_L,'STRAJM     ',  V4dg_ad_L,  &
                            l_ni*l_nj,-1)
            call v4d_rwfld (ptrajm ,LDIST_DIM,1,                    &
                            iadd,plpr_L,'PTRAJM      ',  V4dg_ad_L, &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (hutrajm,LDIST_DIM,Nk,                   &
                            iadd,plpr_L,'HUTRAJM     ',  V4dg_ad_L, &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (ttrajm ,LDIST_DIM,Nk,                   &
                            iadd,plpr_L,'TTRAJM      ',  V4dg_ad_L, &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (vtrajm ,LDIST_DIM,Nk,                   &
                            iadd,plpr_L,'VTRAJM      ',  V4dg_ad_L, &
                            l_ni*l_nj*Nk,-1)
            call v4d_rwfld (utrajm ,LDIST_DIM,Nk,                   &
                            iadd,plpr_L,'UTRAJM      ',  V4dg_ad_L, &
                            l_ni*l_nj*Nk,-1)

        endif
        endif
!
      endif
!
 6000 format(' v4d_rwtraj_phy ERROR at gmm_get(',a,')')
!
      return
      end

