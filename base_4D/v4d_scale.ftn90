!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r v4d_scale - 1)Compute distributed inner product <F_px,F_py> 
!                    for each individual component of control variable
!                  2)Scale F_py to have distributed inner product = 1 
!                    for each individual component of control variable
!
#include "model_macros_f.h"
!
      subroutine v4d_scale (Ndim,F_px,F_py)
!
      implicit none
#include <arch_specific.hf>
!
      integer Ndim
      real F_px(Ndim), F_py(Ndim)
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Desgagne M.       - rpn_comm stooge for MPI
! v2_31 - Tanguay M.        - adapt for tracers in tr3d  
! v3_03 - Tanguay M.        - Adjoint NoHyd configuration
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!     see id section
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! Ndim         I                   Dimension 
! F_px         I                   Control variable 1
! F_py         I/O                 Control variable 2 
!----------------------------------------------------------------
!
!implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "v4dc.cdk"
#include "tr3d.cdk"
!
      integer m,mold,ierr,i,j,k,n
      real*8 plocal_8,psc_8,ZERO_8
!
      parameter( ZERO_8 = 0.0 )
!
      m = 0
!
!     Evaluate distributed inner product for UT1
!     ------------------------------------------
      mold  = m 
      psc_8 = ZERO_8 
!
      do k = 1,l_nk+1
      do j = 1,l_nj
      do i = 1,l_niu
         m = m+1
         psc_8  = psc_8  + F_px(m)*F_py(m)*V4dc_scalp(m)
      end do
      end do
      end do
!
      plocal_8 = psc_8
      psc_8    = ZERO_8
      call rpn_comm_Allreduce (plocal_8,psc_8,1,"MPI_DOUBLE_PRECISION", &
                               "MPI_SUM","grid",ierr)
!
      if(psc_8.ne.ZERO_8) then
!
      m = mold 
      do k = 1,l_nk+1
      do j = 1,l_nj
      do i = 1,l_niu
         m = m+1
         F_py(m)= F_py(m)/psc_8
      end do
      end do
      end do
!
      endif
!
!     Evaluate distributed inner product for VT1
!     ------------------------------------------
      mold  = m
      psc_8 = ZERO_8 
!
      do k = 1,l_nk+1
      do j = 1,l_njv
      do i = 1,l_ni
         m = m+1
         psc_8  = psc_8  + F_px(m)*F_py(m)*V4dc_scalp(m)
      end do
      end do
      end do
!
      plocal_8 = psc_8
      psc_8    = ZERO_8
      call rpn_comm_Allreduce (plocal_8,psc_8,1,"MPI_DOUBLE_PRECISION", &
                               "MPI_SUM","grid",ierr)
!
      if(psc_8.ne.ZERO_8) then
!
      m = mold
      do k = 1,l_nk+1
      do j = 1,l_njv
      do i = 1,l_ni
         m = m+1
         F_py(m)= F_py(m)/psc_8
      end do
      end do
      end do
!
      endif
!
!     Evaluate distributed inner product for TT1
!     ------------------------------------------
      mold  = m
      psc_8 = ZERO_8
!
      do k = 1,l_nk+2
      do j = 1,l_nj
      do i = 1,l_ni
         m = m+1
         psc_8  = psc_8  + F_px(m)*F_py(m)*V4dc_scalp(m)
      end do
      end do
      end do
!
      plocal_8 = psc_8
      psc_8    = ZERO_8
      call rpn_comm_Allreduce (plocal_8,psc_8,1,"MPI_DOUBLE_PRECISION", &
                               "MPI_SUM","grid",ierr)
!
      if(psc_8.ne.ZERO_8) then
!
      m = mold
      do k = 1,l_nk+2
      do j = 1,l_nj
      do i = 1,l_ni
         m = m+1
         F_py(m)= F_py(m)/psc_8
      end do
      end do
      end do
!
      endif
!
!     Evaluate distributed inner product for ST1
!     ------------------------------------------
      mold  = m
      psc_8 = ZERO_8
!
      do j = 1,l_nj
      do i = 1,l_ni
         m = m+1
         psc_8  = psc_8  + F_px(m)*F_py(m)*V4dc_scalp(m)
      end do
      end do
!
      plocal_8 = psc_8
      psc_8    = ZERO_8
      call rpn_comm_Allreduce (plocal_8,psc_8,1,"MPI_DOUBLE_PRECISION", &
                               "MPI_SUM","grid",ierr)
!
      if(psc_8.ne.ZERO_8) then
!
      m = mold
      do j = 1,l_nj
      do i = 1,l_ni
         m = m+1
         F_py(m)= F_py(m)/psc_8
      end do
      end do
!
      endif
!
!     Evaluate distributed inner product for tracer 3D 
!     ------------------------------------------------
      if (Tr3d_ntr.gt.0) then
         do n=1,Tr3d_ntr
!
            mold  = m
            psc_8 = ZERO_8
!
            do k=1,l_nk+2
            do j=1,l_nj
            do i=1,l_ni
               m = m+1
               psc_8  = psc_8  + F_px(m)*F_py(m)*V4dc_scalp(m)
            end do
            end do
            end do
!
            plocal_8 = psc_8
            psc_8    = ZERO_8
            call rpn_comm_Allreduce (plocal_8,psc_8,1,"MPI_DOUBLE_PRECISION", &
                                     "MPI_SUM","grid",ierr)
!
            if(psc_8.ne.ZERO_8) then
            m = mold
            do k = 1,l_nk+2
            do j = 1,l_nj
            do i = 1,l_ni
               m = m+1
               F_py(m)= F_py(m)/psc_8
             end do
             end do
             end do
             endif
!
         end do
      endif
!     ______________________________________________________
!
      if(m.ne.Ndim) call handle_error(-1,'v4d_scale','m.ne.Ndim')
!     ______________________________________________________
!
      return
      end
