#!/bin/ksh
## Python RPN (RPNpy) is a collection of Python modules and scripts developed
## at RPN for scientific use.
## Its main purpose is to act as an augmented interface to functions in: 
## * librmn, vgrid: read, manipulate, interpolate and write RPN Std files data
## * burpc: read, manipulate and write BURP files
## in Python with a very simple and minimalist interface while also 
## offering powerful lower level functions for special cases. 
## The Python RPN package can be used for fast prototyping and full development 
## of production scripts.
## It allows to use powerful python data analysis and visualization tools 
## like numpy, scipy and matplotlib among others.

## Note: In order to use Python RPN, you must have 
##       the following shared libraries installed and 
##       their paths set in LD_LIBRARY_PATH, LIBPATH or PYTHONPATH
##       librmn, vgrid (6.0 or later) and burpc 

## ==== Developing code ======================================================

## Basic setup
# git clone ssh://localhost/~armnenv/GitDepots/python-rpn.git rpnpy
# git clone git@github.com:meteokid/python-rpn.git rpnpy
git clone git@gitlab.science.gc.ca:MIG/python-rpn.git rpnpy

cd rpnpy
# git checkout -b mybranch python-rpn_VERSION
## You may want to set the librmn and libdesrip (vgrid) versions
## These libraries need to be present in your LD_LIBRARY_PATH or PYTHONPATH
# export RPNPY_RMN_VERSION=${RPNPY_RMN_VERSION:-_015.2}
# export RPNPY_VGD_VERSION=${RPNPY_VGD_VERSION:-shared_6.0.0}
# export RPNPY_BURPC_VERSION=${RPNPY_BURPC_VERSION:-*}
# export AFSISIO=${AFSISIO:-/home/binops/afsi/sio/env_ubuntu-12.04-amd64-64/afsisio}
# export CMCGRIDF=${CMCGRIDF:-/fs/cetusops/fs1/prod/hubs/gridpt/dbase}
# export ATM_MODEL_DFILES=${ATM_MODEL_DFILES:-/home/ordenv/ssm-domains9/release/gem-data_4.2.0/gem-data_4.2.0_all/share/data/dfiles}
# rm -f .setenv.__extlib__.${ORDENV_PLAT}.dot
# . ./.setenv.dot --science --dev
# . ./.setenv.dot --cmc --dev
# . ./.setenv.dot  --science
. ./.setenv.dot --cmc
export storage_model=${storage_model:-$TMPDIR}
rm -f lib/rpnpy/version.py
cat >> lib/rpnpy/version.py << EOF
__VERSION__    = "2.0.dev-${USER:-${LOGNAME}}"
__LASTUPDATE__ = "$(date '+%Y-%m-%d %H:%M %Z')"
EOF

## Edit python source in:
## ./lib/
## ./share/tests/

## Test your code modificatons with:
for mytest in share/tests/test_*.py ; do
    python ${mytest}
done

## Once tested you may send your code/patch 
## (or path to your git clone after you commited your changes) 
## to stephane.chamberland@canada.ca

## ==== Building ============================================================

# git clone ssh://armnenv@localhost/~armnenv/GitDepots/python-rpn.git
# git clone ssh://localhost/~armnenv/GitDepots/python-rpn.git rpnpy
git clone git@github.com:meteokid/python-rpn.git rpnpy

cd rpnpy
# git checkout -b tmp python-rpn_VERSION
## update version number (including leading 'x/') in ./VERSION
## update default rmn and vgrid dependencies in: 
##    ./ssmusedep-dev.bndl-*

## Choose one of the following export
export RDENETWORK=cmc        ## CMC Network, ubuntu 14
# export RDENETWORK=cmc_u12  ## CMC Network, ubuntu 12
# export RDENETWORK=science  ## Science Network, ubuntu 14
rm -f .setenv.__extlib__.${ORDENV_PLAT}.dot
. ./.setenv.dot --dev

export storage_model=${storage_model:-$TMPDIR}
rdemklink -v -f
./bin/ouv_exp_rpnpy -v
# make -j 8 components_objects
# make components_libs 
# make components_abs 
make -s forced_extlibdotfile
. ./.setenv.dot
# make sharedlibs
# make sharedlibs_cp
## Note: Need to do "make extlibdotfile" on other arch before the next step
make components_ssm_all
# make components_ssm

## For additional ARCH
      ssh MYMACH
      cd /PATH/
      ## Choose one of the following export
      export RDENETWORK=cmc        ## CMC Network, ubuntu 14
      # export RDENETWORK=cmc_u12  ## CMC Network, ubuntu 12
      # export RDENETWORK=science  ## Science Network, ubuntu 14
      . ./.setenv.dot --dev
      export storage_model=${storage_model:-$TMPDIR}
      rdemklink
      #./bin/ouv_exp_rpnpy
      # make -j 8 components_objects
      # make components_libs 
      # make components_abs 
      make -s forced_extlibdotfile
      # make sharedlibs
      # make sharedlibs_cp
      # make components_ssm_arch

## ==== Installing ==========================================================

ssh MY_INSTALL_MACH
cd /PATH/
export RDENETWORK=cmc
# export RDENETWORK=cmc_u12
# export RDENETWORK=science
. ./.setenv.dot --dev
make components_install CONFIRM_INSTALL=yes
## make components_install CONFIRM_INSTALL=yes SSM_BASE=/fs/ssm/eccc/mrd/rpn/MIG SSM_BASE2=/fs/ssm

## ==== Uninstalling ========================================================

ssh MY_INSTALL_MACH
cd /PATH/
export RDENETWORK=cmc
# export RDENETWORK=cmc_u12
# export RDENETWORK=science
. ./.setenv.dot --dev
make components_uninstall UNINSTALL_CONFIRM=yes
