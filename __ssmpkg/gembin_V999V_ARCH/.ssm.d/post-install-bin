#!/bin/ksh
set -x
domainHome=$1
packageHome=$2
profileDirPath=${packageHome}/etc/profile.d
packageFullName=${packageHome##*/}
packageNameVersion=${packageFullName%_*}
packageName=${packageNameVersion%%_*}
packageVersion=${packageNameVersion##*_}

cd ${packageHome}

#==== Check dependencies
if [[ x$EC_ARCH = x ]] ; then
    echo "ERROR: EC_ARCH not defined, must provied an ARCH/Compiler"
    exit 1		
fi

#TODO: check gemdyn et rpnphy
#version=$(r.${packageName}_all-config --version 2>/dev/null)
#if [[ x"$version" == x ]] then
#    echo "ERROR: cannot install, missing package all"
#    exit 1	
#fi

#TODO: check for libs in gemdyn et rpnphy
#if [[ x"$(ls -1 $packageHome/lib/$EC_ARCH/*.a 2>/dev/null)" == x ]] ; then
#    echo "ERROR: Must first compile libs for this package"
#    exit 1	
#fi

#TODO: check for armnlib...
#TODO: check for dependencies (listed in pre-install-dep.txt and $EC_ARCH/pre-install-dep.txt)


#==== Build Abs
exitstatus=0

rcspath=$(r.gemdyn_all-config --rcspath 2>/dev/null)
packageAllHome=$(echo ${rcspath%%:*})
packageAllHome=$(echo ${packageAllHome%/*})

MALIB=malib${EC_ARCH}

#BINDIR=${packageHome}/bin/release
BINDIR=${packageHome}/bin
mkdir -p ${BINDIR} 2>/dev/null

cd ${TMPDIR:-/tmp}
/bin/rm -rf tmpwkdir$$
mkdir tmpwkdir$$
cd tmpwkdir$$

#. s.ssmuse.dot $domainHome
ouv_exp base -RCSPATH $rcspath
r.make_exp
mkdir -p ${MALIB}

#make allbin #LIBPATHEXTRA=${packageHome}/lib/${EC_ARCH}
#make gem #LIBPATHEXTRA=${packageHome}/lib/${EC_ARCH}
if [[ x${FORCE_RMN_VERSION} == x ]] ; then
   make gem 
else
   make gem RMN_VERSION=${FORCE_RMN_VERSION}
fi

mv maingemntr_${BASE_ARCH}.Abs maingemntr_REL_${BASE_ARCH}.Abs
mv maingemdm_${BASE_ARCH}.Abs maingemdm_REL_${BASE_ARCH}.Abs
mv *.Abs $BINDIR
isokgemntr=$(ls $BINDIR/maingemntr*.Abs 2>/dev/null)
isokgemdm=$(ls $BINDIR/maingemdm*.Abs 2>/dev/null)
[[ x$isokgemntr == x ]] && exitstatus=1
[[ x$isokgemdm == x ]] && exitstatus=1

#cd ${TMPDIR:-/tmp}
#/bin/rm -rf tmpwkdir$$
#cp ${packageAllHome}/src/monitor/* .
#make -f ${packageAllHome}/include/cibles_sometools monitor MONBINDIR=$BINDIR
#isomonend=$(ls $BINDIR/gem_monitor_end 2>/dev/null)
#isomonout=$(ls $BINDIR/gem_monitor_output 2>/dev/null)
#[[ x$isomonend == x ]] && exitstatus=1
#[[ x$isomonout == x ]] && exitstatus=1

exit $exitstatus

#r.build -o geophy_2000.Abs -bidon -main geophy\
#	     -arch ${EC_ARCH} \
#	     -librmn rmn -obj ${MALIB}/geophy.o
#if [[ ! -r geophy_2000.Abs ]] ; then
#	 echo "ERROR Problem building: geophy_2000.Abs"
#	 exit 1
#fi
#/bin/rm -f ${BINDIR}/geophy_2000.Abs
#mv geophy_2000.Abs ${BINDIR}
