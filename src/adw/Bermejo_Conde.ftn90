!**s/p Bermejo_Conde - Ensures conservation of interpolated field (Bermejo and Conde,2002)

#include <model_macros_f.h>

      subroutine Bermejo_Conde (F_name_S,F_out,F_high,F_low,F_min,F_max,F_old,Minx,Maxx,Miny,Maxy,F_nk,k0,F_CLIP_L,F_ILMC_L)

      implicit none

      !Arguments
      !---------
      character (len=*), intent(in) :: F_name_S                           !I, Name of field to be ajusted 
      integer,           intent(in) :: Minx,Maxx,Miny,Maxy                !I, Dimension H
      integer,           intent(in) :: k0                                 !I, Scope of operator
      integer,           intent(in) :: F_nk                               !I, Number of vertical levels
      logical,           intent(in) :: F_CLIP_L                           !I, T IF F_high is MONO(CLIPPING) 
      logical,           intent(in) :: F_ILMC_L                           !I, T IF F_high is MONO(ILMC) 
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk), intent(out)    :: F_out  !I: Corrected (conservative) solution 
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk), intent(in)     :: F_high !I: High-order SL solution based on F_CLIP_L,F_ILMC_L  
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk), intent(in)     :: F_low  !I:  Low-order SL solution 
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk), intent(in)     :: F_min  !I: MIN over cell
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk), intent(in)     :: F_max  !I: MAX over cell
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk), intent(in)     :: F_old  !I: Field at previous time step 

      !Author Monique Tanguay 
      ! Revision
      ! v4_XX - Qaddouri A.       - Version for Yin-Yang Grid
      !Object
      !     Based on Bermejo and Conde,2002, A conservative quasi-monotone
      !     semi-Lagrangian scheme. MWR,130,423-430
      !     Based on Bermejo/Conde template from GEM3 (Gravel and DeGrandpre 2012)
      !
!**/
#include "glb_ld.cdk"
#include "lun.cdk"
#include "grd.cdk"
#include "adx_nml.cdk"
#include "schm.cdk"

      !----------------------------------------------------------
      integer i,j,k,err,count(k0:F_nk,3),l_count(3),g_count(3),time_p,time_m
      real*8  mass_old_8,mass_new_8,mass_deficit_8,mass_out_8,mass_weight_8, &
              inverse_mass_weight_8,lambda_8,correction_8,p_exp_8,H_minus_L_8,ratio_8
      real*8, parameter :: ONE_8=1.d0
      real F_new(Minx:Maxx,Miny:Maxy,F_nk),weight(Minx:Maxx,Miny:Maxy,F_nk)
      character(len=9) :: communicate_S
      !----------------------------------------------------------

      if (.NOT.Schm_psadj_L) call handle_error(-1,'BERMEJO-CONDE','Schm_psadj_L should be TRUE')

      time_p = 1
      time_m = 0

      F_new = F_high

      p_exp_8 = 1.0

      if (Lun_out>0) then
                                          write(Lun_out,*) 'TRACERS: --------------------------------------------------------------------------------'
         if (F_CLIP_L)                    write(Lun_out,*) 'TRACERS: Restore Mass Conservation of Cubic MONO(CLIPPING): Bermejo and Conde,2002,MWR'
         if (F_ILMC_L)                    write(Lun_out,*) 'TRACERS: Restore Mass Conservation of Cubic MONO(ILMC): Bermejo and Conde,2002,MWR'
         if (.NOT.(F_CLIP_L.or.F_ILMC_L)) write(Lun_out,*) 'TRACERS: Restore Mass Conservation of Cubic: Bermejo and Conde,2002,MWR'
                                          write(Lun_out,*) 'TRACERS: --------------------------------------------------------------------------------'
      endif

      !Default values if no Mass correction
      !------------------------------------
      F_out = F_new 

      call mass_tr (mass_old_8,time_p,F_name_S(4:7),F_old,.TRUE.,Minx,Maxx,Miny,Maxy,F_nk-k0+1,k0,"",.TRUE.)
      call mass_tr (mass_new_8,time_m,F_name_S(4:7),F_new,.TRUE.,Minx,Maxx,Miny,Maxy,F_nk-k0+1,k0,"",.TRUE.)

      mass_deficit_8 = mass_new_8 - mass_old_8

      ratio_8 = 0.0d0
      if (mass_old_8/=0.d0) ratio_8 = mass_deficit_8/mass_old_8*100.

      if (Lun_out>0) then
          write(Lun_out,*)    'TRACERS: P_exponent              =',p_exp_8
          write(Lun_out,*)    'TRACERS: Do MONO (CLIPPING)      =',Adw_BC_min_max_L
          write(Lun_out,1000) 'TRACERS: Mass BEFORE Bermejo-Conde',mass_new_8,F_name_S(4:7)
          write(Lun_out,1000) 'TRACERS: Mass to RESTORE         =',mass_old_8,F_name_S(4:7)
          write(Lun_out,1001) 'TRACERS: Ori. Diff. of ',ratio_8
      endif

      weight = 0.0

      !-----------------------------------------
      !Compute Mass preserving BC solution F_out
      !-----------------------------------------
!$omp parallel do private(i,j,H_minus_L_8) shared(weight,mass_deficit_8)
      do k=k0,F_nk

         do j=1+pil_s,l_nj-pil_n
         do i=1+pil_w,l_ni-pil_e

            H_minus_L_8 = F_high(i,j,k) - F_low(i,j,k) 

            if (sign(ONE_8,mass_deficit_8)==sign(ONE_8,H_minus_L_8)) weight(i,j,k) = abs(H_minus_L_8)**p_exp_8*sign(ONE_8,mass_deficit_8)

         enddo
         enddo

      enddo
!$omp end parallel do

      call mass_tr (mass_weight_8,time_m,F_name_S(4:7),weight,.TRUE.,Minx,Maxx,Miny,Maxy,F_nk-k0+1,k0,"",.FALSE.)

      if (mass_weight_8==0.d0) then

         if (Lun_out>0) write(Lun_out,1002) 'TRACERS: Diff. too small             =', mass_new_8,mass_old_8,mass_new_8-mass_old_8

         return

      endif

      lambda_8 = mass_deficit_8/mass_weight_8

      if (Lun_out>0) write(Lun_out,1003) 'TRACERS: LAMBDA                  = ',lambda_8,F_name_S(4:7)

      count = 0

!$omp parallel do private(i,j,correction_8) shared(weight,count,lambda_8) 
      do k=k0,F_nk

         do j=1+pil_s,l_nj-pil_n
         do i=1+pil_w,l_ni-pil_e

            correction_8 = lambda_8 * weight(i,j,k)

            if (correction_8/=0.0d0) count(k,3) = count(k,3) + 1

            F_out(i,j,k) = F_new(i,j,k) - correction_8

            if (Adw_BC_min_max_L) then

                if (correction_8 > 0.d0 .and. F_out(i,j,k) < F_min(i,j,k)) then
                    count(k,1)   = count(k,1) + 1
                    F_out(i,j,k) = F_min(i,j,k)
                endif
                if (correction_8 < 0.d0 .and. F_out(i,j,k) > F_max(i,j,k)) then
                    count(k,2)   = count(k,2) + 1
                    F_out(i,j,k) = F_max(i,j,k)
                endif

            endif

         enddo
         enddo

      enddo
!$omp end parallel do

      l_count = 0
      g_count = 0

      do k=k0,F_nk
         l_count(1) = count(k,1) + l_count(1)
         l_count(2) = count(k,2) + l_count(2)
         l_count(3) = count(k,3) + l_count(3)
      enddo

      communicate_S = "GRID"
      if (Grd_yinyang_L) communicate_S = "MULTIGRID"

      call rpn_comm_Allreduce (l_count,g_count,3,"MPI_INTEGER","MPI_SUM",communicate_S,err)

      call mass_tr (mass_out_8,time_m,F_name_S(4:7),F_out,.TRUE.,Minx,Maxx,Miny,Maxy,F_nk-k0+1,k0,"",.FALSE.)

      mass_deficit_8 = mass_out_8 - mass_old_8

      ratio_8 = 0.0d0
      if (mass_old_8/=0.d0) ratio_8 = mass_deficit_8/mass_old_8*100.

      if (Lun_out>0) then
          write(Lun_out,1000) 'TRACERS: Mass  AFTER Bermejo-Conde',mass_out_8,F_name_S(4:7)
          write(Lun_out,*)    'TRACERS: # pts treated by B.-C.  =', g_count(3)
          write(Lun_out,*)    'TRACERS: # pts CLIPPED           =', g_count(1) + g_count(2)
          write(Lun_out,*)    'TRACERS: RESET_MIN_BC            =', g_count(1),'over',G_ni*G_nj*F_nk
          write(Lun_out,*)    'TRACERS: RESET_MAX_BC            =', g_count(2),'over',G_ni*G_nj*F_nk
          write(Lun_out,1001) 'TRACERS: Rev. Diff. of ',ratio_8
          write(Lun_out,*)    'TRACERS: --------------------------------------------------------------------------------'
      endif

 1000 format(1X,A34,E20.12,1X,A4)
 1001 format(1X,A23,E10.4,'%')
 1002 format(1X,A34,3(E20.12,1X))
 1003 format(1X,A34,F20.2,1X,A4)

      return
      end
