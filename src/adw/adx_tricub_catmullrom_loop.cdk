#define cubic(p1, p2, p3, p4, x) \
(p2) + 0.5 * (x) * ((p3) - (p1) + (x) * (2. * (p1) - 5. * (p2) + 4. * (p3) - (p4) + (x) * (3. * ((p2) - (p3)) + (p4) - (p1))))

   do k=k0,F_nk
      idxk = (k-1)*Adx_mlnij
      do j=j0,jn
         idxjk = idxk + ((j-1)*adx_mlni)
         do i=i0,in
            n = idxjk + i

            rri= F_x(n)
            ii_d = (rri - adx_x00_8) * adx_ovdx_8
            ii   = int(ii_d)
            ii_d = ii_d - ii

            ii = adx_lcx(ii+1) + 1
            if (rri < adx_bsx_8(ii)) ii = ii - 1
            ii = max(2,min(ii,Adx_iimax))

            rrj= F_y(n)
            jj_d = (rrj - adx_y00_8) * adx_ovdy_8
            jj   = int(jj_d)
            jj_d = jj_d - jj

            jj = adx_lcy(jj+1) + 1
            if (rrj < adx_bsy_8(jj)) jj = jj - 1
            jj = max(adx_haloy,min(jj,Adx_jjmax))

            rrk= F_z(n)
            kk = (rrk - p_z00_8) * adx_ovdz_8
            kk = p_lcz(kk+1)
            if (rrk < p_bsz_8(kk)) kk = kk - 1
            kk = min(kkmax-1,max(0,kk))

            zcubic_L = (kk > 0) .and. (kk < kkmax-1)

            !- x interpolation
            o2 = (kk-1)*Adx_nijag + (jj-Adx_int_j_off-1)*Adx_nit + (ii-Adx_int_i_off)
            o1 = o2-Adx_nit
            o3 = o2+Adx_nit
            o4 = o3+Adx_nit

            if (zcubic_L) then
               a1 = cubic(F_in(o1-1),F_in(o1), F_in(o1+1), F_in(o1+2), ii_d)
               a2 = cubic(F_in(o2-1),F_in(o2), F_in(o2+1), F_in(o2+2), ii_d)
               a3 = cubic(F_in(o3-1),F_in(o3), F_in(o3+1), F_in(o3+2), ii_d)
               a4 = cubic(F_in(o4-1),F_in(o4), F_in(o4+1), F_in(o4+2), ii_d)
            endif

            o1 = o1 + Adx_nijag
            o2 = o2 + Adx_nijag
            o3 = o3 + Adx_nijag
            o4 = o4 + Adx_nijag

#ifdef ADX_MONO
               prmax = max(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
               prmin = min(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
#endif
            b1 = cubic(F_in(o1-1), F_in(o1), F_in(o1+1), F_in(o1+2), ii_d)
            b2 = cubic(F_in(o2-1), F_in(o2), F_in(o2+1), F_in(o2+2), ii_d)
            b3 = cubic(F_in(o3-1), F_in(o3), F_in(o3+1), F_in(o3+2), ii_d)
            b4 = cubic(F_in(o4-1), F_in(o4), F_in(o4+1), F_in(o4+2), ii_d)

            o1 = o1 + Adx_nijag
            o2 = o2 + Adx_nijag
            o3 = o3 + Adx_nijag
            o4 = o4 + Adx_nijag

#ifdef ADX_MONO
               prmax = max(prmax,F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
               prmin = min(prmin,F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
#endif
            c1 = cubic(F_in(o1-1), F_in(o1), F_in(o1+1), F_in(o1+2), ii_d)
            c2 = cubic(F_in(o2-1), F_in(o2), F_in(o2+1), F_in(o2+2), ii_d)
            c3 = cubic(F_in(o3-1), F_in(o3), F_in(o3+1), F_in(o3+2), ii_d)
            c4 = cubic(F_in(o4-1), F_in(o4), F_in(o4+1), F_in(o4+2), ii_d)

            if (zcubic_L) then
               o1 = o1 + Adx_nijag
               o2 = o2 + Adx_nijag
               o3 = o3 + Adx_nijag
               o4 = o4 + Adx_nijag

               d1 = cubic(F_in(o1-1), F_in(o1), F_in(o1+1), F_in(o1+2), ii_d)
               d2 = cubic(F_in(o2-1), F_in(o2), F_in(o2+1), F_in(o2+2), ii_d)
               d3 = cubic(F_in(o3-1), F_in(o3), F_in(o3+1), F_in(o3+2), ii_d)
               d4 = cubic(F_in(o4-1), F_in(o4), F_in(o4+1), F_in(o4+2), ii_d)
            endif

            !- y interpolation
            b1 = cubic(b1, b2, b3, b4, jj_d)
            c1 = cubic(c1, c2, c3, c4, jj_d)

            !- z interpolation
            if (zcubic_L) then
               a1 = cubic(a1, a2, a3, a4, jj_d)
               d1 = cubic(d1, d2, d3, d4, jj_d)

               ra = p_bsz_8(kk-1)
               rb = p_bsz_8(kk  )
               rc = p_bsz_8(kk+1)
               rd = p_bsz_8(kk+2)
               p1 = triprd(rrk,rb,rc,rd)*p_zabcd_8(kk+1)
               p2 = triprd(rrk,ra,rc,rd)*p_zbacd_8(kk+1)
               p3 = triprd(rrk,ra,rb,rd)*p_zcabd_8(kk+1)
               p4 = triprd(rrk,ra,rb,rc)*p_zdabc_8(kk+1)

               F_out(n) = p1 * a1 + p2 * b1 + p3 * c1 + p4 * d1
            else
               p3 = (rrk-p_bsz_8(kk))*p_zbc_8(kk+1)
               p2 = 1. - p3

               F_out(n) = p2 * b1 + p3 * c1
            endif

#ifdef ADX_MONO
               F_out(n) = max(prmin , min(prmax,F_out(n)))
#endif
         enddo
      enddo
   enddo
