
#if defined (DOC)
!
!**comdeck nest.cdk
!
! v4_10 - Tanguay M.        - Adjust digital filter when LAM
!
!______________________________________________________________________
!                                                                      |
!  VARIABLES ASSOCIATED WITH NESTING for current timestep              |
!  For Nest_uf,Nest_vf - used for future timesteps with one extra level|
!______________________________________________________________________|
!                    |                                                 |
! NAME               | DESCRIPTION                                     |
!--------------------|-------------------------------------------------|
! Nest_u             | x component of velocity                         |
! Nest_v             | y component of velocity                         |
! Nest_t             | T (temperature)                                 |
! Nest_zd            |                                                 |
! Nest_s             | ln (dpi/dpi*)                                   |
!--------------------|-------------------------------------------------|
! Nest_w             | z component of velocity                         |
! Nest_q             |                                                 |
!--------------------|-------------------------------------------------|
! Nest_tr            | tracer 3d variables                             |
!----------------------------------------------------------------------|
!
#endif
      real, pointer, dimension (:,:,:) :: nest_u_deb  => null()
      real, pointer, dimension (:,:,:) :: nest_v_deb  => null()
      real, pointer, dimension (:,:,:) :: nest_t_deb  => null()
      real, pointer, dimension (:,:  ) :: nest_s_deb  => null()
      real, pointer, dimension (:,:,:) :: nest_w_deb  => null()
      real, pointer, dimension (:,:,:) :: nest_q_deb  => null()
      real, pointer, dimension (:,:,:) :: nest_zd_deb => null()
      real, pointer, dimension (:,:,:) :: nest_xd_deb => null()
      real, pointer, dimension (:,:,:) :: nest_qd_deb => null()
      real, pointer, dimension (:,:  ) :: nest_fullme_deb => null()

      real, pointer, dimension (:,:,:) :: nest_u      => null()
      real, pointer, dimension (:,:,:) :: nest_v      => null()
      real, pointer, dimension (:,:,:) :: nest_t      => null()
      real, pointer, dimension (:,:  ) :: nest_s      => null()
      real, pointer, dimension (:,:,:) :: nest_w      => null()
      real, pointer, dimension (:,:,:) :: nest_q      => null()
      real, pointer, dimension (:,:,:) :: nest_zd     => null()
      real, pointer, dimension (:,:,:) :: nest_xd     => null()
      real, pointer, dimension (:,:,:) :: nest_qd     => null()
      real, pointer, dimension (:,:  ) :: nest_fullme     => null()

      real, pointer, dimension (:,:,:) :: nest_u_fin  => null()
      real, pointer, dimension (:,:,:) :: nest_v_fin  => null()
      real, pointer, dimension (:,:,:) :: nest_t_fin  => null()
      real, pointer, dimension (:,:  ) :: nest_s_fin  => null()
      real, pointer, dimension (:,:,:) :: nest_w_fin  => null()
      real, pointer, dimension (:,:,:) :: nest_q_fin  => null()
      real, pointer, dimension (:,:,:) :: nest_zd_fin => null()
      real, pointer, dimension (:,:,:) :: nest_xd_fin => null()
      real, pointer, dimension (:,:,:) :: nest_qd_fin => null()
      real, pointer, dimension (:,:  ) :: nest_fullme_fin => null()

      real, pointer, dimension (:,:,:) :: nest_weightm=> null()
      real, pointer, dimension (:,:,:) :: nest_weightq=> null()
      real, pointer, dimension (:,:,:) :: nest_weightu=> null()
      real, pointer, dimension (:,:,:) :: nest_weightv=> null()

#if !defined(GMM_IS_OK)
#define GMM_IS_OK(errcode) (errcode >= 0)
      integer, parameter :: GMM_MAXNAMELENGTH = 32
#endif

      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_u_deb_s , gmmk_nest_v_deb_s , gmmk_nest_t_deb_s ,&
                                          gmmk_nest_s_deb_s , gmmk_nest_w_deb_s , gmmk_nest_q_deb_s ,&
                                          gmmk_nest_zd_deb_s, gmmk_nest_xd_deb_s, gmmk_nest_qd_deb_s,&
                                          gmmk_nest_fullme_deb_s, &

                                          gmmk_nest_u_s , gmmk_nest_v_s , gmmk_nest_t_s ,&
                                          gmmk_nest_s_s , gmmk_nest_w_s , gmmk_nest_q_s ,&
                                          gmmk_nest_zd_s, gmmk_nest_xd_s, gmmk_nest_qd_s,&
                                          gmmk_nest_fullme_s, &

                                          gmmk_nest_u_fin_s , gmmk_nest_v_fin_s , gmmk_nest_t_fin_s ,&
                                          gmmk_nest_s_fin_s , gmmk_nest_w_fin_s , gmmk_nest_q_fin_s ,&
                                          gmmk_nest_zd_fin_s, gmmk_nest_xd_fin_s, gmmk_nest_qd_fin_s,&
                                          gmmk_nest_fullme_fin_s, &

                                          gmmk_nest_weightm_s, gmmk_nest_weightu_s, &
                                          gmmk_nest_weightv_s, gmmk_nest_weightq_s

      common /nest_n_gmm/ gmmk_nest_u_deb_s , gmmk_nest_v_deb_s , gmmk_nest_t_deb_s ,&
                          gmmk_nest_s_deb_s , gmmk_nest_w_deb_s , gmmk_nest_q_deb_s ,&
                          gmmk_nest_zd_deb_s, gmmk_nest_xd_deb_s, gmmk_nest_qd_deb_s,&
                          gmmk_nest_fullme_deb_s, &
                          
                          gmmk_nest_u_s , gmmk_nest_v_s , gmmk_nest_t_s ,&
                          gmmk_nest_s_s , gmmk_nest_w_s , gmmk_nest_q_s ,&
                          gmmk_nest_zd_s, gmmk_nest_xd_s, gmmk_nest_qd_s,& 
                          gmmk_nest_fullme_s, &

                          gmmk_nest_u_fin_s , gmmk_nest_v_fin_s , gmmk_nest_t_fin_s ,&
                          gmmk_nest_s_fin_s , gmmk_nest_w_fin_s , gmmk_nest_q_fin_s ,&
                          gmmk_nest_zd_fin_s, gmmk_nest_xd_fin_s, gmmk_nest_qd_fin_s,&
                          gmmk_nest_fullme_fin_s, &

                          gmmk_nest_weightm_s, gmmk_nest_weightu_s, &
                          gmmk_nest_weightv_s, gmmk_nest_weightq_s
