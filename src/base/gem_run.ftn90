!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r gem_run - Performs the integration of the model
!
      subroutine gem_run (F_dgtflt_L, F_rstrt_L)
      implicit none
#include <arch_specific.hf>

      logical F_dgtflt_L, F_rstrt_L

!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_dgtflt_L    I         Digital initiatization mode
! F_rstrt_L     O         Is a restart required
!----------------------------------------------------------------

#include <WhiteBoard.hf>
#include "init.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "step.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "grd.cdk"
#include "clim.cdk"
#include "modconst.cdk"

      character*16 datev
      logical bkup_L
      integer last_step,fstep,istep,step0,stepf,upperlimit,istat
      real*8 dayfrac, sec_in_day
      parameter (sec_in_day=86400.0d0)
!
!     ---------------------------------------------------------------
!
      dayfrac = dble(Step_kount) * Cstv_dt_8 / sec_in_day
      call incdatsd (datev,Mod_runstrt_S,dayfrac)

      if (Lun_out.gt.0) write (6,900) datev

      call blocstat (.true.)

                      fstep = Step_total
      if (F_dgtflt_L) fstep = Lctl_step+Init_dfnp-1

      istat= wb_put('model/Init/mode', F_dgtflt_L, WB_REWRITE_MANY)

      last_step  = (Step_kount/Step_rsti)*Step_rsti + &
                    Step_rsti + Step_delay
      upperlimit = min(Step_total,last_step)

      if (F_dgtflt_L) then
         if (last_step.ge.(Lctl_step+Init_halfspan)) last_step= fstep
      else
         last_step = min(Step_total,last_step)
      endif

      step0 = Lctl_step+1
      stepf = last_step

      if ( .not. Rstri_rstn_L ) then
         call out_outdir (Step_kount, upperlimit)
         if (Step_kount.eq.0) then
            call iau_apply2 (Step_kount)
            call out_steps (Lctl_step,Lctl_step)
            if ( Schm_phyms_L ) then
               call pw_shuffle
               call pw_update_GPW
               call pw_update_UV
               call pw_update_T
               call itf_phy_step (0,Lctl_step)
            endif
            call out_dyn (.false., .true.) ! casc output
         endif
         call out_steps (Lctl_step, max(stepf,Lctl_step))
         call out_dyn (.true., .false.) ! regular output
         if ( .not.F_dgtflt_L .or. &
              (Lctl_step.lt.(Lctl_step+Init_halfspan) ) )&
              call out_launchpost2 (.false.,.false.)
      else
         call out_steps (step0, stepf)
      endif

      bkup_L = .false.

      call gemtim4 ( Lun_out, 'STARTING TIME LOOP', .false. )

      do istep = step0, stepf

         call step_update (istep, bkup_L, fstep)

         call out_outdir (Step_kount, upperlimit)

         call pw_shuffle

         call dynstep

         call out_dyn (.false., .true.) ! casc output

         if ( Schm_phyms_L ) call itf_phy_step (Step_kount, Lctl_step)

         call hzd_main

         call iau_apply2 (Step_kount)

         if (Grd_yinyang_L) call yyg_xchng_all

         if ( F_dgtflt_L ) call digflt ! digital filter

         call out_dyn (.true., .false.) ! regular output

         call blocstat (.false.)

         call step_close (Lctl_step, bkup_L, F_dgtflt_L, stepf)

      end do

      call max_rss (' GEMDM',Lun_out.gt.0)

      F_rstrt_L = .false.

      if ((Lctl_step.lt.fstep).or.(Clim_climat_L)) F_rstrt_L = .true.

      if (Lun_out.gt.0) write(Lun_out,4000) Lctl_step

 900  format (/'STARTING THE INTEGRATION WITH THE FOLLOWING DATA: VALID ',a)
 3000 format(/,'THE TIME STEP ',I8,' IS COMPLETED')
 4000 format(/,'END OF THE TIME LOOP (S/R GEM_RUN) AT TIMESTEP',I8, &
      /,'===================================================')
!
!     ---------------------------------------------------------------
!
      return
      end
