!$omp parallel private(o1, o2, o3, o4, a1, a2, a3, a4, b1, b2, b3, b4, c1, c2, c3, c4,  &
!$omp                  d1, d2, d3, d4, p1, p2, p3, p4, rri,rrj,rrk,ra,rb,rc,rd, n,i,j,k,&
!$omp                  ii,jj,kk,iL,idxk, idxjk,zcubic_L,capx,capy,capz,prf1,prf2)&
!$omp          shared (F_mono, F_cub, F_lin, F_min, F_max, F_in, F_x, F_y, F_z,         &
!$omp                  adv_y00_8,adv_x00_8,adv_ovdx_8,adv_ovdy_8,   adv_xbc_8,     adv_ybc_8 ,  &
!$omp                  adv_ovdz_8, adv_lcx,adv_lcy, adv_bsx_8,adv_bsy_8,p_bsz_8, adv_xabcd_8,   &
!$omp                  adv_xbacd_8,adv_xcabd_8,adv_xdabc_8, adv_yabcd_8,adv_ybacd_8,adv_ycabd_8,&
!$omp                  adv_ydabc_8, p_zabcd_8,p_zbacd_8, p_zcabd_8, p_zdabc_8, p_zbc_8, kkmax,  &
!$omp                  F_num, i0, in, j0, jn, k0, F_nk)
!$omp do private(prmin, prmax)

   do k=k0,F_nk
      idxk = (k-1)*adv_lnij
      do j=j0,jn
         idxjk = idxk + ((j-1)*l_ni)
         do i=i0,in
            n = idxjk + i

           rri= F_x(n)
            ii = (rri - adv_x00_8) * adv_ovdx_8
            ii = adv_lcx(ii+1) + 1
            if (rri < adv_bsx_8(ii)) ii = ii - 1
            ii = max(2,min(ii,adv_iimax))

            rrj= F_y(n)
            jj = (rrj - adv_y00_8) * adv_ovdy_8
            jj = adv_lcy(jj+1) + 1
            if (rrj < adv_bsy_8(jj)) jj = jj - 1
            jj = max(G_haloy,min(jj,adv_jjmax))

            rrk= F_z(n)
            kk = (rrk - p_z00_8) * adv_ovdz_8
            kk = p_lcz(kk+1)
            if (rrk < p_bsz_8(kk)) kk = kk - 1
            kk = min(kkmax-1,max(0,kk))

            zcubic_L = (kk > 0) .and. (kk < kkmax-1)


            !- x interpolation
            ra = adv_bsx_8(ii-1)
            rb = adv_bsx_8(ii  )
            rc = adv_bsx_8(ii+1)
            rd = adv_bsx_8(ii+2)
            p1 = triprd(rri,rb,rc,rd)*adv_xabcd_8(ii)
            p2 = triprd(rri,ra,rc,rd)*adv_xbacd_8(ii)
            p3 = triprd(rri,ra,rb,rd)*adv_xcabd_8(ii)
            p4 = triprd(rri,ra,rb,rc)*adv_xdabc_8(ii)

            o2 = (kk-1)*adv_nijag + (jj-adv_int_j_off-1)*adv_nit + (ii-adv_int_i_off)
            o1 = o2-adv_nit
            o3 = o2+adv_nit
            o4 = o3+adv_nit

            if (zcubic_L) then
               a1 = p1 * F_in(o1-1) + p2 * F_in(o1) + p3 * F_in(o1+1) + p4 * F_in(o1+2)
               a2 = p1 * F_in(o2-1) + p2 * F_in(o2) + p3 * F_in(o2+1) + p4 * F_in(o2+2)
               a3 = p1 * F_in(o3-1) + p2 * F_in(o3) + p3 * F_in(o3+1) + p4 * F_in(o3+2)
               a4 = p1 * F_in(o4-1) + p2 * F_in(o4) + p3 * F_in(o4+1) + p4 * F_in(o4+2)
            endif
            
            o1 = o1 + adv_nijag
            o2 = o2 + adv_nijag
            o3 = o3 + adv_nijag
            o4 = o4 + adv_nijag


#ifdef ADV_MONO
               prmax = max(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
               prmin = min(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
#endif



            b1 = p1 * F_in(o1-1) + p2 * F_in(o1) + p3 * F_in(o1+1) + p4 * F_in(o1+2)
            b2 = p1 * F_in(o2-1) + p2 * F_in(o2) + p3 * F_in(o2+1) + p4 * F_in(o2+2)
            b3 = p1 * F_in(o3-1) + p2 * F_in(o3) + p3 * F_in(o3+1) + p4 * F_in(o3+2)
            b4 = p1 * F_in(o4-1) + p2 * F_in(o4) + p3 * F_in(o4+1) + p4 * F_in(o4+2)


            o1 = o1 + adv_nijag
            o2 = o2 + adv_nijag
            o3 = o3 + adv_nijag
            o4 = o4 + adv_nijag



#ifdef ADV_MONO
               prmax = max(prmax,F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
               prmin = min(prmin,F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
#endif
            c1 = p1 * F_in(o1-1) + p2 * F_in(o1) + p3 * F_in(o1+1) + p4 * F_in(o1+2)
            c2 = p1 * F_in(o2-1) + p2 * F_in(o2) + p3 * F_in(o2+1) + p4 * F_in(o2+2)
            c3 = p1 * F_in(o3-1) + p2 * F_in(o3) + p3 * F_in(o3+1) + p4 * F_in(o3+2)
            c4 = p1 * F_in(o4-1) + p2 * F_in(o4) + p3 * F_in(o4+1) + p4 * F_in(o4+2)

            if (zcubic_L) then
               o1 = o1 + adv_nijag
               o2 = o2 + adv_nijag
               o3 = o3 + adv_nijag
               o4 = o4 + adv_nijag

               d1 = p1 * F_in(o1-1) + p2 * F_in(o1) + p3 * F_in(o1+1) + p4 * F_in(o1+2)
               d2 = p1 * F_in(o2-1) + p2 * F_in(o2) + p3 * F_in(o2+1) + p4 * F_in(o2+2)
               d3 = p1 * F_in(o3-1) + p2 * F_in(o3) + p3 * F_in(o3+1) + p4 * F_in(o3+2)
               d4 = p1 * F_in(o4-1) + p2 * F_in(o4) + p3 * F_in(o4+1) + p4 * F_in(o4+2)
            endif


            !- y interpolation
            ra = adv_bsy_8(jj-1)
            rb = adv_bsy_8(jj  )
            rc = adv_bsy_8(jj+1)
            rd = adv_bsy_8(jj+2)
            p1 = triprd(rrj,rb,rc,rd)*adv_yabcd_8(jj)
            p2 = triprd(rrj,ra,rc,rd)*adv_ybacd_8(jj)
            p3 = triprd(rrj,ra,rb,rd)*adv_ycabd_8(jj)
            p4 = triprd(rrj,ra,rb,rc)*adv_ydabc_8(jj)

            b1 = p1 * b1 + p2 * b2 + p3 * b3 + p4 * b4
            c1 = p1 * c1 + p2 * c2 + p3 * c3 + p4 * c4

            !- z interpolation
            if (zcubic_L) then
               a1 = p1 * a1 + p2 * a2 + p3 * a3 + p4 * a4
               d1 = p1 * d1 + p2 * d2 + p3 * d3 + p4 * d4
               ra = p_bsz_8(kk-1)
               rb = p_bsz_8(kk  )
               rc = p_bsz_8(kk+1)
               rd = p_bsz_8(kk+2)
               p1 = triprd(rrk,rb,rc,rd)*p_zabcd_8(kk+1)
               p2 = triprd(rrk,ra,rc,rd)*p_zbacd_8(kk+1)
               p3 = triprd(rrk,ra,rb,rd)*p_zcabd_8(kk+1)
               p4 = triprd(rrk,ra,rb,rc)*p_zdabc_8(kk+1)

               F_cub(n) = p1 * a1 + p2 * b1 + p3 * c1 + p4 * d1
             else
               p3 = (rrk-p_bsz_8(kk))*p_zbc_8(kk+1)
               p2 = 1. - p3
               F_cub(n) = p2 * b1 + p3 * c1               
             endif

#ifdef ADV_CONSERV
            iL = max(1,min(ii,adv_iimax+1)) !As in adv_trilin_ijk
            capx = (rri-adv_bsx_8(iL)) *adv_xbc_8(il) !As in adv_trilin_turbo
            capy = (rrj-adv_bsy_8(jj)) *adv_ybc_8(jj) !As in adv_trilin_turbo
            capz = (rrk-p_bsz_8(kk))*p_zbc_8(kk+1) !As in adv_tricub_lag3d_loop

            prf1 = (1. - capy) * ( (1. - capx) * F_in(o2) + capx * F_in(o2+1) ) + &
                   capy        * ( (1. - capx) * F_in(o3) + capx * F_in(o3+1) )
            prf2 = (1. - capy) * ( (1. - capx) * F_in(o2) + capx * F_in(o2+1) ) + &
                   capy        * ( (1. - capx) * F_in(o3) + capx * F_in(o3+1) )
            F_lin (n) = max((1. - capz) * prf1 + capz * prf2,0.0d0)
#ifdef ADV_MONO
            F_mono(n) = max(prmin , min(prmax,F_cub(n)))
            F_min (n) = prmin
            F_max (n) = prmax
#endif
#else
#ifdef ADV_MONO
            F_cub(n) = max(prmin , min(prmax,F_cub(n)))
#endif
#endif

	  
         enddo 
      enddo 
   enddo 
  
!$omp enddo
!$omp end parallel


