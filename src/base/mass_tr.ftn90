!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/p mass_tr - Evaluate Mass of Tracer. F_tracer is Mixing Ratio if F_mixing_L=T 
!                (otherwise F_tracer is Tracer's Density)

      subroutine mass_tr (F_mass_tracer_8,F_time,F_name_S,F_tracer,F_mixing_L,  &
                          Minx,Maxx,Miny,Maxy,F_nk,k0,F_comment_S,F_reset_RHO_L)
      implicit none

      !Arguments
      !---------
      real*8           , intent(out):: F_mass_tracer_8                    !O, Mass of Tracer 
      integer          , intent(in) :: F_time                             !I, Time 0 or Time 1
      character (len=4), intent(in) :: F_name_S                           !I, Name of Tracer
      logical          , intent(in) :: F_mixing_L                         !I, T if F_tracer is Mixing Ratio
      integer,           intent(in) :: Minx,Maxx,Miny,Maxy                !I, Dimension H
      integer,           intent(in) :: k0                                 !I, scope of operator
      integer,           intent(in) :: F_nk                               !I, number of vertical levels
      character (len=*), intent(in) :: F_comment_S                        !I, Comment (If="", not print is done)  
      logical          , intent(in) :: F_reset_RHO_L                      !I, call get_density if T  
      real, dimension(Minx:Maxx,Miny:Maxy,F_nk),   intent(in) :: F_tracer !I: Current Tracer (Density or Mixing Ratio)  
 
      !@author  Monique Tanguay
      !@revisions
      ! v4_70 - Tanguay,M.        - Initial Version
      ! v4_70 - Qaddouri,A.       - Version for Yin-Yang Grid

!**/
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "dcst.cdk"
#include "ver.cdk"
#include "grd.cdk"
#include "wil_williamson.cdk"
#include "cstv.cdk"

      !----------------------------------------------------------
      integer i,j,k,err
      real*8  l_mass_8,g_mass_8,constant_8
      real, dimension(:,:,:), allocatable, save :: density,mass
      character(len=15) type_S
      character(len= 7) time_S
      character(len= 9) communicate_S
      real*8, parameter :: QUATRO_8 = 4.0
      !----------------------------------------------------------

      if (.not. allocated(density)) allocate(density(Minx:Maxx,Miny:Maxy,F_nk))
      if (.not. allocated(   mass)) allocate(   mass(Minx:Maxx,Miny:Maxy,F_nk))

      if (F_reset_RHO_L) call get_density (density,mass,F_time,Minx,Maxx,Miny,Maxy,F_nk,k0)

      if (.NOT.F_mixing_L.and.F_name_S/='RHO ') density = F_tracer

      !Evaluate Local Integral  
      !-----------------------
      l_mass_8 = 0.0d0

      if (F_mixing_L) then

         do k=k0,F_nk
            do j=1+pil_s,l_nj-pil_n
            do i=1+pil_w,l_ni-pil_e
               l_mass_8 = l_mass_8 + F_tracer(i,j,k) * mass(i,j,k) * Geomg_mask_8(i,j) 
            enddo
            enddo
         enddo

      else

         do k=k0,F_nk
            do j=1+pil_s,l_nj-pil_n
            do i=1+pil_w,l_ni-pil_e
               l_mass_8 = l_mass_8 + density(i,j,k) * Geomg_area_8(i,j) * Ver_dz_8%t(k) * Geomg_mask_8(i,j)
           enddo
           enddo
         enddo

      endif

      communicate_S = "GRID"
      if (Grd_yinyang_L) communicate_S = "MULTIGRID"

      !--------------------------------------------
      !Evaluate Global Integral using MPI_ALLREDUCE
      !--------------------------------------------
      call rpn_comm_ALLREDUCE(l_mass_8,g_mass_8,1,"MPI_DOUBLE_PRECISION","MPI_SUM",communicate_S,err )

      g_mass_8 = g_mass_8 /(QUATRO_8 * Dcst_pi_8)

      if (.NOT.F_mixing_L) type_S = "Mass of Density"
      if (     F_mixing_L) type_S = "Mass of Mixing "

      if( F_time==1) time_S = "TIME T1"
      if (F_time==0) time_S = "TIME T0"

      constant_8 = 0.0d0
      if (F_name_S=='RHO '.and..NOT.Advection_2D_3D_L) constant_8 = - Cstv_pref_8 

      if (Lun_out>0.and.F_comment_S/="") write(Lun_out,1000) 'TRACERS: ',type_S,time_S,g_mass_8 + constant_8,F_name_S,F_comment_S

      F_mass_tracer_8 = g_mass_8 

 1000 format(1X,A9,A15,1X,A7,E20.12,1X,A4,1X,A16)

      return
      end
