!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r gemgrid - grille program
#include <model_macros_f.h>
      subroutine gemgrid
      implicit none
#include <arch_specific.hf>
!
!author V.Lee - Jun. 14, 2011
!
!object
!     to create a file containing all 3 pairs of tic tacs for the
!     GEM grid using functions from GEM
!     to create gfilemap txt file to go with file created by genphysX
!     code derived originally from gengeo/genesis(S. Chamberlain/A. Zadra)
!     Now the program genphysX is maintained by L.Chardon
!
! In order for function geodata to read geophy file, there must be
! the same prefix for both files:
!
! blabla_0000001-0000001 (RPN standard file for geophysical fields)
! blabla_gfilemap.txt    (Text file with coverage info)
!
!     Computes positional parameters (>>=lat ^^=lon)
!
      integer, external :: fnom,fstouv,fstecr,fstfrm,fclos,wkoffit,&
                           grid_nml2,exdb
#include "grd.cdk"
#include "hgc.cdk"
#include <clib_interface.cdk>

      character*120 outfile,gfile,dumc,fn,etk,etk_ext
      logical lam
      integer ni,nila,uout,err,npack,i,j,k

      integer narguments,npos
      parameter(narguments=5)
      character*256 defaut(narguments),liste(narguments),val(narguments)
      DATA LISTE /'splitnml','npex','npey','blocx','blocy'/
      DATA defaut/       '1',   '1',   '1',    '1',    '1'/
      DATA val   /       '0',   '1',   '1',    '1',    '1'/

      integer Ptopo_npex,Ptopo_npey,Ptopo_nblocx,Ptopo_nblocy
      integer itile,jtile,i0,j0,i1,j1,ierx, iery, spil3df
      integer Grd_ip1,Grd_ip2,Grd_ip3,G_ni,G_nj
      real    xlim_1,xlim_n,ylim_1,ylim_n
      real  , dimension(:), allocatable :: xpos, ypos
      real*8, dimension(:), allocatable :: x_8, y_8

      namelist /split3df_out/ G_ni,G_nj,Ptopo_npex,Ptopo_npey,Ptopo_nblocx,&
                              Ptopo_nblocy,xlim_1,xlim_n,ylim_1,ylim_n
!
!----------------------------------------------------------------------
!
      err = exdb ('GEMGRID','4.5.0','NON')

      call ccard(liste,defaut,val,narguments,npos)

      read(val(1),*) spil3df
      read(val(2),*) Ptopo_npex
      read(val(3),*) Ptopo_npey
      read(val(4),*) Ptopo_nblocx
      read(val(5),*) Ptopo_nblocy

      etk = 'PARPOS'
      fn  = 'gem_settings.nml'

      outfile       = 'tape1'
      gfile         = 'gfilemap.txt'
      Grd_yinyang_S = 'YIN'

!     Read grid namelist using grid_nml

 88   if (grid_nml2(fn,lam).lt.0) then
         print *,'STOP: problem with NAMELIST GRID'
         print *,"Use checknml to verify: \'checknml grid\'"
         stop
      endif
      err= grid_nml2('print',lam)

!     Setup before calling e_grid
      Grd_yinyang_L = Grd_typ_S(1:1).eq.'G'.and.Grd_typ_S(2:2).eq.'Y'
      LAM = Grd_typ_S(1:1).eq.'L'.or.Grd_yinyang_L

      allocate (x_8(Grd_ni+1), y_8(Grd_nj), xpos(Grd_ni+1), ypos(Grd_nj))

      call set_gemHgrid3 ( x_8, y_8, Grd_ni, Grd_nj, Grd_dx, Grd_dy,       & 
                           Grd_x0_8, Grd_xl_8, Grd_left,                   &
                           Grd_y0_8, Grd_yl_8, Grd_belo,                   &
                           Grd_nila, Grd_njla, Grd_dxmax, Grd_dymax,       &
                           Grd_yinyang_L, Grd_gauss_L, lam, Grd_uniform_L, &
                           ierx, iery, .true. )

      if (.not.LAM) Grd_ni= Grd_ni + 1

      xpos(1:Grd_ni) = x_8(1:Grd_ni)
      ypos(1:Grd_nj) = y_8(1:Grd_nj)

      call set_igs2 ( Grd_ip1,Grd_ip2, &
                      xpos,ypos,Grd_ni,Grd_nj,&
                      Hgc_ig1ro,Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro, &
                      1,Grd_ni,1,1,Grd_nj,1)

      Grd_ip3= 0

      xlim_1= xpos(1) ; xlim_n= xpos(Grd_ni)
      ylim_1= ypos(1) ; ylim_n= ypos(Grd_nj)
      G_ni= Grd_ni
      G_nj= Grd_nj

      if (spil3df.gt.0) then
         open  (51,file='split3df.nml',access='SEQUENTIAL',form='FORMATTED',iostat=err)
         write (51,nml=split3df_out)
         close (51)
      else

      err = clib_remove(gfile)
      err = clib_remove(outfile)

      uout=0
      if (fnom(uout,outfile,'RND',0).ge.0) then
          err= fstouv (uout, 'RND')
      else
          print *,'problem opening', trim(outfile)
          stop
      endif  

      open(51,file=gfile,access='SEQUENTIAL',form='FORMATTED',iostat=err)

      i0=1
      j0=1
      i1=grd_ni
      j1=grd_nj
      itile=1
      jtile=1

      write(51,777) i0,j0,xpos(i0),xpos(i1),ypos(j0),ypos(j1),i1,j1, &
                                                        itile,jtile
      close (51)

      write(6,*) 'LONGITUDE'
      write(6,778)(i,xpos(i),i=1,grd_ni)
      write(6,*) 'LATITUDE'
      write(6,778)(i,ypos(i),i=1,grd_nj)

 777  format(2i8,4e15.7,2i10,x,2I5)
 778  format(4(i5,e15.7))
  
      if (Grd_yinyang_L) then
         etk_ext=trim(etk)//'_'//trim(Grd_yinyang_S)
      else
         etk_ext=trim(etk)
      endif

      npack = -32

      err= fstecr ( xpos,xpos, npack, uout, 0, 0, 0, grd_ni, 1, 1, &
                    Grd_ip1,Grd_ip2,Grd_ip3,'X','>>',etk_ext,Hgc_gxtyp_s, &
                    Hgc_ig1ro,Hgc_ig2ro,Hgc_ig3ro,Hgc_ig4ro, 5, .true. )
      err= fstecr ( ypos,ypos, npack, uout, 0, 0, 0, 1, grd_nj, 1, &
                    Grd_ip1,Grd_ip2,Grd_ip3,'X','^^',etk_ext,Hgc_gxtyp_s, &
                    Hgc_ig1ro,Hgc_ig2ro,Hgc_ig3ro,Hgc_ig4ro, 5, .true. )
   
      err= fstfrm(uout)
      err= fclos (uout)

      endif

      deallocate (x_8, y_8, xpos, ypos)

      if ((Grd_yinyang_L) .and. (trim(Grd_yinyang_S).eq.'YIN')) then
         outfile       = 'tape2'
         gfile         = 'gfilemap2.txt'
         Grd_yinyang_S = 'YAN'
         goto 88
      endif
!      
!-------------------------------------------------------------------
!
      return
      end
