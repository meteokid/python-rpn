***s/r hzd_solfft_lam_ad - ADJ of hzd_solfft_lam 
*
#include <model_macros_f.h>
*
       subroutine hzd_solfft_lam_ad (F_sol, F_Rhs_8, F_pri_8 ,
     %                        F_a_8, F_c_8, F_deltai_8,
     %             minx1, maxx1, minx2, maxx2, nx1, nx2, nx3, F_pwr,
     %             minx,maxx,miny,maxy,gnk,Gni,nil,njl,nkl,
     %             F_opsxp0_8, F_opsyp0_8,F_cdiff,F_npex,F_npey)
*
#include "impnone.cdk"
*
      integer  minx1, maxx1, minx2, maxx2 , nx1, nx2, nx3, F_pwr,
     $         minx , maxx , miny , maxy  , gnk, Gni,
     $         njl  , nkl  , nil  , F_npex, F_npey
      real*8  F_opsxp0_8(*), F_opsyp0_8(*),F_pri_8,
     $            F_a_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $            F_c_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $       F_deltai_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $       F_Rhs_8(minx:maxx,miny:maxy,gnk)
      real   F_cdiff, F_sol(minx:maxx,miny:maxy,gnk)
*
*author
*     M.Tanguay
*
*revision
* v3_03 - Tanguay M.        - initial MPI version
*
*object
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_sol       I/O      r.h.s. and result of horizontal diffusion
*  F_Rhs_8     I/O      work vector
*
*----------------------------------------------------------------
*
#include "ptopo.cdk"
#include "glb_ld.cdk"
#include "glb_pil.cdk"
*
      real*8   fdg1_8(miny :maxy ,minx1:maxx1,Gni+F_npex  )
      real*8   fwft_8(miny :maxy ,minx1:maxx1,Gni+2+F_npex)
      real*8   fdg2_8(minx1:maxx1,minx2:maxx2,nx3+F_npey  )
      real*8   dn3_8(minx1:maxx1,minx2:maxx2,F_pwr,nx3   )
      real*8   sol_8(minx1:maxx1,minx2:maxx2,F_pwr,nx3   )
      real*8   ZERO_8
      parameter( ZERO_8 = 0.0 )      
      integer dim,o1,o2,i,j,k,m,l_pil_w,l_pil_e
*     __________________________________________________________________
*
*     Zero adjoint variables
*     ----------------------
      do k= 1,Gni+F_npex
      do j= minx1,maxx1
      do i= miny ,maxy
      fdg1_8(i,j,k) = ZERO_8
      end do
      end do
      end do
*
      do k= 1,Gni+2+F_npex
      do j= minx1,maxx1
      do i= miny ,maxy
      fwft_8(i,j,k) = ZERO_8
      end do
      end do
      end do
*
      do k= 1,nx3+F_npey
      do j= minx2,maxx2
      do i= minx1,maxx1
      fdg2_8(i,j,k) = ZERO_8
      end do
      end do
      end do
*
      do m= 1,nx3
      do k= 1,F_pwr
      do j= minx2,maxx2
      do i= minx1,maxx1
      dn3_8(i,j,k,m) = ZERO_8
      sol_8(i,j,k,m) = ZERO_8
      end do
      end do
      end do
      end do
*
*  The I vector lies on the Y processor so, l_pil_w and l_pil_e will
*  represent the pilot region along I
      l_pil_w=0
      l_pil_e=0
      if (l_south) l_pil_w= Lam_pil_w
      if (l_north) l_pil_e= Lam_pil_e
*
* ADJ of
* resolution du systeme blok-tridiagonal
*
* ADJ of
* retour
      do k = gnk,1,-1
      do j = njl-pil_n,1+pil_s,-1
      do i = nil-pil_e,1+pil_w,-1
         F_Rhs_8(i,j,k) = dble(F_sol(i,j,k)) + F_Rhs_8(i,j,k)
         F_sol  (i,j,k) = ZERO_8
      enddo
      enddo
      enddo
*
*     ADJ of    
*     inverse projection ( r = x * w )
      call rpn_comm_transpose( F_Rhs_8,Minx, Maxx, Gni, (Maxy-Miny+1),
     %                              Minx1, Maxx1, gnk, fwft_8, +1, 2 )
*
      do k=Nkl,1,-1
      call qcfft8 ( fwft_8(1+pil_s,k,1+Lam_pil_w),
     %                    (Maxy-Miny+1) * (maxx1-minx1+1), 1,
     %                    (Maxy-Miny+1-pil_s-pil_n) , -1 )
      enddo
*
      call rpn_comm_transpose
     $     ( fwft_8 , Miny, Maxy, nx3, (Maxx1-Minx1+1),
     $               minx2, maxx2,Gni, fdg2_8,+ 2, 2 )
*
      do k = nx1,1,-1
      do i = nx2-l_pil_e,1+l_pil_w,-1
      do j = nx3-Lam_pil_n,1+Lam_pil_s,-1
         sol_8 (k,i,F_pwr,j)= fdg2_8(k,i,j) + sol_8(k,i,F_pwr,j)
         fdg2_8(k,i,j)      = ZERO_8
      enddo
      enddo
      enddo
*
      do j = 1+Lam_pil_s, nx3-1-Lam_pil_n
*
      do k = nx1,1,-1
      do o1= F_pwr,1,-1
      do i = nx2-l_pil_e,1+l_pil_w,-1
            dn3_8(k,i,o1,j)=  sol_8(k,i,o1,j) + dn3_8(k,i,o1,j)
            sol_8(k,i,o1,j)= -sol_8(k,i,o1,j)

      enddo
      enddo
      enddo
*
      do o1= F_pwr,1,-1
      do o2= F_pwr,1,-1
      do k = maxx1,minx1,-1
      do i = maxx2-l_pil_e,minx2+l_pil_w,-1
            sol_8(k,i,o2,j+1)=F_c_8(o1,o2,i,j)*sol_8(k,i,o1,j) + sol_8(k,i,o2,j+1)
      enddo
      enddo
      enddo
      enddo
*
      enddo
*
      do k = nx1,1,-1
      do o1= F_pwr,1,-1
      do i = nx2-l_pil_e,1+l_pil_w,-1
         dn3_8(k,i,o1,nx3-Lam_pil_n) = sol_8(k,i,o1,nx3-Lam_pil_n) + dn3_8(k,i,o1,nx3-Lam_pil_n)
         sol_8(k,i,o1,nx3-Lam_pil_n) = ZERO_8
      enddo
      enddo
      enddo
*
      do k = nx1,1,-1
      do o1= F_pwr,1,-1
      do i = nx2,1,-1
         do j = 1, nx3
C           sol_8(k,i,o1,j)=0.0
            sol_8(k,i,o1,j)=ZERO_8
         enddo
      enddo
      enddo
      enddo
*
* ADJ of
* scale le cote droit pour retour
*
      do j = nx3-Lam_pil_n,1+Lam_pil_s,-1
         do o1=F_pwr,1,-1
         do o2=F_pwr,1,-1
         do k= maxx1,minx1,-1
         do i= maxx2-l_pil_e,minx2+l_pil_w,-1
            sol_8(k,i,o2,j)= F_deltai_8(o1,o2,i,j)*dn3_8(k,i,o1,j) + sol_8(k,i,o2,j)
         enddo
         enddo
         enddo
         enddo
      enddo
*
      do j = nx3,1,-1
         do o1= F_pwr,1,-1
         do k = maxx1,minx1,-1
         do i = maxx2,minx2,-1
            dn3_8(k,i,o1,j) = ZERO_8
         enddo
         enddo
         enddo
      enddo
*
* ADJ of
* aller
*
      do j = nx3-Lam_pil_n,2+Lam_pil_s,-1
         do k= nx1,1,-1
         do o1= F_pwr,1,-1
         do i = nx2-l_pil_e,1+l_pil_w,-1
            dn3_8(k,i,o1,j)=  sol_8(k,i,o1,j) + dn3_8(k,i,o1,j)
            sol_8(k,i,o1,j)= -sol_8(k,i,o1,j)
         enddo
         enddo
         enddo
         do o1= F_pwr,1,-1
         do o2= F_pwr,1,-1
         do k = nx1,1,-1
         do i = maxx2-l_pil_e,minx2+l_pil_w,-1
            sol_8(k,i,o2,j-1) = F_a_8(o1,o2,i,j)*sol_8(k,i,o1,j)
     %                          + sol_8(k,i,o2,j-1)
         enddo
         enddo
         enddo
         enddo
      enddo
*
      do k= nx1,1,-1
      do o1= F_pwr,1,-1
      do i = nx2-l_pil_e,1+l_pil_w,-1
         dn3_8(k,i,o1,1+Lam_pil_s) = sol_8(k,i,o1,1+Lam_pil_s) + dn3_8(k,i,o1,1+Lam_pil_s)
         sol_8(k,i,o1,1+Lam_pil_s) = ZERO_8
      enddo
      enddo
      enddo
*
* ADJ of
* cote droit
*
      do k = nx1,1,-1
      do i = nx2-l_pil_e,1+l_pil_w,-1
      do j = nx3-Lam_pil_n,1+Lam_pil_s,-1
         fdg2_8(k,i,j)   = F_opsyp0_8(nx3+j)*dn3_8(k,i,1,j) + fdg2_8(k,i,j)
         dn3_8 (k,i,1,j) = ZERO_8
      enddo
      enddo
      enddo
*
      do k = minx1,maxx1
      do i = minx2,maxx2
      do o1= 1, F_pwr
      do j = 1, nx3
         sol_8(k,i,o1,j) = ZERO_8
         dn3_8(k,i,o1,j) = ZERO_8
      enddo
      enddo
      enddo
      enddo
*
*
*     ADJ of 
*     projection ( wfft = x transposed * g )
*
      call rpn_comm_transpose
     $     (fwft_8,Miny,Maxy,nx3, (Maxx1-Minx1+1),
     $                  minx2, maxx2, Gni, fdg2_8, -2, 2)
*
      do k = Nkl,1,-1
         do i = Gni-1-Lam_pil_e,0+Lam_pil_w,-1
            do j = (Maxy-Miny+1)-pil_n,1+pil_s,-1
               fwft_8(j,k,i+1) = F_pri_8 * fwft_8(j,k,i+1)
            enddo
         enddo
      enddo
*
      do k=Nkl,1,-1
      call qcfft8(fwft_8(1+pil_s,k,1+Lam_pil_w),
     %            (Maxy-Miny+1)*(maxx1-minx1+1),1,
     %            (Maxy-Miny+1-pil_s-pil_n), +1 )
      enddo
*
      do k=nkl,1,-1
         do j=njl-pil_n,1+pil_s,-1
         do i = Gni-Lam_pil_e,1+Lam_pil_w,-1
            fwft_8(j,k,i) = fdg1_8(j,k,i)
         enddo
         enddo
      enddo
*
      do k= minx1, 0
      do j= miny,maxy
      do i= 1,Gni
         fwft_8(j,k,i) = ZERO_8
      enddo
      enddo
      enddo
*
      do k= Nkl+1, maxx1
      do j= miny,maxy
      do i= 1,Gni
         fwft_8(j,k,i) = ZERO_8
      enddo
      enddo
      enddo
*
      do k = 1, nkl
         do j= miny,pil_s
         do i= 1,Gni
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
         do j= njl+1-pil_n,maxy
         do i= 1,Gni
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
      enddo
      do k = nkl,1,-1
         do j = njl-pil_n,1+pil_s,-1
         do i = Gni-Lam_pil_e,1+Lam_pil_w,-1
            fdg1_8(j,k,i) = F_opsxp0_8(Gni+i)*fdg1_8(j,k,i)
         enddo
         enddo
      enddo
*
      call rpn_comm_transpose( F_Rhs_8, Minx, Maxx, Gni, (Maxy-Miny+1),
     %                                Minx1, Maxx1, gnk, fdg1_8, -1, 2 )
*
      do k = gnk,1,-1
      do j = njl-pil_n,1+pil_s,-1
      do i = nil-pil_e,1+pil_w,-1
         F_sol  (i,j,k) = sngl(((-1)**F_pwr)*dble(F_cdiff)*F_Rhs_8(i,j,k)) + F_sol(i,j,k)
         F_Rhs_8(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
*
      return
      end
