***s/r p_vlsp - allocate and compute latitudinal modulation of 
*                 vertical diffusion coefficient on momentum
*
#include "model_macros_f.h"
*
      subroutine p_vlsp
*
#include "impnone.cdk"
*
*author
*     michel roch - rpn - nov 97
*
*revision
* v2_00 - Patoine A.        - initial MPI version (from setvlsp+vlatspng v1_03)
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*     see id section
*	
*arguments
*     none
*
*implicits
#include "lun.cdk"
#include "glb_ld.cdk"
#include "grd.cdk"
#include "geomg.cdk"
#include "p_geol.cdk"
#include "p_pbl.cdk"
*
**
*
      integer pnerr
*
      real*8 zero, one, two
      parameter( zero = 0.0d0 )
      parameter( one  = 1.0d0 )
      parameter( two  = 2.0d0 )
*
      integer i, j, i_glob, j_glob
*
      real*8  pdc0,   pdsa,   pdca, pds0, pdang,
     %        pdmllm, pdeqlm, pda,  pdb,  pdc,   pdtmp
*
*     ---------------------------------------------------------------
*
      if (lun_out.gt.0) write(lun_out,1000)
*
***********************************************************************
* allocate memory for 2D amplification factor field
***********************************************************************
*	
      call hpalloc(P_pbl_vlsp_, l_ni * l_nj, pnerr, 1)
*
***********************************************************************
* set rotation parameters
***********************************************************************
*
      pds0 = Grd_rot_8(3,3)
*
      if ( abs( (abs(pds0)-one) ).gt.1.0e-10 ) then
*
         if (.not. P_geol_tourn_L ) then
            if (lun_out.gt.0) write( lun_out, 2000 )
            call gem_stop('P_VLSP',-1)
         endif
*
         if (lun_out.gt.0) 
     $        write( lun_out, '(''ROTATION OF AMPLIFICATION FACTOR'')')
         pdang = atan2( Grd_rot_8(2,3), Grd_rot_8(1,3) )
*
      else
*
         if ( P_geol_tourn_L ) then
            if (lun_out.gt.0) write( lun_out, 2000 )
            call gem_stop('P_VLSP',-1)
         endif
*
         if (lun_out.gt.0) 
     $      write( lun_out, '(''NO ROTATION OF AMPLIFICATION FACTOR'')')
         pds0 = sign( one, pds0 )
         pdang = zero
      endif
*
      pdc0 = sqrt( max( zero, one - 1.0d0*pds0 ** 2 ) )
***********************************************************************
* use position l_nj of field P_pbl_vlsp as temporary storage space
***********************************************************************
      do i=1,l_ni
         i_glob=l_i0+i-1
         P_pbl_vlsp(i,l_nj) = cos( G_xg_8(i_glob) - pdang )
      enddo
***********************************************************************
* generate amplification factor on phi grid
***********************************************************************
      pdmllm = - P_pbl_mllat_8
      pdeqlm = - P_pbl_eqlat_8
      pdb    = pdeqlm - pdmllm
*
      do j=1,l_nj
*
         j_glob=l_j0+j-1
*
         pdsa = pds0 * sin( G_yg_8(j_glob) )
         pdca = pdc0 * cos( G_yg_8(j_glob) )
*
         do i=1,l_ni
            pdtmp = asin(max(-1.d0,min(1.d0,pdca*1.0d0*(P_pbl_vlsp(i,l_nj))+pdsa)))
            P_pbl_vlsp(i,j) = P_pbl_valml_8
*
***********************************************************************
* fit a cubic between values P_pbl_valml_8 and P_pbl_valeq_8
*               at latitudes P_pbl_mllat_8 and P_pbl_eqlat_8
***********************************************************************
* southern hemisphere + tropics
***********************************************************************
*
            if((pdtmp .gt. pdmllm).and.(pdtmp .lt. pdeqlm))then
*
              pda = (pdtmp-pdmllm)/pdb
              pdc = (3.-2.*pda)*pda*pda
*
              P_pbl_vlsp(i,j) = P_pbl_valeq_8 * pdc + ( 1. - pdc) 
     $                                        * P_pbl_valml_8
*
            elseif(pdtmp .ge. pdeqlm) then
*
              P_pbl_vlsp(i,j) = P_pbl_valeq_8
*
            endif
*
***********************************************************************
* northern hemisphere: north of P_pbl_eqlat_8
***********************************************************************
*
            if ((pdtmp .gt. P_pbl_eqlat_8) .and.
     $          (pdtmp .lt. P_pbl_mllat_8))then
*
              pda = (pdtmp-P_pbl_eqlat_8)/pdb
              pdc = (3.-2.*pda)*pda*pda
*
              P_pbl_vlsp(i,j) = P_pbl_valml_8 * pdc + (1. - pdc) 
     $                                        * P_pbl_valeq_8
*
            elseif(pdtmp .ge. P_pbl_mllat_8) then
*
              P_pbl_vlsp(i,j) = P_pbl_valml_8
*
            endif
         enddo

      enddo
*
      return
*
 1000 format(
     $  /,'ALLOCATE AND COMPUTE LATITUDINAL MODULATION OF VERTICAL', 
     %  /,'DIFFUSION COEFFICIENT ON MOMENTUM          (S/R P_VLSP)',
     %  /,'=======================================================')
 2000 format(
     %//,'INCONSISTENCY BETWEEN GLTOURN AND THE ROTATION MATRIX STOP IN
     % P_VLSP')
*
*     ---------------------------------------------------------------
*
      end
