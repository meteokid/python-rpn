***s/r iw2rwnd - Image winds to real winds and vice versa
*
#include "model_macros_f.h"
*
      subroutine iw2rwnd ( F_u,  F_v, DIST_DIM, Nk, mode )
      implicit none
*
      integer DIST_DIM, Nk, mode
      real F_u(DIST_SHAPE,Nk), F_v (DIST_SHAPE,Nk)
*
*author
*     Michel Desgagne  - Spring 2008
*
*revision
* v3_31 - Desgagne M.       - initial version 
* v4_04 - Plante A.         - copy from v3_31
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
*
      integer i, j, k
      real*8 c1
*
*     __________________________________________________________________
*
      if (mode.eq.1) then

!$omp parallel private(c1)
!$omp do
      do k=1,G_nk
         do j=1,l_nj
            c1 = Dcst_rayt_8 / geomg_cy_8(j)
            do i=1,l_ni
               F_u(i,j,k) = F_u(i,j,k) * c1
            end do
         end do
         do j=1,l_njv
            c1 = Dcst_rayt_8 / geomg_cy_8(j)
            do i=1,l_ni
               F_v(i,j,k) = F_v(i,j,k) * c1
            end do
         end do
      end do
!$omp enddo
!$omp end parallel

      else

!$omp parallel private(c1)
!$omp do
      do k=1,G_nk
         do j=1,l_nj
            c1 = geomg_cy_8(j) / Dcst_rayt_8
            do i=1,l_ni
               F_u(i,j,k) = F_u(i,j,k) * c1
            end do
         end do
         do j=1,l_nj
            c1 = geomg_cy_8(j) / Dcst_rayt_8
            do i=1,l_ni
               F_v(i,j,k) = F_v(i,j,k) * c1
            end do
         end do
      end do
!$omp enddo
!$omp end parallel
*
      endif
*
*     __________________________________________________________________
*
      return
      end
