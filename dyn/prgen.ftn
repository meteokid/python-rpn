***s/r prgen - interpolation (general) on a given pressure level
*
#include <model_macros_f.h>
*
      subroutine prgen (F_out  , F_in   , F_deriv , F_wlnph,
     %                  F_pres, Nkout, F_cubic_L, DIST_DIM, Nk)
*
#include "impnone.cdk"
*
      integer DIST_DIM,Nk,Nkout
      logical F_cubic_L
      real    F_pres(Nkout), F_out(DIST_SHAPE,Nkout), F_in(DIST_SHAPE,Nk),
     $        F_deriv(DIST_SHAPE,Nk), F_wlnph(DIST_SHAPE,Nk)
*
*author
*     alain patoine - after intfev (efr)
*
*revision
* v2_00 - Lee V.            - initial MPI version (from prgen v1_03)
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_out        O    - output field on the requested pressure level
* F_in         I    - input field on eta levels
* F_deriv      I    - vertical derivative of input field with respect
*                     to log of hydrostatic pressure
* F_wlnph      I    - log of hydrostatic pressure on the eta levels of
*                     the model
* F_pres       I    - pressure level requested
* F_cubic_L    I    - .true.  for cubic interpolation
*                   - .false. for linear interpolation
*
*implicits
#include "glb_ld.cdk"
*
**
      integer i, j, k, kk,pnk, pnkm, pnindex(l_ni,l_nj)
      real    prlprso, prd, pre, prr, prfm0, prfm1, prfm2, prfm3, prfl2
*
*     ---------------------------------------------------------------
*
      do 500 kk=1, Nkout
      prlprso = log(F_pres(kk))
*
      do j= 1, l_nj
      do i= 1, l_ni
         pnindex(i,j) = 0
      enddo
      enddo
*
      do k=1,l_nk
      do j= 1, l_nj
      do i= 1, l_ni
         if ( prlprso .gt. F_wlnph(i,j,k) ) pnindex(i,j) = k
      enddo
      enddo
      enddo
*
      do j= 1, l_nj
      do i= 1, l_ni
*********************************************************************
*                                                                   *
* If:    output pressure   <   hydrostatic pressure on the          *
*                              first level of the model             *
*                                                                   *
* Then:  upward extrapolation                                       *
*                                                                   *
*********************************************************************
         if ( pnindex(i,j) .eq. 0 ) then
*
            prd = prlprso - F_wlnph(i,j,1)
*
            F_out(i,j,kk) = F_in(i,j,1) + prd * F_deriv(i,j,1)
*
*********************************************************************
*                                                                   *
* If:    output pressure   >   hydrostatic pressure on the          *
*                              last level of the model              *
*                                                                   *
* Then:  downward extrapolation                                     *
*                                                                   *
* We put in F_out the value of F_in on the lowest level of the model*
*                                                                   *
*********************************************************************
         else if (pnindex(i,j) .eq. l_nk ) then
*
            F_out(i,j,kk)= F_in(i,j,l_nk)
*********************************************************************
*                                                                   *
* Else, interpolate between appropriate levels.                     *
*                                                                   *
*********************************************************************
*
         else
            pnk = pnindex(i,j) + 1
            pnkm= pnindex(i,j)
*
            prd = F_wlnph(i,j,pnk) - F_wlnph(i,j,pnkm)
*     
            pre = prlprso - 0.5 * (F_wlnph(i,j,pnk) + F_wlnph(i,j,pnkm))
*     
            prfm0 = 0.5 * ( F_in(i,j,pnk) + F_in(i,j,pnkm) )
*     
            prfm1 = ( F_in(i,j,pnk) - F_in(i,j,pnkm) ) / prd
*     
            if ( F_cubic_L ) then
*     
               prr = 0.125 * prd ** 2 - 0.5 * pre ** 2
*     
               prfm2 = ( F_deriv(i,j,pnk) - F_deriv(i,j,pnkm) ) / prd
*     
               prfm3 = F_deriv(i,j,pnk) + F_deriv(i,j,pnkm)
               prfm3 = ( prfm3 - prfm1 - prfm1 ) / ( prd ** 2 )
*     
               prfl2 = prfm2 + 2.0 * pre * prfm3
*     
               F_out(i,j,kk)= prfm0 + pre * prfm1 - prr * prfl2
*     
            else
*     
               F_out(i,j,kk)= prfm0 + pre * prfm1
*
            endif
*
         endif
*
      end do
      end do
*
*     ---------------------------------------------------------------
*
 500  enddo

      return
      end
