***s/r v4d_ctrlcst - Control cost function  
*
#include <model_macros_f.h>
*
      subroutine v4d_ctrlcst ()
*
      use v4d_prof, only: Pr_doobs 
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v3_00 - Ek N./Tanguay M.  - add v4d_cstjok and V4dg_4dvar_L
* v3_01 - Morneau J.        - read obs from file and add TLM in cost function 
*                             for V4dg_sensib_L = .T.
* v3_01 - Tanguay M.        - add V4dg_sgvc_L
*
*object
*  see id section	
*
*arguments
*  none
*
*implicits
#include "v4dg.cdk"
#include "lctl.cdk"
#include "tr3d.cdk"
*
      logical time0_L, time_L
*
      if(V4dg_conf/100.ne.1.or.V4dg_sgvc_L) return 
*
*     ----------------------------------------
*     Sensitivity analysis or Twin experiments
*     ----------------------------------------
      if(.not.V4dg_4dvar_L) then
*
*       Verify if INITIAL TIME requested
*       --------------------------------
        time0_L = Lctl_step.eq.0.and.V4dg_inv.ne.1
*
*       Verify if .NOT.INITIAL time requested
*       -------------------------------------
        time_L = Lctl_step.ne.0.and.mod(Lctl_step,V4dg_stepob).eq.0
*
        if(.not.(time0_L.or.time_L)) return
*
*       Store simulated OBSERVATIONS
*       ----------------------------
        if(V4dg_twin_L.and.V4dg_status.eq.5) then
*
           V4dg_rwob = 1
           call v4d_rwobfr (1)
*
        endif
*       ---------------------------------------
*       Read and Store  OBSERVATIONS if request
*        ---------------------------------------
        if(V4dg_sensib_L.and.V4dg_status.eq.5 ) then 
*
*         Read on random file
*
          call v4d_rdobs
*
*         Store on WA file  
*         ----------------
          V4dg_rwob = 2
          call v4d_rwobfr(1)
*
        endif
*
*       Store contribution to FORCINGS and Evaluate cost function
*       ---------------------------------------------------------
        if(V4dg_status.ne.5) then
*
           call v4d_cststep ()
*
        endif
*
*     -----------------------------
*     4D-Var + exchange with 3D-Var
*     -----------------------------
      elseif(V4dg_4dvar_L) then
*
*       Verify if INITIAL TIME requested
*       --------------------------------
        time0_L = Lctl_step.eq.0.and.Pr_doobs(0).gt.0
*
*       Verify if .NOT.INITIAL time requested
*       -------------------------------------
        time_L = Lctl_step.ne.0.and.Pr_doobs(Lctl_step).gt.0
*
        if(.not.(time0_L.or.time_L)) return
*
*       Write trajectory for conversion
*       -------------------------------
        if(V4dg_status.eq.9.and.V4dg_di_L) then 
*
           V4dg_rwcv = 1
           call v4d_rwconv()
*
*       Read trajectory for conversion
*       ------------------------------
        elseif(V4dg_tl_L) then
*
           V4dg_rwcv = 0
           call v4d_rwconv()
* 
        endif
*
*       Interpolate model states at obs. locations and
*       output the result to be read by 3D-Var
*       ----------------------------------------------
        if((V4dg_status.eq.7.and.V4dg_di_L).or.V4dg_tl_L) call v4d_cstjok() 
*
      endif
*
      return
      end
