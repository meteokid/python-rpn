!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r vtopo_predat - Adjusts boundary conditions to varying orography
*
#include "model_macros_f.h"
*
      subroutine vtopo_predat(nest_t,nest_s,
     $  		      DIST_DIM,xi,xa,yi,ya,nk)
*
      implicit none
      integer :: DIST_DIM,nk,xi,xa,yi,ya
      real, dimension(DIST_SHAPE) :: nest_s
      real, dimension(DIST_SHAPE,nk+1) :: nest_t
*
*author
*     Ron McTaggart-Cowan - RPN - March 2007
*
*revision
* v3_30 - McTaggart-Cowan R.	- initial MPI version
* v4_03 - Lee V.            - Adapt to using new pressure functions
* v4_05 - Lepine M.         - VMM replacement with GMM
*
*object
*     Use the model's current orography field (topo) to re-interpolate
*     the boundary conditions in the vertical.  This is required whenever
*     the orography changes in the model, otherwise the analysis conditions
*     in the blending zone will be invalid.  The current version (v3_30)
*     re-interpolates only the mass field - adjustments to the wind field
*     are assumed to be small since vertical wind shear tends to be locally
*     small.  An extension of this routine would provide full treatment of
*     both the mass and flow fields on appropriately staggered grids.  For
*     additional information, see also 'predat.ftn'.
*
*arguments
*  Name		I/O		Description
*--------------------------------------------------------------------------
* nk		 I	Global z-dimension (G_nk)
* xi		 I	X-dimension computation domain m(i)nimum
* xa		 I	X-dimension computation domain m(a)ximum
* yi		 I	Y-dimension computation domain m(i)nimum
* ya		 I	Y-dimension computation domain m(a)ximum
* nest_q	I/O	Boundary conditions for log pressure (q=ln(p))
* nest_fi	I/O	Boundary conditions for phi (geopotential)
* nest_t	I/O	Boundary conditions for temperature
* nest_pip	 O	Boundary conditions for perturbation pi
* nest_s	 O	Boundary conditions for surface pi (ln (pi_s/z_s))
*--------------------------------------------------------------------------
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "geomg.cdk"
#include "hblen.cdk"
#include "p_geof.cdk"
#include "vtx.cdk"
#include "ver.cdk"
*
      integer  get_px
      external get_px
**
      integer :: k,len_x,len_y,err
      real, allocatable, dimension(:,:,:) :: psrc_3d,lnpsrc_3d,lnpdst_3d,temp_nest_t
      real, allocatable, dimension(:,:) :: ps,temp_ps
*
*     ---------------------------------------------------------------------
*
* Subdomain setup
      len_x = xa - xi + 1; len_y = ya - yi + 1
*
* Retrieve current orography from GMM
      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'vtopo_predat ERROR at gmm_get(topo)'
      gmmstat = gmm_get(gmmk_topo1_s,topo1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'vtopo_predat ERROR at gmm_get(topo1)'
*
* Compute analysis surface pressure for current orography
      allocate(psrc_3d(xi:xa,yi:ya,nk+1),ps(xi:xa,yi:ya),
     $     temp_ps(xi:xa,yi:ya),lnpsrc_3d(xi:xa,yi:ya,nk+1),
     $     lnpdst_3d(xi:xa,yi:ya,nk+1),temp_nest_t(xi:xa,yi:ya,nk+1))
*     Get pressure on all thermo levels including the surface.
         err = get_px(psrc_3d,nest_s(xi:xa,yi:ya),len_x*len_y,
     $     Ver_a_8%t,Ver_b_8%t,nk+1,Ver_code,.false.)
         if (err.lt.0) call handle_error0('vtopo_predat','vtopo_predat:get_px',-1)
c      call glbstat (psrc_3d,'p3d',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)
      call adj_ss2topo(ps,topo(xi:xa,yi:ya),psrc_3d,topo1(xi:xa,yi:ya),
     $     nest_t(xi:xa,yi:ya,:),len_x*len_y,nk+1)
 
c     Les topos valident avec la 3.3.0, le ps valident meteorologiquement.
c      call glbstat (topo(xi:xa,yi:ya),'fisn',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
c      call glbstat (topo1(xi:xa,yi:ya),'fiso',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
c      call glbstat (ps,'psn',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
c      call glbstat (psrc_3d(xi:xa,yi:ya,nk+1),'pso',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
      
      call vslog(lnpsrc_3d,psrc_3d,len_x*len_y*(nk+1))
      call vslog(temp_ps,ps,len_x*len_y)
      temp_ps=temp_ps-Cstv_Zsrf_8
      err = get_px(lnpdst_3d,temp_ps,len_x*len_y,Ver_a_8%t,Ver_b_8%t,nk+1,Ver_code,.true.)
      if (err.lt.0) call handle_error0('vtopo_predat','vtopo_predat:get_px',-1)
c      call glbstat (lnpsrc_3d,'src',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)
c      call glbstat (lnpdst_3d,'dst',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)

*
* Compute temperature profiles for modified orography
*     
      call vte_intvertx(temp_nest_t(xi:xa,yi:ya,:),nest_t(xi:xa,yi:ya,:),
     $     lnpsrc_3d,lnpdst_3d,len_x*len_y,nk+1,nk+1,'VT')
c      call glbstat (temp_nest_t(xi:xa,yi:ya,:),'ttn',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)
c      call glbstat (     nest_t(xi:xa,yi:ya,:),'tto',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)

c      call handle_error0('vtopo_predat','vtopo_predat',-1)

* We do not recompute geopotential since it will be done in rhs.ftn
*
* Update nesting values
c      nest_s(xi:xa,yi:ya) = dlog(exp(nest_q(xi:xa,yi:ya,nk))/Cstv_pisrf_8)
      nest_t(xi:xa,yi:ya,:) = temp_nest_t(xi:xa,yi:ya,:)
*
      deallocate(psrc_3d,ps,temp_ps,lnpsrc_3d,lnpdst_3d,temp_nest_t)
*
* End of subprogram
      return
      end subroutine vtopo_predat
