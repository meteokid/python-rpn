!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r acid_stat_rhs - gblstat for acid test

#include "model_macros_f.h"
*
      subroutine acid_stat_rhs(F_fipt1,F_orhsu,F_ruw1,F_orhst,F_orhsc,F_flag)
*
      implicit none
*
      real F_fipt1(LDIST_SHAPE,0:G_nk+1),F_orhsu(LDIST_SHAPE,G_nk),
     $     F_ruw1(LDIST_SHAPE,G_nk),F_orhst(LDIST_SHAPE,G_nk+1),
     $     F_orhsc(LDIST_SHAPE,G_nk)
*
      integer F_flag
*
*author
*     Andre Plante
*     
*revision
*
*language
*     fortran 77
*
*object
*     glbstat for LAM acid test
*     Note : the acid test is conducted with one CPU.
*
*implicits
#include "lun.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "acid.cdk"
*     
      if(F_flag.eq.1)then
         call glbstat (F_fipt1,'FIP1',LDIST_DIM,G_nk,
     $        1+acid_i0,G_ni-acid_in,
     $        1+acid_j0,G_nj-acid_jn,
     $        1,G_nk)
      elseif(F_flag.eq.2)then
         If (Lun_out.gt.0) write(Lun_out,*) 'After rhsp_2, computed area'
         call glbstat(F_orhsu,'RU0',LDIST_DIM,G_nk,8+acid_i0,
     $        G_ni-8-acid_in,
     $        8+acid_j0,G_nj-7-acid_jn,
     $        1,G_nk)
         call glbstat(F_ruw1,'RUW1',LDIST_DIM,G_nk,
     $        6+acid_i0,G_ni-5-acid_in,
     $        5+acid_j0,G_nj-4-acid_jn,
     $        1,G_nk)
         call glbstat(F_orhst,'RT',LDIST_DIM,G_nk,
     $        8+acid_i0,G_ni-7-acid_in,
     %        8+acid_j0,G_nj-7-acid_jn,
     $        1,G_nk)
*        Rc0 will not match to the piloting run because it includes boundary conditions.
         If (Lun_out.gt.0) 
     $        write(Lun_out,*) 'Rc0 will not match due to boundary conditions:'
         call glbstat (F_orhsc,'Rc0',LDIST_DIM,G_nk,
     $        1+acid_i0,G_ni-acid_in,
     %        1+acid_j0,G_nj-acid_jn,
     $        1,G_nk)
         If (Lun_out.gt.0) 
     $        write(Lun_out,*) 'Rc0 without boundary conditions:'
         call glbstat (F_orhsc,'Rc0',LDIST_DIM,G_nk,
     $        1+acid_i0+pil_w,G_ni-acid_in-pil_e,
     %        1+acid_j0+pil_s,G_nj-acid_jn-pil_n,
     $        1,G_nk)
      else
         print*,'flag=',F_flag
         call handle_error0('acid_stat_rhs','acid_stat_rhs : error with flag',-1)
      endif

      return
      
      end
