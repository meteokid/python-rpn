***s/r ens_bscatter_vort - Calculates non-divergent rotational forcing
*
#include <model_macros_f.h>
      subroutine ens_bscatter_vort
#include "impnone.cdk"
*
*author 
*     Lubos Spacek - rpn - apr 2005
*
*revision
*
*object
*     To calculate the backscattering to U, V, and T that is non-divergent
*     and rotational. Horizontal diffusion tendency and gravity wave drag
*     tendency are used to caracterize the dissipation rate in the model.
*     The superposition dissipation rate field with Markov chain field
*     is filtered using spectral Gaussian filter. Horizontal derivatives
*     of the filtered field multiplied by a constant determine the energy
*     that is returned back to the basic dynamic fileds U, V, and T.
*	
*arguments
*	none
*
*implicits
#include "ptopo.cdk"
#include "glb_ld.cdk"
#include "trp.cdk"
#include "lun.cdk"
#include "ldnh.cdk"
#include "vt1.cdk"
#include "lctl.cdk"
#include "glb_pil.cdk"
#include "geomg.cdk"
#include "dcst.cdk"
#include "ens_param.cdk"

*
*modules
      integer vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
*variables
      integer ix,iy,iz,iz_local,kx,ky,kz
      integer np, rank, ierr, keys(8), npartiel
      integer i, j, k, i0, j0, in, jn, nij, inn, trx
      real    pi, err, deltax, cpdi, hyb_alpt
      real*8  dpi, aaa2
!     Arrays
      real*8, dimension(:),     allocatable  :: g_normu2, g_normv2
      real*8, dimension(:),     allocatable  :: g_normdu2, g_normdv2
      real  , dimension(:,:,:), allocatable  :: dsp_local, fgem
      real  , dimension(:,:,:), allocatable  :: dsp_dif, dsp_gwd
      real  , dimension(:,:,:), allocatable  :: derx_local,dery_local
      real*8, dimension(:,:,:), allocatable  :: psi_local,work_local,ffx_local

************************************************************************

      dpi=4.d0*atan(1.0d0)
      cpdi=1./real(Dcst_cpd_8)
      aaa2= 1.d0/Dcst_rayt_8**2
      deltax=sqrt(((2.0*dpi/real(G_ni))*Dcst_rayt_8)*
     %                ((dpi/real(G_nj))*Dcst_rayt_8))

*
*     Get needed fields in memory
*
      keys(1) = VMM_KEY(ut1)
      keys(2) = VMM_KEY(vt1)
      keys(3) = VMM_KEY(tt1)
      keys(4) = VMM_KEY(difut1)
      keys(5) = VMM_KEY(difvt1)
      keys(6) = VMM_KEY(ugwdt1)
      keys(7) = VMM_KEY(vgwdt1)
      keys(8) = VMM_KEY(mcsph1)
*
      ierr = vmmlod( keys, 8 )
      ierr = VMM_GET_VAR(ut1)
      ierr = VMM_GET_VAR(vt1)
      ierr = VMM_GET_VAR(tt1)
      ierr = VMM_GET_VAR(difut1)
      ierr = VMM_GET_VAR(difvt1)
      ierr = VMM_GET_VAR(ugwdt1)
      ierr = VMM_GET_VAR(vgwdt1)
      ierr = VMM_GET_VAR(mcsph1)
*
*     Markov chain step and if Ens_bc_conf=.false. return
*
      call ens_marfield_cg(mcsph1)
*
      if(.not.Ens_bc_conf)then
        ierr = vmmuld(keys, 8 )
        return
      endif
*
      allocate( g_normu2(l_nk),g_normv2(l_nk))
      allocate( g_normdu2(l_nk),g_normdv2(l_nk))
      allocate( dsp_local(LDIST_SHAPE,l_nk))
      allocate( dsp_dif(LDIST_SHAPE,l_nk))
      allocate( dsp_gwd(LDIST_SHAPE,l_nk))
      allocate( psi_local(ldnh_minx:ldnh_maxx,ldnh_miny:ldnh_maxy,l_nk))
      allocate( work_local(ldnh_miny:ldnh_maxy,Trp_12dmin:Trp_12dmax,
     %                                             G_ni+2+Ptopo_npex))
      allocate( ffx_local(Trp_12dmin:Trp_12dmax,Trp_22min:Trp_22max,
     %                                             G_nj+2+Ptopo_npey))
      allocate( derx_local(LDIST_SHAPE,l_nk))
      allocate( dery_local(LDIST_SHAPE,l_nk))

      call rpn_comm_xch_halo (difut1,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo (difvt1,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo (ugwdt1,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo (vgwdt1,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
 
*
*     Calculate kinetic energy of diffusion tendency
*     ===============================================

      i0 = 1
      in = G_ni
      j0 = 1
      jn = G_nj
      inn= 0
      if (G_lam) then
           inn=1
      endif
*
      if(Ens_bc_stat)then
         call glbstat (ut1   ,'UU',LDIST_DIM,G_nk,i0,in-inn,j0,jn,1,G_nk)
         call glbstat (vt1   ,'VV',LDIST_DIM,G_nk,i0,in,j0,jn-1  ,1,G_nk)
         call glbstat (difut1,'dU',LDIST_DIM,G_nk,i0,in-inn,j0,jn,1,G_nk)
         call glbstat (difvt1,'dV',LDIST_DIM,G_nk,i0,in,j0,jn-1  ,1,G_nk)
         call glbstat (tt1,   'T-',LDIST_DIM,G_nk,i0,in,j0,jn,    1,G_nk)
      endif
*
*     Diffusion backscatter
*
      dsp_dif=0.0
      if(Ens_bc_dif)then
        difut1=ut1*difut1 ; difvt1=vt1*difvt1
        call ens_uvduv_vort (dsp_dif, difut1, difvt1, LDIST_DIM, l_nk )
*
        if(Ens_bc_stat)then
          call glbstat (difut1   ,'UdU',LDIST_DIM,G_nk,i0,in-inn,j0,jn,1,G_nk)
          call glbstat (difvt1   ,'VdV',LDIST_DIM,G_nk,i0,in,j0,jn-1  ,1,G_nk)
          call glbstat (dsp_dif,  'D'  ,LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
        endif
      endif
*
*     Gravity wave drag backscatter
*
      dsp_gwd=0.0
      if(Ens_bc_gwd)then
        difut1=ut1*ugwdt1 ; difvt1=vt1*vgwdt1
        call ens_uvgwd_vort (dsp_gwd, difut1, difvt1, LDIST_DIM, l_nk )
*
        if(Ens_bc_stat)then
          call glbstat (difut1   ,'UGdU',LDIST_DIM,G_nk,i0,in-inn,j0,jn,1,G_nk)
          call glbstat (difvt1   ,'VGdV',LDIST_DIM,G_nk,i0,in,j0,jn-1  ,1,G_nk)
          call glbstat (dsp_gwd,  'DGUV',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
        endif
      endif
*
      dsp_local=dsp_dif+dsp_gwd

*
*     Apply 2D Gaussian filter
*     ===================================================================

      call ens_filter_gauss(dble(Ens_bc_bfc),dble(Ens_bc_lam),dsp_local)

      if(Ens_bc_alpt/=0.0)then
         do k=1,l_nk
            if(geomg_hybm(k)>0.8)then
               hyb_alpt=(-5.*geomg_hybm(k)+5.)*Ens_bc_alpt
            else
               hyb_alpt=Ens_bc_alpt
            endif
            do j=1,l_nj
               do i=1,l_ni
                  tt1(i,j,k)=tt1(i,j,k)+hyb_alpt*cpdi*dsp_local(i,j,k)
     %                                                  *mcsph1(i,j,k)
               enddo
            enddo
         enddo
      endif
*
      do k=1,l_nk
         do j=1,l_nj
            do i=1,l_ni
* avant on a filtre le champ radical D chapeau
c               dsp_local(i,j,k)=dsp_local(i,j,k)*mcsph1(i,j,k)
* maintenant on a filtre le champ D chapeau
               dsp_local(i,j,k)=sqrt(dsp_local(i,j,k))*mcsph1(i,j,k)
            enddo
         enddo
      enddo
*
      if(Ens_bc_stat) then
         call glbstat (dsp_local,'DT',LDIST_DIM,G_nk,i0,in,j0,jn,    1,G_nk)
         call glbstat (tt1,      'T+',LDIST_DIM,G_nk,i0,in,j0,jn,    1,G_nk)
      endif
*
      call rpn_comm_xch_halo (dsp_local,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)

c      call rpn_comm_Barrier("grid", ierr)
      call ens_norm2(ut1,g_normu2)
      call ens_norm2(vt1,g_normv2)
c
      if (Lun_out.gt.0) then
        write( Lun_out,999)
        do k=1,l_nk
           write( Lun_out,1010)k,g_normu2(k),g_normv2(k)
        enddo
      endif

*     Compute gradient of filtered field
*     ==================================
      i0 = 1
      in = l_niu
      j0 = 1
      jn = l_njv

      if ((G_lam).and.(l_west)) i0 = 2
      if (l_south) j0 = 2

      do k=1,l_nk
         do j= j0, jn 
            deltax=Dcst_rayt_8*
     %             sqrt(geomg_hxu_8(1)*geomg_cyv_8(j)*geomg_hy_8(1))
            do i= i0, l_niu
               difut1(i,j,k)= aaa2*
     %                 (dsp_local(i,j,k)-dsp_local(i-1,j,k)) / geomg_hxu_8(i)
               difut1(i,j,k)=Ens_bc_alph*deltax*difut1(i,j,k)
               vt1(i,j,k) = vt1(i,j,k)+difut1(i,j,k)
            enddo
         enddo
*
         do j= j0, l_njv-pil_n
            deltax=Dcst_rayt_8*
     %             sqrt(geomg_hxu_8(1)*geomg_cy_8(j)*geomg_hyv_8(1))
            do i= i0, in 
               difvt1(i,j,k)= aaa2*(dsp_local(i,j+1,k) - dsp_local(i,j,k))
     %                  *geomg_cy2_8(j)/geomg_hsyv_8(j)
               difvt1(i,j,k)= -Ens_bc_alph*deltax*difvt1(i,j,k)
               ut1(i,j,k) = ut1(i,j,k)+difvt1(i,j,k)
            enddo
         enddo
         if (.not.G_lam) then
            if (l_south) then
            do i = i0, in
               difut1(i,1,k)= 0.0
               difvt1(i,1,k)= 0.0
            end do
            endif

            if (l_north) then
            do i = i0, in
               difut1(i,l_nj,k)= 0.0
               difvt1(i,l_nj,k)= 0.0
            end do
            endif
         endif
      enddo
c ici      if (G_lam) then comme dans out_dq
      if(Ens_bc_stat) then
         call glbstat (mcsph1,'MC',1,l_ni,1,l_nj,G_nk,i0,in,    j0,jn,1,G_nk)
         call glbstat (difut1,'Dx',LDIST_DIM,G_nk,i0,in-inn,j0,jn,1,G_nk)
         call glbstat (difvt1,'Dy',LDIST_DIM,G_nk,i0,in,j0,jn-1  ,1,G_nk)
      endif
c
      call ens_norm2(difut1,g_normdu2)
      call ens_norm2(difvt1,g_normdv2)
      call ens_norm2(ut1,g_normu2)
      call ens_norm2(vt1,g_normv2)
c
      if (Lun_out.gt.0) then
        write( Lun_out,1000)
        do k=1,l_nk
           write( Lun_out,1020)k,g_normu2(k),g_normdu2(k),
     %                           g_normv2(k),g_normdv2(k),
     %                  sqrt(g_normdu2(k)**2+g_normdu2(k)**2)
        enddo
      endif
c
      if(Ens_bc_div)then
         call rpn_comm_xch_halo (difut1,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
         call rpn_comm_xch_halo (difvt1,LDIST_DIM,l_ni,l_nj,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)


         i0 = 1
         in = l_niu
         j0 = 1
         jn = l_njv

         if ((G_lam).and.(l_west)) i0 = 2
         if (l_south) j0 = 2
         do k=1,l_nk
            do j= j0, l_njv-pil_n
               do i= i0, in 
                  derx_local(i,j,k)= aaa2*
     %                (difvt1(i,j,k)-difvt1(i-1,j,k)) / geomg_hxu_8(i)

               enddo
            enddo
*
            do j= j0, jn 
               do i= i0, l_niu
                  dery_local(i,j,k)= aaa2*(difut1(i,j,k) - difut1(i,j-1,k))
     %                  *geomg_cy2_8(j)/geomg_hsyv_8(j)- derx_local(i,j,k)
               enddo
            enddo
            if (.not.G_lam) then
               if (l_south) then
                  do i = i0, in
                     difut1(i,1,k)= 0.0
                     difvt1(i,1,k)= 0.0
                     difut1(i,2,k)= 0.0
                     difvt1(i,2,k)= 0.0
                  end do
               endif

               if (l_north) then
                  do i = i0, in
                     difut1(i,l_nj,k)= 0.0
                     difvt1(i,l_nj,k)= 0.0
                  end do
               endif
            endif
         enddo
         if(Ens_bc_stat)then
            call glbstat (dery_local,'DIV',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
         endif
         endif
*
      deallocate(g_normu2, g_normv2)
      deallocate(g_normdu2, g_normdv2)
      deallocate(psi_local,dsp_local,work_local,ffx_local)
      deallocate(derx_local,dery_local)
      deallocate(dsp_dif,dsp_gwd)

      ierr = vmmuld( keys, 8 )
*
 999  format(
     %     /,'L2 NORMS [m/s/day] (S/R ENS_FILTER_VORT)',
     %     /,7x,'LEVEL',10x,'UT1',16x,'VT1',17x,'VT1',16x,'DVT1',
     %     /,90('='))

 1000 format(
     %     /,'L2 NORMS [m/s/day] (S/R ENS_FILTER_VORT)',
     %     /,7x,'LEVEL',10x,'UT1',16x,'DUT1',17x,'VT1',16x,'DVT1',
     %      15x,'DUVT1',
     %     /,110('='))
*
 1010 format('NORMUV1',i3,5(6x,E14.8))
 1020 format('NORMUV2',i3,5(6x,E14.8))
      end subroutine ens_bscatter_vort
