!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r hzd_main - applies horizontal diffusion on a given set of fields
!
#include "model_macros_f.h"
!
      subroutine hzd_main 
!
      implicit none
!
!author
!     Joseph-Pierre Toviessi ( after version v1_03 of dif )
!
!revision
! v2_00 - Desgagne M.       - initial MPI version 
! v2_10 - Qaddouri&Desgagne - higher order diffusion operator
! v2_21 - Desgagne M.       - new call to horwavg
! v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_01 - Toviessi J. P.    - add call hzd_ho_parite
! v3_02 - Desgagne M.       - correction for non-hydrostatic version
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_20 - Tanguay M.        - Introduce Hzd_hzdmain_n_L
! v3_21 - Desgagne M.       - added explicit horiz diff.
! v4_xx - Gravel, S.        - adapt to vertical staggering
! v3_30 - Tanguay M.        - activate Hzd_type_S='HO_EXP' 
! v4_04 - Girard-Plante     - Diffuse only real winds, zdot and theta.
!                           - Move psadj code in new s/r psadj
! v4_05 - Plante A.         - Diffusion of w all the time
! v4_05 - Lepine M.         - VMM replacement with GMM
!object
!	
!arguments
!     none
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "fft.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "schm.cdk"
#include "hspng.cdk"
#include "vspng.cdk"

      logical no_hzd,no_vspng
      integer err,i,j,k
!
!     _________________________________________________________________
!
      no_hzd   = (.not.Hzd_ho_L) .or. (.not.Hzd_hzdmain_0_L)
      no_vspng = Hspng_nj.lt.1.and.Vspng_nk.lt.1

      if (no_hzd .and. no_vspng) return

      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main ERROR at gmm_get(wt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main ERROR at gmm_get(st1)'

      call itf_ens_hzd ( ut1, vt1, tt1, LDIST_DIM, G_nk+1)

      call iw2rwnd ( ut1, vt1, LDIST_DIM, G_nk, 1 )
!
!************************************
!  1. Implicit horizontal diffusion *
!************************************
!
      if ( .not. no_hzd ) then
      call tmg_start0(10,'HZD      ')
!
      if (Hzd_type_S.eq.'HO_EXP') then
         if (.not.G_lam) &
            call handle_error(-1,'hzd_main','ABORT .not.G_lam.and.Hzd_type=HO_EXP')
         if (Lun_debug_L) write(Lun_out,1001) 'hzd_exhrdif'
         call hzd_exhrdif ( ut1, vt1, zdt1, wt1, tt1, st1, LDIST_DIM, G_nk)
      else
         if (Fft_fast_L) then
!           use FFT in diffusion-solver
            if (G_lam) then
               if (Lun_debug_L) write(Lun_out,1001) 'hzd_hof_lam'
               call hzd_hof_lam  ( ut1, vt1, zdt1, wt1, tt1, st1, LDIST_DIM, G_nk)
            else
               if (Lun_debug_L) write(Lun_out,1001) 'hzd_hof'
               call hzd_hof      ( ut1, vt1, zdt1, wt1, tt1, st1, LDIST_DIM, G_nk)               
            endif
         else
!           use MXMA in diffusion-solver
            if ( .not. Eigv_parity_L) then
               if (Lun_debug_L) write(Lun_out,1001) 'hzd_ho'
               call hzd_ho       ( ut1, vt1, zdt1, wt1, tt1, st1, LDIST_DIM, G_nk)
            else
               if (Lun_debug_L) write(Lun_out,1001) 'hzd_ho_parite'
               call hzd_ho_parite( ut1, vt1, zdt1, wt1, tt1, st1, LDIST_DIM, G_nk)
            endif
         endif
!     
      endif
      call tmg_stop0(10)
      endif
!     
      if ( .not. no_vspng ) then
         if (Lun_debug_L) write(Lun_out,1002)
         call tmg_start0 (11,'VSPNG    ')
         if (G_lam) then
            call vspng_drv_lam (ut1,vt1,zdt1,wt1,tt1,LDIST_DIM,G_nk )
         else
            call vspng_drv (ut1,vt1,zdt1,wt1,tt1,LDIST_DIM,G_nk)
            call hspng_drv (ut1,vt1,zdt1,wt1,LDIST_DIM,G_nk)
         endif
         call tmg_stop0  (11)
      endif

      call iw2rwnd ( ut1, vt1, LDIST_DIM, G_nk, 2 )
!
      call psadj ()
!
      call itf_ens_hzd ( ut1, vt1, tt1, LDIST_DIM, G_nk+1 )
!
 1001 format(/,3X,'HORIZONTAL DIFFUSION REQUIRED: ',a)
 1002 format(/,3X,'VERTICAL SPONGE REQUIRED: ')
!
!     _________________________________________________________________
!
      return
      end
