***s/r e_premoy - calculate the projector of the constant
*               mode and its amplitude
*
      subroutine e_premoy( frnor, frpmoy, frh, frlong, ftcas, fnn )
*
*implicits
#include "impnone.cdk"
*
      integer      fnn
      real*8       frnor, frpmoy(fnn), frh(fnn), frlong
      character*1, ftcas
*
      integer i
*
*author
*   jean cote - 1990
*
*revision
* v0_1  - alain patoine          - doctor2 and comments
*
*object
*         see above ID
*
*arguments
*______________________________________________________________________
*                    |                                                 |
* NAME               | DESCRIPTION                                     |
*--------------------|-------------------------------------------------|
* frnor  (output)    | normalized constant mode                        |
* frpmoy (output)    | projector of the constant mode                  |
* frh    (input)     | distance between grid points                    |
* frlong (in/out)    | .gt. 0.0: length of domain                      |
*                    | .le. 0.0: we calculate the length of domain     |
* ftcas  (input)     | 'P'eriodique, 'D'irichlet or 'N'eumann          |
* fnn    (input)     | number of grid points                           |
* ---------------------------------------------------------------------
*
*modules
      integer j
*
**
      if ( frlong.le.0.0 ) then
*
                             i = fnn - 1
         if ( ftcas.eq.'P' ) i = fnn
         frnor = 0.
         do j=1,i
            frnor = frnor + frh(j)
         end do
c         frnor = ssum( i, frh, 1 )
*
      else
*
         frnor = frlong
*
      endif
*
      if ( ftcas.ne.'D' ) then
*
         frnor = 1.0/sqrt(frnor)
*
         if ( ftcas.eq.'P' ) then
            frpmoy(1) = ( 0.5 * ( frh(fnn) + frh(1) ) ) * frnor
         else
            frpmoy(1) = ( 0.5 * frh(1) ) * frnor
         endif
*
         do i=2,fnn-1
            frpmoy(i) = ( 0.5 * ( frh(i-1) + frh(i) ) ) * frnor
         enddo
*
         if ( ftcas.eq.'P' ) then
            frpmoy(fnn) = ( 0.5 * ( frh(fnn-1) + frh(fnn) ) ) * frnor
         else
            frpmoy(fnn) = ( 0.5 * frh(fnn-1) ) * frnor
         endif
*
      endif
      return
      end
