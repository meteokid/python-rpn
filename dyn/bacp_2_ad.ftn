***s/r  bacp_2_ad - ADJ of bacp_2_tl 
*
#include <model_macros_f.h>
*
      subroutine bacp_2_ad
     $                  ( F_itr , F_itnlh, F_st0  ,  F_pipt0,
     $                    F_qt0 , F_fit0 , F_fipt0, F_fis   , F_tt0  ,
     $                    F_tpt0, F_tplt0, F_ut0  , F_vt0   , F_psdt0,
     $                    F_tdt0, F_qpt0 , F_wt0  ,
     $                    F_mut0, F_multx, F_gptx , F_gxtx  , 
     $                    F_ru  , F_rv   , F_rth  , F_r3    , F_r3p  ,
     $                    F_rvv , F_rcn  , F_nu   , F_nv    ,
     $                    F_nth , F_n3   , F_n3p  ,
     $                    F_ncn , F_wijk0,F_wijk1 ,
*
     $                                     F_st0m , F_pipt0m,
     $                    F_qt0m,          F_fipt0m,
     $                            F_tplt0m,
     $                                     F_gptxm, F_gxtxm ,
     $                                     F_rthm ,
     $                    F_nthm,
     $                    F_wijk0m,F_wijk1m,
*
     $                                     DIST_DIM, Nk )
*
#include "impnone.cdk"
*
      integer  F_itr, F_itnlh, DIST_DIM, Nk 
      real     F_st0  (DIST_SHAPE)    ,
     %         F_pipt0(DIST_SHAPE,Nk) ,  F_qt0  (DIST_SHAPE,Nk) ,
     %         F_fit0 (DIST_SHAPE,Nk) ,  F_fipt0(DIST_SHAPE,Nk) ,
     %         F_fis  (DIST_SHAPE)    ,  F_tt0  (DIST_SHAPE,Nk) ,
     %         F_tpt0 (DIST_SHAPE,Nk) ,  F_tplt0(DIST_SHAPE,Nk) ,
     %         F_ut0  (DIST_SHAPE,Nk) ,  F_vt0  (DIST_SHAPE,Nk) ,
     %         F_psdt0(DIST_SHAPE,Nk) ,  F_tdt0 (DIST_SHAPE,Nk) ,
     %         F_qpt0 (DIST_SHAPE,Nk) ,  F_wt0  (DIST_SHAPE,Nk) ,
     %         F_mut0 (DIST_SHAPE,Nk) ,  F_multx(DIST_SHAPE,Nk) ,
     %         F_gptx (DIST_SHAPE,Nk) ,  F_gxtx (DIST_SHAPE,Nk) ,
     %         F_ru   (DIST_SHAPE,Nk) ,  F_rv   (DIST_SHAPE,Nk) ,
     %         F_rcn  (DIST_SHAPE,Nk) ,  F_rth  (DIST_SHAPE,Nk) ,
     %         F_rvv  (DIST_SHAPE,Nk) ,  F_nth  (DIST_SHAPE,Nk) ,
     %         F_r3   (DIST_SHAPE,Nk) ,  F_r3p  (DIST_SHAPE,Nk) ,
     %         F_nu   (DIST_SHAPE,Nk) ,  F_nv   (DIST_SHAPE,Nk) ,
     %         F_n3   (DIST_SHAPE,Nk) ,  F_n3p  (DIST_SHAPE,Nk) ,
     %         F_ncn  (DIST_SHAPE,Nk) ,
     %         F_wijk0(DIST_SHAPE,Nk) ,  F_wijk1(DIST_SHAPE,Nk)
*
      real     F_st0m  (DIST_SHAPE)   , 
     %         F_pipt0m(DIST_SHAPE,Nk),  F_qt0m  (DIST_SHAPE,Nk) ,
     %                                   F_fipt0m(DIST_SHAPE,Nk) ,
     %                                   F_tplt0m(DIST_SHAPE,Nk) , 
     %                                   F_rthm  (DIST_SHAPE,Nk) , 
     %                                   F_nthm  (DIST_SHAPE,Nk) , 
     %         F_gptxm (DIST_SHAPE,Nk),  F_gxtxm (DIST_SHAPE,Nk) , 
     %         F_wijk0m(DIST_SHAPE,Nk),  F_wijk1m(DIST_SHAPE,Nk)
*
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - remove pi' at the top (F_pptt0)
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version 
*                           - adapt for tracers in tr3d  
* v3_00 - Tanguay M.        - adapt to restructured bacp_2 
*
*object
*     see id section 
*     -------------------------------------------
*     REMARK: INPUT TRAJ: F_gptxm, F_rthm, F_nthm  
*     -------------------------------------------
*
*arguments
*     see documentation of appropriate comdecks 
*
*implicits
#include "glb_ld.cdk"
#include "orh.cdk"
#include "cori.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "ptopo.cdk"
*
      integer i, j, k, i0, j0, in, jn
      real*8  ZERO_8, ONE_8, TWO_8, HALF_8, QUARTER_8, gamma_8 
      real*8  aaa_8, bbb_8, ddd_8, a1_8, xxx_8, yyy_8, pd2_8
      real*8  xxx_m_8, yyy_m_8, pd2_m_8
      parameter( ZERO_8=0.0, ONE_8=1.0, TWO_8=2.0, HALF_8=.5, QUARTER_8=.25 )
*
*     ______________________________________________________
*
      if(.not. Schm_hydro_L) call gefstop('bacp_2_ad')
      if(      G_lam       ) call gefstop('bacp_2_ad')
*     ______________________________________________________
*
*     ----------------------------
*     Zero adjoint local variables
*     ----------------------------
      xxx_8 = ZERO_8 
      yyy_8 = ZERO_8 
*
*     ---------------------------
*     START TRAJECTORY EVALUATION
*     ---------------------------
*
*     Constants for nonhydro distortion
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      gamma_8 = ONE_8 
*
      i0 = 1+pil_w
      in = l_ni-pil_e
      j0 = 1+pil_s
      jn = l_nj-pil_n
*
********************************************
*  2. Calculate s, pi'lin, pi', q and phi' *
********************************************

*     Calculate s 
*     ~~~~~~~~~~~
      bbb_8 = Geomg_z_8(l_nk)/( Dcst_rgasd_8*Cstv_tstr_8 )

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do j= j0, jn
      do i= i0, in
*
*        TRAJECTORY
*        ----------
         F_st0m(i,j)= bbb_8*F_gptxm(i,j,l_nk)/Geomg_pib(l_nk)
*
      end do
      end do
*
*     Compute pi'lin (F_wijk0), pi', q and phi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 100 k=1,l_nk 

         if (k.eq.1) then

*        Impose the boundary conditions 
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             do j= j0, jn
             do i= i0, in
*
*               TRAJECTORY
*               ----------
                F_pipt0m(i,j,1) = Geomg_pib(1) *(exp(F_st0m(i,j))-ONE_8)
                F_qt0m  (i,j,1) = log( Geomg_z_8(1) + F_pipt0m(i,j,1) )
                F_fipt0m(i,j,1) = F_gptxm (i,j,1)
                F_gxtxm (i,j,1) = 0.
*
             end do
             end do
         else
             bbb_8 = Dcst_rgasd_8*Cstv_tstr_8/Geomg_z_8(k) 
             do j= j0, jn
             do i= i0, in
*
*               TRAJECTORY
*               ----------
                F_wijk0m(i,j,k)= Geomg_pib(k) * F_st0m(i,j)
                F_pipt0m(i,j,k)= Geomg_pib(k)*(exp(F_st0m(i,j))-ONE_8)
                  F_qt0m(i,j,k)= log( Geomg_z_8(k) + F_pipt0m(i,j,k) )
                F_fipt0m(i,j,k)= F_gptxm(i,j,k) - bbb_8*F_wijk0m(i,j,k)
*
             end do
             end do
*
         endif
         if (k.eq.l_nk) then
             do j= j0, jn
             do i= i0, in
*
*               TRAJECTORY
*               ----------
                F_fipt0m(i,j,l_nk) = ZERO_8 
*               
             end do
             end do
         endif

*******************************
*  3. Retrieve the variable X * 
*******************************

*     Compute term {1} (F_wijk1) without vertical staggering 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0, in
*
*           TRAJECTORY
*           ----------
            F_wijk1m(i,j,k) = F_nthm(i,j,k) - F_rthm(i,j,k) 
*
         end do
         end do

         aaa_8 = gamma_8/Dcst_cappa_8*Geomg_z_8(k) 
         do j= j0, jn
         do i= i0, in
*
*           TRAJECTORY
*           ----------
            F_wijk1m(i,j,k) = aaa_8*F_wijk1m(i,j,k) 
*
         end do
         end do

 100  continue

      aaa_8 =  gamma_8/( Dcst_cappa_8*Cstv_tau_8*Dcst_rgasd_8*Cstv_tstr_8 )

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do j= j0, jn
*
         do k=1,l_nk-1 
         a1_8=aaa_8*QUARTER_8*(Geomg_z_8(k)+Geomg_z_8(k+1))**2/Geomg_hz_8(k) 
         do i= i0, in
*
*           TRAJECTORY
*           ----------
            F_wijk1m(i,j,k) = HALF_8*( F_wijk1m(i,j,k+1) + F_wijk1m(i,j,k) )
     %                        - a1_8*( F_gptxm (i,j,k+1) - F_gptxm (i,j,k) )
*
         end do
         end do

*        Compute the desired variable X 
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do k=1,l_nk-1 
         do i= i0, in
*
*           TRAJECTORY
*           ----------
            F_gxtxm(i,j,k+1) = - F_gxtxm(i,j,k) + TWO_8*F_wijk1m(i,j,k) 
*
         end do
         end do
      end do

**********************************************************
*  4. Calculate vertical velocity & nonhydrostatic index * 
**********************************************************
      ddd_8 = Cstv_tau_8*Cstv_tstr_8

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 300 k=1,l_nk 

**********************************************
*  5. Calculate the temperature perturbation * 
**********************************************
*     Calculate T'lin and prepare {$} (F_wijk1) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         a1_8 = Dcst_cappa_8/Geomg_z_8(k) 
         do j= j0, jn
         do i= i0, in
*
*           TRAJECTORY 
*           ----------
            F_tplt0m(i,j,k) = ddd_8*(F_rthm(i,j,k) - F_nthm(i,j,k) +
     $                        a1_8*F_gxtxm(i,j,k))
            F_wijk1m(i,j,k) = - F_st0m(i,j)
*
         end do
         end do


*     Calculate T'
*     ~~~~~~~~~~~~
C        do j= j0, jn
C        do i= i0, in
*
*        TRAJECTORY
*        ----------
C        F_wijk0m(i,j,k)=1.0 / ( 1.0 +
C    %              Geomg_dpib(k) * (exp(F_st0m(i,j))-1.) )
C        F_wijk1m(i,j,k)= F_st0m(i,j) * Geomg_dpib(k)
C        pd2_m_8 = Geomg_pib(k) * F_st0m(i,j) / Geomg_z_8(k)
C        xxx_m_8 = (1. + F_pipt0m(i,j,k)/Geomg_z_8(k)) * F_wijk0m(i,j,k)
C        yyy_m_8 = F_tplt0m(i,j,k) - Cstv_tstr_8 * (( pd2_m_8 -
C    %                  F_wijk1m(i,j,k)) -1. )
C        F_tpt0m(i,j,k) =  xxx_m_8*yyy_m_8 - Cstv_tstr_8
*
C        end do
C        end do
 300  continue

*************************************************************
*  $. Final back substitution after the nonlinear iteration * 
*************************************************************

C     if ( F_itr .lt. F_itnlh ) then
C        return 
C     endif
*
*     -------------------------
*     END TRAJECTORY EVALUATION
*     -------------------------
*
*     -------------------------
*     START ADJOINT CALCULATION 
*     -------------------------
*************************************************************
*     ADJ of                                                *
*  $. Final back substitution after the nonlinear iteration *
*************************************************************
*
      if ( F_itr .ge. F_itnlh ) then
*
      aaa_8 = ONE_8/Dcst_rayt_8**2  
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 700 k=l_nk,1,-1
*
*     ADJ of
*     Compute phi and T
*     ~~~~~~~~~~~~~~~~~
      do j= j0, jn
      do i= i0, in
          F_tpt0 (i,j,k) = F_tt0 (i,j,k) + F_tpt0 (i,j,k)
          F_tt0  (i,j,k) = ZERO_8 
          F_fipt0(i,j,k) = F_fit0(i,j,k) + F_fipt0(i,j,k)
          F_fit0 (i,j,k) = ZERO_8 
      end do
      end do
*
*     ADJ of
*     Compute total divergence
*     ~~~~~~~~~~~~~~~~~~~~~~~~
      do j= j0, jn
      do i= i0, in
         F_rcn(i,j,k) =   F_tdt0(i,j,k)            + F_rcn(i,j,k)
         F_ncn(i,j,k) = - F_tdt0(i,j,k)            + F_ncn(i,j,k)
         F_st0(i,j)   = -
     %                   (Geomg_dpib(k)*F_tdt0(i,j,k))/Cstv_tau_8
     %                                             + F_st0(i,j)
         F_tdt0(i,j,k)= ZERO_8 
      end do
      end do
*
*     ADJ of
*     Compute pi*-dot
*     ~~~~~~~~~~~~~~~
      if ( (k.eq.1) .or. (k.eq.l_nk) ) then
         do j= j0, jn
         do i= i0, in
            F_psdt0(i,j,k) = 0.
         end do
         end do
      else
         do j= j0, jn
         do i= i0, in
            F_gxtx (i,j,k) =                 F_psdt0(i,j,k)   + F_gxtx(i,j,k)
            F_st0  (i,j)   = - (Geomg_pib(k)*F_psdt0(i,j,k))
     %                       /Cstv_tau_8                      + F_st0 (i,j)
            F_psdt0(i,j,k) = ZERO_8 
         end do
         end do
      endif
*
         if (.not.Cori_cornl_L) then
*     ADJ of 
*     Compute gradient of P and hence U & V
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= l_njv-pil_n, j0, -1 
      do i= i0, in
         F_rv  (i,j,k)   = Cstv_tau_8*( F_vt0(i,j,k) ) 
     $                     + F_rv  (i,j,k)
         F_nv  (i,j,k)   = Cstv_tau_8*(-F_vt0(i,j,k) ) 
     $                     + F_nv  (i,j,k)
         F_gptx(i,j+1,k) = Cstv_tau_8*( - aaa_8*(  F_vt0(i,j,k))*geomg_cyv2_8(j)/geomg_hsy_8(j) )
     $                     + F_gptx(i,j+1,k)
         F_gptx(i,j,k)   = Cstv_tau_8*( - aaa_8*(- F_vt0(i,j,k))*geomg_cyv2_8(j)/geomg_hsy_8(j) )
     $                     + F_gptx(i,j,k)
         F_vt0 (i,j,k)   = ZERO_8 
      end do
      end do
*
      do j= j0, jn
      do i= l_niu-pil_e, i0, -1 
         F_ru  (i,j,k)   = Cstv_tau_8*( F_ut0(i,j,k) )
     $                     + F_ru  (i,j,k)
         F_nu  (i,j,k)   = Cstv_tau_8*(-F_ut0(i,j,k) ) 
     $                     + F_nu  (i,j,k)
         F_gptx(i+1,j,k) = Cstv_tau_8*( - aaa_8*( F_ut0(i,j,k)) / geomg_hx_8(i) )
     $                     + F_gptx(i+1,j,k)
         F_gptx(i,j,k)   = Cstv_tau_8*( - aaa_8*(-F_ut0(i,j,k)) / geomg_hx_8(i) )
     $                     + F_gptx(i,j,k)
         F_ut0 (i,j,k)   = ZERO_8 
      end do
      end do
         endif
*
700   continue
*
      if (.not.Cori_cornl_L) then
*
*PDIR SERIAL
      call rpn_comm_adj_halo( F_gptx, LDIST_DIM,l_ni,l_nj,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*PDIR ENDSERIAL
*
*     Zero F_gptx halo
*     ----------------
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,G_nk
         do j=l_miny,0
         do i=l_minx,l_maxx
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
         do j=l_nj+1,l_maxy
         do i=l_minx,l_maxx
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_minx,0
         do j=l_miny,l_maxy
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_ni+1,l_maxx
         do j=l_miny,l_maxy
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
      end do
*
      endif
*
      endif
*
      if (Cori_cornl_L) then
*
      aaa_8 = ONE_8/Dcst_rayt_8**2

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 600 k=1,l_nk

*     Compute gradient of P and hence U & V
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
      do j= l_njv-pil_n, j0, -1 
      do i= i0, in
*
*     ADJ 
*     ---
      F_rv  (i,j,  k)= Cstv_tau_8*(          F_vt0(i,j,k) ) + F_rv  (i,j,  k)
      F_nv  (i,j,  k)= Cstv_tau_8*(         -F_vt0(i,j,k) ) + F_nv  (i,j,  k)
      F_gptx(i,j+1,k)= Cstv_tau_8*(- aaa_8*( F_vt0(i,j,k) )
     $                 *geomg_cyv2_8(j)/geomg_hsy_8(j)  )   + F_gptx(i,j+1,k) 
      F_gptx(i,j,  k)= Cstv_tau_8*(- aaa_8*(-F_vt0(i,j,k) )
     $                 *geomg_cyv2_8(j)/geomg_hsy_8(j)  )   + F_gptx(i,j,  k)
      F_vt0 (i,j,k)  = ZERO_8
      end do
      end do
*
      do j= j0, jn
      do i= l_niu-pil_e, i0, -1 
*
*     ADJ 
*     ---
      F_ru  (i,  j,k)= Cstv_tau_8*(          F_ut0(i,j,k) ) + F_ru  (i,  j,k)
      F_nu  (i,  j,k)= Cstv_tau_8*(         -F_ut0(i,j,k) ) + F_nu  (i,  j,k)
      F_gptx(i+1,j,k)= Cstv_tau_8*(- aaa_8*( F_ut0(i,j,k) )
     $                 /geomg_hx_8(i)                   )   + F_gptx(i+1,j,k)
      F_gptx(i,  j,k)= Cstv_tau_8*(- aaa_8*(-F_ut0(i,j,k) )
     $                 / geomg_hx_8(i)                  )   + F_gptx(i,  j,k)
      F_ut0 (i,j,k)  = ZERO_8
      end do
      end do
 600  continue
*
*PDIR SERIAL
      call rpn_comm_adj_halo( F_gptx, LDIST_DIM,l_ni,l_nj,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*PDIR ENDSERIAL
*
*     Zero F_gptx halo
*     ----------------
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,G_nk
         do j=l_miny,0
         do i=l_minx,l_maxx
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
         do j=l_nj+1,l_maxy
         do i=l_minx,l_maxx
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_minx,0
         do j=l_miny,l_maxy
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_ni+1,l_maxx
         do j=l_miny,l_maxy
            F_gptx(i,j,k) = ZERO_8 
         end do
         end do
      end do
*
      endif
*
      ddd_8 = Cstv_tau_8*Cstv_tstr_8
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 301 k=l_nk,1,-1
*
**********************************************
*     ADJ of                                 *
*  5. Calculate the temperature perturbation *
**********************************************
*
*     ADJ of
*     Calculate T'
*     ~~~~~~~~~~~~
         do j= j0, jn
*        ----------------------------------------
*        DO LOOP ADAPTED TO RESTORE VECTORIZATION 
*        ----------------------------------------
         do i= i0, in
*
*        TRAJECTORY
*        ----------
         F_wijk0m(i,j,k)=1.0 / ( 1.0 +
     %              Geomg_dpib(k) * (exp(F_st0m(i,j))-1.) )
         F_wijk1m(i,j,k)= F_st0m(i,j) * Geomg_dpib(k)
         pd2_m_8 = Geomg_pib(k) * F_st0m(i,j) / Geomg_z_8(k)
         xxx_m_8 = (1. + F_pipt0m(i,j,k)/Geomg_z_8(k)) * F_wijk0m(i,j,k)
         yyy_m_8 = F_tplt0m(i,j,k) - Cstv_tstr_8 * (( pd2_m_8 -
     %                  F_wijk1m(i,j,k)) -1. )
*
*        ADJ 
*        ---
         yyy_8          =        xxx_m_8 * F_tpt0(i,j,k)  
         xxx_8          =  F_tpt0(i,j,k) * yyy_m_8        
         F_tpt0 (i,j,k) = ZERO_8  
*
         F_tplt0(i,j,k) =                     yyy_8   + F_tplt0(i,j,k)
         pd2_8          = - Cstv_tstr_8 * ((  yyy_8))  
         F_wijk1(i,j,k) = - Cstv_tstr_8 * ((- yyy_8)) + F_wijk1(i,j,k)
*
         F_pipt0(i,j,k) = (               xxx_8/Geomg_z_8(k)) * F_wijk0m(i,j,k)
     %                    + F_pipt0 (i,j,k)
         F_wijk0(i,j,k) = (1. + F_pipt0m(i,j,k)/Geomg_z_8(k)) * xxx_8
     %                    + F_wijk0 (i,j,k)
*
         F_st0  (i,j)   = Geomg_pib(k) * pd2_8 / Geomg_z_8(k) + F_st0(i,j)
*
         F_st0  (i,j)   = F_wijk1(i,j,k) * Geomg_dpib(k)      + F_st0(i,j)
         F_wijk1(i,j,k) = ZERO_8
*
         F_st0(i,j)     = -(Geomg_dpib(k) *(F_wijk0(i,j,k)*exp(F_st0m(i,j)))) / ( 1.0 +
     %                      Geomg_dpib(k) *(exp(F_st0m(i,j))-1.) )**2 + F_st0(i,j)
         F_wijk0(i,j,k) = ZERO_8
*
         end do
         end do
*
*     ADJ of
*     Calculate T'lin and prepare {$} (F_wijk1)
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         a1_8 = Dcst_cappa_8/Geomg_z_8(k)
         do j= j0, jn
         do i= i0, in
*
*        ADJ 
*        ---
         F_st0  (i,j)   = - F_wijk1(i,j,k) + F_st0(i,j)
         F_wijk1(i,j,k) = ZERO_8 
*
         F_rth  (i,j,k) = ddd_8*(       F_tplt0(i,j,k)) +  F_rth (i,j,k)
         F_nth  (i,j,k) = ddd_8*(     - F_tplt0(i,j,k)) +  F_nth (i,j,k)
         F_gxtx (i,j,k) = ddd_8*( a1_8* F_tplt0(i,j,k)) +  F_gxtx(i,j,k)
         F_tplt0(i,j,k) = ZERO_8 
*
         end do
         end do
 301  continue
*

**********************************************************
*     ADJ of                                             *
*  4. Calculate vertical velocity & nonhydrostatic index *
**********************************************************

*******************************
*     ADJ of
*  3. Retrieve the variable X * 
*******************************

      aaa_8 =  gamma_8/( Dcst_cappa_8*Cstv_tau_8*Dcst_rgasd_8*Cstv_tstr_8 )

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do j= j0, jn
*
*        ADJ of
*        Compute the desired variable X
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do k=l_nk-1,1,-1
         do i= i0, in
*
*        ADJ
*        ---
         F_gxtx (i,j,k)   =     - F_gxtx(i,j,k+1) + F_gxtx (i,j,k)
         F_wijk1(i,j,k)   = TWO_8*F_gxtx(i,j,k+1) + F_wijk1(i,j,k)
         F_gxtx (i,j,k+1) = ZERO_8 

         end do
         end do
*
         do k=l_nk-1,1,-1
         a1_8=aaa_8*QUARTER_8*(Geomg_z_8(k)+Geomg_z_8(k+1))**2/Geomg_hz_8(k)
         do i= i0, in
*
*        ADJ
*        ---
         F_wijk1(i,j,k+1) = HALF_8*(   F_wijk1(i,j,k) ) + F_wijk1(i,j,k+1)
         F_gptx (i,j,k+1) = - a1_8*(   F_wijk1(i,j,k) ) + F_gptx (i,j,k+1)
         F_gptx (i,j,k)   = - a1_8*( - F_wijk1(i,j,k) ) + F_gptx (i,j,k) 
         F_wijk1(i,j,k)   = HALF_8*(   F_wijk1(i,j,k) )  
*
         end do
         end do
*
      end do

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 101 k=l_nk,1,-1
*
*******************************
*     ADJ of                  *
*  3. Retrieve the variable X *
*******************************

*     ADJ of
*     Compute term {1} (F_wijk1) without vertical staggering
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         aaa_8 = gamma_8/Dcst_cappa_8*Geomg_z_8(k)
         do j= j0, jn
         do i= i0, in
*
*           ADJ 
*           ---
            F_wijk1(i,j,k) = aaa_8*F_wijk1(i,j,k)
*
         end do
         end do
*
         do j= j0, jn
         do i= i0, in
*
*           ADJ 
*           ---
            F_nth  (i,j,k) =   F_wijk1(i,j,k) + F_nth(i,j,k)
            F_rth  (i,j,k) = - F_wijk1(i,j,k) + F_rth(i,j,k)
            F_wijk1(i,j,k) = ZERO_8 

         end do
         end do
*
         if (k.eq.l_nk) then
             do j= j0, jn
             do i= i0, in
*
*            ADJ 
*            ---
             F_fipt0(i,j,l_nk) = ZERO_8 
*
             end do
             end do
         endif
*
*     ADJ of
*     Compute pi'lin (F_wijk0), pi', q and phi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
         if (k.eq.1) then

*        ADJ of
*        Impose the boundary conditions
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             do j= j0, jn
             do i= i0, in
*
*        ADJ
*        ---
         F_gxtx (i,j,1) = 0. 
*
         F_gptx (i,j,1) = F_fipt0(i,j,1)            + F_gptx (i,j,1)
         F_fipt0(i,j,1) = ZERO_8 
*
         F_pipt0(i,j,1) = F_qt0  (i,j,1) / ( Geomg_z_8(1) + F_pipt0m(i,j,1) )
     %                                    + F_pipt0(i,j,1)
         F_qt0  (i,j,1) = ZERO_8 
*
         F_st0(i,j)     = Geomg_pib(1) *(F_pipt0(i,j,1)*exp(F_st0m(i,j))) + F_st0(i,j)
         F_pipt0(i,j,1) = ZERO_8
*
             end do
             end do
         else
             bbb_8 = Dcst_rgasd_8*Cstv_tstr_8/Geomg_z_8(k)
             do j= j0, jn
             do i= i0, in
*
*        ADJ
*        ---
         F_gptx (i,j,k) =         F_fipt0(i,j,k) + F_gptx (i,j,k)
         F_wijk0(i,j,k) = - bbb_8*F_fipt0(i,j,k) + F_wijk0(i,j,k)
         F_fipt0(i,j,k) = ZERO_8 
*
         F_pipt0(i,j,k) = F_qt0(i,j,k) / ( Geomg_z_8(k) + F_pipt0m(i,j,k) )
     %                                           + F_pipt0(i,j,k)
         F_qt0  (i,j,k) = ZERO_8 
*
         F_st0(i,j)     = Geomg_pib(k)*(F_pipt0(i,j,k)*exp(F_st0m(i,j))) + F_st0(i,j) 
         F_pipt0(i,j,k) = ZERO_8
*
         F_st0(i,j)     = Geomg_pib(k) * F_wijk0(i,j,k)                  + F_st0(i,j)
         F_wijk0(i,j,k) = ZERO_8
*
             end do
             end do
*
         endif
*
 101  continue

********************************************
*     ADJ of                               *
*  2. Calculate s, pi'lin, pi', q and phi' *
********************************************

*     ADJ of
*     Calculate s
*     ~~~~~~~~~~~
      bbb_8 = Geomg_z_8(l_nk)/( Dcst_rgasd_8*Cstv_tstr_8 )

*PDIR PARDO FOR=Ptopo_npeOpenMP
      do j= j0, jn
      do i= i0, in
*
*     ADJ 
*     ---
      F_gptx(i,j,l_nk) = bbb_8*F_st0(i,j)/Geomg_pib(l_nk) + F_gptx(i,j,l_nk) 
      F_st0 (i,j)      = ZERO_8
*
      end do
      end do
*
*     -----------------------
*     END ADJOINT CALCULATION 
*     -----------------------
      return
      end
