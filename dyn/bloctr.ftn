***s/r bloctr - output tracers (3D in VMM)
*
#include <model_macros_f.h>
*
      subroutine bloctr(F_dostep,F_dostep_max)
*
#include "impnone.cdk"
*
      integer F_dostep(*)
      integer F_dostep_max
*
*author
*     james caveen - sor3dvar - rpn july 1995
*
*revision
* v2_31 - Lee V.           - initial MPI version (from slab3dvar,blocthm v2_30)
* v2_32 - Lee V.           - reduce dynamic allocation size,allow T0,T1 output
*
*object
*     See above id
*	
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_dostep     I    - array containing indices corresponding to the
*                     timestep sets that requires output at this time step.
* F_dostep_max I    - size of F_dostep array
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "dimout.cdk"
#include "setsor.cdk"
#include "out.cdk"
#include "out2.cdk"
#include "outd.cdk"
#include "level.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "slab.cdk"
#include "dslab.cdk"
#include "tr3d.cdk"
#include "busind.cdk"
#include "grid.cdk"
*
*modules
      integer  vmmuld, vmmlod, vmmget, vmmuln, vmmulk
      external vmmuld, vmmlod, vmmget, vmmuln, vmmulk
      integer getvndx,slabdsc,slabxtrf
      external getvndx,slabdsc,slabxtrf
**
*
*    declaration for local work array and pointer for loading each field
*    MAXKEY controls the size of the allocation of local dynamic memory
*
      integer MAXKEY
      parameter (MAXKEY = 9)
*
      real tr,w1(LDIST_SHAPE),t3(LDIST_SHAPE,G_nk),w4(LDIST_SHAPE)
      real prprlvl
      pointer (patr,tr(LDIST_SHAPE,*))
      integer i,j,k,ii,jj,kk,iii,iiii,jjj,idx,jdx,levset,i0,in,j0,jn
      integer pnindex, pnkey,pni3d
      integer pnlkey(MAXKEY),pnikey(MAXKEY),pnckey(MAXKEY)
      integer pnerr,key0
*     Declarations for slab output
      character*2  time_level_S
      integer mxout_e
      character*4, dimension(:,:),allocatable :: var_e_S
      character*1, dimension(:,:),allocatable :: typvar_e_S
      integer,     dimension(:,:),allocatable :: ip1_e
      integer,     dimension(:,:),allocatable :: bit_e
      real,        dimension(:,:),allocatable :: mtval_e
      integer,     dimension(:),  allocatable :: mtout_e
      integer,     dimension(:,:),allocatable :: xnio
*
*_______________________________________________________________________
*
      i0 = 1+pil_w
      in = l_ni-pil_e
      j0 = 1+pil_s
      jn = l_nj-pil_n
*_______________________________________________________________________
*
      pni3d = 0
      do i = 1, Tr3d_ntr
         pnindex=getvndx(Tr3d_name_S(i)(1:2)//'T0')
         if (pnindex.gt.0) then
             pni3d = pni3d + Setsor_useit(pnindex)
         else
            if (Lun_out.gt.0) write(Lun_out,*)
     $        'Error in BLOCTR:INDEX not found for ',Tr3d_name_S(i)(1:2)//'T0'
            stop
         endif
         pnindex=getvndx(Tr3d_name_S(i)(1:2)//'T1')
         if (pnindex.gt.0) then
             pni3d = pni3d + Setsor_useit(pnindex)
         else
            if (Lun_out.gt.0) write(Lun_out,*)
     $        'Error in BLOCTR:INDEX not found for ',Tr3d_name_S(i)(1:2)//'T1'
            stop
         endif
      enddo
      if (pni3d.le.0) return

      mxout_e = 1 + MAXKEY*(max(l_nk,Dslab_max_lev_p))
      allocate ( var_e_S(mxout_e,Grid_sets),
     %           typvar_e_S(mxout_e,Grid_sets),
     %           ip1_e(mxout_e,Grid_sets),
     %           bit_e(mxout_e,Grid_sets),
     %           mtval_e(LDIST_SIZ*mxout_e,Grid_sets),
     %           mtout_e(Grid_sets),
     %           xnio(LDIST_SIZ,Grid_sets) )
      call set_dslab(0,xnio,LDIST_SIZ,Grid_sets)
      do i=1,Grid_sets
         mtout_e(i)=0
      enddo

*     For all the tracer variables to be treated in this routine

      pnkey=0
      pni3d=0

      do 225 jdx=1,2
         if (jdx.eq.1) then
             time_level_S='T0'
             key0 = VMM_KEY (trt0)
         else
             time_level_S='T1'
             key0 = VMM_KEY (trt1)
         endif
      do 220 idx = 1, Tr3d_ntr

         pnindex=getvndx(Tr3d_name_S(idx)(1:2)//time_level_S)
         if (Setsor_useit(pnindex).ge.1) then
           pni3d = pni3d + Setsor_useit(pnindex)
           pnkey = pnkey + 1
           pnlkey(pnkey) = key0 + idx
           pnikey(pnkey) = pnindex
           pnckey(pnkey) = 0
           if (Out_cliph_L) then
               do j=1,h2o_ntr
                  if ( Tr3d_name_S(idx).eq.h2o_name_S(j) ) pnckey(pnkey)=1
               enddo
           endif
         endif
*      When pnkey reaches MAXKEY....
       if (pnkey.gt.MAXKEY-1.or.pni3d.gt.MAXKEY) then
*          Load these MAXKEY model variables and output them
           if (pni3d.gt.MAXKEY) pnkey = pnkey-1
            pnerr = vmmlod(pnlkey,pnkey)

         do 100 jj = 1, F_dostep_max
*        For every Timestep set that outputs at the current timestep

            do 80 kk = 1, Outd_sets

              if (Outd_step(kk) .eq. F_dostep(jj)) then
*             if the Timestep set for this request set Outd(kk) outputs
*                                   at the current timestep (Lctl_step)

              levset = Outd_lev(kk)
              if (Level_typ(levset).eq.'E') then

                  do 50 ii = 1,Outd_var_max(kk)
                  do 40 iii=1,pnkey
                  if (pnikey(iii).eq.Outd_var(ii,kk)) then
*                  if variable is in this request set

*                 get address of the data for this model variable
                  pnerr = vmmget(pnlkey(iii),patr,tr)
*                 for each level requested in the levset
                     do  jjj=1,Level_max(levset)
                        call insrtslab_d(tr,w1,LDIST_DIM,G_nk,
     $                  nint(Level(jjj,levset)),kk,1.0,0.0,pnikey(iii),
     $                  Level_ip1(jjj,levset),mtout_e,var_e_S,typvar_e_S,
     $                  ip1_e,bit_e,mtval_e,LDIST_SIZ,mxout_e,Grid_sets)
                     enddo
                  endif
  40              continue
  50              continue
              endif
              endif
  80        continue
 100     continue
*
*        write out to slab files in eta
         call writslab_d(Dslab_fhand_e,Dslab_slab_e,Dslab_nnio,'dm',
     %                Dslab_ext_S,mtout_e, var_e_S,typvar_e_S,ip1_e,bit_e,
     %                mtval_e,xnio,LDIST_SIZ,mxout_e,Grid_sets)
         do k=1,Grid_sets
            mtout_e(k)=0
         enddo
*
         do 200 jj = 1, F_dostep_max
*        For every Timestep set that outputs at the current timestep

            do 180 kk = 1, Outd_sets

              if (Outd_step(kk) .eq. F_dostep(jj)) then
*             if the Timestep set for this request set Outd(kk) outputs
*             at the current timestep (Lctl_step)

              levset = Outd_lev(kk)
              if (Level_typ(levset).eq.'P') then
*             Output on pressure levels

*         Output on pressure levels
                  do 175 ii = 1,Outd_var_max(kk)
                  do 170 iii=1,pnkey
                  if (pnikey(iii).eq.Outd_var(ii,kk)) then
*                  if variable is in this request set

*                 get address of the data for this model variable
                  pnerr = vmmget(pnlkey(iii),patr,tr)
                  call verder(t3, tr, Out2_wlnph, 2.0, 2.0, LDIST_DIM, G_nk,
     $                                                             i0,in,j0,jn)
*                 for each level requested in the levset
                  do 160 jjj=1,Level_max(levset)
                        prprlvl = Level(jjj,levset) * 100.0
                        call prgen( w4, tr, t3, Out2_wlnph, prprlvl,
     $                      Out_cubzt_L,LDIST_DIM, G_nk)
                        if ( pnckey(iii).eq.1) Then
                          do j= j0, jn
                          do i= i0, in
                             w4(i,j) = amax1( w4(i,j), 0. )
                          enddo
                          enddo
                        endif
                        call insrtslab_d(w4,w1,LDIST_DIM,1,1,kk,1.0,0.0,
     $                  pnikey(iii),Level_ip1(jjj,levset),mtout_e,var_e_S,
     $                  typvar_e_S,ip1_e,bit_e,mtval_e,LDIST_SIZ,mxout_e,Grid_sets)
 160              continue
                  endif
 170              continue
 175              continue

              endif
              endif
 180        continue
 200     continue
*         write out to slab files
          call writslab_d(Dslab_fhand_p,Dslab_slab_p,Dslab_nnio,'dp',
     %                Dslab_ext_S,mtout_e, var_e_S,typvar_e_S,ip1_e,bit_e,
     %                mtval_e,xnio,LDIST_SIZ,mxout_e,Grid_sets)
         do k=1,Grid_sets
            mtout_e(k)=0
         enddo

*        unload these MAXKEY variables,reset slab counters and start
*                                                accumulating MAXKEY more..
         pnerr = vmmuln(pnlkey,pnkey)
         if (pnkey.gt.MAXKEY-1)then
             pnkey = 0
             pni3d = 0
         else
           pni3d = Setsor_useit(pnindex)
           pnkey = 1
           pnlkey(pnkey) = key0 + idx
           pnikey(pnkey) = pnindex
         endif

       endif !When pnkey reaches MAXKEY....
 220  continue
 225  continue

*     Output the rest of the accummulated variables
      if (pnkey.gt.0) then
*     load them (pnkey should be less than MAXKEY)
      pnerr = vmmlod(pnlkey,pnkey)

         do 300 jj = 1, F_dostep_max
*        For every Timestep set that outputs at the current timestep

            do 280 kk = 1, Outd_sets

              if (Outd_step(kk) .eq. F_dostep(jj)) then
*             if the Timestep set for this request set Outd(kk) outputs
*             at the current timestep (Lctl_step)

              levset = Outd_lev(kk)
              if (Level_typ(levset).eq.'E') then

               do 250 ii = 1,Outd_var_max(kk)

                  do 240 iii=1,pnkey

                  if (pnikey(iii).eq.Outd_var(ii,kk)) then
*                 if variable is in this request set

*                 get address of the data for this model variable
                  pnerr = vmmget(pnlkey(iii),patr,tr)
*                 for each level requested in the levset
                  do 230 jjj=1,Level_max(levset)
*                    check if level is in Model levels...
                        call insrtslab_d(tr,w1,LDIST_DIM,G_nk,
     $                  nint(Level(jjj,levset)),kk,1.0,0.0,
     $                  pnikey(iii),Level_ip1(jjj,levset),mtout_e,var_e_S,
     $                  typvar_e_S,ip1_e,bit_e,mtval_e,LDIST_SIZ,mxout_e,Grid_sets)
 230              continue
                  endif
 240              continue
 250           continue
              endif
              endif
 280        continue
 300     continue
*
*        write out to slab files in eta
         call writslab_d(Dslab_fhand_e,Dslab_slab_e,Dslab_nnio,'dm',
     %                Dslab_ext_S,mtout_e, var_e_S,typvar_e_S,ip1_e,bit_e,
     %                mtval_e,xnio,LDIST_SIZ,mxout_e,Grid_sets)
         do k=1,Grid_sets
            mtout_e(k)=0
         enddo

*         Output on pressure levels
         do 400 jj = 1, F_dostep_max
*        For every Timestep set that outputs at the current timestep

            do 380 kk = 1, Outd_sets

              if (Outd_step(kk) .eq. F_dostep(jj)) then
*             if the Timestep set for this request set Outd(kk) outputs
*             at the current timestep (Lctl_step)

              levset = Outd_lev(kk)
              if (Level_typ(levset).eq.'P') then

                  do 375 ii = 1,Outd_var_max(kk)
                  do 370 iii=1,pnkey
                  if (pnikey(iii).eq.Outd_var(ii,kk)) then
*                  if variable is in this request set

*                 get address of the data for this model variable
                  pnerr = vmmget(pnlkey(iii),patr,tr)
                  call verder(t3, tr, Out2_wlnph, 2.0, 2.0, LDIST_DIM, G_nk,
     $                                                             i0,in,j0,jn)
*                 for each level requested in the levset
                  do 360 jjj=1,Level_max(levset)
                        prprlvl = Level(jjj,levset) * 100.0
                        call prgen( w4, tr, t3, Out2_wlnph, prprlvl,
     $                      Out_cubzt_L,LDIST_DIM, G_nk)
                        if ( pnckey(iii).eq.1 ) Then
                          do j= j0, jn
                          do i= i0, in
                             w4(i,j) = amax1( w4(i,j), 0. )
                          enddo
                          enddo
                        endif
                        call insrtslab_d(w4,w1,LDIST_DIM,1,1,kk,1.0,0.0,
     $                  pnikey(iii),Level_ip1(jjj,levset),mtout_e,var_e_S,
     $                  typvar_e_S,ip1_e,bit_e,mtval_e,LDIST_SIZ,mxout_e,Grid_sets)
 360              continue
                  endif
 370              continue
 375              continue

              endif
              endif
 380        continue
 400     continue
*         write out to slab files
          call writslab_d(Dslab_fhand_p,Dslab_slab_p,Dslab_nnio,'dp',
     %                Dslab_ext_S,mtout_e, var_e_S,typvar_e_S,ip1_e,bit_e,
     %                mtval_e,xnio,LDIST_SIZ,mxout_e,Grid_sets)
      endif
*     output of remaining variables done, unload them.
      pnerr = vmmuln(pnlkey,pnkey)
      deallocate ( var_e_S, ip1_e, bit_e, mtval_e, typvar_e_S,mtout_e,xnio)
*
*-------------------------------------------------------------------
*
      return
      end
