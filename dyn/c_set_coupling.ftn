C**S/R c_set_coupling
C=======================================================================
C Author:
C 
C   Sophie Valcke -CERFACS - March 2005
C
*revision
* v3_21 - Valcke S.   - initial MPI version
C
C Language:
C
C   Fortran 77
C
C Description:
C
C   Initialize coupling
C   
C Interface:
C
      SUBROUTINE c_set_coupling ()
C
C Includes:
C
#include "impnone.cdk"
#include "model_macros_f.h"
#include "c_cplg.cdk"
#include "ptopo.cdk"
#include "glb_ld.cdk"
#include "geomn.cdk"
#include "rstr.cdk"
#include "cstv.cdk"
C
C Input Arguments: none
C
C Local variables
C
      real, allocatable, dimension(:,:) :: rla_lon, rla_lat 
      integer, allocatable, dimension(:) :: ila_msk
      CHARACTER(len=80) :: cl_file
      CHARACTER(len=3) cl_inname
      CHARACTER(len=6) :: cl_mecname
      INTEGER :: il_siz, il_b, il_error, il_frcpl
C
C===================================================================
C
*     Initialization for the coupling
*
      IF ( C_coupling_L) THEN
          PRINT *, 'CPL- Entering c_set_coupling'
C
C         Definition of initial oasis time 
          ig_oatime = 0
C         Additional PSMILe routine needed to extract coupling frequency 
C         il_frcpl. Here, we suppose that coupling is done at each timestep
          il_frcpl = Cstv_dt_8
          IF (Rstri_rstn_L) ig_oatime = ig_oatime - il_frcpl
          PRINT *, 'CPL- ig_oatime in c_set_coupling = ', ig_oatime
C
C         Allocation of array for coupling fields to/from physics
          CALL hpalloc(p_rga_cpl2phy, l_ni*l_nj*ig_max_inout_dim, il_error, 1)
          rga_cpl2phy(1:l_ni*l_nj*ig_max_inout_dim) = 0.0

          IF (Ptopo_myproc.eq.0) THEN
C
C             Mask definition
C
              allocate(ila_msk(G_ni*G_nj))
              ila_msk(1:G_ni*G_nj) = 0
              il_siz = G_ni*G_nj
C
              IF (.not. lg_mcpl) THEN
C                 If explicit coupling mask not present in data file, define
C                 coupling mask based on land-sea mask and MEC role 
                  IF (lg_atmos .or. (lg_ocean .and. lg_land)) THEN
C                     IF MEC is atmos, or ocean+land, the whole domain is valid
                      ila_msk(:) = 0
                  ELSE IF (lg_ocean) THEN
C                     Points with fraction of sea are valid (=0 for Oasis)
                      ila_msk(1:il_siz) = int(rga_msk(1:il_siz))
                  ELSE IF (lg_land) THEN
C                     Points with fraction of land are valid (=0 for Oasis)
                      DO il_b = 1, il_siz
                        IF (rga_msk(il_b) .gt. 0.0) THEN
                            ila_msk(il_b) = 0
                        ELSE
                            ila_msk(il_b) = 1
                        ENDIF
                      END DO
                  ENDIF
C                 Redefine rga_msk that will be sent as coupling field
                  DO il_b = 1, il_siz
                    IF (ila_msk(il_b) .gt. 0) THEN
                        rga_msk(1:il_siz) = 0.0
                    ELSE
                        rga_msk(1:il_siz) = 1.0
                    ENDIF
                  END DO
              ELSE
C                 If explicit coupling mask present in data file, use it
C                 for coupler but Oasis has an opposite mask convention.
                  DO il_b = 1, il_siz
                    IF (rga_msk(il_b) .gt. 0.0) THEN
                        ila_msk(il_b) = 0
                    ELSE
                        ila_msk(il_b) = 1
                    ENDIF
                  END DO
              ENDIF
C
              cl_file = '../../masks.std'
              cl_inname = 'MSK'
              call c_mtlmap (rga_msk, G_ni, G_nj,1, cl_inname, 0, cl_file, 40)
C
              ig_compid = 0
C
          ENDIF
C
          IF (C_cploasis_L) THEN
              IF (Ptopo_myproc.eq.0) THEN   
                  allocate(rla_lon(G_ni,G_nj))
                  rla_lon(1:G_ni, 1:G_nj) = 0.0
                  allocate(rla_lat(G_ni,G_nj))
                  rla_lat(1:G_ni, 1:G_nj) = 0.0
              ENDIF
C
C             If coupled via oasis, collect the longitudes and latitudes 
C             (in all PEs); sent to coupler in c_oasis_init
              call glbcolc (rla_lon, G_ni, G_nj, Geomn_lonrx, 
     $            1, l_ni, 1, l_nj, 1)
              call glbcolc (rla_lat, G_ni, G_nj, Geomn_latrx, 
     $            1, l_ni, 1, l_nj, 1)
C
              IF (Ptopo_myproc.eq.0) THEN
C
C                 Write longitudes and latitudes to coupling output file
                  cl_file = '../../longitudes.std'
                  cl_inname = 'LON'
                  call c_mtlmap (rla_lon, G_ni, G_nj,1, cl_inname, 
     $                0, cl_file, 40)
                  cl_file = '../../latitudes.std'
                  cl_inname = 'LAT'
                  call c_mtlmap (rla_lat, G_ni, G_nj,1, cl_inname, 
     $                0, cl_file, 40)
C
C                 Define MEC name based on its role
                  IF (lg_atmos .and. .not. lg_ocean .and. .not. lg_land) THEN
                      cl_mecname = 'MECatm'
                  ELSE IF(lg_atmos .and. lg_ocean .and. .not. lg_land) THEN
                      cl_mecname = 'MECaoc'
                  ELSE IF(lg_atmos .and. lg_ocean .and. lg_land) THEN
                      cl_mecname = 'MECaol'
                  ELSE IF(.not.lg_atmos .and. lg_ocean .and. lg_land) THEN
                      cl_mecname = 'MECloc'
                  ELSE IF(.not.lg_atmos .and. .not.lg_ocean .and. lg_land) THEN
                      cl_mecname = 'MEClan'
                  ELSE IF(.not.lg_atmos .and. .not.lg_land .and. lg_ocean) THEN
                      cl_mecname = 'MECoce'
                  ENDIF
                  PRINT *, 'CPL- In c_defmec; cl_mecname = ', cl_mecname
C
C                 Oasis coupling initialisation 
                  call c_oasis_init (cl_mecname,
     $                rla_lon, rla_lat,
     $                ila_msk,
     $                G_ni, G_nj,
     $                ig_compid)
                  PRINT *, 'CPL- In c_set_coupling, after c_oasis_init'
C                 Coupling field declaration
C                 Called with global dims because only pe 0 talks to coupler 
                  call c_init_oasisfld (G_ni, G_nj)
                  PRINT *, 'CPL- In c_set_coupling, after c_init_oasisfld'
                  deallocate (rla_lon, rla_lat)
              ENDIF
          ENDIF
C
          PRINT *, 'CPL- End of c_set_coupling'
C
      ENDIF
C
      END SUBROUTINE c_set_coupling
