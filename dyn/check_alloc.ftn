!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
c  s/r check_alloc - Check memory allocation form allocate function status
c
#include "model_macros_f.h"
c
      subroutine check_alloc(istat,from_routine,iflag)
c
#include "impnone.cdk"
      integer istat,iflag,longueur
      character*128 from_routine
c
c Autor
c     Andre Plante - CMC - nov 2005
c
c revision
c v3_** - Plante A.      - initial version
c
c object
c        Check memory allocation give message and abort if not ok
c
c arguments
c  Name        I/O                 Description
c----------------------------------------------------------------
c  istat         I         status returned by allocate
c  from_routine  I         Name of routine calling this
c  iflag         I         integer to pass to gem_stop
c
cimplicits
#include "lun.cdk"
c----------------------------------------------------------------
      
      if(istat.ne.0)then
         write (Lun_out,*)
     $        'Allocation problem in '//
     $        from_routine(1:longueur(from_routine))//
     $        ', stat=',istat
         call gem_stop('Memory allocation problem, see above',-abs(iflag))
      endif

      return

      end
