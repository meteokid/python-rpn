!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r slabsym - symmetrical boundary conditions for theoretical
*               cases
*
#include "model_macros_f.h"
*
      subroutine slabsym ()
      implicit none
*author 
*     Gravel              - spring 2003 (after MC2 v_4.9.3)
*
*revision
* v3_11 - Gravel             - initial version
* v3_30 - Lee V              - changed t0=> t1,nest is after t02t1
* v4_05 - Lepine M.          - VMM replacement with GMM
*
*object
*
*arguments
*       none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "lun.cdk"
*
      integer err,i,j,k,n
      integer jin, jj
      real, pointer, dimension(:,:,:) :: tr
*
*----------------------------------------------------------------------
*
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(wt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(st1)'
      if (.not.Schm_hydro_L) then
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'slabsym ERROR at gmm_get(wt1)'
      endif
*
      if (l_north) then
         do k=1,G_nk+1
            jin = l_nj-pil_n-1
            jj  = l_nj-pil_n
            do i=1,l_ni
               vt1  (i,jj,k) = vt1  (i,jin,k)
            enddo
            jin = l_nj-pil_n
            do j=1,pil_n
            jj  = l_nj-pil_n+j
            do i=1,l_ni
               vt1 (i,jj,k) = vt1 (i,jin,k)
               tt1 (i,jj,k) = tt1 (i,jin,k)
               wt1 (i,jj,k) = wt1 (i,jin,k)
               zdt1(i,jj,k) = zdt1(i,jin,k)
            end do
            do i=1,l_niu
               ut1 (i,jj,k) = ut1 (i,jin,k)
            end do
            end do
         end do
         jin = l_nj-pil_n
         do j=1,pil_n
         jj  = l_nj-pil_n+j
         do i=1,l_ni
            tt1 (i,jj,G_nk+2) = tt1 (i,jin,G_nk+2)
            st1 (i,jj)        = st1 (i,jin)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            jin = l_nj-pil_n
            do j=1,pil_n
            jj  = l_nj-pil_n+j
            do i=1,l_ni
               qt1 (i,jj,k) = qt1 (i,jin,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_south) then
         do k=1,G_nk+1
            jin = pil_s+1
            do j=1,pil_s
            jj  = pil_s-j+1
            do i=1,l_ni
               vt1 (i,jj,k) = vt1 (i,jin,k)
               wt1 (i,jj,k) = wt1 (i,jin,k)
               tt1 (i,jj,k) = tt1 (i,jin,k)
               zdt1(i,jj,k) = zdt1(i,jin,k)
            end do
            do i=1,l_niu
               ut1 (i,jj,k) = ut1 (i,jin,k)
            end do
            end do
         end do
         jin = pil_s+1
         do j=1,pil_s
         jj  = pil_s-j+1
         do i=1,l_ni
            tt1 (i,jj,G_nk+2) = tt1 (i,jin,G_nk+2)
            st1 (i,jj)        = st1 (i,jin)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            jin = pil_s+1
            do j=1,pil_s
            jj  = pil_s-j+1
            do i=1,l_ni
               qt1 (i,jj,k) = qt1 (i,jin,k)
            end do
            end do
            end do
         endif
      endif
*
      do n=1,Tr3d_ntr
         nullify(tr)
         gmmstat = gmm_get('TR/'//trim(Tr3d_name_S(n))//':P',tr,meta3d)
         if (gmmstat.eq.0) then
         if (l_north)      then
            do k=1,G_nk+1
               jin = l_nj-pil_n
               do j=1,pil_n
                  jj  = l_nj-pil_n+j
                  do i=1,l_ni
                     tr(i,jj,k) = tr(i,jin,k)
                  enddo
               enddo
            enddo
         endif
         if (l_south) then
            do k=1,G_nk+1
               jin = pil_s+1
               do j=1,pil_s
                  jj  = pil_s-j+1
                  do i=1,l_ni
                     tr(i,jj,k) = tr(i,jin,k)
                  enddo
               enddo
            enddo
         endif
         endif
      end do
*
*----------------------------------------------------------------------
      return
      end
