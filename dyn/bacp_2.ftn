***s/r  bacp_2 - backsubstitution ( computation and microtasking )
*
#include "model_macros_f.h"
*
      subroutine bacp_2 ( F_itr   , F_itnlh , F_st0  ,
     $                    F_fip   , F_fis   , F_tt0  ,
     $                    F_ut0   , F_vt0   , F_psdt0,
     $                    F_qsect0, F_wt0   , F_csh  , F_gptx ,
     $                    F_ru    , F_rv    , F_rth  , F_rw   , 
     $                    F_rvv   , F_rcn   , F_nu   , F_nv   ,
     $                    F_nth   , F_nw    , F_nvv  , F_ncn  ,
     $                    DIST_DIM, Nk )
*
      implicit none
*
      integer  F_itr, F_itnlh, DIST_DIM, Nk 
* 
      real     F_st0  (DIST_SHAPE)     ,  F_fip   (DIST_SHAPE,0:Nk+1), 
     %         F_fis  (DIST_SHAPE)     ,  F_tt0   (DIST_SHAPE,  Nk+1),
     %         F_ut0  (DIST_SHAPE,Nk)  ,  F_vt0   (DIST_SHAPE,  Nk)  , 
     %         F_psdt0(DIST_SHAPE,Nk+1),  F_qsect0(DIST_SHAPE,0:Nk+1),
     %         F_wt0  (DIST_SHAPE,Nk+1),  F_gptx  (DIST_SHAPE,  Nk)  ,
     %         F_ru   (DIST_SHAPE,Nk)  ,  F_rv    (DIST_SHAPE,  Nk)  ,
     %         F_rcn  (DIST_SHAPE,Nk)  ,  F_rth   (DIST_SHAPE,  Nk+1),
     %         F_rvv  (DIST_SHAPE,Nk+1),  F_nth   (DIST_SHAPE,  Nk+1),
     %         F_rw   (DIST_SHAPE,Nk+1),  F_nu    (DIST_SHAPE,  Nk)  ,
     %         F_nv   (DIST_SHAPE,Nk)  ,  F_nw    (DIST_SHAPE,  Nk+1),
     %         F_nvv  (DIST_SHAPE,Nk+1),  F_ncn   (DIST_SHAPE,  Nk)  ,
     %         F_csh  (DIST_SHAPE)
*
*author
*     Alain Patoine - split from bac.ftn
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
* v2_21 - Lee V.            - modifications for LAM version
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - removed treatment of Hu and Qc
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_21 - Desgagne M.       - Revision Openmp
*
*object
*     see documentation in s/r bac.
*
*arguments: see documentation of appropriate comdecks 
*
*implicits
#include "glb_ld.cdk"
*
      integer i, j, k, i0, j0, in, jn, nij

      i0 = 1+pil_w
      in = l_ni-pil_e
      j0 = 1+pil_s
      jn = l_nj-pil_n


      call  bacp_2_2      ( F_itr   , F_itnlh, F_st0  ,
     $                      F_fip   , F_fis  , F_tt0  ,
     $                      F_ut0   , F_vt0  , F_psdt0,
     $                      F_qsect0, F_wt0  , F_csh  , F_gptx,
     $                      F_ru    , F_rv   , F_rth  , F_rw  ,
     $                      F_rvv   , F_rcn  , F_nu   , F_nv  ,
     $                      F_nth   , F_nw   , F_nvv  , F_ncn ,
     $                      DIST_DIM, Nk, i0, j0, in, jn )
      return
      end
!
! 2e etage pour OpenMP
!

      subroutine bacp_2_2 ( F_itr   , F_itnlh, F_st0  ,
     $                      F_fip   , F_fis  , F_tt0  ,
     $                      F_ut0   , F_vt0  , F_psdt0,
     $                      F_qsect0, F_wt0  , F_csh  , F_gptx,
     $                      F_ru    , F_rv   , F_rth  , F_rw  ,
     $                      F_rvv   , F_rcn  , F_nu   , F_nv  ,
     $                      F_nth   , F_nw   , F_nvv  , F_ncn ,
     $                      DIST_DIM, Nk, i0, j0, in, jn )
*
      implicit none
*
      integer  F_itr, F_itnlh, DIST_DIM, Nk 
      real     F_st0  (DIST_SHAPE)     ,  F_fip   (DIST_SHAPE,0:Nk+1),
     %         F_fis  (DIST_SHAPE)     ,  F_tt0   (DIST_SHAPE,  Nk+1),
     %         F_ut0  (DIST_SHAPE,Nk)  ,  F_vt0   (DIST_SHAPE,  Nk)  ,
     %         F_psdt0(DIST_SHAPE,Nk+1),  F_qsect0(DIST_SHAPE,0:Nk+1),
     %         F_wt0  (DIST_SHAPE,Nk+1),  F_gptx  (DIST_SHAPE,  Nk)  ,
     %         F_ru   (DIST_SHAPE,Nk)  ,  F_rv    (DIST_SHAPE,  Nk)  ,
     %         F_rcn  (DIST_SHAPE,Nk)  ,  F_rth   (DIST_SHAPE,  Nk+1),
     %         F_rvv  (DIST_SHAPE,Nk+1),  F_nth   (DIST_SHAPE,  Nk+1),
     %         F_rw   (DIST_SHAPE,Nk+1),  F_nu    (DIST_SHAPE,  Nk)  ,
     %         F_nv   (DIST_SHAPE,Nk)  , F_nw     (DIST_SHAPE,  Nk+1),
     %         F_nvv  (DIST_SHAPE,Nk+1), F_ncn    (DIST_SHAPE,  Nk)  ,
     %         F_csh  (DIST_SHAPE)
*
*
*implicits
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "orh.cdk"
#include "cori.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "schm.cdk"
#include "ptopo.cdk"
#include "matlab.cdk"
*
      integer i, j, k, i0, j0, in, jn, nij, longueur
      real*8  one, two, half, vvv, xxx, yyy , zzz,
     $        p1, p2, p3, p4, p5, p6
      parameter(one=1.d0, two=2.d0, half=.5d0)
      real*8, dimension(i0:in,j0:jn):: xexp_8, yexp_8, yrec_8
      real    PPP(DIST_SHAPE,0:Nk+1),QQQ(DIST_SHAPE,0:Nk+1)
      logical finbac
**
      finbac=.false.
      if ( .not. (F_itr .lt. F_itnlh) )finbac=.true.
      if(matlab_write_L.and.Ptopo_myproc.eq.0)then
         open(unit=62,file=
     $        matlab_dir_S(1:longueur(matlab_dir_S))//'from_fortran_bacp_2.bin',
     $        status='replace',form='unformatted')
         write(62)G_ni-lam_pil_w-lam_pil_e
         write(62)G_nk
      endif
*     __________________________________________________________________
*
      nij = (in - i0 + 1)*(jn - j0 + 1)

      if ( (Cori_cornl_L) .or. (F_itr .lt. F_itnlh) )
     $   call rpn_comm_xch_halo( F_gptx, LDIST_DIM,l_ni,l_nj,G_nk,
     $                 G_halox,G_haloy,G_periodx,G_periody,l_ni,0)

      p1 = Dcst_rgasd_8*Cstv_tstr_8
      p2 = one/Dcst_rayt_8**2  
      p3 = one/(Dcst_grav_8*Cstv_tau_8)
      p4 = one/(Dcst_rgasd_8*Cstv_tstr_8)
      p5 = Ver_gamma_8*Ver_epsilon_8/
     $       (Dcst_cappa_8*Cstv_tau_8**2*Dcst_rgasd_8*Cstv_tstr_8)
      p6 = Ver_gamma_8/
     $       (Dcst_cappa_8*Cstv_tau_8**2*Dcst_rgasd_8*Cstv_tstr_8)
*
!$omp parallel private(vvv,xxx,yyy,zzz,yrec_8,xexp_8,yexp_8)
*
*     Compute P at top and bottom
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
!$omp do 
      do k=1,l_nk 
         do j= j0, jn
         do i= i0, in
            PPP(i,j,k)=F_gptx(i,j,k)
         end do
         end do
      end do
!$omp enddo 
!$omp do
      do j= j0, jn
         do i= i0, in
            PPP(i,j,0)    = Ver_cst_8 * (F_rth(i,j,1)-F_nth(i,j,1)) 
     $           + Ver_alphat_8*PPP(i,j,1)
            PPP(i,j,l_nk+1) = Ver_alphas_8*PPP(i,j,l_nk) 
     $           - Ver_css_8 * (F_rth(i,j,l_nk+1)-F_nth(i,j,l_nk+1)) 
            
         end do
      end do
!$omp enddo

!$omp single
      call rpn_comm_xch_halo(PPP,LDIST_DIM,l_ni,l_nj,G_nk+2,
     $     G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
!$omp end single
*
*     Compute q"
*     ~~~~~~~~~~
*
      if (.not. Schm_hydro_L) then
*
         vvv = Cstv_tau_8/Ver_z_8%m(0)
         yyy = Ver_z_8%t(1)/Ver_hz_8%t(1)
!$omp do
         do j= j0, jn 
         do i= i0, in 
c           Boundary condition at top
            QQQ(i,j,0) = 
     $         half*Cstv_tau_8*Ver_z_8%m(0)*Ver_hz_8%t(1)/Ver_z_8%t(1)*
     $                               (F_rvv(i,j,1)-F_nvv(i,j,1)
     $                        -p5*(yyy*(PPP(i,j,1)-  PPP(i,j,0))
     $              +Dcst_cappa_8*half*(PPP(i,j,1)+  PPP(i,j,0))))
            F_qsect0(i,j,0) = vvv*QQQ(i,j,0)
         enddo
         enddo
!$omp enddo
*        Note : we cannot use omp on loop k 
*               due to vertical dependance QQQ(i,j,k-1)
         do k=1,l_nk+1
            xxx = Cstv_tau_8*Ver_hz_8%t(k)
            yyy = Ver_z_8%t(k)/Ver_hz_8%t(k)
            zzz = one/(p3*Ver_hz_8%t(k))
            vvv = Cstv_tau_8/Ver_z_8%m(k)
!$omp do
            do j= j0, jn 
            do i= i0, in 
               QQQ(i,j,k) = QQQ(i,j,k-1)
     $                         - xxx*( F_rvv(i,j,k)-F_nvv(i,j,k)
     $                        -p5*(yyy*( PPP(i,j,k)-  PPP(i,j,k-1))
     $            +  Dcst_cappa_8*half*( PPP(i,j,k)+  PPP(i,j,k-1))))
               F_wt0(i,j,k)=Cstv_tau_8*(F_rw(i,j,k)- F_nw(i,j,k)
     $                            +zzz*( QQQ(i,j,k)-  QQQ(i,j,k-1)))
               F_qsect0(i,j,k) = vvv*QQQ(i,j,k)
            end do
            end do            
!$omp enddo     
         end do
*
      endif
*
*     Compute s
*     ~~~~~~~~~
*
!$omp do
      do j= j0, jn 
      do i= i0, in 
        F_st0(i,j) = p4*( half*(PPP(i,j,l_nk+1)+PPP(i,j,l_nk))
     $                      -F_fis(i,j) )
      end do
      end do
!$omp enddo
*
      if (.not. Schm_hydro_L) then 
!$omp do
         do j= j0, jn 
         do i= i0, in 
            F_st0(i,j) = F_st0(i,j) 
     $           - half*(F_qsect0(i,j,l_nk+1)+F_qsect0(i,j,l_nk))
         end do
         end do
!$omp enddo
      endif 
*
*     Compute psd
*     ~~~~~~~~~~~
*
      if(finbac.or.Schm_eulmtemp_L)then
*
!$omp do
         do j= j0, jn 
         do i= i0, in 
            F_psdt0(i,j,1)=0.
            F_psdt0(i,j,l_nk+1)=0.
         enddo
         enddo            
!$omp enddo
!$omp do
         do k=2,l_nk
            xxx=Cstv_tau_8*Ver_z_8%t(k)
            yyy=Ver_z_8%t(k)*Ver_boz_8%t(k)/Cstv_tau_8
            zzz=Ver_z_8%t(k)/Ver_hz_8%t(k)
            vvv=half*Ver_epsilon_8
            do j= j0, jn 
            do i= i0, in 
               F_psdt0(i,j,k)=-xxx*(F_rth(i,j,k)- F_nth(i,j,k)
     $                    +p6*( zzz*( PPP(i,j,k) -  PPP(i,j,k-1) ) 
     $                         -vvv*( PPP(i,j,k) +  PPP(i,j,k-1) ) ) )
     $                         -yyy*F_st0(i,j)
            enddo
            enddo
         enddo   
!$omp enddo
*
         if (.not. Schm_hydro_L) then
!$omp do
            do k=2,l_nk
               xxx=half*Ver_z_8%t(k)/Cstv_tau_8
               do j= j0, jn 
               do i= i0, in 
                  F_psdt0(i,j,k)=F_psdt0(i,j,k)
     $              -xxx*(F_qsect0(i,j,k)+F_qsect0(i,j,k-1))
               enddo
               enddo
            enddo
!$omp enddo
         endif
*
      endif
*
*     Compute FI'
*     ~~~~~~~~~~~

!$omp do
      do k=0,l_nk+1
         xxx=p1*Ver_boz_8%m(k)
         do j= j0, jn 
         do i= i0, in          
            F_fip(i,j,k)=PPP(i,j,k)-xxx*F_st0(i,j)
         enddo
         enddo
      enddo
!$omp enddo
      if (.not. Schm_hydro_L) then
!$omp do
         do k=0,l_nk+1
            do j= j0, jn 
            do i= i0, in          
               F_fip(i,j,k)=F_fip(i,j,k)-p1*F_qsect0(i,j,k)       
            enddo
            enddo
         enddo
!$omp enddo
      endif    
*
*     Compute csh
*     ~~~~~~~~~~~
*
!$omp do
      do j= j0, jn
         do i= i0, in
            yexp_8(i,j) = F_st0(i,j)*half
         end do
         call vexp  ( yexp_8(i0,j) , yexp_8(i0,j), (in-i0+1) )
         do i= i0, in
            F_csh(i,j)=two*yexp_8(i,j)*sinh(F_st0(i,j)*half)
         end do
      end do
!$omp enddo
*
*     Compute T
*     ~~~~~~~~~
*
!$omp do
      do k=1,l_nk+1
         xxx=Ver_z_8%t(k)/Ver_hz_8%t(k)
         yyy=xxx*p4
         do j= j0, jn 
         do i= i0, in          
            yrec_8(i,j)=(one+ Ver_boz_8%t(k)*F_csh(i,j))/
     $                  (one+Ver_dpib_8%t(k)*F_csh(i,j))
         enddo
         enddo
         if (.not. Schm_hydro_L) then
            do j= j0, jn 
            do i= i0, in          
               xexp_8(i,j) = half*(F_qsect0(i,j,k)+F_qsect0(i,j,k-1))
            enddo
            enddo
            call vexp ( yexp_8, xexp_8, nij )
         else
            do j= j0, jn 
            do i= i0, in          
               yexp_8(i,j) = one
            enddo
            enddo            
         endif
         do j= j0, jn 
         do i= i0, in          
            F_tt0(i,j,k)=Cstv_tstr_8*yexp_8(i,j)*yrec_8(i,j)
     $           *(one-yyy*(F_fip(i,j,k)-F_fip(i,j,k-1)))
         enddo
         enddo
      enddo
!$omp enddo
*
*     Compute U & V 
*     ~~~~~~~~~~~~~
*
      if (Cori_cornl_L .or. finbac.and..not.Cori_cornl_L) then
!$omp do
         do k=1,l_nk
            do j= j0, jn 
            do i= i0, l_niu-pil_e
               
               F_ut0(i,j,k)= Cstv_tau_8*( F_ru(i,j,k)-F_nu(i,j,k) -
     $         p2*(PPP(i+1,j,k)-PPP(i,j,k)) * geomg_invhx_8(i) )
            end do
            end do
*
            do j= j0, l_njv-pil_n
            do i= i0, in 
               F_vt0(i,j,k)= Cstv_tau_8*( F_rv(i,j,k)-F_nv(i,j,k) -
     $                p2*(PPP(i,j+1,k) - PPP(i,j,k)) 
     $                  *geomg_cyv2_8(j)*geomg_invhsy_8(j) )
            end do
            end do

         enddo
!$omp enddo
      endif
*
!$omp end parallel

      if ( matlab_write_L ) then
         call write_matlab_2d(62,F_fis)
         call write_matlab_3d_v(62,PPP)

         if (.not. Schm_hydro_L)then
            call write_matlab_3d_v(62,QQQ)
            call write_matlab_3d_v(62,F_qsect0)
            call write_matlab_3d_th(62,F_wt0)
         endif

         call write_matlab_2d(62,F_st0)
         call write_matlab_2d(62,F_csh)
         call write_matlab_3d_v(62,F_fip)
         call write_matlab_3d_th(62,F_tt0 )

         if (finbac) then
            if(Ptopo_myproc.eq.0)print*,'finbac'
            call write_matlab_3d(62,F_ut0)
            call write_matlab_3d_th(62,F_psdt0)
         endif
         
      endif
*
*
      if(matlab_write_L.and.Ptopo_myproc.eq.0)close(62)
*
*     __________________________________________________________________
*
      return
      end

