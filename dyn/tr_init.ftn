***s/r tr_init - Initializes tracers
*
#include <model_macros_f.h>
*
      subroutine tr_init ( hu,data_spec,bmf_time1,bmf_time2,nk,pps, 
     $                         rna_pia,pibb,ps,vterp_lv,ni,nj,nesd )
      implicit none
*
      logical nesd
      integer data_spec(*),nk,bmf_time1,bmf_time2,vterp_lv,ni,nj
      real hu(ni,nj,*),pps(*),rna_pia(*),ps(*),pibb(*)
*
*author
*     Michel Desgagne  -  Sept 2001
*
*revision
* v2_31 - Desgagne M.       - initial version 
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*
*arguments
*   
*implicits
#include "glb_ld.cdk"
#include "tr2d.cdk"
#include "tr3d.cdk"
#include "nest.cdk"
#include "vt1.cdk"
*
      integer  write_db_file,rewind_db_file,vmmlod,vmmget,vmmuld
      external write_db_file,rewind_db_file,vmmlod,vmmget,vmmuld
*
      integer i,j,k,l,m,n,ndone,ntpf,cnt,err,key0,key(Tr3d_ntr),
     $        unf,ntr2do
      real w1(l_ni,l_nj,nk),w2(l_ni,l_nj,nk),buf(l_ni,G_nk),tr
      pointer (patr, tr(LDIST_SHAPE,*))
      real, allocatable, dimension(:,:,:,:) :: tr2
*
*     ---------------------------------------------------------------
*
      if (nesd) then
         key0 = VMM_KEY (nest_trf)
      else
         key0 = VMM_KEY (trt1)
      endif
      do k=1,Tr3d_ntr
         key(k) = key0 + k
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key,Tr3d_ntr)  
         do k=1,Tr3d_ntr
            err = vmmget(key(k),patr,tr)
            if (Tr3d_name_S(k).eq.'HU') then
               do l=1,G_nk
               do j=1,l_nj
               do i=1,l_ni
                  tr(i,j,l) = max(0., hu(i,j,l))
               end do
               end do
               end do
            else
               call tr_vint (tr,Tr3d_name_S(k),Tr3d_sval(k),data_spec,
     $                       bmf_time1,bmf_time2,nk,pps,
     $                       rna_pia,pibb,ps,vterp_lv,LDIST_DIM)
            endif
         end do
         err = vmmuld(key,Tr3d_ntr)
      endif
*
      if (Tr2d_incore_L) then
         do l=1,Tr2d_ntr
            patr = loc(Tr2d_stk3d((l-1)*LDIST_SIZ*l_nk+1))
            call tr_vint (tr,Tr2d_name_S(l),Tr2d_sval(l),data_spec,
     $                    bmf_time1,bmf_time2,nk,pps,
     $                    rna_pia,pibb,ps,vterp_lv,LDIST_DIM)
         end do
      else
         allocate (tr2(LDIST_SHAPE,G_nk,Tr2d_ntpf))
         do n=1,Tr2d_nbf
            ntr2do = Tr2d_ntpf
            if (n.eq.Tr2d_nbf) ntr2do=Tr2d_ntr-(n-1)*Tr2d_ntpf
            do m=1,ntr2do
               l = (n-1)*Tr2d_ntpf + m
               call tr_vint (tr2(l_minx,l_miny,1,m),Tr2d_name_S(l),
     $              Tr2d_sval(l),data_spec,bmf_time1,bmf_time2,nk,pps,
     $              rna_pia,pibb,ps,vterp_lv,LDIST_DIM)
            end do
            cnt = l_ni*G_nk
            unf = Tr2d_unf((n-1)*Tr2d_ntpf+1)
            err = rewind_db_file (unf)
            err = write_db_file (unf,ntr2do,1)
            do j=1,l_nj
               err = write_db_file (unf,j,1)
               do m=1,ntr2do
                  do k=1,G_nk
                  do i=1,l_ni
                     buf(i,k) = tr2(i,j,k,m)
                  enddo
                  enddo 
                  err = write_db_file (unf,buf,cnt)
               end do
            end do
         end do
         deallocate (tr2)               
      endif
*
*     ---------------------------------------------------------------
*
      return
      end


