***s/p - set_dslab - define the diese grid and the limits of extraction for
*                    dynamic slab output.
*
#include <model_macros_f.h>
*
      subroutine set_dslab(F_grid,F_xnio,NN,MXGRD)
*
#include "impnone.cdk"
      integer NN,MXGRD
      integer F_grid,F_xnio(NN,MXGRD)
*
*author 
*     J-P Toviessi - 2000 - cmc (genslabd)
*
*revision
* v2_30 - V. Lee            - setup grid definitions for each local slab given
* v2_30                       given a type of grid (U,V,PHI) but no slabdsc.
* v3_00 - Desgagne & Lee    - Lam configuration
*
#include "glb_ld.cdk"
#include "lun.cdk"
#include "glb_pil.cdk"
#include "dimout.cdk"
#include "geomn.cdk"
#include "grid.cdk"
#include "dslab.cdk"
#include "ptopo.cdk"
*
*object
*     See Above id.
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_grid        I      value to indicate type of grid (U,V or Phi)
*                      0: phi
*                      1: U
*                      2: V
* F_xnio        O      xnio values returned for the local PE's dynamic slab
*-------------------------------------------------------------------
*
*modules
      integer slabig34
      external slabig34

      integer i, j, ierr, ij,gridset
      integer Grille_y1,Grille_x1
      integer grille_xmin,grille_xmax,grille_ymin,grille_ymax
*
*     For each user-defined gridset:
      do 100 gridset = 1, Grid_sets
*
         if (F_grid.eq.1) then
*        U grid setup for all grids
         Grille_y1 = Grid_y1(gridset)
         Grille_x1 = min(Grid_x1(gridset),G_niu)
         Grid_long_ = loc(Geomn_longu(1))
         Grid_latg_ = loc(Geomn_latgs(1))
         elseif (F_grid.eq.2) then
*        V grid setup for all grids
         Grille_y1 = min(Grid_y1(gridset),G_njv)
         Grille_x1 = min(Grid_x1(gridset),G_ni)
         Grid_long_ = loc(Geomn_longs(1))
         Grid_latg_ = loc(Geomn_latgv(1))
         else
*        Phi (scalar) grid setup for all grids
         Grille_y1 = Grid_y1(gridset)
         Grille_x1 = min(Grid_x1(gridset),G_ni)
         Grid_long_ = loc(Geomn_longs(1))
         Grid_latg_ = loc(Geomn_latgs(1))
         endif

         Grid_ig2(gridset)    = Grid_phi_ig2(gridset) + F_grid
         Grid_nxgrid(gridset) = Grille_x1-Grid_x0(gridset)+1
         Grid_nygrid(gridset) = Grille_y1-Grid_y0(gridset)+1
         Grid_niout(gridset)  = Grid_nxgrid(gridset)
         Grid_njout(gridset)  = Grid_nygrid(gridset)
         if (Grid_nxgrid(gridset).eq.G_ni.and..not.G_lam) 
     %       Grid_nxgrid(gridset)=G_ni+1

*  Find the local min and max of both X and Y for each local PE for output
*
         Dslab_xmin(gridset)=
     %         max(Grid_x0(gridset)-Ptopo_gindx(1,Ptopo_myproc+1)+1,1)
         Dslab_xmax(gridset)=
     %         min(l_ni-(Ptopo_gindx(2,Ptopo_myproc+1)-Grille_x1),l_ni)
         Dslab_ymin(gridset)=
     %         max(Grid_y0(gridset)-Ptopo_gindx(3,Ptopo_myproc+1)+1,1)
         Dslab_ymax(gridset)=
     %         min(l_nj-(Ptopo_gindx(4,Ptopo_myproc+1)-Grille_y1),l_nj)

*  Setup the correct ig3 and ig4 for each PE
*
         grille_xmin = max(Grid_x0(gridset),Ptopo_gindx(1,Ptopo_myproc+1))
         grille_xmax = min(Grille_x1,Ptopo_gindx(2,Ptopo_myproc+1))
         grille_ymin = max(Grid_y0(gridset),Ptopo_gindx(3,Ptopo_myproc+1))
         grille_ymax = min(Grille_y1,Ptopo_gindx(4,Ptopo_myproc+1))
         grille_xmin = grille_xmin - Grid_x0(gridset) +1
         grille_xmax = grille_xmax - Grid_x0(gridset) +1
         grille_ymin = grille_ymin - Grid_y0(gridset) +1
         grille_ymax = grille_ymax - Grid_y0(gridset) +1

         if (grille_xmax-grille_xmin.le.0.or.grille_ymax-grille_ymin.le.0) then

             Dslab_nnio(gridset)=0

         else

             ierr= slabig34(Grid_ig3(gridset),Grid_ig4(gridset),
     %                 grille_xmin,grille_xmax,grille_ymin,grille_ymax)
             if (ierr.lt.0) then
                if  (Lun_out.gt.0) write(Lun_out,*)'ERROR in slabig34' 
                call gem_stop('set_dslab',-1) 
             endif

             Dslab_niout(gridset)=Dslab_xmax(gridset)-Dslab_xmin(gridset)+1

             ij = 0
             do j = Dslab_ymin(gridset), Dslab_ymax(gridset)
                do i = Dslab_xmin(gridset), Dslab_xmax(gridset)
                   ij= 1+i-Dslab_xmin(gridset)+
     %                  (j-Dslab_ymin(gridset))*Dslab_niout(gridset)
                   F_xnio(ij,gridset)=ij
                enddo
             enddo

             Dslab_nnio(gridset) = ij

         endif

 100  continue
*     
      return
      end
