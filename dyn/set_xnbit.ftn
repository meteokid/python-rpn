***s/p set_xnbit - initialize list of variables to output
*
#include <model_macros_f.h>
*
      integer function set_xnbit (F_argc,F_argv_S,F_cmdtyp_S,F_v1,F_v2)
*
#include "impnone.cdk"
*
      integer F_argc,F_v1,F_v2
      character *(*) F_argv_S(0:F_argc),F_cmdtyp_S
*
*author Vivian Lee - rpn - April 1999
*
*revision
* v2_00 - Lee V.            - initial MPI version
* v2_10 - Lee V.            - replaced CNMXPHY with Slab_pntop
* v2_21 - J. P. Toviessi    - set diez (#) slab output
* v2_31 - Lee V.            - add chemistry output list
* v2_32 - Lee V.            - gridset,levset,stepset are now IDs defined by the
* v2_32                       user so, they are matched to the SORTIE command
*
*object
*       initialization of the common blocks OUTD,OUTP,OUTC. This function is
*       called when the keyword "sortie" is found in the first word
*       of the directives in the input file given in the statement
*       "process_f_callback". This feature is enabled by the
*       ARMNLIB "rpn_fortran_callback" routine (called in "srequet")
*       which allows a different way of passing user directives than
*       the conventional FORTRAN namelist. This function will process
*       the following example command read from the named input file.
*
* ie:   sortie([UU,VV,TT],levels,2,grid,3,steps,1,typvar,'A')
*       sortie([PR,PC,RR],grid,3,steps,2,levels,1)
*
*       The "rpn_fortran_callback" routine will process the above
*       statement and return 5 arguments to this function. For more
*       information to how this is processed, see "SREQUET".
*
*	
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_argc       I    - number of elements in F_argv_S
* F_argv_S     I    - array of elements received
*                     if F_argv_S(ii) contains "[", the value in this
*                     argument indicates number of elements following it
* F_cmdtyp_S   I    - character command type - not used
* F_v1         I    - integer parameter 1 - not used
* F_v2         I    - integer parameter 2 - not used
*----------------------------------------------------------------
*
*Notes:
*    ie:   sortie([UU,VV,TT],levels,2,grid,3,steps,1,typvar,A)
*          sortie([PR,PC,RR],grid,3,steps,2,levels,1)
*
* sortie([vr1,vr2,vr3,...],levels,[levelset],grid,[gridset],steps,[stepset])
*
*  vr1,vr2,vr3... - set of variable names to output (max of 60)
*  levelset - levelset number to use for this set of variables
*  gridset  - gridset number to use for this set of variables
*  stepset  - stepset number (timestep set) to use for this set of variables
*  typvar   - character to represent variable type specifed for each set,
*             by default, it will be "P" for prevision
*
*  For each "sortie" command, the levelset, gridset and stepset must be
*  specified or an error will occur.
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "dimout.cdk"
#include "setsor.cdk"
#include "p_bus.cdk"
#include "out3.cdk"
#include "outd.cdk"
#include "outp.cdk"
#include "grid.cdk"
#include "level.cdk"
#include "timestep.cdk"
*
**
*
      character*1 typvar_S
      character*5 stuff_S
      character*8 varname_S
      integer bits,varmax
      integer i, j, k, m, pndx, ii, jj, kk
*
*----------------------------------------------------------------
*
      write(Lun_out,*)
      write(Lun_out,*) F_argv_S
      set_xnbit=0
      Out3_xnbits_max = Out3_xnbits_max + 1
      if (Out3_xnbits_max.gt.MAXELEM) then
          write(Lun_out,*)'set_xnbit WARNING: Too many definitions XNBITS'
          Out3_xnbits_max = Out3_xnbits_max - 1
          set_xnbit = 1
          return
      endif

      if (index(F_argv_S(1),'[').gt.0) then
          stuff_S=F_argv_S(1)
          read(stuff_S(2:4),*) varmax
      else
          write(Lun_out,*)
     $                    'set_xnbit WARNING: syntax incorrect'
        set_xnbit=1
          Out3_xnbits_max = Out3_xnbits_max - 1
        return
      endif
*
*     Obtain compaction bits request
*
      bits=0
      do i=varmax+2, F_argc
         if (F_argv_S(i).eq.'bits') read(F_argv_S(i+1),*) bits
      enddo

      if (bits.le.0) then
          write(Lun_out,*) 'set_xnbit WARNING: Number of bits not chosen'
         set_xnbit=1
          Out3_xnbits_max = Out3_xnbits_max - 1
         return
      endif
*
*     Store variables in variable sets
*
      j = Out3_xnbits_max + varmax
      if (j.gt.MAXELEM) then
          write(Lun_out,*) 'set_xnbit WARNING: too many variables for xnbits'
          set_xnbit=1
          return
      endif
*
      jj=Out3_xnbits_max
      do ii=1,varmax
         jj = jj+1
         Out3_xnbits_S(jj)    = F_argv_S(ii+1)
         Out3_xnbits(jj)  = bits
      enddo
      Out3_xnbits_max = jj
*
*----------------------------------------------------------------
*
      return
      end
