!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "msg.h"
#include "constants.h"
#include "stop_mpi.h"

subroutine adx_trajsp
   call stop_mpi(STOP_ERROR,'adx_trajsp','called a stub')
   return
end subroutine adx_trajsp


!/**
subroutine adx_trajsp1(F_lon, F_lat, F_x, F_y, F_z, F_u, F_v, F_dt, &
     i0,in,j0,jn)
   implicit none
   !@objective improves estimates of upwind positions
   !@arguments
   real, dimension(*) :: &
        F_lon,         &  !O, upwind longitudes at central time 
        F_lat,         &  !I/O, upwind lat at central time 
        F_x, F_y, F_z, &  !O, upwind cartesian positions at central time
        F_u, F_v          !I, real wind components at upwind pos
   real    :: F_dt        !I, timestep lenght
   integer :: i0,in,j0,jn !I, scope of operator
   !@author  alain patoine
   !@revisions
   ! v3_00 - Desgagne & Lee    - Lam configuration
   ! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
!**/
#include "adx_dims.cdk"
#include "adx_grid.cdk"
   !---------------------------------------------------------------------
   call adx_trajsp1_noptr(F_lon, F_lat, F_x, F_y, F_z, F_u, F_v, &
        adx_cx_8,adx_cy_8,adx_sx_8,adx_sy_8, &
        F_dt,i0,in,j0,jn,adx_lni,adx_lnj)
   !---------------------------------------------------------------------
   return
end subroutine adx_trajsp1



!/**
subroutine adx_trajsp2(F_lon, F_lat, F_x, F_y, F_z, F_u, F_v, F_dt, &
     i0,in,j0,jn,F_ni,F_nj,F_nk)
   implicit none
   !@objective improves estimates of upwind positions
   !@arguments
   integer :: F_ni,F_nj,F_nk !I, 
   real, dimension(F_ni,F_nj,F_nk) :: &
        F_lon, F_lat, &   !O, upwind longitudes at central time 
        F_x, F_y, F_z, &  !O, upwind cartesian positions at central time
        F_u, F_v          !I, real wind components at upwind pos
   real    :: F_dt        !I, timestep lenght
   integer :: i0,in,j0,jn !I, scope of operator
   !@author  alain patoine
   !@revisions
   ! v3_00 - Desgagne & Lee    - Lam configuration
   ! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
!**/
!!$#undef __ADX_DIMS__
!!$#include "adx_dims.cdk"
!!$#undef __ADX_GRID__
!!$#include "adx_grid.cdk"
!!$   integer :: vnij, i,j,k, trj_i_off
!!$   real*8 :: pdsa, pdca, pdcai, pdso, pdco, pdx, pdy, pdz
!!$   real*8 :: pdux, pduy, pduz, pdsinal, pdcosal
!!$   real*8,dimension(i0:in,j0:jn) :: xcos, ycos, xsin, ysin, yrec
!!$   real*8,dimension(i0:in,j0:jn) :: xasin, yasin, xatan, yatan, zatan
   !---------------------------------------------------------------------
   call stop_mpi(STOP_ERROR,'adx_trajsp2','called a stub')
!!$   call msg(MSG_DEBUG,'adx_trajsp')
!!$   vnij = (in-i0+1)*(jn-j0+1)
!!$   trj_i_off = adx_mli0 - adx_li0
!!$
!!$!$omp parallel do private(ysin,ycos,yrec,xasin,xatan,yatan, &
!!$!$omp zatan,yasin,xsin,xcos, pdx,pdy,pdz,pdsa,pdca, &
!!$!$omp pdcai,pdso,pdco,pdux,pduy,pduz,pdsinal,pdcosal)
!!$   DO_K: do k=1,F_nk
!!$      do j=j0,jn
!!$         do i=i0,in
!!$            xcos(i,j) = F_lat(i,j,k)
!!$            xsin(i,j) = sqrt(F_u(i,j,k)**2 + F_v(i,j,k)**2) * F_dt
!!$         end do
!!$      end do
!!$      call vsin(ysin, xsin, vnij)
!!$      call vcos(ycos, xcos, vnij)
!!$      call vrec(yrec, ycos, vnij)
!!$
!!$      DO_J1: do j=j0,jn
!!$         DO_I1: do i=i0,in
!!$            !- cartesian coordinates of grid points
!!$            pdx = adx_cx_8(trj_i_off + i)
!!$            pdy = adx_sx_8(trj_i_off + i)
!!$            pdz = adx_sy_8(j)
!!$
!!$            !- if very small wind set upwind point to grid point
!!$            if (abs(F_u(i,j,k))+abs(F_v(i,j,k)) >= 1.e-10) then
!!$               pdx = pdx * adx_cy_8(j)
!!$               pdy = pdy * adx_cy_8(j)
!!$
!!$               ! sin and cosin of first guess of upwind positions
!!$               pdsa  = F_z(i,j,k)
!!$               pdca  = ycos(i,j)
!!$               pdcai = yrec(i,j)
!!$               pdso  = F_y(i,j,k) * pdcai
!!$               pdco  = F_x(i,j,k) * pdcai
!!$
!!$               !- wind components in cartesian coordinate at upwind positions
!!$               pdux = ( - F_u(i,j,k) * pdso - F_v(i,j,k) * pdco * pdsa )
!!$               pduy = (   F_u(i,j,k) * pdco - F_v(i,j,k) * pdso * pdsa )
!!$               pduz =     F_v(i,j,k) * pdca
!!$
!!$               pdsinal = pdx * pdux + pdy * pduy + pdz * pduz
!!$               pdux = pdux - pdx * pdsinal
!!$               pduy = pduy - pdy * pdsinal
!!$               pduz = pduz - pdz * pdsinal
!!$               pdcosal = sqrt((1. + ysin(i,j)) * (1. - ysin(i,j)))
!!$               pdsinal = ysin(i,j) / sqrt(pdux*pdux + pduy*pduy + pduz*pduz)
!!$
!!$               F_x(i,j,k) = pdcosal * pdx - pdsinal * pdux
!!$               F_y(i,j,k) = pdcosal * pdy - pdsinal * pduy
!!$               F_z(i,j,k) = pdcosal * pdz - pdsinal * pduz
!!$            endif
!!$
!!$            F_z(i,j,k) = min(1.D0,max(1.D0*F_z(i,j,k),-1.D0))
!!$
!!$            xasin(i,j) = F_z(i,j,k)
!!$            xatan(i,j) = F_x(i,j,k)
!!$            yatan(i,j) = F_y(i,j,k)
!!$
!!$         enddo DO_I1
!!$      enddo DO_J1
!!$
!!$!TODO: merge this part with the same done in trajex
!!$      call vasin( yasin, xasin,        vnij)
!!$      call vatan2(zatan, yatan, xatan, vnij)
!!$
!!$      do j=j0,jn
!!$         do i=i0,in
!!$            F_lat(i,j,k) = yasin(i,j)
!!$            F_lon(i,j,k) = zatan(i,j) 
!!$            if (F_lon(i,j,k) < 0.) F_lon(i,j,k) = F_lon(i,j,k) + CONST_2PI_8
!!$         end do
!!$      end do
!!$
!!$   enddo DO_K
!!$!$omp end parallel do
!!$   call msg(MSG_DEBUG,'adx_trajsp [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_trajsp2
