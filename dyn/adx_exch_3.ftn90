!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "msg.h"
#include "stop_mpi.h"

subroutine adx_exch_3()
   call stop_mpi(STOP_ERROR,'adx_exch_3','called a stub')
   return
end subroutine adx_exch_3

!/**
subroutine adx_exch_3b(F_1_out, F_2_out, F_1_in,  F_2_in,  F_c_in, F_n_treat,&
   F_ni,F_nj,F_nk)
   implicit none
#include "adx_dims.cdk"
#include "adx_poles.cdk"
   !@objective fetch back interpolated values after being 
   !           obtained from neighbor processors for 1 or 2 fields
   !@arguments
   integer :: F_ni,F_nj,F_nk        !I, dims
   integer :: F_n_treat
   integer :: F_c_in(adx_for_a)
   real    :: F_1_in(adx_for_a), F_2_in(adx_for_a)
   real,dimension(F_ni*F_nj*F_nk) :: F_1_out, F_2_out
   !______________________________________________________________________
   !              |                                                 |     |
   ! NAME         | DESCRIPTION                                     | I/O |
   !--------------|-------------------------------------------------|-----|
   !              |                                                 |     |
   ! F_1_out      | \ interpolated fields for which some values     |  o  |
   ! F_2_out      | / obtained from neighbors have to be fetched    |  o  |
   !              |   back in the appropriate positions             |     |
   !              |                                                 |     |
   ! F_1_in       | \ interpolated values obtained from neighbors   |  i  |
   ! F_2_in       | /                                               |  i  |
   !              |                                                 |     |
   ! F_c_in       | 3D coordinates of points for which upstream     |  i  |
   !              | positions were outside advection source grid and|     |
   !              | interpolated values were obtained from neighbors|  i  |
   !              |                                                 |     |
   ! F_n_treat    | number of vectors to treat                      |  i  |
   !______________|_________________________________________________|_____|
   !@author alain patoine
   !@revisions
   !  
!**/
   integer :: n
   !---------------------------------------------------------------------
   call msg(MSG_DEBUG,'adx_exch_3')
   if (F_n_treat == 1) then

      do n = 1, adx_for_a
         F_1_out(F_c_in(n)) = F_1_in(n)
      enddo

   else if (F_n_treat == 2) then

      do n = 1, adx_for_a
         F_1_out(F_c_in(n)) = F_1_in(n)
         F_2_out(F_c_in(n)) = F_2_in(n)
      enddo

   endif
   call msg(MSG_DEBUG,'adx_exch_3 [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_exch_3b
