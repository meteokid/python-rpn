*** s/r uv2tdpsd_ad - ADJ of uv2tdpsd_tl 
*
#include <model_macros_f.h>
*
      subroutine uv2tdpsd_ad( F_td, F_psd, F_uu, F_vv, F_ss,
     $                                    F_uum,F_vvm,F_ssm,
     $                                    DIST_DIM, Nk )
*
      implicit none
*
      integer DIST_DIM, Nk
*
      real    F_td(DIST_SHAPE,Nk), F_psd(DIST_SHAPE,Nk),
     $        F_uu(DIST_SHAPE,Nk), F_vv (DIST_SHAPE,Nk),
     $        F_ss(DIST_SHAPE),
     $        F_uum(DIST_SHAPE,Nk),F_vvm (DIST_SHAPE,Nk),
     $        F_ssm(DIST_SHAPE)
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate
* v3_00 - Laroche S.        - cleanup 
* v3_02 - Tanguay M.        - correct zeroing of winds halo 
* v3_03 - Tanguay M.        - use v4d_zerohalo 
*                           - split call to rpn_comm_xch_halo for uv
*
*object
*     see id section
*
*arguments
*_________________________________________________________________________
*          |                                             |           |   |
* NAME     |             DESCRIPTION                     | DIMENSION |I/O|
*----------|---------------------------------------------|-----------|---|
* F_td     | total divergence                            | 3D        |io |
* F_psd    | vertical velocity ( pi*-dot )               | 3D        |io |
*----------|---------------------------------------------|-----------|---|
* F_uu     | x component of velocity                     | 3D        |io |
* F_vv     | y component of velocity                     | 3D        |io |
* F_ss     | ln ( pi / z )                               | 2D        |io |
*          |        s   s                                |           |   |
* F_uum    | traj of x component of velocity             | 3D        |i  |
* F_vvm    | traj of y component of velocity             | 3D        |i  |
* F_ssm    | traj of ln ( pi / z )                       | 2D        |i  |
*          |                s   s                        |           |   |
*__________|_____________________________________________|___________|___|
*
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
*
      integer i, j, k
      real pr1, prsc, pr1m
      real*8, parameter :: ZERO_8 = 0.0
*
      real F_psdm(LDIST_SHAPE,l_nk),F_tdm(LDIST_SHAPE,l_nk)
      real  uv(DIST_SHAPE,Nk,2), dvi(DIST_SHAPE,Nk), w1(DIST_SHAPE,Nk)
      real uvm(DIST_SHAPE,Nk,2),dvim(DIST_SHAPE,Nk),w1m(DIST_SHAPE,Nk)
*
*     ________________________________________________________________
*
*     ZERO adjoint and working variables
*     ----------------------------------
      pr1 = ZERO_8
      do k=1,G_nk
      do j=Miny,Maxy
      do i=Minx,Maxx
         F_tdm(i,j,k) = ZERO_8
         uvm(i,j,k,1) = ZERO_8
         uvm(i,j,k,2) = ZERO_8
         w1(i,j,k)    = ZERO_8
         dvi(i,j,k)   = ZERO_8
         uv(i,j,k,1)  = ZERO_8
         uv(i,j,k,2)  = ZERO_8
      end do
      end do
      end do
*
*     ________________________________________________________________
*
*     ----------------
*     START TRAJECTORY
*     ----------------
*

      call rpn_comm_xch_halo( F_ssm, LDIST_DIM, l_ni, l_nj , 1,
     $                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
*              __              *
*  b) compute  \/ . ( V dpi/dpi )

      do k=1,G_nk
         do j = 1, l_nj
         do i = 1, l_niu

            uvm(i,j,k,1) = F_uum(i,j,k) * (
     $  (1.-intuv_c0xxu_8(i))*(1.+(geomg_dpib(k)*(exp(F_ssm(i  ,j))-1.)))
     $   +  intuv_c0xxu_8(i) *(1.+(geomg_dpib(k)*(exp(F_ssm(i+1,j))-1.))))

         end do
         end do

         do j = 1, l_njv
         do i = 1, l_ni

            uvm(i,j,k,2) = F_vvm(i,j,k) * (
     $  (1.-intuv_c0yyv_8(j))*(1.+(geomg_dpib(k)*(exp(F_ssm(i,j  ))-1.)))
     $   +  intuv_c0yyv_8(j) *(1.+(geomg_dpib(k)*(exp(F_ssm(i,j+1))-1.))))

         end do
         end do
      end do
*
      call rpn_comm_xch_halo (uvm,               LDIST_DIM, l_niu,l_nj,
     $                 G_nk,G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo (uvm(minx,miny,1,2),LDIST_DIM, l_ni,l_njv,
     $                 G_nk,G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      call caldiv_2 ( F_tdm, uvm(minx,miny,1,1), uvm(minx,miny,1,2),
     $                LDIST_DIM, G_nk )
*
*                   *
*                 pi
*                /  gnk
*                |   __             *      *
*  c) compute    |   \/ . ( V dpi/dpi ) dpi
*                |
*                /  *
*                 pi
*                   k
*
      call hatoprg (dvim,F_tdm,w1m,1.0,geomg_hz_8,LDIST_DIM,G_nk)
*
      do k=1,G_nk
       do j=1,l_nj
       do i=1,l_ni
*
         pr1m = 1.0 + geomg_dpib(k) * (exp(F_ssm(i,j)) - 1.0)
         F_psdm(i,j,k) = (dvim(i,j,k) + ((geomg_pib(k)/
     $                   geomg_pib(G_nk)) -1) * dvim(i,j,1))/pr1m
*
       end do
       end do
      end do
*                   .*
*                dpi
*  Compute   D + ----  integrated vertically
*  -------          *
*                dpi
*
*      
*   compute  V . \/ (dpi/dpi )
*
*
      do k=1,G_nk
*
         do j = 1, l_nj
         do i = 1, l_niu
           uvm(i,j,k,1) = ((F_ssm(i+1,j)-F_ssm(i,j))/geomg_hx_8(i))*F_uum(i,j,k) 
         end do
         end do
*
         do j = 1, l_njv
         do i = 1, l_ni
           uvm(i,j,k,2) = ((F_ssm(i,j+1) - F_ssm(i,j))
     $                  * geomg_cyv2_8(j)/geomg_hsy_8(j) )*F_vvm(i,j,k)
         end do   
         end do
*
      end do
*
      call p_uvgridscal ( uvm(minx,miny,1,1), uvm(minx,miny,1,2),
     $                    LDIST_DIM, l_nk, .true.)
*
      do k=1,G_nk
       do j= 1, l_nj
       do i= 1, l_ni
            w1m(i,j,k)= (uvm(i,j,k,1)+uvm(i,j,k,2))/geomg_cy2_8(j)
       end do
       end do
      end do
*
*
*   Compute total divergence
*   ------------------------
*
       prsc = 1./geomg_pib(G_nk)
       do k=1,G_nk
        do j= 1, l_nj
        do i= 1, l_ni
*
         F_tdm(i,j,k)= geomg_dpib(k)* (prsc*dvim(i,j,1) 
     $                          - exp(F_ssm(i,j))          *w1m(i,j,k))
     $                -F_psdm(i,j,k)*(exp(F_ssm(i,j))           -1.)*geomg_dpia(k)
*
        enddo
        enddo
       enddo
*
*     --------------
*     END TRAJECTORY
*     --------------
*     ________________________________________________________________
*
*       ---------
*       START ADJ
*       ---------
*
*     ADJ of
*     Boundary conditions for vertical velocity
*
      do j= 1, l_nj
      do i= 1, l_ni
*
         F_psd(i,j,1)    = 0.0
         F_psd(i,j,G_nk) = 0.0
*
      end do
      end do
*
*   Compute total divergence
*   ------------------------
*
       prsc = 1./geomg_pib(G_nk)
*
       do k=G_nk,1,-1
        do j= 1, l_nj
        do i= 1, l_ni
*
        F_ss(i,j)     = - (geomg_dpib(k)*(exp(F_ssm(i,j))*F_td(i,j,k))) *
     $                    (F_tdm(i,j,k)/(1 + geomg_dpib(k)*(exp(F_ssm(i,j)) -1.))**2) + F_ss(i,j)
*
        F_td(i,j,k)  = F_td (i,j,k)/(1 + geomg_dpib(k)*(exp(F_ssm(i,j)) -1.))
*
        dvi(i,j,1)   = geomg_dpib(k)*(prsc*F_td(i,j,k))                             + dvi(i,j,1)
*
        F_ss(i,j)    = geomg_dpib(k)*(-exp(F_ssm(i,j))*F_td(i,j,k)*w1m(i,j,k))      + F_ss(i,j) 
*
        w1(i,j,k)    = geomg_dpib(k)*(-exp(F_ssm(i,j))*F_td(i,j,k))                 + w1(i,j,k)  
*
        F_psd(i,j,k) = -F_td  (i,j,k)*(exp(F_ssm(i,j))-1.)*geomg_dpia(k)            + F_psd(i,j,k)
*
        F_ss(i,j)    = -F_psdm(i,j,k)*(exp(F_ssm(i,j))*F_td(i,j,k))*geomg_dpia(k)   + F_ss(i,j)
*
        F_td(i,j,k)  = ZERO_8 
*
        enddo
        enddo
       enddo
*
*                   .*
*                dpi
*  Compute   D + ----  integrated vertically
*  -------          *
*                dpi
*
*
*  a) compute  V . \/ (dpi/dpi )
*
      do k=1,G_nk
       do j= 1, l_nj
       do i= 1, l_ni
            uv(i,j,k,1)= (w1(i,j,k))/geomg_cy2_8(j) + uv(i,j,k,1)
            uv(i,j,k,2)= (w1(i,j,k))/geomg_cy2_8(j) + uv(i,j,k,2)
            w1(i,j,k)= ZERO_8
       end do
       end do
      end do
*
*

      call p_uvgridscal_ad ( uv(minx,miny,1,1), uv(minx,miny,1,2),
     $                       LDIST_DIM, l_nk, .true.)

*
*
      do k=1,G_nk
      do j = l_njv,1,-1
      do i = 1, l_ni  
*
         F_ss(i,j+1) = ( uv(i,j,k,2)*geomg_cyv2_8(j)/geomg_hsy_8(j))*F_vvm(i,j,k) + F_ss (i,j+1)
*
         F_ss(i,j  ) = (-uv(i,j,k,2)*geomg_cyv2_8(j)/geomg_hsy_8(j))*F_vvm(i,j,k) + F_ss (i,j) 
*
         F_vv(i,j,k) =   uv(i,j,k,2)*(geomg_cyv2_8(j)/geomg_hsy_8(j))*(F_ssm(i,j+1)-F_ssm(i,j)) + F_vv (i,j,k)
*
         uv(i,j,k,2) = ZERO_8
*
      end do
      end do
      end do
*
      do k=1,G_nk
      do j = 1, l_nj 
      do i = l_niu, 1,-1
         F_ss(i+1,j) = ( uv(i,j,k,1)/geomg_hx_8(i))*F_uum(i,j,k)+ F_ss (i+1,j)
*
         F_ss(i,j)   = (-uv(i,j,k,1)/geomg_hx_8(i))*F_uum(i,j,k) + F_ss (i,j)
*
         F_uu(i,j,k) =  uv(i,j,k,1)*((F_ssm(i+1,j)-F_ssm(i,j))/geomg_hx_8(i)) + F_uu (i,j,k) 
*
         uv(i,j,k,1) = ZERO_8 
*
      end do
      end do
      end do
*
*
*                .*
*  d)  compute pi
*                k
*
      do k=G_nk,1,-1
       do j=1,l_nj
       do i=1,l_ni
*
         pr1m         = 1.0 + geomg_dpib(k) * (exp(F_ssm(i,j)) - 1.0)
*
         dvi(i,j,k)   =  F_psd(i,j,k)/pr1m   + dvi(i,j,k)
*
         dvi(i,j,1)   =  (((geomg_pib(k)/geomg_pib(G_nk))-1)*F_psd(i,j,k))/pr1m  + dvi(i,j,1)
*
         pr1          =   - F_psd(i,j,k)*((dvim(i,j,k) + ((geomg_pib(k)/geomg_pib(G_nk))-1)*dvim(i,j,1))/pr1m**2) + pr1
*
         F_psd(i,j,k) = ZERO_8
*
         F_ss(i,j)    = geomg_dpib(k) * (exp(F_ssm(i,j))*pr1)  + F_ss(i,j)
*
         pr1          = ZERO_8
*
       end do
       end do
      end do
*
*
*                   *
*                 pi
*                /  gnk
*                |   __             *      *
*  c) compute    |   \/ . ( V dpi/dpi ) dpi
*                |
*                /  *
*                 pi
*                   k
*
*
      call hatoprg_ad (dvi,F_td,w1,1.0,geomg_hz_8,LDIST_DIM,G_nk)
*
*     Zero temporary Work adjoint array
*     ---------------------------------
      do k=1,Nk
      do j=Miny,Maxy
      do i=Minx,Maxx
       uv(i,j,k,1) = ZERO_8
       uv(i,j,k,2) = ZERO_8
      enddo
      enddo
      enddo
*
*
*  b) compute  \/ . ( V dpi/dpi )
*
*
      call caldiv_2_ad ( F_td, uv(minx,miny,1,1), uv(minx,miny,1,2), 
     $                   LDIST_DIM, G_nk )
*
      call rpn_comm_adj_halo (uv(minx,miny,1,2), LDIST_DIM, l_ni,l_njv,
     $                 G_nk,G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_adj_halo (uv,                LDIST_DIM, l_niu,l_nj,
     $                 G_nk,G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
*     Zero u,v halo
*     -------------
      call v4d_zerohalo ( uv(minx,miny,1,2), l_ni, l_njv,LDIST_DIM, l_nk)
      call v4d_zerohalo ( uv,                l_niu,l_nj, LDIST_DIM, l_nk)
*
*  b) compute  \/ . ( V dpi/dpi )

      do k=1,G_nk
         do j = l_njv,1,-1
         do i = 1, l_ni
*
         F_ss(i,j)   = F_ss(i,j)   +
     $     (1.-intuv_c0yyv_8(j))*(geomg_dpib(k)*(exp(F_ssm(i,j))*uv(i,j,k,2)))*F_vvm(i,j,k)
         F_ss(i,j+1) = F_ss(i,j+1) +
     $         intuv_c0yyv_8(j) *(geomg_dpib(k)*(exp(F_ssm(i,j+1))*uv(i,j,k,2)))*F_vvm(i,j,k)
         F_vv(i,j,k) = F_vv(i,j,k) +
     $                       ((1.-intuv_c0yyv_8(j))*(1.+geomg_dpib(k)*(exp(F_ssm(i,j))-1.))
     $                      +     intuv_c0yyv_8(j) *(1.+geomg_dpib(k)*(exp(F_ssm(i,j+1))-1.)))*uv(i,j,k,2)
         uv(i,j,k,2) = ZERO_8

         end do
         end do

         do j = 1, l_nj
         do i = l_niu,1,-1
*
         F_ss(i,j)   = F_ss(i,j)   +
     $     (1.-intuv_c0xxu_8(i))*(geomg_dpib(k)*(exp(F_ssm(i,j))*uv(i,j,k,1)))*F_uum(i,j,k)
         F_ss(i+1,j) = F_ss(i+1,j) +
     $         intuv_c0xxu_8(i) *(geomg_dpib(k)*(exp(F_ssm(i+1,j))*uv(i,j,k,1)))*F_uum(i,j,k)
         F_uu(i,j,k) = F_uu(i,j,k) +
     $                       ((1.-intuv_c0xxu_8(i))*(1.+geomg_dpib(k)*(exp(F_ssm(i,j))-1.))
     $                      +     intuv_c0xxu_8(i) *(1.+geomg_dpib(k)*(exp(F_ssm(i+1,j))-1.)))*uv(i,j,k,1)
         uv(i,j,k,1) = ZERO_8

         end do
         end do

      end do
*
*
      call rpn_comm_adj_halo( F_ss, LDIST_DIM, l_ni, l_nj , 1,
     $                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
*     Zero F_ss halo
*     --------------
      call v4d_zerohalo ( F_ss, l_ni, l_nj, LDIST_DIM, 1) 
*
      return
      end
