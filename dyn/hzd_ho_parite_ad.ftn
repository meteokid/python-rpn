***s/r hzd_ho_parite_ad  - ADJ of hzd_ho_parite_tl 
*
#include <model_macros_f.h>
*
      subroutine hzd_ho_parite_ad (  F_u   , F_v  , F_psd , F_tp , F_ip ,
     %                               F_td  , F_t  , F_it  , F_plt,   
     %                               F_pip , F_w  , F_qp  , F_mu , F_mul,  
     %                               F_pipm, F_qpm, DIST_DIM,Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
*
      real   F_u  (DIST_SHAPE,Nk), F_v (DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %       F_ip (DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %       F_t  (DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk),  
     %       F_pip(DIST_SHAPE,Nk), F_w (DIST_SHAPE,Nk),
     %       F_qp (DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk)
*
      real  F_pipm(DIST_SHAPE,Nk), F_qpm(DIST_SHAPE,Nk)
*
*author
*     M.Tanguay
*
*revision
* v3_02 - Tanguay M.        - initial MPI version
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
*                           - Remove F_xfis
*
*object
* The diffusion includes: second order(Hzd_pwr=1), 
* fourth order(Hzd_pwr=2), sixth (Hzd_pwr=3) and 
* eightth order (Hzd_pwr=4) diffusion
*
*arguments
*
*implicits
#include "glb_ld.cdk"
#include "ldnh.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
*
      integer i, j, k, dpwr
      real*8 wk1_8
      real   wk2(LDIST_SHAPE,Nk), wk2_m(LDIST_SHAPE,Nk)
      integer NSTOR,nev,nev1
*
      real*8 ZERO_8
      parameter (ZERO_8=0.0)
*     __________________________________________________________________
*
*     Zero adjoint variables
*     ----------------------
      wk1_8 = ZERO_8
*
!$omp parallel do
      do k=1,l_nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
      wk2(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp end parallel do
*
      dpwr = Hzd_pwr / 2

      nev= (G_ni+2)/2
      NSTOR = nev + ( 1 - mod(nev,2) )
      if (Lun_debug_L) write(Lun_out,1000) Hzd_pwr
*
      if ( Hzd_cdiff .gt. 0.0 ) then
*
      if (Hzd_uvwdt_L) goto 9988
*
*     TRAJECTORY
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
*
!$omp parallel
*
!$omp do
            do k = 1, Nk
            do j = 1,l_nj
            do i = 1,l_ni
*
            wk2_m(i,j,k) = F_pipm(i,j,k)
*
            end do
            end do
            end do
!$omp end do
*
*****************************
*  ADJ of                   *
*  3. Nonyhydrostatic model *
*****************************
*
*        ----------------
*        START TRAJECTORY
*        ----------------
*
*        Indirect diffusion of q'
*        ~~~~~~~~~~~~~~~~~~~~~~~~
!$omp do
         do k=1, Nk  !
         do j=1,l_nj ! p = (pi)exp(q')
         do i=1,l_ni ! ~~~~~~~~~~~~~~~
*
            wk2_m(i,j,k) = ( Geomg_z_8(k) + dble(wk2_m(i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) )
*
         end do
         end do
         end do
!$omp end do
*
!$omp end parallel 
*
         call hzd_solparite_2(wk2_m, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
*        --------------
*        END TRAJECTORY
*        --------------
*
*        START ADJOINT CALCULATIONS
*        --------------------------
*
!$omp parallel do 
         do k=1, Nk  !
         do j=1,l_nj ! q' = log(p/pi)
         do i=1,l_ni ! ~~~~~~~~~~~~~~
*
            wk2   (i,j,k) = ( dble(F_qp (i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) )
     %                     /( dble(wk2_m(i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) ) + wk2(i,j,k)
            F_pip (i,j,k) = (-dble(wk2_m(i,j,k))*(                dble(F_qp  (i,j,k))) )
     %                     /( dble(wk2_m(i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) ) + F_pip (i,j,k)
            F_qp  (i,j,k) = ZERO_8
*
         end do
         end do
         end do
!$omp end parallel do 
*
         call hzd_solparite_2_ad(wk2, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
*        Indirect diffusion of q'
*        ~~~~~~~~~~~~~~~~~~~~~~~~
!$omp parallel do 
         do k=1, Nk  !
         do j=1,l_nj ! p = (pi)exp(q')
         do i=1,l_ni ! ~~~~~~~~~~~~~~~
*
*
            F_qp(i,j,k) = ( Geomg_z_8(k) + dble(wk2_m (i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) ) * dble(wk2(i,j,k)) + F_qp(i,j,k)
*
            wk2 (i,j,k) = (                dble(wk2   (i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) )
*
         end do
         end do
         end do
!$omp end parallel do 
*
         call hzd_solparite_2_ad(F_mul, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
         call hzd_solparite_2_ad(F_mu, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
*        END ADJOINT CALCULATIONS
*        ------------------------
*
         endif
*
         if ( .not. Schm_hydro_L ) then
*
*     ADJ of
*     Vertical wind (physical)
*     ~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solparite_2_ad(F_w, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
         endif
*
*     ADJ of
*     The hydrostatic pressure: pi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solparite_2_ad(F_pip, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
!$omp parallel 
*
*     ADJ of
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
!$omp do 
            do k = 1, Nk
            do j = 1,l_nj
            do i = 1,l_ni
*
               F_pip(i,j,k) = wk2(i,j,k) + F_pip(i,j,k)
                wk2 (i,j,k) = ZERO_8
*
            end do
            end do
            end do
!$omp end do 
         endif
*
*     ADJ of
*     The temperature: T', T'lin & hence T 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!$omp do 
         do k=1, Nk
         do j=1,l_nj
         do i=1,l_ni
            F_tp(i,j,k) = F_t(i,j,k) + F_tp(i,j,k)
             F_t(i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp end do 
*
!$omp end parallel 
*
         call hzd_solparite_2_ad(F_plt, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
         call hzd_solparite_2_ad(F_tp, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
*
!$omp parallel 
*
* ADJ of
* updating phi' at the top
*
!$omp do 
         do j = 1,l_nj
         do i = 1,l_ni
            F_it(i,j,1) = F_ip(i,j,1) + F_it(i,j,1)
            F_ip(i,j,1) = ZERO_8
         end do
         end do
!$omp end do 
*
*     ADJ of
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
!$omp do 
         do k = 2, Nk
         do j = 1,l_nj
         do i = 1,l_ni
            F_ip(i,j,k) = F_it(i,j,k) + F_ip(i,j,k)
            F_it(i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp end do 
*
!$omp end parallel 
*
         call hzd_solparite_2_ad(F_it, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8,Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
         call hzd_solparite_2_ad(F_ip, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8,Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
 9988 continue
*
*     ADJ of
*     Total divergence
*     ~~~~~~~~~~~~~~~~
         call hzd_solparite_2_ad(F_td, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
*     ADJ of
*     Vertical motion in pressure coord.
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solparite_2_ad(F_psd, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
*     ADJ of
*     Momentum
*     ~~~~~~~~
         call hzd_solparite_2_ad(F_v, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_av_8,Hzd_cv_8, Hzd_deltav_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn,Opr_opsxp0_8,Hzd_yp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
         nev1= (G_ni+1)/2
         call hzd_solparite_U_ad(F_u, wk1_8, Hzd_evvec_8, Hzd_odvec_8,
     %                    Hzd_au_8,Hzd_cu_8,Hzd_deltau_8,
     %                    trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                    trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                    trp_12dn, Hzd_xp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev1)
*
      endif
*
 1000 format(/,
     $     3X,'ADJ of PERFORM DEL-',i1,' HORIZONTAL DIFFUSION: (S/R hzd_ho_parite_ad)')
*     __________________________________________________________________
*
      return
      end
