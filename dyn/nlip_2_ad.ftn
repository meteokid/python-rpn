***s/r nlip_2_ad - ADJ of nlip_2_tl 
*
#include <model_macros_f.h>
*
      subroutine nlip_2_ad ( F_nu, F_nv, F_n1, F_nth, F_n3, F_n3p,
     $                       F_rheln, F_rhell, F_tpt0, F_tplt0, F_pipt0,
     $                       F_ncn,   F_st0  , F_qt0 , F_fipt0, F_fis  ,
     $                       F_ut0, F_vt0, F_mut0 , F_multx,
     $                       F_wijk1, F_wijk2,
*
     $                                         F_tpt0m,         F_pipt0m,
     $                                F_st0m , F_qt0m ,
*
     $                       DIST_DIM, Nk )
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
      real    F_nu   (DIST_SHAPE,Nk), F_nv   (DIST_SHAPE,Nk),
     %        F_n1   (DIST_SHAPE,Nk), F_nth  (DIST_SHAPE,Nk),
     %        F_n3   (DIST_SHAPE,Nk), F_n3p  (DIST_SHAPE,Nk),
     %        F_rheln(DIST_SHAPE,Nk), F_rhell(DIST_SHAPE,Nk),
     %        F_tpt0 (DIST_SHAPE,Nk), F_tplt0(DIST_SHAPE,Nk),
     %        F_pipt0(DIST_SHAPE,Nk), F_ncn  (DIST_SHAPE,Nk),
     %        F_st0  (DIST_SHAPE)   , F_qt0  (DIST_SHAPE,Nk),
     %        F_fipt0(DIST_SHAPE,Nk), F_fis  (DIST_SHAPE)   ,
     %        F_ut0  (DIST_SHAPE,Nk), F_vt0  (DIST_SHAPE,Nk),
     %        F_mut0 (DIST_SHAPE,Nk), F_multx(DIST_SHAPE,Nk), 
     %        F_wijk1(DIST_SHAPE,Nk), F_wijk2(DIST_SHAPE,Nk)
*
      real    
     %        F_tpt0m (DIST_SHAPE,Nk),
     %        F_pipt0m(DIST_SHAPE,Nk),
     %        F_st0m  (DIST_SHAPE)   ,F_qt0m  (DIST_SHAPE,Nk)
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - remove pi' at the top
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate and LAM version
* v3_00 - Tanguay M.        - adapt to restructured nlip_2 
*
*object 
*     see id section
*     ----------------------------------------------------
*     REMARK:INPUT TRAJ:F_tpt0m,  F_pipt0m, F_qt0m, F_st0m
*     ----------------------------------------------------
*
*arguments
*     see documentation of appropriate comdecks
*
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "cori.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "ptopo.cdk"
*
      integer i, j, k, i00, inn, j00, jnn, i0, in, j0, jn
      real w1, w2, w3, pd1, pd2, pd3, wk2(DIST_SHAPE)
      real*8 a1_8, a2_8, b1_8, b2_8, b3_8, gamma_8,
     $       ONE_8, HALF_8, QUARTER_8, aaa_8, bbb_8, ccc_8
      parameter ( ONE_8=1.0, HALF_8=.5, QUARTER_8=.25 )
*
      real*8 ZERO_8
      parameter ( ZERO_8=0.0 )
*
      real w1m,w2m,w3m,pd1m,pd2m,wk2m(DIST_SHAPE)
      real*8 cccm_8
*     ______________________________________________________
*
      if(.not. Schm_hydro_L) call gefstop('nlip_2_ad')
      if(      G_lam       ) call gefstop('nlip_2_ad')
*     ______________________________________________________
*
*
*     ----------------------------
*     Zero adjoint local variables
*     ----------------------------
      ccc_8 = ZERO_8 
      w1    = ZERO_8 
      w2    = ZERO_8 
      w3    = ZERO_8 
      pd1   = ZERO_8 
      pd2   = ZERO_8 
*
      do j = l_miny,l_maxy
      do i = l_minx,l_maxx
      wk2(i,j) = ZERO_8
      enddo
      enddo
*
*PDIR SERIAL
*
*     TRAJECTORY
*     ----------
      call rpn_comm_xch_halo( F_tpt0m ,LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_qt0m  ,LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
*PDIR ENDSERIAL
*
*     -------------------------
*     START ADJOINT CALCULATION
*     -------------------------
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
         if (l_west)  i0 = 1+pil_w
         if (l_east)  in = l_ni-pil_e
         if (l_south) j0 = 1+pil_s
         if (l_north) jn = l_nj-pil_n
      endif
*
***********************************************
* ADJ of
* The RHS of the nonlinear Helmholtz equation * 
***********************************************
*
      aaa_8 = Dcst_rayt_8*Dcst_rayt_8
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 301 k=l_nk,1,-1
*
      if ( k .eq. 1 ) then
*
         a2_8 = QUARTER_8*Geomg_hz_8(k)
         b2_8 = HALF_8*Geomg_z_8(k)
         b3_8 = HALF_8*Geomg_z_8(k+1)
*
*        ADJ 
*        ---
         do j= j0, jn
         do i= i0, in
*
          F_rhell(i,j,k  ) = aaa_8 * ( F_rheln(i,j,k)  ) + F_rhell(i,j,k  )
          F_wijk1(i,j,k  ) = aaa_8 * (
     %                      - a2_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k  )
          F_wijk1(i,j,k+1) = aaa_8 * (
     %                      - a2_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k+1)
          F_wijk2(i,j,k  ) = aaa_8 * (
     %                        b2_8 *   F_rheln(i,j,k)  ) + F_wijk2(i,j,k  )
          F_wijk2(i,j,k+1) = aaa_8 * (
     %                        b3_8 *   F_rheln(i,j,k)  ) + F_wijk2(i,j,k+1)
          F_rheln(i,j,k  ) = ZERO_8 
*
         end do
         end do
*
      elseif ( k .eq. l_nk ) then
*
         a1_8 = QUARTER_8*Geomg_hz_8(k-1)
         b1_8 = HALF_8*Geomg_z_8(k-1)
         b2_8 = HALF_8*Geomg_z_8(k)
*
*        ADJ 
*        ---
         do j= j0, jn
         do i= i0, in
*
          F_rhell(i,j,k  ) = aaa_8 * ( F_rheln(i,j,k)  ) + F_rhell(i,j,k  )
          F_wijk1(i,j,k-1) = aaa_8 * ( 
     %                      - a1_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k-1) 
          F_wijk1(i,j,k  ) = aaa_8 * ( 
     %                      - a1_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k  )
          F_wijk2(i,j,k-1) = aaa_8 * (
     %                      - b1_8 *   F_rheln(i,j,k)  ) + F_wijk2(i,j,k-1) 
          F_wijk2(i,j,k  ) = aaa_8 * (
     %                      - b2_8 *   F_rheln(i,j,k)  ) + F_wijk2(i,j,k  )
          F_rheln(i,j,k  ) = ZERO_8 
*
         end do
         end do
*
      else
*
         a1_8 = QUARTER_8*Geomg_hz_8(k-1)
         a2_8 = QUARTER_8*Geomg_hz_8(k)
         b1_8 = HALF_8*Geomg_z_8(k-1)
         b3_8 = HALF_8*Geomg_z_8(k+1)
*
*        ADJ 
*        ---
         do j= j0, jn
         do i= i0, in
*
          F_rhell(i,j,k  ) = aaa_8 * ( F_rheln(i,j,k)  ) + F_rhell(i,j,k  )
          F_wijk1(i,j,k-1) = aaa_8 * (
     %                      - a1_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k-1)
          F_wijk1(i,j,k  ) = aaa_8 * (
     %                      - a1_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k  )
          F_wijk1(i,j,k  ) = aaa_8 * (
     %                      - a2_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k  ) 
          F_wijk1(i,j,k+1) = aaa_8 * ( 
     %                      - a2_8 *  (F_rheln(i,j,k)) ) + F_wijk1(i,j,k+1)
          F_wijk2(i,j,k-1) = aaa_8 * (
     %                      - b1_8 *   F_rheln(i,j,k)  ) + F_wijk2(i,j,k-1)
          F_wijk2(i,j,k+1) = aaa_8 * ( 
     %                        b3_8 *   F_rheln(i,j,k)  ) + F_wijk2(i,j,k+1)
          F_rheln(i,j,k  ) = ZERO_8 
*
         end do
         end do
*
      endif
*
 301  continue
*
**************************************
* ADJ of
* Combination of governing equations * 
**************************************

      gamma_8 = ONE_8 
      a1_8 = ONE_8/Cstv_tstr_8
      b1_8 = gamma_8/Cstv_tau_8 
      b2_8 = gamma_8/Cstv_tau_8/Dcst_cappa_8
*
      pd3 = ONE_8/Cstv_tau_8
*
*     ADJ of
*     Compute the nonlinear deviation of horizontal divergence
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,l_nk
*
         do j= j0, jn
*        ----------------------------------------
*        DO LOOP ADAPTED TO RESTORE VECTORIZATION
*        ----------------------------------------
         do i= i0, in
*
            F_nth  (i,j,k) = b2_8* F_wijk2(i,j,k) +  F_nth(i,j,k)
            F_wijk2(i,j,k) = ZERO_8 
*
            F_n1   (i,j,k) = F_wijk1(i,j,k)         +  F_n1(i,j,k)
            F_ncn  (i,j,k) = - pd3 * F_wijk1(i,j,k) + F_ncn(i,j,k)
            F_wijk1(i,j,k) = ZERO_8 
*
            F_wijk1(i,j,k) = (-Dcst_cappa_8*F_nth(i,j,k))/Cstv_tau_8
     %                                        + F_wijk1(i,j,k)
                     ccc_8 = (              F_nth(i,j,k))/Cstv_tau_8
C    %                                        + ccc_8
            F_nth  (i,j,k) = ZERO_8 
*
            F_tplt0(i,j,k) =   -ccc_8*a1_8    + F_tplt0(i,j,k)
            F_tpt0 (i,j,k) =  ( ccc_8*a1_8 )/(ONE_8+F_tpt0m(i,j,k)*a1_8)
     %                                        + F_tpt0 (i,j,k)
C                    ccc_8 = ZERO_8 
*
         end do
         end do
*
         if (G_lam) then
             do j= j0,jn
             do i= i0,in
*
*       ADJ
*       ---
         F_nv(i,  j,  k) = (  F_n1(i,j,k) )/  geomg_hsyv_8(j-1) + F_nv(i,j,  k)
         F_nv(i,  j-1,k) = (- F_n1(i,j,k) )/  geomg_hsyv_8(j-1) + F_nv(i,j-1,k)
         F_nu(i,  j,  k) = (  F_n1(i,j,k) )/( geomg_cy2_8(j)*geomg_hxu_8(i-1) )
     %                                                          + F_nu(i,  j,k)
         F_nu(i-1,j,  k) = (- F_n1(i,j,k) )/( geomg_cy2_8(j)*geomg_hxu_8(i-1) )
     %                                                          + F_nu(i-1,j,k)
         F_n1(i,  j,  k) = ZERO_8 
*
             end do
             end do
         else
*
*       ADJ 
*       ---
        call caldiv_2_ad ( F_n1(minx,miny,k), F_nu(minx,miny,k),
     $                     F_nv(minx,miny,k), LDIST_DIM, 1 )
*
         endif
*
      end do
*
*PDIR SERIAL
*     ADJ 
*     ---
      call rpn_comm_adj_halo( F_nv, LDIST_DIM,l_ni,l_njv,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      call rpn_comm_adj_halo( F_nu, LDIST_DIM,l_niu,l_nj,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*PDIR ENDSERIAL
*
*     Zero F_nv halo
*     --------------
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,G_nk
         do j=l_miny,0
         do i=l_minx,l_maxx
            F_nv(i,j,k) = ZERO_8 
         end do
         end do
         do j=l_njv+1,l_maxy
         do i=l_minx ,l_maxx
            F_nv(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_minx,0
         do j=l_miny,l_maxy
            F_nv(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_ni+1,l_maxx
         do j=l_miny,l_maxy
            F_nv(i,j,k) = ZERO_8 
         end do
         end do
      end do
*
*     Zero F_nu halo
*     --------------
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,G_nk
         do j=l_miny,0
         do i=l_minx,l_maxx
            F_nu(i,j,k) = ZERO_8 
         end do
         end do
         do j=l_nj+1,l_maxy
         do i=l_minx,l_maxx
            F_nu(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_minx,0
         do j=l_miny,l_maxy
            F_nu(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_niu+1,l_maxx
         do j=l_miny ,l_maxy
            F_nu(i,j,k) = ZERO_8 
         end do
         end do
      end do
*
*     ADJ of
*     compute Ncn
*     ~~~~~~~~~~~
*
      do k =  1, l_nk
      do j = j0, jn
      do i = i0, in
*
         pd1          = pd3 * (  F_ncn(i,j,k) ) 
         pd2          = pd3 * (- F_ncn(i,j,k) ) 
         F_ncn(i,j,k) = ZERO_8
*
         F_st0(i,j) = geomg_dpib(k) * pd2 + 
     %          (     geomg_dpib(k) * (exp(F_st0m(i,j))*pd1 ) )/
     %          (1. + geomg_dpib(k) * (exp(F_st0m(i,j)) - 1.) )
     %                + F_st0(i,j)
*
      enddo
      enddo
      enddo
*
************************************************************
* ADJ of
* The nonlinear deviation of horizontal momentum equations *
************************************************************
*
      aaa_8 = ONE_8/( Dcst_rayt_8*Dcst_rayt_8 )
      bbb_8 = Dcst_rgasd_8/( Dcst_rayt_8*Dcst_rayt_8 )
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do 101 k=l_nk,1,-1
*
*     ADJ of
*     Compute Nv for hydrostatic version
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
*     Set indices Nv
*     --------------
      i0 = 1+pil_w
      in = l_ni-pil_e
      j0 = 1
      jn = l_njv
      if (G_lam) then
         if (l_south) j0=1+pil_s
         if (l_north) jn=l_njv-pil_n
      endif
*
      if (Cori_cornl_L) then
*
*        Set indices for calculating Nv when Cori_cornl_L=.TRUE.
*        -------------------------------------------------------
         if (.not.G_lam) then
            if (l_south) j0 = 2
            if (l_north) jn = l_njv-1
         endif
*
         if (.not.G_lam) then
            if (l_north) then
               do i = i0, in
*               ADJ 
*               ---
                wk2(i,l_njv-1) = Cori_fcorv_8(i,l_njv) *
     %         (   inuvl_wyyv3_8(l_njv,1)*F_nv(i,l_njv,k) ) + wk2(i,l_njv-1)
                wk2(i,l_njv  ) = Cori_fcorv_8(i,l_njv) * 
     %         (   inuvl_wyyv3_8(l_njv,2)*F_nv(i,l_njv,k) ) + wk2(i,l_njv  )
                wk2(i,l_njv+1) = Cori_fcorv_8(i,l_njv) *
     %         (   inuvl_wyyv3_8(l_njv,3)*F_nv(i,l_njv,k) ) + wk2(i,l_njv+1)   
               end do
            endif
*
            if (l_south) then
               do i = i0, in
*                 ADJ 
*                 ---
                  wk2(i,1) = Cori_fcorv_8(i,1) 
     %       * (inuvl_wyyv3_8(1,2)*F_nv(i,1,k)) + wk2(i,1)
                  wk2(i,2) = Cori_fcorv_8(i,1)
     %       * (inuvl_wyyv3_8(1,3)*F_nv(i,1,k)) + wk2(i,2)
                  wk2(i,3) = Cori_fcorv_8(i,1)
     %       * (inuvl_wyyv3_8(1,4)*F_nv(i,1,k)) + wk2(i,3)
               end do
            endif
         endif
*
         do j = jn, j0,-1
         do i = i0, in
*           ADJ 
*           ---
            wk2(i,j-1) = Cori_fcorv_8(i,j)  *
     %     (inuvl_wyyv3_8(j,1)*F_nv(i,j,k)) + wk2(i,j-1)
            wk2(i,j  ) = Cori_fcorv_8(i,j)  *
     %     (inuvl_wyyv3_8(j,2)*F_nv(i,j,k)) + wk2(i,j  )
            wk2(i,j+1) = Cori_fcorv_8(i,j)  *
     %     (inuvl_wyyv3_8(j,3)*F_nv(i,j,k)) + wk2(i,j+1) 
            wk2(i,j+2) = Cori_fcorv_8(i,j)  *
     %     (inuvl_wyyv3_8(j,4)*F_nv(i,j,k)) + wk2(i,j+2)
         end do
         end do
*
*        
*        Set indices for calculating wk2
*        -------------------------------
         j00 = miny
         jnn = maxy
         i00 = 1+pil_w
         inn = l_niu
         if (G_lam) then
            if (l_south) j00=1+pil_s-2
            if (l_north) jnn=l_njv-pil_n+3
c Don't change
            if (l_east) inn = l_niu-pil_e +1
         endif
*
         do j = j00, jnn
         do i = inn, i00,-1
*        ADJ 
*        ---
         F_ut0(i-2,j,k) = inuvl_wxux3_8(i,1)*wk2(i,j) + F_ut0(i-2,j,k)
         F_ut0(i-1,j,k) = inuvl_wxux3_8(i,2)*wk2(i,j) + F_ut0(i-1,j,k)
         F_ut0(i  ,j,k) = inuvl_wxux3_8(i,3)*wk2(i,j) + F_ut0(i  ,j,k)
         F_ut0(i+1,j,k) = inuvl_wxux3_8(i,4)*wk2(i,j) + F_ut0(i+1,j,k)
               wk2(i,j) = ZERO_8 
         end do
         end do
*
      endif
*
*     Reset indices Nv
*     ----------------
      i0 = 1+pil_w
      in = l_ni-pil_e
      j0 = 1
      jn = l_njv
      if (G_lam) then
         if (l_south) j0=1+pil_s
         if (l_north) jn=l_njv-pil_n
      endif
*
*     ADJ 
*     ---
      do j= jn, j0, -1
*     ----------------------------------------
*     DO LOOP ADAPTED TO RESTORE VECTORIZATION
*     ----------------------------------------
      do i= in, i0, -1
*
*        TRAJECTORY
*        ----------
         w1m = ( 1. - intuv_c0yyv_8(j) ) * F_tpt0m(i,j  ,k)
     %              + intuv_c0yyv_8(j)   * F_tpt0m(i,j+1,k)
         w2m = (F_qt0m(i,j+1,k) - F_qt0m(i,j,k))
     $         *geomg_cyv2_8(j)/geomg_hsy_8(j)
*
*        ADJ  
*        ---
         w2          = bbb_8 * ( w1m         * F_nv(i,j,k) ) 
         w1          = bbb_8 * ( F_nv(i,j,k) * w2m         )  
         w3          = bbb_8 * ( Cstv_tstr_8 * F_nv(i,j,k) ) 
         F_nv(i,j,k) = ZERO_8 
*
         F_wijk1(i,j+1,k) = ( w3)*geomg_cyv2_8(j)/geomg_hsy_8(j) + F_wijk1(i,j+1,k)
         F_wijk1(i,j,  k) = (-w3)*geomg_cyv2_8(j)/geomg_hsy_8(j) + F_wijk1(i,j,  k)
C                      w3 = ZERO_8 
*
         F_qt0(i,j+1,k) = (  w2)*geomg_cyv2_8(j)/geomg_hsy_8(j) + F_qt0(i,j+1,k)
         F_qt0(i,j,  k) = (- w2)*geomg_cyv2_8(j)/geomg_hsy_8(j) + F_qt0(i,j,  k)
C                    w2 = ZERO_8 
*
         F_tpt0(i,j+1,k)=        intuv_c0yyv_8(j)   * w1 + F_tpt0(i,j+1,k) 
         F_tpt0(i,j  ,k)= ( 1. - intuv_c0yyv_8(j) ) * w1 + F_tpt0(i,j  ,k)
C                    w1 = ZERO_8 
*
      end do
      end do
*
*     ADJ of
*     Compute Nu for hydrostatic version
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
*     Set indices Nu
*     --------------
      i0 = 1
      in = l_niu
      j0 = 1+pil_s
      jn = l_nj-pil_n
      if (G_lam) then
         if (l_west) i0=1+pil_w
         if (l_east) in=l_niu-pil_e
      endif
*
      if (Cori_cornl_L) then
*
*        Set indices for calculating wk2
*        -------------------------------
         i00 = minx
         inn = maxx
         j00 = 1+pil_s
         jnn = l_njv
         if (G_lam) then
             if (l_west) i00 = 1+pil_w -2
             if (l_east) inn = l_niu-pil_e +3
c Don't change
             if (l_north)jnn = l_njv-pil_n +1
         else
             if (l_south) j00 = 3
             if (l_north) jnn = l_njv-1
         endif
*
         do j= j0, jn
         do i= in, i0, -1
*        ADJ 
*        ---
         wk2(i-1,j) = - Cori_fcoru_8(i,j) *
     %     (inuvl_wxxu3_8(i,1)*F_nu(i,j,k)) + wk2(i-1,j)
         wk2(i  ,j) = - Cori_fcoru_8(i,j) *
     %     (inuvl_wxxu3_8(i,2)*F_nu(i,j,k)) + wk2(i  ,j)
         wk2(i+1,j) = - Cori_fcoru_8(i,j) *
     %     (inuvl_wxxu3_8(i,3)*F_nu(i,j,k)) + wk2(i+1,j)
         wk2(i+2,j) = - Cori_fcoru_8(i,j) *
     %     (inuvl_wxxu3_8(i,4)*F_nu(i,j,k)) + wk2(i+2,j) 
         end do
         end do
*
         if (.not.G_lam) then
            if (l_north) then
               do i = i00, inn 
*              ADJ 
*              ---
               F_vt0(i,jnn+1,k)= inuvl_wyvy3_8(jnn+1,3)*wk2(i,jnn+1) + F_vt0(i,jnn+1,k)
               F_vt0(i,jnn  ,k)= inuvl_wyvy3_8(jnn+1,2)*wk2(i,jnn+1) + F_vt0(i,jnn  ,k)
               F_vt0(i,jnn-1,k)= inuvl_wyvy3_8(jnn+1,1)*wk2(i,jnn+1) + F_vt0(i,jnn-1,k)
                   wk2(i,jnn+1)= ZERO_8 
*
               F_vt0(i,jnn+1,k)= inuvl_wyvy3_8(jnn+2,2)*wk2(i,jnn+2) + F_vt0(i,jnn+1,k)
               F_vt0(i,jnn  ,k)= inuvl_wyvy3_8(jnn+2,1)*wk2(i,jnn+2) + F_vt0(i,jnn  ,k)
                   wk2(i,jnn+2)= ZERO_8 
               end do
            endif
            if (l_south) then
               do i = i00, inn 
*              ADJ 
*              ---
               F_vt0(i,j00  ,k)= inuvl_wyvy3_8(j00-1,4)*wk2(i,j00-1) + F_vt0(i,j00  ,k)
               F_vt0(i,j00-1,k)= inuvl_wyvy3_8(j00-1,3)*wk2(i,j00-1) + F_vt0(i,j00-1,k)
               F_vt0(i,j00-2,k)= inuvl_wyvy3_8(j00-1,2)*wk2(i,j00-1) + F_vt0(i,j00-2,k) 
                   wk2(i,j00-1)= ZERO_8 
*
               F_vt0(i,j00-1,k)= inuvl_wyvy3_8(j00-2,4)*wk2(i,j00-2) + F_vt0(i,j00-1,k)
               F_vt0(i,j00-2,k)= inuvl_wyvy3_8(j00-2,3)*wk2(i,j00-2) + F_vt0(i,j00-2,k)
                   wk2(i,j00-2)= ZERO_8 
               end do
            endif
         endif
*
         do j = jnn, j00,-1
         do i = i00, inn
*           ADJ 
*           ---
            F_vt0(i,j+1,k) = inuvl_wyvy3_8(j,4) * wk2(i,j) + F_vt0(i,j+1,k)
            F_vt0(i,j  ,k) = inuvl_wyvy3_8(j,3) * wk2(i,j) + F_vt0(i,j  ,k)
            F_vt0(i,j-1,k) = inuvl_wyvy3_8(j,2) * wk2(i,j) + F_vt0(i,j-1,k) 
            F_vt0(i,j-2,k) = inuvl_wyvy3_8(j,1) * wk2(i,j) + F_vt0(i,j-2,k)
                 wk2(i,j)  = ZERO_8 
         end do
         end do
*
      endif
*
      do j= jn, j0,-1
*     ----------------------------------------
*     DO LOOP ADAPTED TO RESTORE VECTORIZATION
*     ----------------------------------------
      do i= in, i0,-1
*
*        TRAJECTORY
*        ----------
         w1m = ( 1. - intuv_c0xxu_8(i) ) * F_tpt0m(i  ,j,k)
     %              + intuv_c0xxu_8(i)   * F_tpt0m(i+1,j,k)
         w2m = (   F_qt0m(i+1,j,k) -   F_qt0m(i,j,k) ) / geomg_hx_8(i)
*
*        ADJ  
*        ---
         w2          = bbb_8 * (        w1m  * F_nu(i,j,k) ) 
         w1          = bbb_8 * ( F_nu(i,j,k) * w2m         ) 
         w3          = bbb_8 * ( Cstv_tstr_8 * F_nu(i,j,k) )
         F_nu(i,j,k) = ZERO_8 
*
         F_wijk1(i+1,j,k) = (   w3 ) / geomg_hx_8(i) + F_wijk1(i+1,j,k)
         F_wijk1(i,  j,k) = ( - w3 ) / geomg_hx_8(i) + F_wijk1(i,  j,k)
C                      w3 = ZERO_8 
*
         F_qt0(i+1,j,k) = (   w2 ) / geomg_hx_8(i) + F_qt0(i+1,j,k)
         F_qt0(i,  j,k) = ( - w2 ) / geomg_hx_8(i) + F_qt0(i,  j,k)
C                    w2 = ZERO_8 
*
         F_tpt0(i+1,j,k)=        intuv_c0xxu_8(i)   * w1 + F_tpt0(i+1,j,k)
         F_tpt0(i  ,j,k)= ( 1. - intuv_c0xxu_8(i) ) * w1 + F_tpt0(i  ,j,k)
C                    w1 = ZERO_8 
*
      end do
      end do
*
101   continue
*
*PDIR SERIAL
*
*     ADJ 
*     ---
      if (Cori_cornl_L) then
      call rpn_comm_adj_halo( F_vt0  , LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      call rpn_comm_adj_halo( F_ut0  , LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
*
      call rpn_comm_adj_halo( F_wijk1, LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      call rpn_comm_adj_halo( F_qt0  , LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      call rpn_comm_adj_halo( F_tpt0 , LDIST_DIM,l_ni,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
*PDIR ENDSERIAL
*
      if (Cori_cornl_L) then
*
*     Zero F_ut0,F_vt0 halo 
*     ---------------------
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,G_nk
         do j=l_miny,0
         do i=l_minx,l_maxx
            F_vt0(i,j,k) = ZERO_8 
            F_ut0(i,j,k) = ZERO_8 
         end do
         end do
         do j=l_nj+1,l_maxy
         do i=l_minx,l_maxx
            F_vt0(i,j,k) = ZERO_8 
            F_ut0(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_minx,0
         do j=l_miny,l_maxy
            F_vt0(i,j,k) = ZERO_8 
            F_ut0(i,j,k) = ZERO_8 
         end do
         end do
         do i=l_ni+1,l_maxx
         do j=l_miny,l_maxy
            F_vt0(i,j,k) = ZERO_8 
            F_ut0(i,j,k) = ZERO_8 
         end do
         end do
      end do
*
      endif
*
*     Zero F_wijk1,F_qt0,F_tpt0 halo 
*     ------------------------------
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,G_nk
         do j=l_miny,0
         do i=l_minx,l_maxx
            F_wijk1(i,j,k) = ZERO_8 
            F_qt0  (i,j,k) = ZERO_8 
            F_tpt0 (i,j,k) = ZERO_8 
         end do
         end do
         do j=l_nj+1,l_maxy
         do i=l_minx,l_maxx
            F_wijk1(i,j,k) = ZERO_8 
            F_qt0  (i,j,k) = ZERO_8 
            F_tpt0 (i,j,k) = ZERO_8 
         end do
         end do
         do i=l_minx,0
         do j=l_miny,l_maxy
            F_wijk1(i,j,k) = ZERO_8 
            F_qt0  (i,j,k) = ZERO_8 
            F_tpt0 (i,j,k) = ZERO_8 
         end do
         end do
         do i=l_ni+1,l_maxx
         do j=l_miny,l_maxy
            F_wijk1(i,j,k) = ZERO_8 
            F_qt0  (i,j,k) = ZERO_8 
            F_tpt0 (i,j,k) = ZERO_8 
         end do
         end do
      end do
*
*     ADJ of
*     Prepare the nonlinear perturbation q" of log hydro pressure 
*     and the "relative" geopotential ( phi' + phis ) for gradient
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west) i0=1+pil_w -1
          if (l_east) in=l_ni-pil_e +1
          if (l_south)j0=1+pil_s -1
          if (l_north)jn=l_nj-pil_n +1
      endif
*
*PDIR PARDO FOR=Ptopo_npeOpenMP
      do k=1,l_nk
         bbb_8 = ONE_8/Geomg_z_8(k)
         do j= j0, jn
         do i= i0, in
*
*           ADJ 
*           ---
         F_st0  (i,j)   = - ( geomg_pib(k)* F_wijk1(i,j,k))*bbb_8 
     %                    + F_st0  (i,j)
         F_pipt0(i,j,k) =   (               F_wijk1(i,j,k) *bbb_8 ) /( ONE_8 + F_pipt0m(i,j,k)*bbb_8 )
     %                    + F_pipt0(i,j,k)
         F_wijk1(i,j,k) = ZERO_8 
*
         enddo
         enddo
      enddo
*
*     __________________________________________________________________
*
      return
      end
