***s/r v4d_testadj - Verification of adjoint transposition
*
#include <model_macros_f.h>
*
      subroutine v4d_testadj 
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - add V4dg_conf= 401 and 402 
* v2_31 - Tanguay M.        - Move v4d_setscalp after set_dync 
*
*object
*     see id section
*
*     ----------------------------------------------------------------------
*     For each V4d_conf: Use prescribed TLM initial state (X) and
*                            prescribed ADJ   final state (Y)
*     ---------
*     except if 
*     ---------
*
*     V4d_conf=401: Modify Y by imposing <TLM X,Y> to be 1 for each variable
*     V4d_conf=402: Set Y = TLM X  
*     ----------------------------------------------------------------------
*
*arguments
*     none
* 
*implicits
#include "lun.cdk"
#include "v4dg.cdk"
#include "v4dc.cdk"
#include "lctl.cdk"
#include "schm.cdk"
#include "ptopo.cdk"
#include "step.cdk"
*
      integer n,indic
*
      real*8 ps01_8,ps02_8
*
      real pj
*
*     --------------------------------------
*     Read given analysis of model variables
*     --------------------------------------
      if( Lun_out.gt.0 ) then
         write(Lun_out,fmt=
     $    '('' TEST OF ADJOINT TRANSPOSE with CONF = '',I6)')V4dg_conf
         write(Lun_out,fmt=
     $    '('' -----------------------------------------'')')
         write(Lun_out, fmt='(//''-------------------'')')
         write(Lun_out, fmt='(  ''READ GIVEN ANALYSIS'')')
         write(Lun_out, fmt='(  ''-------------------'')')
      endif
*
      call indata()
*
*     ------------------------------------------------------------------
*     Set inner product in control space variables (done after set_dync)
*     ------------------------------------------------------------------
      call v4d_setscalp ()
*
      call wlog('CSTR')
*
*     -----------------------------------------------------------------
*     Initialize starting control var. for REFERENCE (NLM), TLM and ADJ
*     -----------------------------------------------------------------

*        Initialize REFERENCE (NLM) initial control var. in V4dc_ycv 
*        from model var.
*        -----------------------------------------------------------
         call v4d_cainin (V4dc_ncv,V4dc_ycv)
*
*        Initialize TLM initial control var. in V4dc_xcv
*        -----------------------------------------------
         do n = 1,V4dc_ncv
            V4dc_xcv(n) = V4dc_ycv(n)
         end do
*
         if( V4dg_conf.ne.402 ) then
*
*        Initialize ADJ final control var. in V4dc_gcv
*        ---------------------------------------------
         do n = 1,V4dc_ncv
            V4dc_gcv(n) = V4dc_ycv(n)
         end do
*
         endif
*
*     -------------------------------
*     Run REFERENCE (NLM) integration 
*     -------------------------------
         if( Lun_out.gt.0 ) then
            write(unit=Lun_out, fmt='(//''---------------------'')')
            write(unit=Lun_out, fmt='(  ''REFERENCE INTEGRATION'')')
            write(unit=Lun_out, fmt='(  ''---------------------'')')
         endif
*
*        Set status of the integration (REFERENCE integration)
*        -----------------------------------------------------
         V4dg_status = 5
*
*        Set over-riding switch for dynout and blocstat 
*        ----------------------------------------------
         V4dg_output_L = .true.
*
*        Call 4D-Var simulator with NLM integration without gradient
*        -----------------------------------------------------------
         indic = 99
         call v4d_simul (indic,V4dc_ncv,V4dc_ycv,pj,V4dc_gcv)
*
*     ------------------------------
*     Run TANGENT LINEAR integration 
*     ------------------------------
         if( Lun_out.gt.0 ) then
            write(unit=Lun_out, fmt='(//''--------------------------'')')
            write(unit=Lun_out, fmt='(  ''TANGENT LINEAR INTEGRATION'')')
            write(unit=Lun_out, fmt='(  ''--------------------------'')')
         endif
*
*        Set status of the integration (TLM integration)
*        -----------------------------------------------
         V4dg_status = 10
*
*        Set over-riding switch for dynout and blocstat 
*        ----------------------------------------------
         V4dg_output_L = .true.
*
*        Call 4D-Var simulator with TLM integration without gradient
*        -----------------------------------------------------------
         V4dg_tlm_L = .true.
         indic      = 99
         call v4d_simul (indic,V4dc_ncv,V4dc_xcv,pj,V4dc_gcv)
*
*        Reset 4D-Var simulator with NLM integration 
*        ------------------------------------------- 
         V4dg_tlm_L = .false.
*
*        Initialize V4dc_wkmin from TLM final model var. 
*        -----------------------------------------------
         call v4d_cainin (V4dc_ncv,V4dc_wkmin)
*
         if( V4dg_conf.eq.401) then
*        -------------------------------------------------------
*        Re-Initialize ADJ final control var. (V4dg_conf.eq.401) 
*        -------------------------------------------------------
*
*          ------------------------------------------------
*          Re-Initialize ADJ final control var. in V4dc_gcv 
*          by imposing <TLM X,Y> to be 1 for each variable
*          ------------------------------------------------
           call v4d_scale (V4dc_ncv,V4dc_wkmin,V4dc_gcv) 
*
         endif
*
         if( V4dg_conf.eq.402) then
*        ----------------------------------------------------
*        Initialize ADJ final control var. (V4dg_conf.eq.402) 
*        ----------------------------------------------------
*
*          ---------------------------------------------
*          Initialize ADJ final control var. in V4dc_gcv
*          as TLM final model var.
*          ---------------------------------------------
*
*          Convert wind images to true winds (#1)
*          --------------------------------------
           call v4d_img2uv()
*
*          Convert wind images to true winds (#2)
*          --------------------------------------
           call v4d_img2uv()
*
*          Initialize V4dc_gcv from TLM final model var.
*          ---------------------------------------------
           call v4d_cainin (V4dc_ncv,V4dc_gcv)
*
         endif
*
*     ---------------------------------------------
*     Evaluate < TLM V4dc_xcv, V4dc_gcv > in ps01_8
*     ---------------------------------------------
         call v4d_scalpro (V4dc_ncv,V4dc_wkmin,V4dc_gcv,ps01_8)
*
*     ------------------------
*     Run ADJOINT  integration
*     ------------------------
         if( Lun_out.gt.0 ) then
            write(unit=Lun_out, fmt='(//''-------------------'')')
            write(unit=Lun_out, fmt='(  ''ADJOINT INTEGRATION'')')
            write(unit=Lun_out, fmt='(  ''-------------------'')')
         endif
*
*        Set status of the integration (ADJ integration)
*        -----------------------------------------------
         V4dg_status = 20
*
*        Set over-riding switch for dynout and blocstat 
*        ----------------------------------------------
         V4dg_output_L = .true.
*
*        Call 4D-Var simulator for gradient only
*        ---------------------------------------
         indic = 98 
         call v4d_simul (indic,V4dc_ncv,V4dc_xcv,pj,V4dc_gcv)
*
*     ----------------------------------------------
*     Evaluate < V4dc_xcv , ADJ V4dc_gcv > in ps02_8 
*     ----------------------------------------------
         call v4d_scalpro (V4dc_ncv,V4dc_gcv,V4dc_xcv,ps02_8)
*
*     ---------------------------------
*     Print of the two scalars products
*     ---------------------------------
      if( Lun_out.gt.0 ) then
         write(unit=Lun_out,fmt='('' TEST OF ADJOINT TRANSPOSITION '')')
         write(unit=Lun_out,fmt='('' < F(X) , Y >  = '',E26.20)') ps01_8
         write(unit=Lun_out,fmt='('' < X , F*(Y) > = '',E26.20)') ps02_8
      endif
*
      Lctl_step = Step_total
*
      call wlog('FEND')
      call wlog('CEND')
*
      return
      end
