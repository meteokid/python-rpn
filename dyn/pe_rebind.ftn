! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
#include "model_macros_f.h"
*
      subroutine pe_rebind (icode)
      implicit none
*
      integer icode
*
#include "bind.cdk"
#include "ptopo.cdk"
*author
*     Lee/Valin     Mar 2007
*
*revision
* v3_30 - Lee/Valin - initial version
*
      integer i,j
      integer  omp_get_max_threads,logical_smt_cpus
      external omp_get_max_threads,logical_smt_cpus

*
      if (icode.eq.0) then
* at the beginning of the integration
* force global SMT if requested
          if (Ptopo_smtglb.ne.Ptopo_npeOpenMP) then
              call omp_set_num_threads(Ptopo_smtglb)
              Ptopo_npeOpenMP=Ptopo_smtglb
          endif
          if (Ptopo_myproc.eq.0) then
              print *,'pe_rebind(0):threads for glb=',omp_get_max_threads()
              print *,'pe_rebind(0):bind_L=',Ptopo_bind_L
              print *,'pe_rebind(0):threads for phy=',Ptopo_smtphy
          endif
* force binding
          if (Ptopo_bind_L) call rebind()
         
      endif
     
* just before physics loop
c     call omp_set_num_threads(omp_get_max_threads()*logical_smt_cpus())
      if (icode.eq.1 .and. Ptopo_smtphy.ne.Ptopo_smtglb) then
          call omp_set_num_threads(Ptopo_smtphy)
c         if (Ptopo_myproc.eq.0) then
c             print *,'pe_rebind(1):threads=',omp_get_max_threads()
c         endif
          if (Ptopo_bind_L) call rebind()
      endif
*
* just after  physics loop
c     call omp_set_num_threads(omp_get_max_threads()/logical_smt_cpus())
      if (icode.eq.-1 .and. Ptopo_smtphy.ne.Ptopo_smtglb) then
          call omp_set_num_threads(1)
          call omp_set_num_threads(Ptopo_smtglb)
c         if (Ptopo_myproc.eq.0) then
c             print *,'pe_rebind(-1):threads=',omp_get_max_threads()
c         endif
          if (Ptopo_bind_L) call rebind()
      endif
         
c     call reporter()
*
      return
      end
