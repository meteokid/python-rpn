***s/r set_world_view1
*
#include <model_macros_f.h>
*
      subroutine set_world_view1 (F_npx, F_npy )
*
*implicits
      use v4dz, only: V4dz_degree,V4dzge_degree,V4dzga_degree 
*
      implicit none
*
      integer F_npx, F_npy
*
*author
*     M. Desgagne    - Jan 2000
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_10 - Desgagne M.       - change output file name
* v2_10                       remove Schm_ithel (not used)
* v2_10 - Lee V.            - introduce maxcfl_x and maxcfl_y in 
* v2_10                       gem_cfgs to control halo thickness
* v2_10 - Tanguay M.        - add namelist 4D-Var
* v2_10 - Qaddouri&Desgagne - higher order diffusion operator
* v2_11 - Desgagne M.       - vertical sponge layer
* v2_20 - Lee V.            - put version number of code in "exdb"
* v2_21 - Lee V.            - to read pilot files and setup for slab output
* v2_30 - Corbeil L.        - To read pe_topo namelist
* v2_31 - Desgagne M.       - introduce 3D tracers, vertical layering 
*                             specification and switch default 
*                             Hzd_type_S to "HO"
* v2_32 - Desgagne M.       - option for FST2000 encoding of ip1
* v3_00 - Tanguay M.        - V4dg_4dvar_L,V4dg_sensib_L,V4dg_twin_L in namelist
* v3_01 - Toviessi J. P.    - add eigenmodes with definite parity
* v3_01 - Lee V.            - new ip1 encoding (kind=5 -- unnormalized)
* v3_01 - Morneau J.        - V4dj_mask_L,V4dm_itmax,V4dm_simax in namelist
* v3_01 - Tanguay M.        - add V4dg_sgvc_L
* v3_01 - Lee V.            - add Horizontal sponge parameter controls:Hspng_*
* v3_02 - Tanguay M.        - V4dg_ga_eq_ge_L,V4dz_degree,V4dzge_degree,V4dzga_degree in namelist 
*                           - Hspng_nj.gt.0 available for V4dg_conf.gt.0 
* v3_02 - Lee V.            - added Vspng_nu,Vspng_nutop (vertical sponge)
* v3_02 - Lee V.              Adw_trunc_traj_L for LAM (truncate trajectories)
* v3_02 - Desgagne M.       - Precalculate Mem_mx3db value
* v3_02 - Mahfouf J.-F.     - add V4dg_anincr_L
* v3_11 - Gravel S.         - modif for theoretical cases and variable topo
* v3_11 - Winger K.         - add Step_cleanup
* v3_11 - Tanguay M.        - Remove V4dg_ga_eq_ge_L
*                           - Add option for profiles done on U-V grids for winds
*                           - Add V4dg_anincr_L for V4dg_conf/100.eq.4
* v3_20 - Gravel S.         - background vertical diffusion
* v3_20 - Valin/Tanguay     - Turbo advection option
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ
*                           - 1d higher order diffusion operator
* v3_20 - Zadra A.          - Introduce V4dg_sgvc_dt0
* v3_20 - Buehner & Zadra   - Introduce V4dg_chum_s
*
*object
*  To initialize model by reading namelist and return the 
*  configuration of the number of PE's
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_npx         O           Number of PEs along X
* F_npy         O           Number of PEs along Y
*----------------------------------------------------------------
*
#include "dimout.cdk"
#include "out3.cdk"
#include "level.cdk"
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "ptopo.cdk"
#include "lun.cdk"
#include "mem.cdk"
#include "step.cdk"
#include "path.cdk"
#include "init.cdk"
#include "offc.cdk"
#include "schm.cdk"
#include "adw.cdk"
#include "cstv.cdk"
#include "lctl.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "vspng.cdk"
#include "hspng.cdk"
#include "xst.cdk"
#include "cori.cdk"
#include "geomg.cdk"
#include "grd.cdk"
#include "v4dg.cdk"
#include "c_cplg.cdk"
#include "version.cdk"
#include "setsor.cdk"
#include "grid.cdk"
#include "out1.cdk"
#include "tr2d.cdk"
#include "tr3d.cdk"
#include "offline.cdk"
#include "pres.cdk"
#include "v4dj.cdk"
#include "v4dm.cdk"
#include "theo.cdk"
#include "pilot.cdk"
#include "vtopo.cdk"
#include "vrtd.cdk"
#include "zblen.cdk"
#include "v4dr.cdk"
*
*modules
      integer fnom,longueur,exdb
      external fnom,longueur,exdb
*
      character*12 dumc_S
      character*256 fln_S
      logical wronghyb,theo_pass
      integer i, k, nrec, err, pnk,
     $        kind, ipcode, ipmode
      real pcode
*
#include "nml.cdk"
*
*-------------------------------------------------------------------
*
      call  open_status_file2 ('status_mod.dot')
      call write_status_file2 ('_status=ABORT' )
*
      Path_swv1_L = .false.
      err = exdb(Version_mod_S//Version_dstp_S,Version_S, 'NON')
*
      lun_in   =  5
      lun_out  =  6
      Lun_cte  =  8
      lun_lab  = 13
      lun_tsrs = 61
      lun_pilot= 62
*
      Step_total = 1
      Step_rsti  =  9999
      Step_bkup  = 9999
      Step_gstat = 9999
      Step_cleanup = 0
*
      Mem_mx3db    = -1
      Mem_phyncore_L = .false.
*
      Ptopo_npex = 1
      Ptopo_npey = 1
      Ptopo_nblocx = -1
      Ptopo_nblocy = -1
      G_halox = 4
      G_haloy = G_halox
*
      Init_balgm_L = .false.
      Init_dfwin_L = .true.
      Init_dfnp    = 5
      Init_dfpl_8  = 21600.0
      Init_dftr_L  = .false.
*
      Offc_a0_8 =  1.0
      Offc_a1_8 = -1.0
      Offc_b0_8 =  0.6
      Offc_b1_8 =  0.4
*
      Schm_hydro_L    = .false.
      Schm_nonhy_8    = 1.0
      Schm_moist_L    = .true.
      Schm_phyms_L    = .true.
      Schm_chems_L    = .false.
      Schm_hdlast_L  = .false.
      Schm_itcn     =   2
      Schm_modcn    =   1
      Schm_xwvt3    = 0
      Schm_itnlh    = 2
      Schm_itraj    = 2
      Schm_alpco_8  = 1.0
      Schm_adcub_L    = .true.
      Schm_psadj_L    = .false.
      Schm_difqp_L    = .true.
      Schm_wload_L    = .false.
      Schm_pcsty_L    = .true.
      Schm_pheat_L    = .true.
      Schm_theoc_L    = .false.
      Schm_sfix_L     = .false.
*
      Zblen_L   = .false.
*
      Glb_pil_n = 7
      Glb_pil_s = 7
      Glb_pil_w = 7
      Glb_pil_e = 7
      Schm_maxcfl_lam = 2
      Adw_nkbz_L = .true.
      Adw_exdg_L = .false.
      Adw_ckbd_L = .false.
      Adw_mono_L = .true.
      Adw_lag3d_L= .false.
      Adw_nosetint_L   = .false.
      Adw_trunc_traj_L = .false.
      Adw_halox  = 3
      Adw_haloy  = 2
*
      Cori_cornl_L = .true.
*
      Cstv_dt_8    = 900
      Cstv_uvdf_8  = 20000.
      Cstv_phidf_8 = 20000.
      Cstv_pitop_8 = -1.0
      Cstv_pisrf_8 = 1000.0
      Cstv_tstr_8  =  200.0
*
      Lctl_r8stat_L   = .false.
      Lctl_debug_L    = .false.
      Level_ip12000_L = .false.
*
      Grd_rcoef = 1.0
      Grd_proj_S = 'E'
      Pres_ptop = -1.
      Pres_pref = 800.0
      do k = 1, maxhlev
         hyb(k) = -1.
      end do
*
      Eigv_parity_L = .false.
      Hzd_type_S = "HO"
      Hzd_difva_L= .false.
      Hzd_pwr    = 6
      Hzd_lnr    = 0.2
      Hzd_uvwdt_L= .true.
      Hspng_nj = 0
      Hspng_mf = 800.
      Hspng_uvwdt_L  = .true.
      Hspng_rwnd_L   = .false.
      Vspng_nk = 0
      do i = 1, Vspng_maxn
         Vspng_mf(i) = -1.
         Vspng_nu(i) = -1.
      end do
      Vspng_nutop = -1.
      Vspng_uvwdt_L  = .true.
      Vspng_rwnd_L   = .false.
      Vspng_njpole   = 3
*
      Hzd_t1_0_L = .false.
      Hzd_t1_1_L = .false.
      Hzd_t0_0_L = .false.
      Hzd_t0_1_L = .false.
      Hzd_1d_L   = .false.
      Hzd_hdif0_0_L   = .false.
      Hzd_hdif0_1_L   = .false.
      Hzd_hzdmain_0_L = .true.
      Hzd_hzdmain_1_L = .true.
*
      Vrtd_L         = .false.
      Vrtd_theta_L   = .false.
      Vrtd_coef      = 1.
*
      Vtopo_start = -1
      Vtopo_ndt = 0
*
      Tr2d_ntr = 0
      Tr3d_ntr = 0
      Tr2d_incore_L = .true.
      Tr2d_ntpf     = 10
      Tr2d_nbf      = 0
      do i=1,MAXTR2D
         Tr2d_unf(i) = -1
      end do
*
      do i = 1,MAXSTAT
         Xst_statij(1,i) = -9999
         Xst_statij(2,i) = -9999
         Xst_statll(1,i) = -9999.0
         Xst_statll(2,i) = -9999.0
      enddo
*
      do i = 1,MAXELEM
         Out3_zund(i)     = 0
      enddo
      Out3_unit_S    = ' '
      Out3_etik_S    = ' '
      Out3_closestep = -1
      Out3_ndigits   = -1
      Out3_ip3       = 0
      Out3_nbitg     = 16
      Out3_linbot    = 0
      Out3_cliph_L   = .false.
      Out3_vt2gz_L   = .false.
      Out3_cubzt_L   = .true.
      Out3_cubuv_L   = .true.
      Out3_cubds_L   = .true.
      Out3_cubqs_L   = .true.
      Out3_cubdd_L   = .true.
      Out3_cubqq_L   = .true.
      Out3_cubww_L   = .true.
      Out3_debug_L   = .false.
      Out3_flipit_L  = .false.
*
*     4D-Var section
*     --------------
      V4dg_conf     = 0
      V4dg_output_L = .true.
      V4dg_sensib_L = .false.
      V4dg_twin_L   = .false.
      V4dg_4dvar_L  = .false.
      V4dg_sgvc_L   = .false.
      V4dj_mask_L   = .false.     
      V4dg_sgvc_dt0 = 0
      V4dg_chum_s   = 'LQ'
*
      V4dr_redotr_L = .false.
*
      V4dg_stepob   = Step_total
      V4dg_inv      = 1
      V4dg_incore_L = .true.
*
      V4dg_identity_L = .false.
*
      V4dg_pruv_L     = .true.
*
      V4dz_degree     = 1
      V4dzge_degree   = 1
      V4dzga_degree   = 1
*
      V4dg_anincr_L = .false.
*
      V4dm_itmax    = 2 
      V4dm_simax    = 2 
*
*    Coupling section
*    ----------------
      C_coupling_L  = .false.
      C_wave_L      = .false.
      C_ocean_iml_L = .false. 
*     
      call getenvc('rep_from_which_model_is_launched',Path_dfwmil_S)
*      
*     Look for file labfl.bin created by entry program
*
      fln_S = Path_dfwmil_S(1:longueur(Path_dfwmil_S))
     $                            //'/process/labfl.bin'
      write (Lun_out,*)'Opening file: ',fln_S(1:longueur(fln_S))
      err = fnom (lun_lab, fln_S, 'SEQ+FTN+UNF+OLD', nrec)
*
*     If labfl not found, assume theoretical case
*
      if ( err .ne. 0 ) then
         write (Lun_out,*)'Assume Theoretical case'
         Schm_theoc_L = .true. 
      endif
*
*     open configuration file
*
      Path_nml_S = Path_dfwmil_S(1:longueur(Path_dfwmil_S))
     $                          //'/process/model_settings'
*
      write (Lun_out,*)
     $     'Opening file: ',Path_nml_S(1:longueur(Path_nml_S))
      err = fnom (lun_in, Path_nml_S, 'SEQ' , nrec)
      rewind ( Lun_in )
      if ( Schm_theoc_L ) then
         Out3_ip3 = -1
         call hpalloc (Geomg_hyb_ , maxhlev, err,1)
         call theo_cfg(theo_pass)
         if (.not. theo_pass) then
            call hpdeallc (Geomg_hyb_ , err,1)
            write (Lun_out, 8000)
            return
         else
             do k=1,maxhlev
              hyb(k)=Geomg_hyb(k)
            enddo
             write (Lun_out, 7050) Theo_case_S
             call hpdeallc (Geomg_hyb_ , err,1)
         endif
      else
         read (Lun_in, nml=ptopo,    end = 9110, err=9110)
         if (Ptopo_nblocx.eq.-1 .or. Ptopo_nblocy.eq.-1) then
             Ptopo_nblocx = Ptopo_npex
             Ptopo_nblocy = Ptopo_npey
         endif
         rewind ( Lun_in )
         read (Lun_in, nml=gem_cfgs, end = 9120, err=9120)
         rewind ( Lun_in )
         read (Lun_in, nml=coupling, end = 5555, err=9130)
      endif
 5555 rewind ( Lun_in )
      read (Lun_in, nml=var4d, end = 6666, err = 9140)
 6666 continue
      call fclos (lun_in)
*        
      if ( V4dg_conf.ne.0.and.Step_total.lt.Init_dfnp-1.and.Init_balgm_L ) then
           write(Lun_out,9400)
           return
      endif
      if ( V4dg_conf.ne.0.and.Schm_theoc_L) then
           write(Lun_out,9401)
           return
      endif
      if ((V4dg_conf/100.ne.1) .and.
     $    (V4dg_sensib_L.or.V4dg_twin_L.or.V4dg_4dvar_L.or.V4dg_sgvc_L))
     $     then
         write(Lun_out,9300)
         return
      endif
*
      call low2up  (Hzd_type_S,dumc_S)
      Hzd_type_S = dumc_S
      Hzd_lnr    = min(max(0.,Hzd_lnr),0.9999999)
      Hzd_pwr    = Hzd_pwr / 2
      Hzd_pwr    = min(max(2,Hzd_pwr*2),8)
*
      Glb_pil_n = max(7,Glb_pil_n)
      Glb_pil_s = max(7,Glb_pil_s)
      Glb_pil_w = max(7,Glb_pil_w)
      Glb_pil_e = max(7,Glb_pil_e)
*
      call low2up  (Out3_unit_S,Out3_unit_S)
      if (V4dg_conf.ne.0) then
         call v4d_init()
         Out3_ndigits = 6
         Schm_wload_L  = .false.
      endif
      if ((V4dg_conf/100.eq.1.and.V4dg_sensib_L).or.
     $   ((V4dg_conf/100.eq.4.or.V4dg_conf/100.eq.5).and.V4dg_anincr_L)) then
        V4dg_lun_obs_s=Path_dfwmil_S(1:longueur(Path_dfwmil_S))
     $                                //'/v4d_obsfile_std'
        V4dg_lun_obs = 0
        err = fnom (V4dg_lun_obs,V4dg_lun_obs_s,'RND+OLD', 0)
      endif
*      
*     Initialization for the coupling
*
      if (C_coupling_L)  call c_init()
*
      if(Out3_nbitg .lt. 0) then
         write (Lun_out, 9154)
         Out3_nbitg=16
      endif
      Out3_nundr = 0
      do i = 1, MAXELEM
         if(Out3_zund(i) .eq. 0 ) goto 80
         Out3_nundr = Out3_nundr + 1
      enddo
 80   continue

*
      if ( Schm_modcn .eq. 0 ) Schm_modcn = Step_total
*      
*     if not theoretical case, read data from file labfl.bin 
*
      if ( .not. Schm_theoc_L ) then
          call bin2com
          call fclos (lun_lab)
          If (Out3_etik_S.ne.' ') Out1_etik_S = Out3_etik_S
      endif
*
*
      Schm_cptop_L = .true.
*
*     Checking vertical layering
*
      wronghyb = .false.
      if (.not.schm_offline_l) then
      pnk = 0
      do k = 1, maxhlev
         if (hyb(k) .lt. 0.) go to 110
         pnk = k
      enddo
      else
         pnk=4
         hyb(1)=0.
         hyb(2)=0.05
         hyb(3)=(Offline_ip1a-2000)*0.0001
         hyb(4)=1.0
      endif

      write(Lun_out,*) (hyb(k),k=1,pnk)
 110  if ( ( (Pres_ptop.gt.0.) .and. (hyb(1).ne.0) ) .or.
     $       (hyb(pnk).ne.1.) ) wronghyb = .true.
      do k=2, pnk
         if (hyb(k).le.hyb(k-1)) wronghyb = .true.
      end do
      if (wronghyb) then
         write(Lun_out,9200)
         do k=1, pnk
            write (Lun_out,*) hyb(k),k
         end do
         return
      endif
      call hpalloc (Geomg_hyb_ , pnk, err,1)
      call hpalloc (Geomg_hybm_, pnk, err,1) 
*
*     fst2000 ip1 encoding 
      if (Level_ip12000_L) 
     $     call convip ( ipcode, pcode, ipmode, 0, ' ', .false. )
*
      if (Pres_ptop .lt. 0.) then
          do k=1,pnk
             call convip ( i , hyb(k)      , 5   ,  2, dumc_S, .false. )
             call convip ( i , Geomg_hyb(k), kind, -1, dumc_S, .false. )
             Geomg_hybm(k) = Geomg_hyb(k)
          end do
          Pres_ptop = Geomg_hybm(1)*Pres_pref
      else
          do k=1,pnk
             call convip ( i , hyb(k)      , 1   ,  1, dumc_S, .false. )
             call convip ( i , Geomg_hyb(k), kind, -1, dumc_S, .false. )
             Geomg_hybm(k) = Geomg_hyb(k)
     $                   + (1.-Geomg_hyb(k))*Pres_ptop/Pres_pref
          end do
      endif
      Level_kind_ip1 = kind
*
      F_npx = Ptopo_npex
      F_npy = Ptopo_npey
*
      call hpalloc (Geomg_pia_ , pnk ,err,1)
      call hpalloc (Geomg_pibb_, pnk ,err,1)
      call hpalloc (Geomg_dpba_, pnk ,err,1)
*
      call genab2 ( Geomg_pia, Geomg_pibb, Geomg_dpba, Geomg_hybm,
     $              Pres_ptop,  Grd_rcoef, Cstv_pisrf_8, pnk )
*
      call newdate (Out1_date, Out1_dato(1), Out1_dato(2),-3)
*
      if (Mem_mx3db.lt.0) then
         Mem_mx3db = 75
         if (V4dg_conf.ne.0) Mem_mx3db = Mem_mx3db + 71
         if (Init_balgm_L  ) Mem_mx3db = Mem_mx3db + 20
         if (G_lam) then
                             Mem_mx3db = Mem_mx3db + 28
*                      --->  Exclude nest_??x vmm variables
           If (Pil_ctebcs_L) Mem_mx3db = Mem_mx3db - 14
*                      --->  Exclude nest_??f vmm variables
         endif
         Mem_mx3db = (Mem_mx3db + 5) * 1.1

      endif
*
      Lun_sortie_s = Path_dfwmil_S(1:longueur(Path_dfwmil_S))
     $                          //'/process/output_settings'

*
*
*     Options used for the Off-line mode (MEC)
*
      if (Schm_offline_L) then
      Schm_phyms_L    = .true.
      Init_balgm_L    = .false.
      Pres_ptop       = 10.0
      Hzd_type_s        = 'NIL' 
      Vspng_nk          = 0 
      endif
*
      write (lun_out, nml=gem_cfgs_p)
      
      if(V4dg_conf.ne.0) write (lun_out, nml=var4d)
*
      G_ni  = Grd_ni
      G_nj  = Grd_nj
      G_nk  = pnk
*
      G_niu = G_ni
      G_njv = G_nj - 1
      if (G_lam) then
         G_niu = G_ni - 1
         if (Eigv_parity_L) then
            Eigv_parity_L = .false.
            write (Lun_out, 7005)
         endif
         if (Hzd_type_S.eq.'FACT') then
            write (Lun_out, 7000) Hzd_type_S
            write (Lun_out, 8000)
            return
         endif
         if (Hspng_nj.ne.0) then
            write (Lun_out, 7015)
            write (Lun_out, 8000)
            return
         endif
         if (Schm_psadj_L) then
            write (Lun_out, 7020)
            write (Lun_out, 8000)
            return
         endif
	 Adw_halox  = Schm_maxcfl_lam * 3
         Adw_haloy  = Adw_halox-1
      endif
*
      Lun_debug_L = Lctl_debug_L
*
      Path_swv1_L = .true.
      return
*
 9110 write (Lun_out, 8150)
      write (Lun_out, 8000)
      return
 9120 write (Lun_out, 9150)
      write (Lun_out, 8000)
      return
 9130 write (Lun_out, 9250)
      write (Lun_out, 8000)
      return
 9140 write (Lun_out, 9350)
      write (Lun_out, 8000)
      return
*
 7000 format (/' WRONG OPTION FOR HZD_TYP WHEN LAM: ',a/)
 7005 format (/' EIGENMODES with definite PARITY NOT AVAILABLE IF LAM'/)
 7015 format (/' HORIZONTAL SPONGE (Hspng_nj) NOT AVAILABLE IF LAM'/)
 7020 format (/' OPTION Schm_psadj_L=.true. NOT AVAILABLE IF LAM'/)
 7050 format (/' THEORETICAL CASE IS: ',a/)
 8000 format (/,'========= ABORT IN S/R SET_WORLD_VIEW1 ============='/)
 8150 format (/,' NAMELIST ptopo    INVALID IN FILE: model_settings'/)
 9150 format (/,' NAMELIST gem_cfgs INVALID IN FILE: model_settings'/)
 9250 format (/,' NAMELIST coupling INVALID IN FILE: model_settings '/)
 9350 format (/,' NAMELIST var4d    INVALID IN FILE: model_settings '/)
 9154 format (/,' Out3_nbitg IS NEGATIVE, VALUE will be set to 16'/)
 9200 format (/' ===> WRONG SPECIFICATION OF HYB VERTICAL LEVELS:'/
     $         '      HYB(1) MUST BE 0.0 AND HYB(NK) MUST BE 1.0'/
     $         '      OTHER LEVELS MUST BE MONOTONICALLY INCREASING'/
     $         '      FROM HYB(1) ---- ABORT ----'//
     $         '      Current choice:')
 9300 format (/,' sensib_L twin_L 4dvar_L sgvc_L when V4dg_conf/100=1 only'/)  
 9400 format (/,' Step_total lt Init_dfnp-1 and Init_balgm_L  when V4dg_conf.ne.0 NOT VALID '/)
 9401 format (/,' Schm_theoc_L when V4dg_conf.ne.0 NOT VALID '/)
*
*-------------------------------------------------------------------
*
      end
