!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r wdpers - transposes the winds at time t1 into wind 
!               components at th
!
#include "model_macros_f.h"
!
      subroutine wdpers
!
      implicit none
!
!author 
!     Sylvie Gravel - rpn - nov 1994
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_20 - Tanguay M.        - 1d higher order diffusion operator 
! v3_21 - Tanguay M.        - do filtering at t=0 in v4d_predat
! v4_05 - Lepine M.         - VMM replacement with GMM
!
!object
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "hzd.cdk"
#include "lctl.cdk"
#include "schm.cdk"
#include "ver.cdk"
!
!notes
!	zdth is a displacement, not a position
!
      integer i, j, k
!
!     ---------------------------------------------------------------
!
      if (Lun_debug_L) write(Lun_out,1000)

      gmmstat = gmm_get(gmmk_uth_s, uth ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wdpers ERROR at gmm_get(uth)'
      gmmstat = gmm_get(gmmk_vth_s, vth ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wdpers ERROR at gmm_get(vth)'
      gmmstat = gmm_get(gmmk_zdth_s,zdth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wdpers ERROR at gmm_get(zdth)'
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wdpers ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wdpers ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wdpers ERROR at gmm_get(zdt1)'
!
!     Filtering  
!     ---------
      if (Lctl_step.gt.1) then
      call tmg_start0 ( 12, 'HZD1D    ' )
      if (Hzd_t1_0_L) call hzd_hoffld (ut1,   LDIST_DIM, G_nk, 1)
      if (Hzd_t1_0_L) call hzd_hoffld (vt1,   LDIST_DIM, G_nk, 2)
      if (Hzd_t1_0_L) call hzd_hoffld (zdt1, LDIST_DIM, G_nk+1, 3)
      call tmg_stop0 (12)
      endif
!
!C	1. Initialise wind, zdot and upstream positions at
!	   time t0-dt/2 (th) for mid trajectory computations
!	   --------------------------------------------------
!$omp parallel
!$omp do
      do k=1,l_nk 
         do j= 1, l_nj
         do i= 1, l_ni   
            uth(i,j,k)   = ut1(i,j,k)
         end do
         end do
         do j= 1, l_njv
         do i= 1, l_ni 
            vth(i,j,k) = vt1(i,j,k)
         end do
         end do
      end do
!$omp enddo
      if(.not.Schm_zdotMid_L) then
!$omp do
      do k=1,l_nk+1
         do j= 1, l_nj
         do i= 1, l_ni
            zdth(i,j,k) = zdt1(i,j,k)
         end do
         end do
      end do
!$omp enddo
      endif
!$omp end parallel

 1000 format( &
      3X,'TRANSFER WINDS T1 ==> TH : (S/R WDPERS)')
!
!     ---------------------------------------------------------------
!
      return
      end
