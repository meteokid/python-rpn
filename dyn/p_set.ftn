***s/r p_set - initialize the physics model configuration
*
#include "model_macros_f.h"
*
      subroutine p_set
*
      implicit none
*
*author
*     M. Desgagne 
*
*revision
* v2_00 - Desgagne/Lee       - initial MPI version
* v2_10 - Lee V.             - create TS file only if time-series are requested
* v2_11 - Desgagne M.        - time series file now ../time_series.bin
* v2_20 - Pellerin P.        - modification related to physics 3.66
* v2_21 - Dugas B.           - activate climate mode
* v2_21 - Desgagne M.        - rpn_comm stooge for MPI
* v2_31 - Dugas B.           - add new variable P_zong_nbin and
*                              restore P_zong_znoff_L
* v2_32 - Desgagne M.        - add broadcast of common pout_i
* v2_32 - Dugas B.           - add p_rad_nivl
* v3_00 - Laroche S.         - initialize simplified physics variable
*                              add namelist simplified physics
* v3.01 - Leduc A-M.         - add P_cond_kfcpcp_s and change P_cond_shlct_s
*                              to P_cond_shlct_s(1) and P_cond_shlct_s(2)
* v3_02 - Dugas B.           - account for a possible second call to the physics
*                              and add P_rad_qco2, P_pbl_dumpbus initializations
* v3_03 - Desgagne M.        - re-activate P_cond_filco for LAM
* v3_03 - Bilodeau B.        - add P_pbl_as, P_pbl_beta and P_cond_kkl
* v3_03 - Dugas B.           - add P_str_strato_L
* v3_03 - Leduc A-M.         - add P_rad_filter_L
* v3_10 - Lee V.             - check read error in some namelists, added stopmpi
* v3_11 - Desgagne M.        - add P_pbl_impflx_L
* v3_12 - Plante A.          - add P_cond_pcptype_s
* v3_20 - Leduc A-M.         - add P_cond_kticefrac_L
* v3_20 - Leduc/Bilodeau     - add P_pbl_z0tlat
* v3_20 - Pellerin P.        - off-line mode
* v3_21 - Talbot D.          - add P_pbl_tdiaglim_L
* v3_21 - Leduc A-M.         - add P_rad_tsflxir_L
* v3_21 - Lemonsu A.         - add P_pbl_schurb_s
* v3_21 - Desgagne M.        - call inctphy3
* v3_22 - Leduc A-M.         - add P_pbl_limsnodp_L
* v3_22 - Dugas B.           - add kfctriga support
*
*object
*       See above id
*	
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "grd.cdk"
#include "xst.cdk"
#include "mem.cdk"
#include "lun.cdk"
#include "mult.cdk"
#include "out1.cdk"
#include "path.cdk"
#include "p_out.cdk"
#include "p_nml.cdk"
#include "p_nml2.cdk"
#include "schm.cdk"
#include "ptopo.cdk"
*
*modules
      character*256 fln1_S,fln2_S
      logical inctphy3,set_dcst
      integer fnom,longueur
      external inctphy3, set_dcst, fnom, longueur
*
      integer i,err,nrec,bidon,status_nml,status_nml2
      real deg_2_rad
**
*     ---------------------------------------------------------------
*
      if (lun_out.gt.0) write(Lun_out,9001)
*
      if (.not.inctphy3(set_dcst,Ptopo_myproc)) then
         if (Lun_out.gt.0) write (Lun_out,9003)
         err= -1
         call stopmpi(err)
      endif
*
      P_pset_second_L= .false.
      P_pset_xofset  = 0
      P_pset_yofset  = 0
      P_pset_xofsetr =-1
      P_pset_yofsett =-1
      P_pset_xblnd   = 1
      P_pset_yblnd   = 1
*
      P_rad_schm_s     = 'oldrad' 
      P_rad_knt        = 3 
      P_rad_fomic_L    = .false.
      P_rad_filter_L   = .true.
      P_rad_tsflxir_L  = .false.
      P_rad_ftp_s      = "STD"
      P_rad_qco2       = 360.
*
      do i=1,CNMXRAD+1
         P_rad_nivl(i) = 0
      enddo
*
      P_clim_clima_L = .false.
      P_clim_ininc_L = .false.
*
      P_str_strato_L = .false.
*
      P_pbl_drag_L   = .false.
      P_pbl_ocean_L  = .false.
      P_pbl_evap_L   = .false.
      P_pbl_dbgvv_L  = .false.
      P_pbl_truew_L  = .false.
      P_pbl_snwmlt_L = .false.
      P_pbl_stomat_L = .false.
      P_pbl_typsol_L = .false.
      P_pbl_advectke_L = .false.
      P_pbl_schurb_s = 'NIL'
      P_pbl_bndlr_s  = 'NIL'
      P_pbl_mix_s    = 'BLAC62'
      P_pbl_cst      = 2.3E+06
      P_pbl_csn      = 1.0E+06
      P_pbl_csg      = 2.0E+06
      P_pbl_kst      = 0.5E-06
      P_pbl_ksn      = 0.6E-06
      P_pbl_ksg      = 1.1E-06
      P_pbl_valml_8  = 1.0
      P_pbl_mllat_8  = 30.0
      P_pbl_valeq_8  = 1.0
      P_pbl_eqlat_8  = 5.0
      P_pbl_nslof    = 0
      P_pbl_dumpbus  = 0
      P_pbl_as       = 12.0
      P_pbl_beta     =  1.0
      P_pbl_z0tlat(1)=  0.0
      P_pbl_z0tlat(2)=  0.0
      P_pbl_zua      = -1.0
      P_pbl_zta      = -1.0

      P_pbl_albkg_L  = .false. 
      P_pbl_agreg_L  = .false.
      P_pbl_cortm_L  = .true.
      P_pbl_corts_L  = .false.
      P_pbl_drylp_L  = .true.
      P_pbl_monta_L  = .true.
      P_pbl_iceme_L  = .false.
      P_pbl_impflx_L = .false.
      P_pbl_tdiaglim_L = .false.
      P_pbl_limsnodp_L = .false.
      
*
      do 50 i=1,cnmaxad
         P_pbl_spng(i) = 0.0
 50   continue
*
      P_cond_satu_L  = .false.
      P_cond_ilwc_L  = .false.
      P_cond_filtend = -1
      P_cond_xofset  = Grd_left
      P_cond_xblnd   = 1
      P_cond_yofset  = Grd_belo
      P_cond_yblnd   = 1
      P_cond_conv_s  = 'NIL'
      P_cond_stcon_s = 'NIL'
      P_cond_shlct_s(1) = ' '
      P_cond_shlct_s(2) = ' '
      P_cond_dzsedi  = -1.
      P_cond_hc      = 0.0
      P_cond_hf      = 0.0
      P_cond_hm      = 0.0
      P_cond_filco   = 0.0
      P_cond_kfcmom_L= .false.
      P_cond_kfctrig4(1) = 0.
      P_cond_kfctrig4(2) = 0.
      P_cond_kfctrig4(3) = 0.05
      P_cond_kfctrig4(4) = 0.05
      P_cond_kfctriga    = -1.0
      P_cond_kfcrad  = 1500.
      P_cond_kfcdepth= 4000.
      P_cond_kfcdlev = 0.5
      P_cond_kfcdet  = 0.
      P_cond_kfctimec= 3600.
      P_cond_kfctimea= 3600.
      P_cond_kfcpcp_s= 'ORI'
      P_cond_kticefrac_L=.true.
      P_cond_kkl     = 0.1
      P_cond_pcptype_s='NIL'
*
      P_gwd_s        = 'GWD86'
*
      P_serg_srsus_L = .false.
      do i=1,cnsrsfm
         P_serg_srsrf_s(i) = ' '
      end do
      do i=1,cnsrpfm
         P_serg_srprf_s(i) = ' '
      end do
      P_serg_srwri      = 1
      P_serg_serstp     = 99999
*
      P_zong_znli = 0
      P_zong_nbin = G_nj
      P_zong_znmod = 1
      P_zong_znoff_L = .false.
      P_zong_znsus_L = .false.
      do i=1,CNZNSFM
         P_zong_znsrf_s(i) = ' '
      end do
      do i=1,CNZNSFM
         P_zong_znprf_s(i) = ' '
      end do
*
*
*     Simplified physics section
*     --------------------------
      P4d_sigma_wrt  = .true.
      P4d_kdphys     = 0
      P4d_pbl        = 0
      P4d_lsc        = 0
      P4d_sgo        = 0
*
      P_out_moyhr = 0
      status_nml2 = 0
*
      if (lun_out.gt.0) then
         status_nml = -1
         write(Lun_out,*) 'Reading namelist from: ',
     $                    Path_nml_S(1:longueur(Path_nml_S))
         err = fnom (lun_in, Path_nml_S, 'SEQ' , nrec)
         rewind ( Lun_in )
         read (Lun_in, nml=physics, end = 70, err = 70)
         write(Lun_out, nml=physics_p)
         status_nml = 0
 70      rewind ( Lun_in )
         read (Lun_in, nml=simplified_physics, end = 80)
         write(Lun_out, nml=simplified_physics_p)
 80      continue
*
         if (.not.P_pset_second_L) call fclos (lun_in)
*
      endif
*
      call RPN_COMM_bcast (status_nml ,1,"MPI_INTEGER",0,"grid",err)
*
      if (status_nml.lt.0) then
         if (lun_out.gt.0)write (lun_out,9004)
         call stopmpi(status_nml)
      endif
*
      if (P_pset_second_L) then
*
         P_cond2_conv_S   = P_cond_conv_S
         P_cond2_stcon_S  = P_cond_stcon_S
         P_cond2_shlct_S(1)= P_cond_shlct_S(1)
         P_cond2_shlct_S(2)= P_cond_shlct_S(2)
         P_cond2_satu_L   = P_cond_satu_L
         P_cond2_ilwc_L   = P_cond_ilwc_L
         P_cond2_kfcmom_L = P_cond_kfcmom_L
         P_cond2_kfctrig4 = P_cond_kfctrig4
         P_cond2_kfctriga = P_cond_kfctriga
         P_cond2_kfcrad   = P_cond_kfcrad
         P_cond2_kfcdepth = P_cond_kfcdepth
         P_cond2_kfcdlev  = P_cond_kfcdlev
         P_cond2_kfcdet   = P_cond_kfcdet
         P_cond2_kfctimec = P_cond_kfctimec
         P_cond2_kfctimea = P_cond_kfctimea
         P_cond2_kticefrac_L= P_cond_kticefrac_L
*
         P_pbl2_bndlr_S   = P_pbl_bndlr_S
         P_pbl2_schsl_S   = P_pbl_schsl_S
         P_pbl2_mix_S     = P_pbl_mix_S
         P_pbl2_drag_L    = P_pbl_drag_L
         P_pbl2_ocean_L   = P_pbl_ocean_L
         P_pbl2_evap_L    = P_pbl_evap_L
         P_pbl2_snwmlt_L  = P_pbl_snwmlt_L
         P_pbl2_stomat_L  = P_pbl_stomat_L
         P_pbl2_typsol_L  = P_pbl_typsol_L
         P_pbl2_iceme_L   = P_pbl_iceme_L
         P_pbl2_agreg_L   = P_pbl_agreg_L
*
*
         if (lun_out.gt.0) then
            status_nml2 = -1
            rewind ( Lun_in )
            read (Lun_in, nml=physics2, end = 90, err = 90)
            write(Lun_out, nml=physics2)
            status_nml2 = 0
 90         continue
            call fclos (lun_in)
         endif
*
      endif
*
*     Options used for the Off-line mode (MEC)
*
         if (Schm_offline_L) then
*
            P_pbl_bndlr_s    = 'surface' 
            P_pbl_mix_s      = 'boujo'
            P_pbl_drag_L    = .true.     
            P_pbl_ocean_L    = .true. 
            P_pbl_evap_L    = .true.      
            P_pbl_dbgvv_L    = .false.
            P_pbl_snwmlt_L  = .false.    
            P_pbl_stomat_L   = .false.
            P_pbl_typsol_L  = .false.    
            P_pbl_agreg_L    = .true. 
            P_pbl_cortm_L   = .true.     
            P_pbl_corts_L    = .false.
            P_pbl_drylp_L   = .true.     
            P_pbl_monta_L    = .true. 
            P_pbl_albkg_L   = .false.    
            P_pbl_iceme_L    = .true. 
            P_pbl_nslof     = 0          
            P_gwd_s          = 'nil'
            P_cond_conv_s    = 'nil'     
            P_cond_stcon_s   = 'nil'  
            P_cond_ilwc_L    = .true.     
            P_cond_satu_L    = .true. 
            P_cond_shlct_s (1)= 'nil'
            P_cond_shlct_s (2)='nil'
            P_rad_ftp_s      = 'std'  
            P_rad_fomic_L    = .false.  
            P_rad_schm_s     = 'nil'
*     
         endif

*
      call RPN_COMM_bcast (status_nml2,1,"MPI_INTEGER",0,"grid",err)
*
      if (status_nml2.lt.0) then
         if (lun_out.gt.0) write (lun_out,9005)
         call stopmpi(status_nml2)
      endif
*
*     Broadcast the data received from physics namelist
      COMMON_BROADCAST(ppset_i)
      COMMON_BROADCAST(ppset_l)
      COMMON_BROADCAST(prad_c)
      COMMON_BROADCAST(prad_l)
      COMMON_BROADCAST(prad_i)
      COMMON_BROADCAST(prad_r)
      COMMON_BROADCAST(pclim_l)
      COMMON_BROADCAST(pstr_l)
      COMMON_BROADCAST(ppbl_c)
      COMMON_BROADCAST(ppbl_l)
      COMMON_BROADCAST(ppbl_i)
      COMMON_BROADCAST(ppbl_r)
      COMMON_BROADCAST(ppbl_r8)
      COMMON_BROADCAST(pgwd_c)
      COMMON_BROADCAST(pcond_c)
      COMMON_BROADCAST(pcond_l)
      COMMON_BROADCAST(pcond_i)
      COMMON_BROADCAST(pcond_r)
      COMMON_BROADCAST(pout_i)
      COMMON_BROADCAST(pserg_l)
      COMMON_BROADCAST(pserg_i)
      COMMON_BROADCAST(pserg_c)
      COMMON_BROADCAST(pzong_i)
      COMMON_BROADCAST(pzong_c)
      COMMON_BROADCAST(pzong_l)
      COMMON_BROADCAST(P4d_simp_i)
      COMMON_BROADCAST(P4d_simp_l)
*
      if (P_pset_second_L) then
         COMMON_BROADCAST(pcond2_c)
         COMMON_BROADCAST(pcond2_l)
         COMMON_BROADCAST(pcond2_r)
         COMMON_BROADCAST(ppbl2_c)
         COMMON_BROADCAST(ppbl2_l)
      endif
*
      P_rad_datim(14) = Out1_date
      call newdate (Out1_date,P_rad_datim,bidon,-4)
*
      P_pbl_prsol(1)=P_pbl_cst
      P_pbl_prsol(2)=P_pbl_csn
      P_pbl_prsol(3)=P_pbl_csg
      P_pbl_prsol(4)=P_pbl_kst
      P_pbl_prsol(5)=P_pbl_ksn
      P_pbl_prsol(6)=P_pbl_ksg
*
*     conversion to radians and insure latitudes are positive
*     (see subroutine vlatspng)
*
      deg_2_rad = Dcst_pi_8/180.
*
      P_pbl_mllat_8 = ( abs(P_pbl_mllat_8) * deg_2_rad )
      P_pbl_eqlat_8 = ( abs(P_pbl_eqlat_8) * deg_2_rad )
*
      if (P_serg_srsus_L) then
         if (Lun_out.gt.0) then
            err = fnom (lun_tsrs, '../time_series.bin', 
     $                            'SEQ+FTN+UNF', nrec)
 600        read(lun_tsrs,end=700)
            goto 600
 700        backspace(lun_tsrs)
         endif
         call set_xst ()
      else
         Xst_nstat = 0
      endif
*
      fln1_S  = 'dfvperm_1'
      fln2_S  = 'dfvperm_2'
      if (.not.Mem_phyncore_L) then
         if (lun_out.gt.0) then
            write(lun_out,5000)
            write(lun_out,*)'Lun_waphy=',Lun_waphy,'file=',fln1_S
            write(lun_out,*)'Lun_wapta=',Lun_wapta,'file=',fln2_S
         endif
         err = fnom(  lun_waphy,fln1_S, 'RND'         , 0)
         err = fnom(  lun_wapta,fln2_S, 'RND'         , 0)
      else
         if (lun_out.gt.0) write(lun_out,7000)
      endif
*
c      if ((G_lam).and.(P_cond_filco.ne.0.)) then
c         P_cond_filco = 0.
c         if (lun_out.gt.0) write(lun_out,7100)
c      endif
*
      return
 5000 format(
     %/,'INITIALIZATION OF LOGICAL UNITS. OPEN WA FILES (S/R SET_DYNC)',
     %/,'=============================================================')
 7000 format(/,'PHYSICS REMAINS INCORE',
     %       /,'======================')
 7100 format(/,'IN LAM CONFIGURATION, P_cond_filco IS MAINTAINED TO 0. '
     $         'FOR NOW',
     %       /,'=====================================================')
 9001 format(
     +/,'INITIALIZING PHYSICS CONFIGURATION FOR MODEL (S/R P_SET)',
     +/,'========================================================') 
*
 9003 format(
     $/,'PROBLEM INITIALIZATING PHYSICAL CONSTANTS in (S/R inctphy3)',
     +/,'====================== ABORT ==============================')
*
 9004 format(
     $/,'PROBLEM WITH NAMELIST physics OR NAMELIST is not found',
     +/,'====================== ABORT =========================')
*
 9005 format(
     $/,'PROBLEM WITH NAMELIST physics2 OR NAMELIST is not found',
     +/,'====================== ABORT =========================')
      end
