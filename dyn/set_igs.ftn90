!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/p set_descriptors - inidialize the ig1 and ig2 parameters for the grid
!
#include "model_macros_f.h"
!
subroutine set_igs ()
  implicit none
  !
  !author
  !     Ron McTaggart-Cowan - Aug 2009
  !
  !revision
  !
  !object
  !     use GRID common block to define a set of ig1/ig2 values
  !     using a cyclic redundancy check that uniquely define all output grids.
  !
  !arguments
  !
  !implicits
#include "glb_ld.cdk"
#include "dimout.cdk"
#include "grd.cdk"
#include "hgc.cdk"
#include "geomn.cdk"
#include "cstv.cdk"
#include "grid.cdk"

  ! Internal variables
  integer :: i,j,k,cnt,crc,dgid,err,ihalf
  integer, parameter :: ELEM=4
  integer, dimension(1) :: max_pos
  real :: lev,max_val
  real, dimension(G_ni*2 + G_nj*2 + ELEM) :: identity_vec
  real, dimension(G_ni,2) :: latlon_we
  real, dimension(G_nj,2) :: latlon_sn

  ! External functions
  integer, external :: f_calc_crc,f_crc32,ezgdef_fmem,gdll

  ! Get lat/lon values for the horizontal grid descriptors
  dgid = ezgdef_fmem (G_ni, 1  , 'Z', 'E', Hgc_ig1ro, &
       Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro, Geomn_longs,Geomn_latgs(G_nj/2))
  err  = gdll (dgid,latlon_we,latlon_we(1,2))
  dgid = ezgdef_fmem (1   , G_nj, 'Z', 'E', Hgc_ig1ro, &
       Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro, Geomn_longs(G_ni/2),Geomn_latgs)
  err  = gdll (dgid,latlon_sn,latlon_sn(1,2))

  ! Set unique values of ig1 and ig2 for the descriptors
  Grid_ig1 = -1; Grid_ig2 = -1
  do j=1,Grid_sets
     cnt = 1
     do i=Grid_y0(j),Grid_y1(j),Grid_stride(j)
        identity_vec(cnt) = latlon_sn(i,1) ; cnt=cnt+1
        identity_vec(cnt) = latlon_sn(i,2) ; cnt=cnt+1
     enddo
     do i=Grid_x0(j),Grid_x1(j),Grid_stride(j)
        identity_vec(cnt) = latlon_we(i,1) ; cnt=cnt+1
        identity_vec(cnt) = latlon_we(i,2) ; cnt=cnt+1
     enddo
     identity_vec(cnt:cnt+ELEM-1) = (/Grd_xlat1,Grd_xlon1,Grd_xlat2,Grd_xlon2/); cnt=cnt+ELEM-1

     crc = f_crc32 (0., identity_vec(1:cnt), cnt)
! before rmn_011 convip was bugged for 3200 < ip1 < 32768
! we therefore add 32768 for now
     Grid_ig1(j) = ibits(crc, 0,16) + 32768
     Grid_ig2(j) = ibits(crc,16,16) + 32768
  enddo
  return
end subroutine set_igs
