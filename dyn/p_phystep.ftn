***s/r p_phystep - Apply the physical processes: CMC/RPN package
*
#include "model_macros_f.h"
*
      subroutine p_phystep (F_stepno)
      implicit none
*
      integer F_stepno
*
*author 
*     Michel roch - rpn - april 1994
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_21 - Desgagne/Methot/Bilodeau - dzmin calculation
* v2_31 - Desgagne          - clean up and introduce h2o tracers
* v2_32 - Lee V.            - call genslabp here, add "HY" record to slabs
* v3_00 - Laroche S.        - adapted for simplified physics
* v3_02 - Tanguay M.        - Add V4dg_oktr_L for v4d_rwtraj_kmkt 
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Dugas B.          - Correct DUMPBUS mechanism for OpenMP
* v3_12 - Leduc A-M         - Add variables gzm and topo
* v3_21 - Valcke, S.        - Bugfix: no call to p_apply in offline mode
* v3_22 - L.Spacek          - extract gravity wave tendencies for ensembles
*   
*object
*	Computes the physical processes and apply the resulting
*	tendencies to the dynamic variables of the model:
*	CMC/RPN package
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_stepno      O           step number
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "mem.cdk"
#include "macro.cdk"
#include "ptopo.cdk"
#include "busind.cdk"
#include "dimout.cdk"
#include "v4dg.cdk"
#include "p4d_simp.cdk"
#include "p_bus.cdk"
#include "p_pbl.cdk"
#include "schm.cdk"
*
*modules
      integer  open_db_file,rewind_db_file,close_db_file
      external open_db_file,rewind_db_file,close_db_file
**
      integer dim,err,i,j,k,obussiz
      real, dimension(:,:), allocatable :: obusval
      real, dimension(:), allocatable :: up,vp,wp,tp,qp,trp,
     $                                   um,vm,tm,gzm,topo,
     $                                   trm,lnpsm,
     $                                   sig,kmm,ktm,ug,vg
*
*     ---------------------------------------------------------------
*
      call iniobus(obussiz)
      allocate(obusval(l_ni*l_nj,obussiz))
      dim = (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*l_nk
      allocate (up(dim),vp(dim),wp(dim),tp(dim),qp(dim),
     $          um(dim),vm(dim),tm(dim),gzm(dim),
     $          topo(dim),ug(dim),vg(dim),
     $          lnpsm(dim),sig(dim),kmm(dim),ktm(dim),
     $          trp(dim*phyt_ntr),trm(dim*phyt_ntr))
*
*C       2.	load all fields required by the physic in memory
*		------------------------------------------------
*
      call p_vmmphy ( up, vp, wp, tp, qp, trp,
     $                um, vm, tm, gzm, topo, trm,
     $                lnpsm, sig, LDIST_DIM,l_nk )
*
*
*               Store TRAJ for the simplified physics
*               -------------------------------------
      if ( V4dg_conf.ne.0 .and. F_stepno.gt.0) then 
                         call v4d_rwtraj_sigma  (sig,LDIST_DIM,l_nk)
        if( V4dg_oktr_L) call v4d_rwtraj_phystep(up,vp,tp,qp,trp,
     $                                           um,vm,tm,trm,
     $                                           LDIST_DIM,l_nk)
      endif
*
*
*C       4.	compute physics tendencies
*		--------------------------
*	initialize the number of slices previously done
*
      Mem_pslic = 0
*
      if (.not.Mem_phyncore_L) then
         err = open_db_file   (Lun_waphy)
         err = rewind_db_file (Lun_waphy)
      endif
*
*
!$omp parallel
!$omp do
      do j=1,Ptopo_npeOpenMP
      call p_physlb ( j , F_stepno,obusval,
     $                up, vp, wp, tp, qp, trp,
     $                um, vm, tm,gzm,topo, trm,
     $                lnpsm, sig, kmm, ktm,
     $                ug, vg, LDIST_DIM, l_nk)
      enddo
!$omp enddo
!$omp end parallel
*
       call out_phy(obusval,l_ni,l_nj,F_stepno)
       deallocate (obusval)
      if (P_pbl_dumpbus.gt.0) then
        if (mod( F_stepno,P_pbl_dumpbus ).eq.0)
     $    call dumpwrit2( Lun_out, F_stepno, Ptopo_myproc )
      endif
*
      if (.not.Mem_phyncore_L) err = close_db_file (Lun_waphy)
*
*C   6.	Apply physics tendencies to the appropriate dynamic fields
*C      and insure consistency with other dynamic variables
*       ----------------------------------------------------------
*
      if (.not. schm_offline_L) then
          call p_apply ( up,vp,um,vm,tm,trm, tp,qp,ug,vg,
     $        LDIST_DIM,l_nk,F_stepno.gt.0 )
      endif
*
*
*       Store TRAJ of vertical exchange coefficients from full-physics
*       --------------------------------------------------------------
      if ( V4dg_conf.ne.0 .and. P4d_pbl.eq.2 .and. F_stepno.gt.0 .and.
     $     V4dg_oktr_L ) call v4d_rwtraj_kmkt(kmm,ktm,LDIST_DIM,l_nk) 

      deallocate (up,vp,wp,tp,qp,trp,um,vm,tm,gzm,topo,ug,vg,
     $            trm,lnpsm,sig,kmm,ktm)
*
*     ---------------------------------------------------------------
*
      return
      end
