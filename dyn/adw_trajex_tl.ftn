***s/r adw_trajex_tl - TLM of adw_trajex 
*
#include <model_macros_f.h>
*
      subroutine adw_trajex_tl ( F_xto,   F_yto,   F_xcto,  F_ycto,
     %                           F_zcto,  F_xctm,  F_yctm,  F_zctm,
     %                           F_xto_m, F_yto_m, F_xcto_m,F_ycto_m,
     %                           F_zcto_m,F_xctm_m,F_yctm_m,F_zctm_m,i0,in,j0,jn)
*
#include "impnone.cdk"
*
      real   F_xto (*), F_yto (*), F_xcto(*), F_ycto(*),
     %       F_zcto(*), F_xctm(*), F_yctm(*), F_zctm(*)
*
      real   F_xto_m (*), F_yto_m (*), F_xcto_m(*), F_ycto_m(*),
     %       F_zcto_m(*), F_xctm_m(*), F_yctm_m(*), F_zctm_m(*)
      integer i0,in,j0,jn
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v3_01 - Tanguay M.        - correction minmax_m = +-1 
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_xto        | upstream x positions at origin                  |  o  |
* F_yto        | upstream y positions at origin                  |  o  |
* F_xcto       | upstream x cartesian positions at origin        |  o  |
* F_ycto       | upstream y cartesian positions at origin        |  o  |
* F_zcto       | upstream z cartesian positions at origin        |  o  |
* F_xctm       | upstream x cartesian positions at mid-traj.     |  i  |
* F_yctm       | upstream y cartesian positions at mid-traj.     |  i  |
* F_zctm       | upstream z cartesian positions at mid-traj.     |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
************************************************************************
      integer i,j,k, n, ij, nij, nijk
*
      real*8 prx_8, pry_8, prz_8, prdot2_8, r2pi_8, TWO_8 
*
      real*8 prdot2m_8
*
      real  minmax, minmax_m
*
      parameter (TWO_8 = 2.0)
************************************************************************
      nij  = l_ni*l_nj
      nijk = l_ni*l_nj*l_nk
*
      r2pi_8 = TWO_8 * Dcst_pi_8
************************************************************************
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
      n = (k-1)*nij+((j-1)*l_ni) + i
*
      ij = mod( n-1, nij ) + 1
*
      pry_8 = dble(Adw_cy2d_8(ij))
      prx_8 = dble(Adw_cx2d_8(ij)) * pry_8
      pry_8 = dble(Adw_sx2d_8(ij)) * pry_8
      prz_8 = dble(Adw_sy2d_8(ij))
*
*     TRAJECTORY
*     ----------
      prdot2m_8= 2.0 * ( prx_8 * dble(F_xctm_m(n)) +
     %                   pry_8 * dble(F_yctm_m(n)) +
     %                   prz_8 * dble(F_zctm_m(n)) )
*
      F_xcto_m(n) = prdot2m_8 * dble(F_xctm_m(n)) - prx_8
      F_ycto_m(n) = prdot2m_8 * dble(F_yctm_m(n)) - pry_8
      F_zcto_m(n) = prdot2m_8 * dble(F_zctm_m(n)) - prz_8
*
      F_xto_m(n) = atan2( F_ycto_m(n), F_xcto_m(n) )
*
      F_yto_m(n) = asin (max(-1.,min(1.,F_zcto_m(n))) )
*
*     TLM
*     ---
      prdot2_8= 2.0 * ( prx_8 * dble(F_xctm(n)) +
     %                  pry_8 * dble(F_yctm(n)) +
     %                  prz_8 * dble(F_zctm(n)) )
*
      F_xcto(n) = prdot2m_8 * dble(F_xctm(n)) + prdot2_8 * dble(F_xctm_m(n)) 
      F_ycto(n) = prdot2m_8 * dble(F_yctm(n)) + prdot2_8 * dble(F_yctm_m(n))
      F_zcto(n) = prdot2m_8 * dble(F_zctm(n)) + prdot2_8 * dble(F_zctm_m(n)) 
*
      F_xto(n) = (F_ycto(n)*F_xcto_m(n) - F_ycto_m(n)*F_xcto(n))
     %           /(F_xcto_m(n)*F_xcto_m(n) + F_ycto_m(n)*F_ycto_m(n))
*
*     The following min statement is expanded as two IF blocks:
*     minmax_m = max(-1.,min(1.,F_zcto_m(n))) 
*
      minmax_m = F_zcto_m(n) 
      minmax   = F_zcto(n) 
      if (F_zcto_m(n).ge.1.) then
              minmax_m = 1.
              minmax   = 0.
              F_yto(n) = 0.
      elseif (F_zcto_m(n).le.-1.) then
              minmax_m =-1.
              minmax   = 0.
              F_yto(n) = 0.
      else
              F_yto(n) = minmax/sqrt( 1.0-minmax_m**2 )
      endif
*
      enddo
      enddo
      enddo
*
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
      n = (k-1)*nij+((j-1)*l_ni) + i
*
*     TRAJECTORY and TLM
*     ------------------
      if ( F_xto_m(n).lt. 0.0 ) F_xto_m(n) = F_xto_m(n) + r2pi_8
*
      enddo
      enddo
      enddo
*
      return
      end
