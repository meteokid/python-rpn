*** s/r uv2tdpsd - Computes total divergence & 
*                  vertical velocity diagnostically 
*
#include <model_macros_f.h>
*
      subroutine uv2tdpsd ( F_td, F_psd, F_uu, F_vv, F_ss, DIST_DIM, Nk )
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
      real    F_td(DIST_SHAPE,Nk), F_psd(DIST_SHAPE,Nk),
     $        F_uu(DIST_SHAPE,Nk), F_vv (DIST_SHAPE,Nk),
     $        F_ss(DIST_SHAPE)
*
*authors
*      Methot et Patoine - sept 1995 - cmc
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from uv2tdpsd v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*******************************************************************************
*                                                                             *
* The switch &  = 0 (1) for a linear (non-linear) model.                      *
*             l                                                               *
*                                                                             *
* d  /    dpi  \        dpi                                                   *
* -- | ln -- * | + D +  --- * = 0                                   (1)       *
* dt \    dpi  /        dpi                                                   *
*                                                                             *
*                                                                             *
* d  / dpi  \    __   /    dpi  \    d   / . * dpi  \                         *
* -- | -- * |  + \/ . | V  -- * | +  --  | pi  -- * | = 0          (2)        *
* dt \ dpi  /         \    dpi  /    dpi \     dpi  /                         *
*                                                                             *
*                                                                             *
* 1) Integrate (2) from  pi  to  pi                                           *
*                          1       gnk                                        *
*                                                                             *
*                            *                                                *
*                          pi                                                 *
*                         /  gnk                                              *
*                         |                                                   *
*        dpi              |  __   /    dpi  \     *                           *
*        --  |     =   -  |  \/ . | V  -- * |  dpi  =  0           (3)        *
*        dt  |  *         |       \    dpi  /                                 *
*             pi          |                                                   *
*               gnk       /  *                                                *
*                          pi                                                 *
*                            1                                                *
*                                                                             *
*        dpi           b     dpi                                              *
*  and,  --  |     =   --    --  |        since  pi = b exp(s)     (4)        *
*        dt  | *       b     dt  | *                                          *
*            pi         gnk      pi                                           *
*              k                   gnk                                        *
*                                                                             *
*                                                                             *
* 2) Integrate (2) from  pi  to  pi    with (3) and (4) gives :               *
*                          k       gnk                                        *
*                                                                             *
*                       *                                                     *
*                     pi                                                      *
*                    /  1                                                     *
*              * /   |                                                \       *
*    . *    dpi  |   |  __   /    dpi  \     *      b     dpi         |       *
*    pi  =  --   |   |  \/ . | V  -- * |  dpi   -   --    --  |       |       *
*           dpi  |   |       \    dpi  /            b     dt  | *     |       *
*                \   |                               gnk      pi      /       *
*                    /  *                                       gnk           *
*                     pi                                                      *
*                                                                             *
* 3) From (1) , we get :                                                      *
*                                                                             *
*         . *        * /                                                    \ *
*        dpi      dpi  | d    / dpi \        __  dpi      . * d    / dpi  \ | *
*  D  +  -- * = - --   | --   | --  |  + V . \/  --    +  pi  --   | -- * | | *
*        dpi      dpi  |    * \ dt  /               *            * \ dpi  / | *
*                      \ dpi                     dpi          dpi           / *
*                                                                             *
*   with,                                                                     *
*          d    / dpi  \     /   __ 2    __ 2           __    __              *
*          --   | -- * |  =  | ( \/ A  + \/ b exp(s) )( \/A + \/b ) -         *
*             * \ dpi  /     \       __    __          __ 2    __ 2   \       *
*          dpi                     ( \/A + \/b exp(s))(\/ A  + \/ b ) |   /   *
*                                                                     /       *
*                                               __    __   3                  *
*                                             ( \/A + \/b )                   *
*                                                                             *
*******************************************************************************
*
*arguments
*______________________________________________________________________
*        |                                             |           |   |
* NAME   |             DESCRIPTION                     | DIMENSION |I/O|
*--------|---------------------------------------------|-----------|---|
* F_td   | total divergence                            | 3D        | o |
* F_psd  | vertical velocity ( pi*-dot )               | 3D        | o |
*--------|---------------------------------------------|-----------|---|
* F_uu   | x component of velocity                     | 3D        | i |
* F_vv   | y component of velocity                     | 3D        | i |
* F_ss   | ln ( pi / z )                               | 2D        | i |
*________|_____________________________________________|___________|___|
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "intuv.cdk"
*
*modules
*
      integer i, j, k
      real pr1, prsc
      real uv(DIST_SHAPE,Nk,2),dvi(DIST_SHAPE,Nk),w1(DIST_SHAPE,Nk)
**
*     ________________________________________________________________
*
      do k=1,G_nk
      do j = 1, l_nj
      do i = 1, l_ni
         F_td(i,j,k) = 0.0
         uv(i,j,k,1) = 0.0
         uv(i,j,k,2) = 0.0
      end do
      end do
      end do
*
      call rpn_comm_xch_halo( F_ss, LDIST_DIM, l_ni, l_nj , 1,
     %                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
*              __              *
*     compute  \/ . ( V dpi/dpi )
*
      do k=1,G_nk
         do j = 1, l_nj
         do i = 1, l_niu
            uv(i,j,k,1) = F_uu(i,j,k) * (
     $  (1.-intuv_c0xxu_8(i))*(1.+(geomg_dpib(k)*(exp(F_ss(i  ,j))-1.)))
     $   +  intuv_c0xxu_8(i) *(1.+(geomg_dpib(k)*(exp(F_ss(i+1,j))-1.))))
         end do
         end do
         do j = 1, l_njv
         do i = 1, l_ni
            uv(i,j,k,2) = F_vv(i,j,k) * (
     $  (1.-intuv_c0yyv_8(j))*(1.+(geomg_dpib(k)*(exp(F_ss(i,j  ))-1.)))
     $   +  intuv_c0yyv_8(j) *(1.+(geomg_dpib(k)*(exp(F_ss(i,j+1))-1.))))
         end do
         end do
      end do
*
      call rpn_comm_xch_halo ( uv, LDIST_DIM, l_niu,l_nj,G_nk*2,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      call caldiv_2 ( F_td, uv(minx,miny,1,1), uv(minx,miny,1,2), LDIST_DIM, G_nk )
*
*                   *
*                 pi
*                /  gnk
*                |   __             *      *
*     compute    |   \/ . ( V dpi/dpi ) dpi
*                |
*                /  *
*                 pi
*                   k
*
      call hatoprg (dvi,F_td,w1,1.0,geomg_hz_8,LDIST_DIM,G_nk)
*
*                .*
*     compute pi
*                k
*
      do k=1,G_nk
         do j=1,l_nj
         do i=1,l_ni
            pr1 = 1.0 + geomg_dpib(k) * (exp(F_ss(i,j)) - 1.0)
            F_psd(i,j,k) = (dvi(i,j,k) + ((geomg_pib(k)/
     %                     geomg_pib(G_nk)) -1) * dvi(i,j,1))/pr1
         end do
         end do
      end do
*
*                      .*
*                   dpi
*     Compute   D + ----  integrated vertically
*     -------          *
*                   dpi
*
*     compute  V . \/ (dpi/dpi )
*
*
      do k=1,G_nk
         do j = 1, l_nj
         do i = 1, l_niu
            uv(i,j,k,1) = ( (F_ss(i+1,j)-F_ss(i,j)) / 
     $                       geomg_hx_8(i) ) * F_uu(i,j,k)
         end do
         end do
         do j = 1, l_njv
         do i = 1, l_ni
            uv(i,j,k,2) = ( (F_ss(i,j+1) - F_ss(i,j)) *
     $                geomg_cyv2_8(j) / geomg_hsy_8(j) ) * F_vv(i,j,k)
         end do
         end do
      end do
*
      call p_uvgridscal ( uv(minx,miny,1,1), uv(minx,miny,1,2), LDIST_DIM, l_nk, .true. )
*
      do k=1,G_nk
      do j= 1, l_nj
      do i= 1, l_ni
         w1(i,j,k)= (uv(i,j,k,1)+uv(i,j,k,2))/geomg_cy2_8(j)
      end do
      end do
      end do
*
*     Compute total divergence
*     ------------------------
      prsc = 1./geomg_pib(G_nk)
      do k=1,G_nk
         do j= 1, l_nj
         do i= 1, l_ni
            F_td(i,j,k) = geomg_dpib(k)*(prsc*dvi(i,j,1)-exp(F_ss(i,j))*w1(i,j,k))
     %                   - F_psd(i,j,k)*(exp(F_ss(i,j))-1.)*geomg_dpia(k)
            F_td(i,j,k) = F_td(i,j,k)/(1+geomg_dpib(k)*(exp(F_ss(i,j))-1.))
         enddo
         enddo
      enddo
*
*     Upper and lower boundary conditions for vertical velocity 
*
      do j= 1, l_nj
      do i= 1, l_ni
         F_psd(i,j,1)    = 0.0
         F_psd(i,j,G_nk) = 0.0
      end do
      end do
*     ________________________________________________________________
*
      return
      end

