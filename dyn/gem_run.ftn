***s/r gem_run - Performs the integration of the model
*
#include <model_macros_f.h>
*
      subroutine gem_run (F_dgtflt_L, F_rstrt_L)
*
      implicit none
*
      logical F_dgtflt_L, F_rstrt_L
*
*author
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
* v2_10 - Tanguay M.        - control cost function when 4D-Var (conf/100=1) 
* v2_20 - Desgagne M.       - correction for Step_total=0
* v2_21 - Dugas B.          - activate climate mode
* v2_21 - Lee V.            - changed calling sequence in p_main
* v2_30 - Dugas B.          - add call to gemtim
* v2_31 - Patoine A.        - logic of restart around Rstri_sdon
* v2_31 - Tanguay M.        - adapt ADJ to diffusion in gem_run 
* v3_00 - Tanguay M.        - cancel parameter in v4d_ctrlcst 
* v3_00 - Laroche S.        - adapt for simplified physics
* v3_01 - Tanguay M.        - introduce identity option
* v3_01 - Lee V.            - introduce horizontal sponge
* v3_02 - Tanguay M.        - cosmetics for identity option
* v3_02 - Buehner M.        - integration stops at timestep V4dg_steplast 
* v3_02                       if in V4d mode
* v3_03 - Tanguay M.        - Call hdif_phy  
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Tanguay M.        - Extend TRAJ for conversion for DYNOUT2
*                           - ADJ of digital filter
*
*object
*	Performs the integration of the model
*
*       A timestep is composed of a dynamics timestep followed by a
*       physics timestep.
*
*       During initialization, the digital filter data is collected
*       at every timestep.
*
*       Output is performed if required.
*
*       Diagnostics (zonal or grid point) are extracted if required.
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_dgtflt_L    I         Digital initiatization mode
* F_rstrt_L     O         Is a restart required
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "init.cdk"
#include "lun.cdk"
#include "step.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "v4dg.cdk"
#include "p_clim.cdk"
*
      logical bkup_L,carryon_L,identity_4dvar_L
      integer last_step
**
*     ---------------------------------------------------------------
      if ( V4dg_conf.ne.0 ) then
         if ( Schm_chems_L ) call gem_stop('gem_run',-1)
      endif
*     ---------------------------------------------------------------
*
      identity_4dvar_L = V4dg_conf.ne.0 .and. V4dg_identity_L 
*
      call blocstat ()
*
      if( V4dg_conf.ne.0 ) then
        last_step = V4dg_steplast
      else
        last_step = Step_total
      endif      
      if ((F_dgtflt_L).and.(Step_total.ge.(Init_dfnp-1)/2)) 
     $     last_step = Init_dfnp-1
*
*     4D-Var: Write trajectory for conversion if requested
*     ----------------------------------------------------
      if ( V4dg_oktrcv_L ) call v4d_rwconv0
*
*C    4D-Var: Control Cost function at INITIAL time
*     ---------------------------------------------
      call v4d_ctrlcst ()
*
 500  Lctl_step  = Lctl_step  + 1
      Rstri_sdon = Rstri_sdon + 1
*
#if defined (NEC) || defined (AIX)
      if (Lun_out.gt.0) call gemtim (Lun_out)
#endif
*
      bkup_L    = .false.
      F_rstrt_L = .false.
      if (Lctl_step.gt.last_step) then
         Lctl_step=last_step
         goto 600
      endif
      if (mod(Lctl_step,Step_bkup).eq.0)    bkup_L = .true.
      if (mod(Rstri_sdon,Step_rsti).eq.0) F_rstrt_L = .true.
*     
      if (Lctl_step.eq.last_step) then
                                            bkup_L = .false.
         if ( P_clim_clima_L ) then
                                         F_rstrt_L = .true.
         elseif (.not.F_dgtflt_L) then
                                         F_rstrt_L = .false.
         endif
      endif
      carryon_L = ((Lctl_step.lt.last_step).and.(.not.F_rstrt_L))
*
      if (F_dgtflt_L) then
         if (Lun_out.gt.0) write(Lun_out,1000) Lctl_step,last_step
      else
         if (Lun_out.gt.0) write(Lun_out,1001) Lctl_step,last_step
      endif
*
*C    (Re-)initialize physics surface forcing increments
*     --------------------------------------------------
      if ( P_clim_ininc_L ) call p_inincr
*
*C    Diffusion, Dynamics and Physics
*     -------------------------------
      if ( .not.identity_4dvar_L ) then
*
*        Horizontal diffusion & Vertical sponge (Initial timestep)
*        ---------------------------------------------------------
         if (Lctl_step.eq.1.and.V4dg_conf.ne.0) call hdif0
*
*        Dynamics timestep
*        -----------------
C        call tmg_start ( 2, 'DYN+HD+PHY' )
         call dynstep
*
*        Physics timestep & Horizontal diffusion & Vertical sponge
*        ---------------------------------------------------------
         call tmg_start ( 7, 'HD+PHY' )
         call hdif_phy
         call tmg_stop (7)
C        call tmg_stop (2)
*
      endif
*
*C    Digital filter
*     --------------
      if ( F_dgtflt_L ) call digflt( )
*
*     4D-Var: Write trajectory for conversion if requested
*     ----------------------------------------------------
      if ( V4dg_oktrcv_L ) call v4d_rwconv0
*
*C    4D-Var: Control Cost function at .NOT.INITIAL time
*     --------------------------------------------------
      call v4d_ctrlcst ()
*
*C    Perform output if required
*     --------------------------
      call blocstat ()
      call dynout2 ()
*
      if (Lun_out.gt.0) write(Lun_out,3000) Lctl_step
*
      if (bkup_L.and..not.F_rstrt_L) call wrrstrt ()
*
      if (carryon_L)  then
         call trans_clean ()
         goto 500
      end if
*
 600  if (Lun_out.gt.0) write(Lun_out,4000) Lctl_step
*
*     ---------------------------------------------------------------
*
 1000 format(/,'GEM_RUN: PERFORMING INITIALIZATION TIMESTEP #',I8,
     $         ' OUT OF ',I8, 
     +       /,'================================================')
 1001 format(/,'GEM_RUN: PERFORMING TIMESTEP #',I8,' OUT OF ',I8,
     +       /,'================================================')
 3000 format(/,'THE TIME STEP ',I8,' IS COMPLETED')
 4000 format(/,'END OF THE TIME LOOP (S/R GEM_RUN) AT TIMESTEP',I8,
     +/,'===================================================')
*
*     ---------------------------------------------------------------
*
      return
      end
