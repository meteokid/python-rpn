***s/r hzd_main_tl - TLM of hzd_main 
*
#include <model_macros_f.h>
*
      subroutine hzd_main_tl 
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - ADJ of HO option
*                           - replace xfis by topo
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - change name 
* v3_01 - Tanguay M.        - TLM of Eigv_parity_L not done yet 
* v3_02 - Tanguay M.        - TLM of Eigv_parity_L done 
* v3-03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "geomg.cdk"
#include "fft.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "p_geof.cdk"
#include "vt1m.cdk"
#include "vtxm.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer err, nlod, key1(50), i, j, k
      real*8  ONE_8
      parameter( ONE_8 = 1. )
*
*     ______________________________________________________
*
      if ((.not.Hzd_fact_L).and.(.not.Hzd_ho_L)) then
         if (Lun_debug_L) write(Lun_out,1001)
         return
      endif
*
      if ( Schm_psadj_L ) call gem_stop('hzd_main_tl',-1)
*     ______________________________________________________
*
      key1(1)  = VMM_KEY(ut1)
      key1(2)  = VMM_KEY(vt1)
      key1(3)  = VMM_KEY(psdt1)
      key1(4)  = VMM_KEY(tpt1)
      key1(5)  = VMM_KEY(fipt1)
      key1(6)  = VMM_KEY(tdt1)
      key1(7)  = VMM_KEY(tt1)
      key1(8)  = VMM_KEY(fit1)
      key1(9)  = VMM_KEY(topo)
      key1(10) = VMM_KEY(tplt1)
      key1(11) = VMM_KEY(qt1)
      key1(12) = VMM_KEY(pipt1)
      key1(13) = VMM_KEY(st1)
      nlod=13
      if (.not. Schm_hydro_L) then
         key1(nlod+1) = VMM_KEY(wt1)
         key1(nlod+2) = VMM_KEY(qpt1)
         key1(nlod+3) = VMM_KEY(mut1)
         key1(nlod+4) = VMM_KEY(multx)
         nlod = nlod+4
      endif
*
*     TRAJECTORY
*     ----------
      key1(nlod+1) = VMM_KEY(ut1m)
      key1(nlod+2) = VMM_KEY(vt1m)
      key1(nlod+3) = VMM_KEY(psdt1m)
      key1(nlod+4) = VMM_KEY(tpt1m)
      key1(nlod+5) = VMM_KEY(fipt1m)
      key1(nlod+6) = VMM_KEY(tdt1m)
      key1(nlod+7) = VMM_KEY(tt1m)
      key1(nlod+8) = VMM_KEY(fit1m)
      key1(nlod+9) = VMM_KEY(tplt1m)
      key1(nlod+10)= VMM_KEY(qt1m)
      key1(nlod+11)= VMM_KEY(pipt1m)
      key1(nlod+12)= VMM_KEY(st1m)
      nlod=nlod+12
      if (.not. Schm_hydro_L) then
         key1(nlod+1) = VMM_KEY(wt1m)
         key1(nlod+2) = VMM_KEY(qpt1m)
         key1(nlod+3) = VMM_KEY(mut1m)
         key1(nlod+4) = VMM_KEY(multxm)
         nlod = nlod+4
      endif
*
*     - - - - - - - - - - - - - - -
      err = vmmlod(key1,nlod)
*     - - - - - - - - - - - - - - -
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR(tpt1)
      err = VMM_GET_VAR(fipt1)
      err = VMM_GET_VAR(tdt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(fit1)
      err = VMM_GET_VAR(topo)
      err = VMM_GET_VAR(tplt1)
      err = VMM_GET_VAR(qt1)
      err = VMM_GET_VAR(pipt1)
      err = VMM_GET_VAR(st1)
      wt1_  = 0
      qpt1_ = 0
      mut1_ = 0
      multx_= 0
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(wt1)
         err = VMM_GET_VAR(qpt1)
         err = VMM_GET_VAR(mut1)
         err = VMM_GET_VAR(multx)
      endif
*
*     TRAJECTORY
*     ----------
      err = VMM_GET_VAR(ut1m)
      err = VMM_GET_VAR(vt1m)
      err = VMM_GET_VAR(psdt1m)
      err = VMM_GET_VAR(tpt1m)
      err = VMM_GET_VAR(fipt1m)
      err = VMM_GET_VAR(tdt1m)
      err = VMM_GET_VAR(tt1m)
      err = VMM_GET_VAR(fit1m)
      err = VMM_GET_VAR(tplt1m)
      err = VMM_GET_VAR(qt1m)
      err = VMM_GET_VAR(pipt1m)
      err = VMM_GET_VAR(st1m)
      wt1m_  = 0
      qpt1m_ = 0
      mut1m_ = 0
      multxm_= 0
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(wt1m)
         err = VMM_GET_VAR(qpt1m)
         err = VMM_GET_VAR(mut1m)
         err = VMM_GET_VAR(multxm)
      endif
*
*************************************
*  1. Implicit horizontal diffusion *
*************************************

c*PDIR RESERVE=Macr_cpud

      if (Hzd_fact_L) then
*
         call hzd_fact_tl ( ut1  , vt1  , psdt1 , tpt1 , fipt1 , tdt1 ,
     %                      tt1  , fit1 , tplt1 , qt1  , pipt1 , wt1  ,
     %                      qpt1 , mut1 , multx , st1  , 
     %                      ut1m , vt1m , psdt1m, tpt1m, fipt1m, tdt1m,
     %                      tt1m , fit1m, tplt1m, qt1m , pipt1m, wt1m ,
     %                      qpt1m, mut1m, multxm, st1m , topo  ,
     %                      LDIST_DIM, G_nk)
*
      endif
*
      if (Hzd_ho_L) then
*
         if(Fft_fast_L) then
*
*        use FFT in diffusion-solver
*
            if (G_lam) then
*
            call hzd_hof_lam_tl ( ut1  , vt1  , psdt1 , tpt1  , fipt1 , tdt1 ,
     %                            tt1  , fit1 , tplt1 , pipt1 , wt1   ,
     %                            qpt1 , mut1 , multx , 
     %                            ut1m , vt1m , psdt1m, tpt1m , fipt1m, tdt1m,
     %                            tt1m , fit1m, tplt1m, pipt1m, wt1m  ,
     %                            qpt1m, mut1m, multxm, topo  ,
     %                            LDIST_DIM, G_nk)
*
            else
*
            call hzd_hof_tl ( ut1  , vt1  , psdt1 , tpt1  , fipt1 , tdt1 ,
     %                        tt1  , fit1 , tplt1 , pipt1 , wt1   ,
     %                        qpt1 , mut1 , multx , 
     %                        ut1m , vt1m , psdt1m, tpt1m , fipt1m, tdt1m,
     %                        tt1m , fit1m, tplt1m, pipt1m, wt1m  ,
     %                        qpt1m, mut1m, multxm, topo  ,
     %                        LDIST_DIM, G_nk)
            endif
*
         else
*
*        use MXMA in diffusion-solver
*
            if ( .not. Eigv_parity_L) then
*
            call hzd_ho_tl  ( ut1  , vt1  , psdt1 , tpt1  , fipt1 , tdt1 ,
     %                        tt1  , fit1 , tplt1 , pipt1 , wt1   ,
     %                        qpt1 , mut1 , multx , 
     %                        ut1m , vt1m , psdt1m, tpt1m , fipt1m, tdt1m,
     %                        tt1m , fit1m, tplt1m, pipt1m, wt1m  ,
     %                        qpt1m, mut1m, multxm, topo  , 
     %                        LDIST_DIM, G_nk)
*
            else
*
            call hzd_ho_parite_tl( ut1  , vt1  , psdt1 , tpt1  , fipt1 , tdt1 ,
     %                             tt1  , fit1 , tplt1 , pipt1 , wt1   ,
     %                             qpt1 , mut1 , multx , 
     %                             ut1m , vt1m , psdt1m, tpt1m , fipt1m, tdt1m,
     %                             tt1m , fit1m, tplt1m, pipt1m, wt1m  ,
     %                             qpt1m, mut1m, multxm, topo  ,
     %                             LDIST_DIM, G_nk)
            endif
*
         endif
*
      endif
*
c*PDIR RELEASE

      if ((Hzd_fact_L.and.Cstv_phidf_8.gt.0.).or.(Hzd_ho_L)) then
*
***********************************************
*  $. Indirect diffusion of s & q through pi' *
***********************************************
*
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        TRAJECTORY
*        ----------
         st1m(i,j)= log(ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
*
*        TLM
*        ---
         st1(i,j)= (      dble(pipt1 (i,j,G_nk)/geomg_pib(G_nk)))/
     %             (ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
*
      end do
      end do
*
      do k=1,G_nk
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        TRAJECTORY
*        ----------
         qt1m(i,j,k)= log( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
*
*        TLM
*        ---
         qt1(i,j,k) = ( dble(pipt1(i,j,k)) ) /
     %                ( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
*
      end do
      end do
      end do
*
      if ( .not. Schm_hydro_L ) then
         do k=1,G_nk
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
*
*           TRAJECTORY
*           ----------
            qt1m(i,j,k) = qt1m(i,j,k) + qpt1m(i,j,k)
*
*           TLM 
*           ---
            qt1(i,j,k) = qt1(i,j,k) + qpt1(i,j,k)
*
         end do
         end do
         end do
      endif
*
      endif
*
      err = vmmuld(-1,0)
*
 1001 format(/,
     + 3X,'NO TLM HORIZONTAL DIFFUSION REQUIRED',
     +/3X,'====================================',/)
*
      return
      end
