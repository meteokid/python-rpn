!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r itf_phy_extract
!
#include "model_macros_f.h"
!
      subroutine itf_phy_extract ( F_busper, F_busvol, F_obusval, &
                                   F_step, F_jdo, nk )
      implicit none
!
      integer F_step, F_jdo, nk
      real F_busper(*), F_busvol(*), F_obusval(*)
!
!author 
!     Michel Desgagne  -  Spring 2010
!
!revision
! v4_14 - Desgagne M.       - initial version
!
!object
!	Extract physics tendencies from the folded space 
!       F_busvol into model space phy_tend. Extract also
!       physics output from F_busper and F_busvol.
!
#include "glb_ld.cdk"
#include "itf_phy_buses.cdk"
#include "itf_cpl.cdk"
#include "obus.cdk"
!
!notes
!
      integer soit,lght,n,cnt,indx_n,offbo,offbb
!
!     ---------------------------------------------------------------
!
!
!     Extract physic tendencies
!
      cnt = 0
      do n=1,p_bvol_top
         if (volnm(n)(1:5) .eq. 'PHYTD') then
            cnt = cnt + 1
            call getindx (volnm(n),  'V', indx_n, lght, soit)
            call itf_phy_unfold (phy_tend(l_minx,l_miny,1,cnt), &
                                 F_busvol(indx_n),F_jdo       , &
                                 1,nk,l_minx,l_maxx,l_miny,l_maxy)
         endif
       end do
!
!     Extract physic output
!
      do n=1,Obus_top
         offbo = (obus_offset(n)-1)*l_ni*l_nj + 1
         offbb =  obus_addr(n)
         if (obus_bus_S(n).eq.'P') &
         call itf_phy_unfold_td ( F_obusval(offbo), F_busper(offbb), &
                                  n, F_jdo, l_ni, l_nj)
         if (obus_bus_S(n).eq.'V') &
         call itf_phy_unfold_td ( F_obusval(offbo), F_busvol(offbb), &
                                  n, F_jdo, l_ni, l_nj)
      end do
!
!C  Prepare surface variables for the coupling
!
      if (C_coupling_L) call itf_cpl_getbus (F_busper, F_busvol, F_jdo)
!
      call v4d_phy_extract_pbl ( F_busvol, F_jdo, F_step, p_nk )
!
!     ---------------------------------------------------------------
!
      return
      end
