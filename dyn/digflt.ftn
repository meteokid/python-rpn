! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r digflt -  Compute digitally filtered fields
*
#include "model_macros_f.h"
*
      subroutine digflt
*
      implicit none
*
*author
*     Alain Patoine - march 94
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_30 - Edouard  S.       - remove pi' at the top
* v2_31 - Desgagne M.       - re-introduce tracers
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_21 - Lee V.            - Remove Tr2d
* v3_30 - Desgagne M.       - Removed phy memcore option
* v4_05 - Lepine M.         - VMM replacement with GMM
*
*object
*	
*arguments
*	none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "init.cdk"
#include "lctl.cdk"
#include "lun.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "vta.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "itf_phy_buses.cdk"
*
      integer i, j, k, n, err
      real dfcoef
      real, pointer, dimension(:,:,:) :: tr,tra
*
*     __________________________________________________________________
*
      dfcoef = Init_dfco( abs( (Init_dfnp-1)/2 - Lctl_step ) )
*
      gmmstat = gmm_get(gmmk_uta_s,uta,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(uta)'
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vta_s,vta,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(vta)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_tta_s,tta,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(tta)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_zdta_s,zdta,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(zdta)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_sta_s,sta,tmp_meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(sta)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(st1)'
*
      do k=1,l_nk+1
      do j= 1, l_nj 
      do i= 1, l_ni 
          tta(i,j,k) =   tta(i,j,k) + dfcoef *   tt1(i,j,k)
          zdta(i,j,k) = zdta(i,j,k) + dfcoef * zdt1(i,j,k)
      end do
      end do
      end do
      do k=1,l_nk
      do j= 1, l_nj 
      do i= 1, l_ni 
           uta(i,j,k) =   uta(i,j,k) + dfcoef *   ut1(i,j,k)
           vta(i,j,k) =   vta(i,j,k) + dfcoef *   vt1(i,j,k)
      end do
      end do
      end do
*
      do j= 1, l_nj
      do i= 1, l_ni
         sta(i,j)   = sta(i,j)   + dfcoef * st1(i,j)
      end do
      end do
*
***************************************************************
*     Non-hydrostatic model fields                            
***************************************************************
*
      if ( .not. Schm_hydro_L )then
*

         gmmstat = gmm_get(gmmk_wta_s,wta,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(wta)'
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(qt1)'
         gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(wt1)'
         gmmstat = gmm_get(gmmk_qta_s,qta,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'digflt ERROR at gmm_get(qta)'
*
         do k=1,l_nk+1
         do j= 1, l_nj
         do i= 1, l_ni
            wta(i,j,k) = wta(i,j,k) + dfcoef * wt1(i,j,k)
            qta(i,j,k) = qta(i,j,k) + dfcoef * qt1(i,j,k)
         end do
         end do
         end do
         do j= 1, l_nj
         do i= 1, l_ni
            qta(i,j,0) = qta(i,j,0) + dfcoef * qt1(i,j,0)
         end do
         end do
*
      endif

****************************************************************
*     Passive tracers (no passive tracers in linear model)
****************************************************************

      do n=1,Tr3d_ntr

         gmmstat = gmm_get('DIGF_'//trim(Tr3d_name_S(n))      , tra, meta3d_nk2)
         gmmstat = gmm_get('TR/'  //trim(Tr3d_name_S(n))//':P', tr , meta3d_nk2)

         if ( Init_dftr_L ) then
            do k=1,G_nk+1
            do j=1,l_nj
            do i=1,l_ni
               tra(i,j,k) = tra(i,j,k) + dfcoef * tr(i,j,k)
            end do
            end do
            end do
         elseif ( Lctl_step .eq. (Init_dfnp-1)/2 ) then
            tra(1:l_ni,1:l_nj,1:G_nk+1) = tr(1:l_ni,1:l_nj,1:G_nk+1)
         endif

      end do

***********************************************************************
* Physics fields at half span are saved to be used after initialisation
***********************************************************************

      if ( Lctl_step .eq. (Init_dfnp-1)/2 .and. Schm_phyms_L ) then
         if ( .not. associated ( Phy_busper3D_digf ) ) 
     $                allocate ( Phy_busper3D_digf (p_bper_siz*p_nj))
         Phy_busper3D_digf = Phy_busper3D
      endif
*
      Rstri_half_L = .false.
      if (Lctl_step.ge.(Init_dfnp-1)/2) Rstri_half_L = .true.
*
      return
      end

