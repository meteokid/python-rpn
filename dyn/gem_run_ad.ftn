***s/r gem_run_ad - ADJ of gem_run_tl
*
#include <model_macros_f.h>
*
      subroutine gem_run_ad (F_dgtflt_L, F_rstrt_L)
*
#include "impnone.cdk"
*
      logical F_dgtflt_L, F_rstrt_L
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - modification as in gem_run
* v2_31 - Tanguay M.        - adapt ADJ to diffusion in gem_run 
* v3_00 - Ek N./Tanguay M.  - introduce v4d_ctrlgrd 
* v3_00 - Laroche S.        - include simplified physics
*
*object
*     see id section
*
*arguments
*----------------------------------------------------------------
* F_dgtflt_L    I         Digital initiatization mode
* F_rstrt_L     O         Is a restart required
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "init.cdk"
#include "lun.cdk"
#include "step.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "v4dg.cdk"
#include "p_clim.cdk"
#include "vt1m.cdk"
#include "hzd.cdk"
#include "fft.cdk"
#include "vspng.cdk"
*
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      logical bkup_L
      integer last_step,pnerr,pnlkey1(1),i,j,k
*
      real wpipt1m (LDIST_SHAPE,l_nk)
*     ______________________________________________________
*
      if( F_dgtflt_L     ) call gefstop('gem_run_ad')
      if( F_rstrt_L      ) call gefstop('gem_run_ad')
      if( P_clim_clima_L ) call gefstop('gem_run_ad')
      if( Schm_chems_L   ) call gefstop('gem_run_ad')
*     ______________________________________________________
*
      last_step = Step_total

 500  continue
*
      bkup_L    = .false.
*
      if (F_dgtflt_L) then
         if (Lun_out.gt.0) write(Lun_out,1000) Lctl_step,last_step
      else
         if (Lun_out.gt.0) write(Lun_out,1001) Lctl_step,last_step
      endif
*
*     Evaluate gradient forcing at required time
*     ------------------------------------------
      call v4d_ctrlgrd ()
*
*     Perform output if required
*     --------------------------
      call blocstat ()
      if (V4dg_out.ne.0) call v4d_dynout() 
*
*
*     Adjoint of
*     Physics timestep
*     ----------------
      if ( Schm_phyms_L ) call p_main_ad (Lctl_step)
*
*
*     Adjoint of
*     Horizontal diffusion & Vertical sponge
*     --------------------------------------
*
*        Recover TRAJ needed in vspng_main_ad
*        ------------------------------------ 
         if (Hzd_fact_L.or.Hzd_ho_L.or.Vspng_nk.gt.0) then
*
*            Recover TRAJ PIPT1 before HZD diffusion
*            ---------------------------------------
             V4dg_numtr = 2 
             call v4d_rwtraj ()
*
*            HZD Diffusion of TRAJ PIPT1
*            ---------------------------
             if (Hzd_fact_L.or.Hzd_ho_L) then
                 pnlkey1(1) = VMM_KEY(pipt1m)
                 pnerr = vmmlod(pnlkey1,1)
                 pnerr = VMM_GET_VAR(pipt1m)
                 if (Hzd_fact_L) call hzd_fact_tr (pipt1m,LDIST_DIM,G_nk)
                 if (Hzd_ho_L  ) then
                     if (Fft_fast_L) then
                         call hzd_hof_tr(pipt1m,LDIST_DIM,G_nk)
                     else
                         call hzd_ho_tr (pipt1m,LDIST_DIM,G_nk)
                     endif
                 endif
*
*                Preserve HZD diffusion of TRAJ PIPT1
*                ------------------------------------
                 if (Vspng_nk.gt.0) then 
                     do k=1,l_nk
                     do j=1,l_nj
                     do i=1,l_ni
                        wpipt1m(i,j,k) = pipt1m(i,j,k)
                     enddo
                     enddo
                     enddo
                 endif
                 pnerr = vmmuld(-1,0)
             endif
*
*            VSNPG Diffusion of TRAJ PIPT1
*            -----------------------------
             if (Vspng_nk.gt.0) then 
                 pnlkey1(1) = VMM_KEY(pipt1m)
                 pnerr = vmmlod(pnlkey1,1)
                 pnerr = VMM_GET_VAR(pipt1m)
                 call vspng_drv_tr(pipt1m,LDIST_DIM,G_nk) 
                 pnerr = vmmuld(-1,0)
             endif
         endif
*
*        Adjoint of vspng_main_tl
*        ------------------------
         call vspng_main_ad 
*
*        Recover TRAJ needed in hzd_main_ad
*        ---------------------------------- 
         if (Hzd_fact_L.or.Hzd_ho_L) then
*
*            Recall HZD diffusion of TRAJ PIPT1
*            ----------------------------------
             if (Vspng_nk.gt.0) then 
                 pnlkey1(1) = VMM_KEY(pipt1m)
                 pnerr = vmmlod(pnlkey1,1)
                 pnerr = VMM_GET_VAR(pipt1m)
                 do k=1,l_nk
                 do j=1,l_nj
                 do i=1,l_ni
                    pipt1m(i,j,k) = wpipt1m(i,j,k)
                 enddo
                 enddo
                 enddo
                 pnerr = vmmuld(-1,0)
*            else
*                HZD diffusion of TRAJ PIPT1 is already in pipmt1
*                ------------------------------------------------
              endif
         endif
*
*        Adjoint of hzd_main_tl
*        ----------------------
         call hzd_main_ad 
*
*     Adjoint of
*     Dynamics timestep
*     -----------------
      call dynstep_ad( )
*
*     Adjoint of
*     Horizontal diffusion & Vertical sponge (Initial timestep)
*     ---------------------------------------------------------
      if (Lctl_step.eq.1) then
*
*        Recover TRAJ needed in vspng_main_ad
*        ------------------------------------ 
         if (Hzd_fact_L.or.Hzd_ho_L.or.Vspng_nk.gt.0) then
*
*            Recover TRAJ PIPT1 before HZD diffusion
*            ---------------------------------------
             V4dg_numtr = 2 
             Lctl_step  = 0
             call v4d_rwtraj ()
             Lctl_step  = 1 
*
*            HZD Diffusion of TRAJ PIPT1
*            ---------------------------
             if (Hzd_fact_L.or.Hzd_ho_L) then
                 pnlkey1(1) = VMM_KEY(pipt1m)
                 pnerr = vmmlod(pnlkey1,1)
                 pnerr = VMM_GET_VAR(pipt1m)
                 if (Hzd_fact_L) call hzd_fact_tr (pipt1m,LDIST_DIM,G_nk)
                 if (Hzd_ho_L  ) then
                     if (Fft_fast_L) then
                         call hzd_hof_tr(pipt1m,LDIST_DIM,G_nk)
                     else
                         call hzd_ho_tr (pipt1m,LDIST_DIM,G_nk)
                     endif
                 endif
*
*                Preserve HZD diffusion of TRAJ PIPT1
*                ------------------------------------
                 if (Vspng_nk.gt.0) then 
                     do k=1,l_nk
                     do j=1,l_nj
                     do i=1,l_ni
                        wpipt1m(i,j,k) = pipt1m(i,j,k)
                     enddo
                     enddo
                     enddo
                 endif
                 pnerr = vmmuld(-1,0)
             endif
*
*            VSNPG Diffusion of TRAJ PIPT1
*            -----------------------------
             if (Vspng_nk.gt.0) then 
                 pnlkey1(1) = VMM_KEY(pipt1m)
                 pnerr = vmmlod(pnlkey1,1)
                 pnerr = VMM_GET_VAR(pipt1m)
                 call vspng_drv_tr(pipt1m,LDIST_DIM,G_nk) 
                 pnerr = vmmuld(-1,0)
             endif
         endif
*
*        Adjoint of vspng_main_tl
*        ------------------------
         call vspng_main_ad 
*
*        Recover TRAJ needed in hzd_main_ad
*        ---------------------------------- 
         if (Hzd_fact_L.or.Hzd_ho_L) then
*
*            Recall HZD diffusion of TRAJ PIPT1
*            ----------------------------------
             if (Vspng_nk.gt.0) then 
                 pnlkey1(1) = VMM_KEY(pipt1m)
                 pnerr = vmmlod(pnlkey1,1)
                 pnerr = VMM_GET_VAR(pipt1m)
                 do k=1,l_nk
                 do j=1,l_nj
                 do i=1,l_ni
                    pipt1m(i,j,k) = wpipt1m(i,j,k)
                 enddo
                 enddo
                 enddo
                 pnerr = vmmuld(-1,0)
*            else
*                HZD diffusion of TRAJ PIPT1 is already in pipmt1
*                ------------------------------------------------
             endif
         endif
*
*        Adjoint of hzd_main_tl
*        ----------------------
         call hzd_main_ad 
*
      endif
*
      if (Lun_out.gt.0) write(Lun_out,3000) Lctl_step
*
      Lctl_step = Lctl_step - 1
*
      if (Lctl_step.gt.0)  goto 500
*
      if (Lun_out.gt.0) write(Lun_out,4000) Lctl_step
*
*C      Evaluate gradient forcing at INITIAL time (before adjoint of preprocessing) 
*       ---------------------------------------------------------------------------
      call v4d_ctrlgrd ()
*
*C      Perform output if required
*       --------------------------
      if (V4dg_out.ne.0) call v4d_blocstat () 
*
*     ---------------------------------------------------------------
*
 1000 format(/,'GEM_RUN_AD: PERFORMING INITIALIZATION TIMESTEP #',I8,
     $         ' OUT OF ',I8, 
     +       /,'=================================================')
 1001 format(/,'GEM_RUN_AD: PERFORMING TIMESTEP #',I8,' OUT OF ',I8,
     +       /,'=================================================')
 3000 format(/,'THE TIME STEP ',I8,' IS COMPLETED')
 4000 format(/,'END OF THE TIME LOOP (S/R GEM_RUN_AD) AT TIMESTEP',I8,
     +/,'========================================================')
*
*     ---------------------------------------------------------------
*
      return
      end
