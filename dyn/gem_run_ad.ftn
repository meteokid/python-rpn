***s/r gem_run_ad - ADJ of gem_run_tl
*
#include <model_macros_f.h>
*
      subroutine gem_run_ad (F_dgtflt_L, F_rstrt_L)
*
#include "impnone.cdk"
*
      logical F_dgtflt_L, F_rstrt_L
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - modification as in gem_run
* v2_31 - Tanguay M.        - adapt ADJ to diffusion in gem_run 
* v3_00 - Ek N./Tanguay M.  - introduce v4d_ctrlgrd 
* v3_00 - Laroche S.        - include simplified physics
* v3_01 - Tanguay M.        - introduce identity option
* v3_02 - Tanguay M.        - ADJ of Eigv_parity_L and Hspng_main done
* v3_02 - Tanguay M.        - cosmetics for identity option
* v3_02 - Buehner M.        - integration stops when timestep V4dg_steplast is reached (not 0)
*
*object
*     see id section
*
*arguments
*----------------------------------------------------------------
* F_dgtflt_L    I         Digital initiatization mode
* F_rstrt_L     O         Is a restart required
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "init.cdk"
#include "lun.cdk"
#include "step.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "v4dg.cdk"
#include "p_clim.cdk"
#include "vt1m.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "fft.cdk"
#include "vspng.cdk"
#include "hspng.cdk"
*
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      logical bkup_L,identity_4dvar_L
      integer last_step,initial_step,pnerr,pnlkey1(1),i,j,k
*
      real w1pipt1m (LDIST_SHAPE,l_nk), w2pipt1m (LDIST_SHAPE,l_nk)
*     ______________________________________________________
*
      if( F_dgtflt_L     ) call gem_stop('gem_run_ad',-1)
      if( F_rstrt_L      ) call gem_stop('gem_run_ad',-1)
      if( P_clim_clima_L ) call gem_stop('gem_run_ad',-1)
      if( Schm_chems_L   ) call gem_stop('gem_run_ad',-1)
      if( Schm_hdlast_L  ) call gem_stop('gem_run_ad',-1)
*     ______________________________________________________
*
      identity_4dvar_L = V4dg_conf.ne.0.and.V4dg_identity_L
*
      initial_step = Lctl_step
         last_step = V4dg_steplast
*
 500  continue
*
      bkup_L    = .false.
*
      if (F_dgtflt_L) then
         if (Lun_out.gt.0) write(Lun_out,1000) Lctl_step,last_step,initial_step
      else
         if (Lun_out.gt.0) write(Lun_out,1001) Lctl_step,last_step,initial_step
      endif
*
*C    Evaluate gradient forcing at required time
*     ------------------------------------------
      call v4d_ctrlgrd ()
*
*C    Perform output if required
*     --------------------------
      call blocstat ()
      if (V4dg_output_L) call v4d_dynout() 
*
*     Adjoint of
*C    Diffusion, Dynamics and Physics
*     -------------------------------
      if ( .not.identity_4dvar_L ) then
*
*        Adjoint of
*        Physics timestep
*        ----------------
         if ( Schm_phyms_L ) call p_main_ad (Lctl_step)
*
*        Adjoint of
*        Horizontal diffusion & Vertical sponge
*        --------------------------------------
*
*           Recover TRAJ needed in all diffusions
*           ------------------------------------- 
            if (Hzd_fact_L.or.Hzd_ho_L.or.Vspng_nk.gt.0.or.Hspng_nj.ge.1) then
*
*               Recover TRAJ PIPT1 before HZD diffusion
*               ---------------------------------------
                V4dg_numtr = 2 
                call v4d_rwtraj ()
*
*               HZD Diffusion of TRAJ PIPT1
*               ---------------------------
                if (Hzd_fact_L.or.Hzd_ho_L) then
                    pnlkey1(1) = VMM_KEY(pipt1m)
                    pnerr = vmmlod(pnlkey1,1)
                    pnerr = VMM_GET_VAR(pipt1m)
                    if (Hzd_fact_L) call hzd_fact_tr (pipt1m,LDIST_DIM,G_nk)
                    if (Hzd_ho_L  ) then
                        if (Fft_fast_L) then
                            call hzd_hof_tr(pipt1m,LDIST_DIM,G_nk)
                        else
*                           use MXMA in diffusion-solver
                            if ( .not. Eigv_parity_L) then
                                call hzd_ho_tr(pipt1m,LDIST_DIM,G_nk)
                            else
                                call hzd_ho_parite_tr(pipt1m,LDIST_DIM,G_nk)
                            endif
                        endif
                    endif
*
*                   Preserve HZD diffusion of TRAJ PIPT1
*                   ------------------------------------
                    do k=1,l_nk
                    do j=1,l_nj
                    do i=1,l_ni
                       w1pipt1m(i,j,k) = pipt1m(i,j,k)
                    enddo
                    enddo
                    enddo
                    pnerr = vmmuld(-1,0)
                endif
*
*               VSNPG Diffusion of TRAJ PIPT1
*               -----------------------------
                if (Vspng_nk.gt.0) then 
*
                    pnlkey1(1) = VMM_KEY(pipt1m)
                    pnerr = vmmlod(pnlkey1,1)
                    pnerr = VMM_GET_VAR(pipt1m)
                    call vspng_drv_tr(pipt1m,LDIST_DIM,G_nk) 
*
*                   Preserve VSPNG diffusion of TRAJ PIPT1
*                   --------------------------------------
                    do k=1,l_nk
                    do j=1,l_nj
                    do i=1,l_ni
                       w2pipt1m(i,j,k) = pipt1m(i,j,k)
                    enddo
                    enddo
                    enddo
                    pnerr = vmmuld(-1,0)
*
                endif
*
*               HSNPG Diffusion of TRAJ PIPT1
*               -----------------------------
                if (Hspng_nj.ge.1) then
                    pnlkey1(1) = VMM_KEY(pipt1m)
                    pnerr = vmmlod(pnlkey1,1)
                    pnerr = VMM_GET_VAR(pipt1m)
                    call hspng_drv_tr(pipt1m,LDIST_DIM,G_nk)
                    pnerr = vmmuld(-1,0)
                endif
*
            endif
*
*           Adjoint of hspng_main_tl
*           ------------------------
            call hspng_main_ad 
*
*           Recover TRAJ needed in vspng_main_ad
*           ------------------------------------
            if (Vspng_nk.gt.0) then
*
*               Recall VSPNG diffusion of TRAJ PIPT1
*               ------------------------------------
                pnlkey1(1) = VMM_KEY(pipt1m)
                pnerr = vmmlod(pnlkey1,1)
                pnerr = VMM_GET_VAR(pipt1m)
                do k=1,l_nk
                do j=1,l_nj
                do i=1,l_ni
                   pipt1m(i,j,k) = w2pipt1m(i,j,k)
                enddo
                enddo
                enddo
                pnerr = vmmuld(-1,0)
*
            endif
*
*           Adjoint of vspng_main_tl
*           ------------------------
            call vspng_main_ad 
*
*           Recover TRAJ needed in hzd_main_ad
*           ---------------------------------- 
            if (Hzd_fact_L.or.Hzd_ho_L) then
*
*               Recall HZD diffusion of TRAJ PIPT1
*               ----------------------------------
                pnlkey1(1) = VMM_KEY(pipt1m)
                pnerr = vmmlod(pnlkey1,1)
                pnerr = VMM_GET_VAR(pipt1m)
                do k=1,l_nk
                do j=1,l_nj
                do i=1,l_ni
                   pipt1m(i,j,k) = w1pipt1m(i,j,k)
                enddo
                enddo
                enddo
                pnerr = vmmuld(-1,0)
*
            endif
*
*           Adjoint of hzd_main_tl
*           ----------------------
            call hzd_main_ad 
*
*        Adjoint of
*        Dynamics timestep
*        -----------------
         call dynstep_ad( )
*
*        Adjoint of
*        Horizontal diffusion & Vertical sponge (Initial timestep)
*        ---------------------------------------------------------
         if (Lctl_step.eq.1) then
*
*           Recover TRAJ needed in all diffusions
*           -------------------------------------
            if (Hzd_fact_L.or.Hzd_ho_L.or.Vspng_nk.gt.0.or.Hspng_nj.ge.1) then
*
*               Recover TRAJ PIPT1 before HZD diffusion
*               ---------------------------------------
                V4dg_numtr = 2 
                Lctl_step  = 0
                call v4d_rwtraj ()
                Lctl_step  = 1 
*
*               HZD Diffusion of TRAJ PIPT1
*               ---------------------------
                if (Hzd_fact_L.or.Hzd_ho_L) then
                    pnlkey1(1) = VMM_KEY(pipt1m)
                    pnerr = vmmlod(pnlkey1,1)
                    pnerr = VMM_GET_VAR(pipt1m)
                    if (Hzd_fact_L) call hzd_fact_tr (pipt1m,LDIST_DIM,G_nk)
                    if (Hzd_ho_L  ) then
                        if (Fft_fast_L) then
                            call hzd_hof_tr(pipt1m,LDIST_DIM,G_nk)
                        else
*                           use MXMA in diffusion-solver
                            if ( .not. Eigv_parity_L) then
                                call hzd_ho_tr(pipt1m,LDIST_DIM,G_nk)
                            else
                                call hzd_ho_parite_tr(pipt1m,LDIST_DIM,G_nk)
                            endif
                        endif
                    endif
*
*                   Preserve HZD diffusion of TRAJ PIPT1
*                   ------------------------------------
                    do k=1,l_nk
                    do j=1,l_nj
                    do i=1,l_ni
                       w1pipt1m(i,j,k) = pipt1m(i,j,k)
                    enddo
                    enddo
                    enddo
                    pnerr = vmmuld(-1,0)
                endif
*
*               VSNPG Diffusion of TRAJ PIPT1
*               -----------------------------
                if (Vspng_nk.gt.0) then 
*
                    pnlkey1(1) = VMM_KEY(pipt1m)
                    pnerr = vmmlod(pnlkey1,1)
                    pnerr = VMM_GET_VAR(pipt1m)
                    call vspng_drv_tr(pipt1m,LDIST_DIM,G_nk) 
*
*                   Preserve VSPNG diffusion of TRAJ PIPT1
*                   --------------------------------------
                    do k=1,l_nk
                    do j=1,l_nj
                    do i=1,l_ni
                       w2pipt1m(i,j,k) = pipt1m(i,j,k)
                    enddo
                    enddo
                    enddo
                    pnerr = vmmuld(-1,0)
*
                endif
*
*               HSNPG Diffusion of TRAJ PIPT1
*               -----------------------------
                if (Hspng_nj.ge.1) then
                    pnlkey1(1) = VMM_KEY(pipt1m)
                    pnerr = vmmlod(pnlkey1,1)
                    pnerr = VMM_GET_VAR(pipt1m)
                    call hspng_drv_tr(pipt1m,LDIST_DIM,G_nk)
                endif
*
            endif
*
*           Adjoint of hspng_main_tl
*           ------------------------
            call hspng_main_ad 
*
*           Recover TRAJ needed in vspng_main_ad
*           ------------------------------------
            if (Vspng_nk.gt.0) then
*
*               Recall VSPNG diffusion of TRAJ PIPT1
*               ------------------------------------
                pnlkey1(1) = VMM_KEY(pipt1m)
                pnerr = vmmlod(pnlkey1,1)
                pnerr = VMM_GET_VAR(pipt1m)
                do k=1,l_nk
                do j=1,l_nj
                do i=1,l_ni
                   pipt1m(i,j,k) = w2pipt1m(i,j,k)
                enddo
                enddo
                enddo
                pnerr = vmmuld(-1,0)
*
            endif
*
*           Adjoint of vspng_main_tl
*           ------------------------
            call vspng_main_ad 
*
*           Recover TRAJ needed in hzd_main_ad
*           ---------------------------------- 
            if (Hzd_fact_L.or.Hzd_ho_L) then
*
*               Recall HZD diffusion of TRAJ PIPT1
*               ----------------------------------
                pnlkey1(1) = VMM_KEY(pipt1m)
                pnerr = vmmlod(pnlkey1,1)
                pnerr = VMM_GET_VAR(pipt1m)
                do k=1,l_nk
                do j=1,l_nj
                do i=1,l_ni
                   pipt1m(i,j,k) = w1pipt1m(i,j,k)
                enddo
                enddo
                enddo
                pnerr = vmmuld(-1,0)
*
            endif
*
*           Adjoint of hzd_main_tl
*           ----------------------
            call hzd_main_ad 
*
      endif ! Lctl_step 
*
      endif ! identity_4dvar_L
*
      if (Lun_out.gt.0) write(Lun_out,3000) Lctl_step
*
      Lctl_step = Lctl_step - 1
*
      if (Lctl_step.gt.last_step)  goto 500
*
      if (Lun_out.gt.0) write(Lun_out,4000) Lctl_step
*
*C    Evaluate gradient forcing at INITIAL time (before adjoint of preprocessing) 
*     ---------------------------------------------------------------------------
      call v4d_ctrlgrd ()
*
*C    Perform output if required
*     --------------------------
      if (V4dg_output_L) call v4d_blocstat () 
*
*     ---------------------------------------------------------------
*
 1000 format(/,'GEM_RUN_AD: PERFORMING INITIALIZATION TIMESTEP #',I8,
     $         ' BETWEEN ',I8,' AND ',I8, 
     +       /,'=================================================')
 1001 format(/,'GEM_RUN_AD: PERFORMING TIMESTEP #',I8,' BETWEEN ',I8,' AND ',I8,
     +       /,'=================================================')
 3000 format(/,'THE TIME STEP ',I8,' IS COMPLETED')
 4000 format(/,'END OF THE TIME LOOP (S/R GEM_RUN_AD) AT TIMESTEP',I8,
     +/,'========================================================')
*
*     ---------------------------------------------------------------
*
      return
      end
