***s/r gem_run_tl - TLM of gem_run 
*
#include <model_macros_f.h>
*
      subroutine gem_run_tl (F_dgtflt_L, F_rstrt_L)
*
#include "impnone.cdk"
*
      logical F_dgtflt_L, F_rstrt_L
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - modification as in gem_run
* v2_31 - Tanguay M.        - adapt ADJ to diffusion in gem_run 
* v3_00 - Ek N./Tanguay M.  - introduce v4d_ctrlcst
* v3_00 - Laroche S.        - include simplified physics
* v3_01 - Tanguay M.        - introduce identity option
*
*object
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_dgtflt_L    I         Digital initiatization mode
* F_rstrt_L     O         Is a restart required
*----------------------------------------------------------------
*
*implicits
#include "init.cdk"
#include "lun.cdk"
#include "step.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "v4dg.cdk"
#include "p_clim.cdk"
*
      logical bkup_L,carryon_L,identity_4dvar_L
      integer last_step
*     ______________________________________________________
*
      if( F_dgtflt_L     ) call gem_stop('gem_run_tl',-1)
      if( F_rstrt_L      ) call gem_stop('gem_run_tl',-1)
      if( P_clim_clima_L ) call gem_stop('gem_run_tl',-1)
      if( Schm_chems_L   ) call gem_stop('gem_run_tl',-1)
      if( Schm_hdlast_L  ) call gem_stop('gem_run_tl',-1)
*     ______________________________________________________
*
      identity_4dvar_L = V4dg_conf.ne.0.and.V4dg_identity_L
*
      call blocstat ()
*
      last_step = Step_total
      if ((F_dgtflt_L).and.(Step_total.ge.(Init_dfnp-1)/2)) 
     $     last_step = Init_dfnp-1
*
*     4D-Var: Control Cost function at INITIAL time
*     ---------------------------------------------
      call v4d_ctrlcst ()
*
 500  Lctl_step = Lctl_step + 1
*
      bkup_L    = .false.
      F_rstrt_L = .false.
      if (Lctl_step.gt.last_step) then
         Lctl_step=last_step
         goto 600
      endif
      if (mod(Lctl_step,Step_bkup).eq.0)    bkup_L = .true.
      if (mod(Lctl_step,Step_rsti).eq.0) F_rstrt_L = .true.
*     
      if (Lctl_step.eq.last_step) then
                                bkup_L  = .false.
         if (.not.F_dgtflt_L) F_rstrt_L = .false.
      endif
      carryon_L = ((Lctl_step.lt.last_step).and.(.not.F_rstrt_L))
*
      if (F_dgtflt_L) then
         if (Lun_out.gt.0) write(Lun_out,1000) Lctl_step,last_step
      else
         if (Lun_out.gt.0) write(Lun_out,1001) Lctl_step,last_step
      endif
*
*     Horizontal diffusion & Vertical sponge (Initial timestep)
*     ---------------------------------------------------------
      if (Lctl_step.eq.1.and..not.identity_4dvar_L) then
*
*        Recover TRAJ PIPT1 before diffusion
*        -----------------------------------
         if ( V4dg_oktr_L ) then
            V4dg_numtr = 2
            Lctl_step  = 0
            call v4d_rwtraj ()
            Lctl_step  = 1
         endif
            call   hzd_main_tl () 
            call vspng_main_tl () 
*
      endif
*
*     Dynamics timestep
*     -----------------
      if (.not.identity_4dvar_L) call dynstep_tl( )
*
*C    Physics timestep & Horizontal diffusion & Vertical sponge
*     ---------------------------------------------------------
      if (Schm_hdlast_L.and..not.identity_4dvar_L) then
         if ( Schm_phyms_L ) call p_main_tl (Lctl_step)
*
*        Recover TRAJ PIPT1 before diffusion
*         -----------------------------------
         if ( V4dg_oktr_L ) then
            V4dg_numtr = 2
            call v4d_rwtraj ()
         endif
            call   hzd_main_tl ()
            call vspng_main_tl ()
*
      elseif(.not.Schm_hdlast_L.and..not.identity_4dvar_L) then
*
*        Recover TRAJ PIPT1 before diffusion
*         -----------------------------------
         if ( V4dg_oktr_L ) then
            V4dg_numtr = 2
            call v4d_rwtraj ()
         endif
            call   hzd_main_tl ()
            call vspng_main_tl ()
         if ( Schm_phyms_L ) call p_main_tl (Lctl_step)
      endif
*
*     4D-Var: Control Cost function at .NOT.INITIAL time
*     --------------------------------------------------
      call v4d_ctrlcst ()
*
*     Perform output if required
*     --------------------------
      call blocstat ()
      call dynout2 (V4dg_out.ne.0)
*
      if (Lun_out.gt.0) write(Lun_out,3000) Lctl_step
*
      if (bkup_L.and..not.F_rstrt_L) call wrrstrt ()
      if (carryon_L)  goto 500
*
 600  if (Lun_out.gt.0) write(Lun_out,4000) Lctl_step
*
*     ---------------------------------------------------------------
*
 1000 format(/,'GEM_RUN_TL: PERFORMING INITIALIZATION TIMESTEP #',I8,
     $         ' OUT OF ',I8,
     +       /,'=================================================')
 1001 format(/,'GEM_RUN_TL: PERFORMING TIMESTEP #',I8,' OUT OF ',I8,
     +       /,'=================================================')
 3000 format(/,'THE TIME STEP ',I8,' IS COMPLETED')
 4000 format(/,'END OF THE TIME LOOP (S/R GEM_RUN_TL) AT TIMESTEP',I8,
     +/,'========================================================')
*
*     ---------------------------------------------------------------
*
      return
      end
