!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!opyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
!**s/r out_dyn_3df - output in the form of 3DF files
!
#include "model_macros_f.h"
!
      subroutine out_dyn_3df ( datev, mode, gid, gif, gjd, gjf )
      implicit none
!
      character* (*) datev
      integer mode, gid, gif, gjd, gjf
!
!author M.Desgagne ( MC2 2001)
!
!revision
! v3_30 - V.Lee - initial version for GEM LAM (new I/O)
! v4_05 - Lepine M.         - VMM replacement with GMM
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "out.cdk"
#include "p_geof.cdk"
#include "vt1.cdk"
#include "schm.cdk"
#include "grdc.cdk"
#include "tr3d.cdk"
#include "lctl.cdk"
!
      integer i,j,k,nis,njs,ind_o(G_nk+2),cnt,unf,key(21), &
              nvar,err
      real, pointer    , dimension(:,:,:) :: tr1
!
!------------------------------------------------------------------
!
      if ((out_nisl.le.0).or.(out_njsl.le.0)) return
!
      nis = out_ifg - out_idg + 1
      njs = out_jfg - out_jdg + 1
      do k=1,G_nk+2
         ind_o(k) = k
      end do
!
      gmmstat = gmm_get(gmmk_ut1_s ,ut1 ,meta3d)
      gmmstat = gmm_get(gmmk_vt1_s ,vt1 ,meta3d)
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      gmmstat = gmm_get(gmmk_tt1_s ,tt1 ,meta3d)
      gmmstat = gmm_get(gmmk_st1_s ,st1 ,meta2d)
      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      gmmstat = gmm_get(gmmk_wt1_s ,wt1 ,meta3d)
      nvar = 7
!
      if (.not.Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         nvar = 8
      endif
!
      if (Out_blocme.eq.0)  &
           call out_sfile_3df (datev,unf,'DYNAMICS',gid, gif, gjd, gjf, &
                                                    nvar,Grdc_ntr,mode)
!
! tt1,st1,topo are usually written from e_intthm
      call write_3df (  tt1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+2, &
                             'TT  ',gid, gif, gjd, gjf,1.0,ind_o,unf )
      call write_3df (  st1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,1     , &
                             'S   ',gid, gif, gjd, gjf,1.0,ind_o,unf )
      call write_3df ( topo,l_minx,l_maxx,l_miny,l_maxy,nis,njs,1     , &
                             'GZ  ',gid, gif, gjd, gjf,1.0,ind_o,unf )
! wt1,zdt1, maybe qt1 from the model
      call write_3df (  wt1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+1, &
                             'W   ',gid, gif, gjd, gjf,1.0,ind_o,unf )
      call write_3df ( zdt1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+1, &
                             'ZD  ',gid, gif, gjd, gjf,1.0,ind_o,unf )
!
      if (.not.Schm_hydro_L) then
      call write_3df (qt1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+2, &
                             'Q   ',gid, gif, gjd, gjf,1.0,ind_o,unf )
      endif

! tracers written from model
       do k=1,Grdc_ntr
          nullify (tr1)
          gmmstat=gmm_get('TR/'//trim(Grdc_trnm_S(k))//':P',tr1,meta3d)
          if (.not.GMM_IS_ERROR(gmmstat)) then
             call write_3df (tr1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+2, &
                       Grdc_trnm_S(k),gid, gif, gjd, gjf,1.0,ind_o,unf )
          endif
       end do
!
! wind from model
      call write_3df (  ut1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+1, &
                             'UU  ',gid, gif, gjd, gjf,1.0,ind_o,unf )
      call write_3df (  vt1,l_minx,l_maxx,l_miny,l_maxy,nis,njs,G_nk+1, &
                             'VV  ',gid, gif, gjd, gjf,1.0,ind_o,unf )
!
      if (Out_blocme.eq.0) then
         close (unf)
      endif
!
!------------------------------------------------------------------
      return
      end
!
