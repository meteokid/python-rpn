**s/r predat - Performs preprocessing of the data: part1
*
#include "model_macros_f.h"
*
      subroutine predat
*
      implicit none
*
*author 
*     Michel Roch - rpn - oct 1993 
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from predat1 v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of HUT1 and QCT1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_02 - Desgagne M.       - correction for non-hydrostatic version
* v3_03 - Tanguay M.        - put v4d_predat inside 
* v3_21 - Tanguay M.        - do filtering at t=0 in v4d_predat
* v3_21 - Desgagne M.       - Revision OpenMP
* v3_22 - Belanger/Lee      - Introduce vtap
* v3_22 - Tanguay M.        - Change postitioning of hzd_hoffld for psd
* v_stg - Plante A.         - Modif for staggering formulation 1 C. Girard.
*                             Note : s is now computed in readdyn.ftn or mtn_case.ftn
*                                                     or bubble.ftn
*
*object
*
*     The model is initialized from an "hydrostatic state".
*     For that reason, the computations found in that routine are
*     performed considering that:
*              dp
*     q'' = 0, --- = 1 and p = pi.
*              dpi
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "ind.cdk"
#include "lctl.cdk"
#include "vt1.cdk"
#include "v4dg.cdk"
#include "vtopo.cdk"
#include "pres.cdk"
#include "hzd.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "func.cdk"
#include "matlab.cdk"
#include "ptopo.cdk"
#include "theo.cdk"
*
      integer i, j, k, longueur, key(4), pnerr, kp, km
      real :: f_a(LDIST_SHAPE,2),f_b(LDIST_SHAPE,2), f_c(2)
*
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      real dummy
**
*     __________________________________________________________________
*
      if ( V4dg_conf.eq.0 ) then
*
      if (Vtopo_L .and. (Lctl_step .ge. Vtopo_start)) then
          call var_topo( )
          if ( Schm_phyms_L ) call phycom ('varmtn' ,1 ,1,'set')
      else
          if ( Schm_phyms_L ) call phycom ('varmtn' ,0 ,1,'set')
      endif
*
      key(1)=VMM_KEY(tdia)
      key(2)=VMM_KEY(csh)
      key(3)=VMM_KEY(that_8)
      key(4)=VMM_KEY(dlnth_8)
*
      pnerr=vmmlod(key,4)
      pnerr=VMM_GET_VAR(tdia)
      pnerr=VMM_GET_VAR(csh)
      pnerr=VMM_GET_VAR(that_8)
      pnerr=VMM_GET_VAR(dlnth_8)
*
!$omp parallel
*
!$omp do
      do j = 1, l_nj
         do i = 1, l_ni
            csh (i,j) = 2.*exp(Ind_s(i,j)*.5)*sinh(Ind_s(i,j)*.5)
         end do
      end do
!$omp enddo
*
*     calculate interpolation coefficient for temperature
*     No correction done for the moisture.
*
      call p_factor(f_a,f_b,f_c,csh,Ind_qsec,LDIST_DIM,G_nk)
*
*     Bring temperature from special levels to top/surface levels.
*     Keep special levels temperature in tdia for output at zero hour.
*
!$omp do
      do j = 1, l_nj
      do i = 1, l_ni      
         tdia(i,j,1)=Ind_t(i,j,1)
         tdia(i,j,2)=Ind_t(i,j,G_nk+1)
         Ind_t(i,j,1)     =(f_a(i,j,1)*Ind_t(i,j,1)     -f_c(1))/f_b(i,j,1)
         Ind_t(i,j,G_nk+1)=(f_a(i,j,2)*Ind_t(i,j,G_nk+1)-f_c(2))/f_b(i,j,2)
      end do
      end do
!$omp enddo
*
!$omp end parallel
*
         call diag_fip(Ind_fip,csh,Ind_t,Ind_qsec,Ind_topo,
     $                                  1,l_ni,1,l_nj,G_nk)
*
      if(Schm_eulmtemp_L) then
         if(Schm_theoc_L) then
            do k= 1, G_nk+1
               that_8(k)=Ind_t(1,1,k)-Cstv_tstr_8
            end do
         else
            do k= 1, G_nk+1
               that_8(k)=0.d0
               do j= 1, l_nj
               do i= 1, l_ni
                  that_8(k)=that_8(k)+Ind_t(i,j,k)
               end do
               end do
               that_8(k)=that_8(k)/float(l_ni*l_nj)-Cstv_tstr_8
            end do
         endif
         do k= 1, G_nk+1
            kp=min(k+1,G_nk+1)
            km=max(k-1,1)
            dlnth_8(k)=(that_8(kp)-that_8(km))
     $             /(2.d0*Ver_hz_8%t(k)*(that_8(k)+Cstv_tstr_8))
         end do
      else
         do k= 1, G_nk+1
            that_8(k)=0.0d0
            dlnth_8(k)=0.0d0
         end do
      endif
        
      pnerr=vmmuld(key,4)
*
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_u,   LDIST_DIM, G_nk, 1)
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_v,   LDIST_DIM, G_nk, 2)
*
      call rpn_comm_xch_halo( Ind_u, LDIST_DIM, l_niu, l_nj , l_nk,
     $                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo( Ind_v, LDIST_DIM, l_ni , l_njv, l_nk,
     $                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
      call uvs2psd (Ind_psd,Ind_u,Ind_v,csh,LDIST_DIM,l_nk)
*
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_psd, LDIST_DIM, G_nk+1, 3)
*
      if ( .not. Schm_hydro_L ) then
         if ( Schm_theoc_L ) then
            Ind_w   = 0.
         else
c            call gem_stop('predat : a faire pour staggering',-1)
            Ind_w   = 0.
c            call initw2 ( Ind_w, dummy, dummy, Ind_u, Ind_v, Ind_psd, 
c     $                    Ind_fip, Ind_t, Ind_s, LDIST_DIM )
         endif
      endif
*
*     ------
*     4D-Var
*     ------
      else
*
*        Preprocessing of Control   variables only if V4dg_part=2
*        Preprocessing of Dependent variables only if V4dg_part=3
*        --------------------------------------------------------
         call v4d_predat (V4dg_part)
*
*        Set qsec=0 explicitly when .not.Schm_hydro_L and 4D-Var
*        -----------------------------------------------------
         if ( V4dg_part.eq.3.and..not.Schm_hydro_L ) then
*
           do k=1,G_nk
           do j=1,l_nj
           do i=1,l_ni
              Ind_qsec(i,j,k) = 0.0
           end do
           end do
           end do
*
         endif
*
      endif

      if(matlab_write_L)then 
         if(Ptopo_myproc.eq.0)then
            open(unit=62,file=
     $        matlab_dir_S(1:longueur(matlab_dir_S))//'from_fortran_predat.bin',
     $        status='replace',form='unformatted')
            write(62)G_ni-lam_pil_w-lam_pil_e
            write(62)G_nk
            write(62)Cstv_tstr_8
         endif
         call write_matlab_2d(62,Ind_topo)
         call write_matlab_3d_v(62,Ind_fip)
         call write_matlab_3d_th(62,Ind_t)
         call write_matlab_2d(62,Ind_s)
         call write_matlab_2d(62,csh)
         call write_matlab_3d_th(62,Ind_psd)
         call write_matlab_3d(62,Ind_u)
         if ( .not. Schm_hydro_L ) then
            call write_matlab_3d_th(62,Ind_w)
         endif
         if(Ptopo_myproc.eq.0)close(62)
      endif
*
*     __________________________________________________________________
      return
      end
