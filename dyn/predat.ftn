**s/r predat - Performs preprocessing of the data: part1
*
#include "model_macros_f.h"
*
      subroutine predat
*
      implicit none
*
*author 
*     Michel Roch - rpn - oct 1993 
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from predat1 v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of HUT1 and QCT1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_02 - Desgagne M.       - correction for non-hydrostatic version
* v3_03 - Tanguay M.        - put v4d_predat inside 
* v3_21 - Tanguay M.        - do filtering at t=0 in v4d_predat
* v3_21 - Desgagne M.       - Revision OpenMP
* v3_22 - Belanger/Lee      - Introduce vtap
* v3_22 - Tanguay M.        - Change postitioning of hzd_hoffld for zd
* v3_30 - Lee V.            - remove call to rpn_comm_xch
* v4_00 - Plante A.         - Modif for staggering formulation 1 C. Girard.
*                             Note : s is now computed in readdyn.ftn or mtn_case.ftn
*                                                     or bubble.ftn
*
*object
*
*     The model is initialized from an "hydrostatic state".
*     For that reason, the computations found in that routine are
*     performed considering that:
*              dp
*     q'' = 0, --- = 1 and p = pi.
*              dpi
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "ind.cdk"
#include "lctl.cdk"
#include "vt1.cdk"
#include "v4dg.cdk"
#include "vtopo.cdk"
#include "pres.cdk"
#include "hzd.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "func.cdk"
#include "ptopo.cdk"
#include "theo.cdk"
*
      integer i, j, k, longueur, key(3), pnerr, kp, km
*
      integer  vmmlod, vmmget, vmmuld, nkey
      external vmmlod, vmmget, vmmuld
*
      real dummy
      real*8 zsurf_8            
**
*     __________________________________________________________________
*
      zsurf_8 = log(Cstv_pisrf_8)

      if (Lun_debug_L) write (Lun_out,1000)
      if ( V4dg_conf.eq.0 ) then
*
      key(1)=VMM_KEY(tdia)
      key(2)=VMM_KEY(that_8)
      key(3)=VMM_KEY(dlnth_8)
      nkey=3
*
      pnerr=vmmlod(key,nkey)
      pnerr=VMM_GET_VAR(tdia)
      pnerr=VMM_GET_VAR(that_8)
      pnerr=VMM_GET_VAR(dlnth_8)
*
!$omp parallel
!$omp do
      do j = 1, l_nj
         do i = 1, l_ni
            Ind_s(i,j)=log(Ind_s(i,j))-zsurf_8
         end do
      end do
!$omp enddo
*
*     Keep special levels temperature in tdia for output at zero hour.
*
!$omp do
      do j = 1, l_nj
      do i = 1, l_ni      
         tdia(i,j,1)=Ind_t(i,j,1)
         tdia(i,j,2)=Ind_t(i,j,G_nk+1)
      end do
      end do
!$omp enddo
*
!$omp end parallel
*
         call diag_fip(Ind_fip,Ind_s,Ind_t,Ind_q,Ind_topo,
     $                                     1,l_ni,1,l_nj,G_nk)         
*
      if(Schm_eulmtemp_L) then
         if(Schm_theoc_L) then
            do k= 1, G_nk+1
               that_8(k)=Ind_t(1,1,k)-Cstv_tstr_8
            end do
         else
            do k= 1, G_nk+1
               that_8(k)=0.d0
               do j= 1, l_nj
               do i= 1, l_ni
                  that_8(k)=that_8(k)+Ind_t(i,j,k)
               end do
               end do
               that_8(k)=that_8(k)/float(l_ni*l_nj)-Cstv_tstr_8
            end do
         endif
         do k= 1, G_nk+1
            kp=min(k+1,G_nk+1)
            km=max(k-1,1)
            dlnth_8(k)=(that_8(kp)-that_8(km))
     $             /(2.d0*Ver_dz_8%t(k)*(that_8(k)+Cstv_tstr_8))
         end do
      else
         do k= 1, G_nk+1
            that_8(k)=0.0d0
            dlnth_8(k)=0.0d0
         end do
      endif
        
      pnerr=vmmuld(key,nkey)
*
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_u,   LDIST_DIM, G_nk, 1)
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_v,   LDIST_DIM, G_nk, 2)
*
      if(.false.)then
c        call uvs2psd (Ind_zd,Ind_u,Ind_v,my_csh,LDIST_DIM,l_nk)
      else
         do k= 1, G_nk+1
            do j = 1, l_nj
               do i = 1, l_ni
                  Ind_zd(i,j,k)=0.
               end do
            end do
         end do
      endif
      


c     if (Acid_test_L) then 
c     call glbstat (Ind_zd,'Izd',LDIST_DIM,G_nk,1+acid_i0,G_ni-acid_in,
c    $                                         1+acid_j0,G_nj-acid_jn,1,G_nk)
c     call glbstat (Ind_td,'I_td',LDIST_DIM,G_nk,1+acid_i0,G_ni-acid_in,
c    $                                         1+acid_j0,G_nj-acid_jn,1,G_nk)

      if (Hzd_t1_0_L) call hzd_hoffld (Ind_zd, LDIST_DIM, G_nk+1, 3)
*
      if ( .not. Schm_hydro_L ) then
!$omp parallel
!$omp do
         do k= 1, G_nk+1
            do j = 1, l_nj
               do i = 1, l_ni
                  Ind_w(i,j,k)=0.
               end do
            end do
         end do
!$omp enddo
!$omp end parallel
      endif
*
*     ------
*     4D-Var
*     ------
      else
*
*        Preprocessing of Control   variables only if V4dg_part=2
*        Preprocessing of Dependent variables only if V4dg_part=3
*        --------------------------------------------------------
         call v4d_predat (V4dg_part)
*
*        Set q=0 explicitly when .not.Schm_hydro_L and 4D-Var
*        -----------------------------------------------------
         if ( V4dg_part.eq.3.and..not.Schm_hydro_L ) then
*
           do k=1,G_nk
           do j=1,l_nj
           do i=1,l_ni
              Ind_q(i,j,k) = 0.0
           end do
           end do
           end do
*
         endif
*
      endif

*
*     __________________________________________________________________
      return
 1000 format(3X,'PREDAT:      (S/R PREDAT)')
      end
