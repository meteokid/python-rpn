! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
**s/r predat - Performs preprocessing of the data: part1
*
#include "model_macros_f.h"
*
      subroutine predat
*
      implicit none
*
*author 
*     Michel Roch - rpn - oct 1993 
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from predat1 v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of HUT1 and QCT1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_02 - Desgagne M.       - correction for non-hydrostatic version
* v3_03 - Tanguay M.        - put v4d_predat inside 
* v3_21 - Tanguay M.        - do filtering at t=0 in v4d_predat
* v3_21 - Desgagne M.       - Revision OpenMP
* v3_22 - Belanger/Lee      - Introduce vtap
* v3_22 - Tanguay M.        - Change postitioning of hzd_hoffld for zd
* v3_30 - Lee V.            - remove call to rpn_comm_xch
* v4_00 - Plante A.         - Modif for staggering formulation 1 C. Girard.
*                             Note : s is now computed in readdyn.ftn or 
*                             mtn_case.ftn or bubble.ftn 
* v5_00 - Lee V.            - Removed VTAP
*
*object
*
*     The model is initialized from an "hydrostatic state".
*     For that reason, the computations found in that routine are
*     performed considering that:
*              dp
*     q'' = 0, --- = 1 and p = pi.
*              dpi
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "ind.cdk"
#include "lctl.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "vth.cdk"
#include "v4dg.cdk"
#include "vtopo.cdk"
#include "pres.cdk"
#include "hzd.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "ptopo.cdk"
#include "theo.cdk"
#include "adw.cdk"
*
      integer i, j, k, longueur, key(2), pnerr, kp, km
*
      integer  vmmlod, vmmget, vmmuld, nkey
      external vmmlod, vmmget, vmmuld
*
      real dummy
**
*     __________________________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)
      if ( V4dg_conf.eq.0 ) then
*
      key(1)=VMM_KEY(zdth)
      nkey=1
*
      pnerr=vmmlod(key,nkey)
      pnerr=VMM_GET_VAR(zdth)
*
!$omp parallel
*
      if(.not.Schm_hydro_L ) then
!$omp do
         do k=0,G_nk+1
            do j=1,l_nj
            do i=1,l_ni
               Ind_q(i,j,k) = 0.
            end do
            end do
         end do
!$omp enddo
      endif
*
!$omp end parallel
*
      call diag_fip(Ind_fip,Ind_s,Ind_t,Ind_topo,
     $     1,l_ni,1,l_nj,G_nk)         
*
      pnerr=vmmuld(key,nkey)
*
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_u,   LDIST_DIM, G_nk, 1)
      if (Hzd_t1_0_L) call hzd_hoffld (Ind_v,   LDIST_DIM, G_nk, 2)
*
      if(.false.)then
c        call uvs2psd (Ind_zd,Ind_u,Ind_v,my_csh,LDIST_DIM,l_nk)
      else
         do k= 1, G_nk+1
            do j = 1, l_nj
               do i = 1, l_ni
                  Ind_zd(i,j,k)=0.
               end do
            end do
         end do
      endif
      


c     if (Acid_test_L) then 
c     call glbstat (Ind_zd,'Izd',LDIST_DIM,G_nk,1+acid_i0,G_ni-acid_in,
c    $                                         1+acid_j0,G_nj-acid_jn,1,G_nk)
c     call glbstat (Ind_td,'I_td',LDIST_DIM,G_nk,1+acid_i0,G_ni-acid_in,
c    $                                         1+acid_j0,G_nj-acid_jn,1,G_nk)

      if (Hzd_t1_0_L) call hzd_hoffld (Ind_zd, LDIST_DIM, G_nk+1, 3)
*
!$omp parallel
!$omp do
      do k= 1, G_nk+1
         do j = 1, l_nj
            do i = 1, l_ni
               Ind_w(i,j,k)=0.
            end do
         end do
         if(k.le.G_nk) then
         do j = 1, l_nj
            do i = 1, l_ni
               zdth(i,j,k)=0.
            end do
         end do
         endif
      end do
!$omp enddo
!$omp end parallel
*

*     ------
*     4D-Var
*     ------
      else
*
*        Preprocessing of Control   variables only if V4dg_part=2
*        Preprocessing of Dependent variables only if V4dg_part=3
*        --------------------------------------------------------
         call v4d_predat (V4dg_part)
*
*        Set q=0 explicitly when .not.Schm_hydro_L and 4D-Var
*        -----------------------------------------------------
         if ( V4dg_part.eq.3.and..not.Schm_hydro_L ) then
*
           do k=0,G_nk+1
           do j=1,l_nj
           do i=1,l_ni
              Ind_q(i,j,k) = 0.0
           end do
           end do
           end do
*
         endif
*
      endif

*
*     __________________________________________________________________
      return
 1000 format(3X,'PREDAT:      (S/R PREDAT)')
      end
