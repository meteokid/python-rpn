!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r mtn_case - generates initial condition for mountain wave
!                 experiment (Schar et al. 2002 or Pinty et al. 1995)
!
#include "model_macros_f.h"
!
      subroutine mtn_case (F_u, F_v, F_w, F_t, F_zd, F_s, F_topo, &
                           F_q, F_dtopo, pref_tr, suff_tr, Mminx,Mmaxx,Mminy,Mmaxy)
      implicit none
!
      character* (*) pref_tr,suff_tr
      integer Mminx,Mmaxx,Mminy,Mmaxy
      real F_u    (Mminx:Mmaxx,Mminy:Mmaxy,*), F_v(Mminx:Mmaxx,Mminy:Mmaxy,*), &
           F_w    (Mminx:Mmaxx,Mminy:Mmaxy,*), F_t(Mminx:Mmaxx,Mminy:Mmaxy,*), &
           F_zd   (Mminx:Mmaxx,Mminy:Mmaxy,*), F_s(Mminx:Mmaxx,Mminy:Mmaxy  ), &
           F_topo (Mminx:Mmaxx,Mminy:Mmaxy)  , F_q(Mminx:Mmaxx,Mminy:Mmaxy,0:*),  &
           F_dtopo(Mminx:Mmaxx,Mminy:Mmaxy)
!
!author 
!     Sylvie Gravel  - rpn - Aug 2003
!
!revision
! v3_20 - Gravel S.        - initial version 
! v3_20 - Plante A.        - Modifs ...
!
!object
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
#include "cstv.cdk" 
#include "geomg.cdk"
#include "grd.cdk"
#include "out3.cdk"
#include "tr3d.cdk"
#include "vt1.cdk"
#include "theo.cdk"
#include "vtopo.cdk"
#include "mtn.cdk"
#include "zblen.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "schm.cdk"
#include "that.cdk"
!
      character*16 tr_name
      integer i,j,k,l,i00,err
      real a00, a01, a02, xcntr, zdi, zfac, zfac1, capc1
      real, allocatable, dimension(:,:) :: psurf
      real hauteur, tempo
      real*8 pdsc1
      real, pointer    , dimension(:,:,:) :: tr
!*
!     ---------------------------------------------------------------
!
      allocate(psurf (LDIST_SHAPE))

!---------------------------------------------------------------------
!     Initialize orography
!---------------------------------------------------------------------

      xcntr = int(float(Grd_ni-1)*0.5)+1
      do j=1,l_nj
      do i=1,l_ni
         i00 = i + l_i0 - 1
         zdi  = float(i00)-xcntr
         zfac = (zdi/mtn_hwx)**2
         if ( Theo_case_S .eq. 'MTN_SCHAR' &
             .or.  Theo_case_S .eq. 'MTN_SCHAR2' ) then
            zfac1= Dcst_pi_8 * zdi / mtn_hwx1
            F_topo(i,j) = mtn_hght* exp(-zfac) * cos(zfac1)**2
         else
            F_topo(i,j) = mtn_hght/(zfac + 1.)
         endif
      enddo
      enddo

!---------------------------------------------------------------------
!     If time-dependant topography
!---------------------------------------------------------------------
      if(Vtopo_L) then
         do j=1,l_nj
         do i=1,l_ni
            F_dtopo(i,j) = Dcst_grav_8*F_topo(i,j)
            F_topo(i,j)  = 0.
         enddo
         enddo
       endif

      if (      Theo_case_S .eq. 'MTN_SCHAR'  &
           .or. Theo_case_S .eq. 'MTN_SCHAR2' &
           .or. Theo_case_S .eq. 'MTN_PINTYNL') then

!---------------------------------------------------------------------
!     Generate surface pressure field and its logarithm (s)
!     Set wind imags (u,v)
!     Transform orography from geometric to geopotential height
!     Set non-hydrostatic perturbation pressure (q)
!---------------------------------------------------------------------
!
      a00 = mtn_nstar**2/Dcst_grav_8
      a01 = (Dcst_cpd_8*mtn_tzero*a00)/Dcst_grav_8
      capc1 = Dcst_grav_8**2/(mtn_nstar**2*Dcst_cpd_8*mtn_tzero)
!
      do j=1,l_nj
      pdsc1 = geomg_cy_8(j) / Dcst_rayt_8
      do i=1,l_ni
         psurf(i,j)=Cstv_pref_8*(1.-capc1 &
               +capc1*exp(-a00*F_topo(i,j)))**(1./Dcst_cappa_8)
         F_s   (i,j)   = log(psurf(i,j)/Cstv_pref_8)
         F_u   (i,j,1) = mtn_flo * pdsc1
      enddo
      enddo
!
      do k=1,g_nk+1
      do j=1,l_nj
      do i=1,l_ni
         F_u (i,j,k) = F_u (i,j,1)
         F_v (i,j,k) = 0.0
         F_w (i,j,k) = 0.0
         F_zd(i,j,k) = 0.0
      enddo
      enddo
      enddo
!
!---------------------------------------------------------------------
!     Initialize temperature and vertical motion fields
!---------------------------------------------------------------------
!
       do k=1,g_nk+1
         do j=1,l_nj
            do i=1,l_ni
               tempo = exp(Ver_a_8%t(k)+Ver_b_8%t(k)*F_s(i,j))
               a02 = (tempo/Cstv_pref_8)**Dcst_cappa_8
               hauteur=-log((capc1-1.+a02)/capc1)/a00
               F_t(i,j,k)=mtn_tzero*((1.-capc1)*exp(a00*hauteur)+capc1)
            enddo
         enddo
!        ln_that%t(k)=log(Ind_t(1,1,k)/Cstv_tstr_8)
      enddo        
!
!     dln_that%t(1)=0.0          ! no matter
!     do k=2,g_nk
!        dln_that%t(k) = ( Ver_wp_8%m(k  )*ln_that%t(k+1)
!    $                   + Ver_wm_8%m(k  )*ln_that%t(k)
!    $                   - Ver_wp_8%m(k-1)*ln_that%t(k)
!    $                   - Ver_wm_8%m(k-1)*ln_that%t(k-1) )
!    $                   * Ver_idz_8%t(k)
!     enddo
!     dln_that%t(g_nk+1)=0.0     ! no matter
!
      do j=1,l_nj
      do i=1,l_ni
         F_t(i,j,g_nk+2)=F_t(i,j,g_nk+1)
      enddo
      enddo
!
      else   ! MTN_PINTY or MTN_PINTY2
!-----------------------------------------------------------------------
!     Generate pressure from Cstv_ptop_8, Cstv_pref_8, and coordinate
!     Generate corresponding geopotential for isothermal atmosphere
!     Set wind images and temperature
!-----------------------------------------------------------------------

      do k=1,g_nk+1
      do j=1,l_nj
      do i=1,l_ni
         F_t (i,j,k) = Cstv_tstr_8
         F_w (i,j,k) = 0.0
      enddo
      enddo
      enddo

      do k=1,g_nk
      do j=1,l_nj
      pdsc1 = geomg_cy_8(j) / Dcst_rayt_8
      do i=1,l_ni
         F_u (i,j,k) = mtn_flo * pdsc1
         F_v (i,j,k) = 0.
      enddo
      enddo
      enddo

      do j=1,l_nj
      do i=1,l_ni
         psurf(i,j) = Cstv_pref_8 *  &
                      exp( -Dcst_grav_8 * F_topo(i,j)/ &
                           (Dcst_cpd_8 * Cstv_tstr_8) )	
         F_s(i,j) = log(psurf(i,j)/Cstv_pref_8)
      enddo
      enddo         

      endif
!
!-----------------------------------------------------------------------
!     Transform orography from geometric to geopotential height
!-----------------------------------------------------------------------
      do j=1,l_nj
      do i=1,l_ni
         F_topo(i,j) = Dcst_grav_8 * F_topo(i,j)
      end do
      end do
!
!-----------------------------------------------------------------------
!     if non-hydrostatic, initialize pres. perturb. and vert. motion
!-----------------------------------------------------------------------
!
      if(.not.Schm_hydro_L) F_q(:,:,0:g_nk+1) = 0.
!
      call rpn_comm_xch_halo ( F_topo, LDIST_DIM,l_ni,l_nj,1, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

!-----------------------------------------------------------------------
!     create tracers (humidity and MTN)
!-----------------------------------------------------------------------
      do k=1,Tr3d_ntr
         if (Tr3d_name_S(k)(1:2).eq.'HU') then
            nullify(tr)
            tr_name = trim(pref_tr)//trim(Tr3d_name_S(k))//trim(suff_tr)
            gmmstat = gmm_get(tr_name,tr,meta3d)
            tr = 0.
         endif
      end do
!
 9000 format(/,'CREATING INPUT DATA FOR MOUNTAIN WAVE THEORETICAL CASE' &
            /,'======================================================')
!
!     -----------------------------------------------------------------
!
      return
      end
