***s/r adw_trajsp_tl - TLM of adw_trajsp 
*
#include <model_macros_f.h>
*
      subroutine adw_trajsp_tl ( F_lon, F_lat, F_x, F_y, F_z, F_u, F_v,
     %                           F_lonm,F_latm,F_xm,F_ym,F_zm,F_um,F_vm,
     %                           F_dt,i0,in,j0,jn)
*
#include "impnone.cdk"
*
      real F_lon (*),F_lat (*),F_x (*),F_y (*),F_z (*),F_u (*),F_v (*),F_dt
      real F_lonm(*),F_latm(*),F_xm(*),F_ym(*),F_zm(*),F_um(*),F_vm(*)
      integer i0,in,j0,jn
*
*author
*     monique tanguay 
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_lon        | upwind longitudes at central time               |  o  |
* F_lat        | upwind latitudes at central time                |  o  |
* F_x          | upwind x cartesian positions at central time    |  o  |
* F_y          | upwind y cartesian positions at central time    |  o  |
* F_z          | upwind z cartesian positions at central time    |  o  |
* F_u          | real E-W wind components at upwind positions    |  i  |
* F_v          | real N-S wind components at upwind positions    |  i  |
* F_dt         | timestep lenght                                 |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "dcst.cdk"
************************************************************************
      integer n, ij, nij, nijk,i,j,k
*
      real*8  pdsa_8, pdca_8, pdcai_8, pdso_8, pdco_8, pdx_8, pdy_8, pdz_8,
     %        pdux_8, pduy_8, pduz_8, pdsinal_8, pdcosal_8, r2pi_8, TWO_8
*
      real*8  pdsam_8, pdcam_8, pdcaim_8, pdsom_8,    pdcom_8,
     %        pduxm_8, pduym_8, pduzm_8,  pdsinalm_8, pdcosalm_8,
     %        pduxm1_8,pduym1_8,pduzm1_8, pdsinalm1_8,pdsinalm2_8
*
      real F_uvm
*
      parameter (TWO_8 = 2.0)
************************************************************************
      nij  = l_ni*l_nj
      nijk = l_ni*l_nj*l_nk
*
      r2pi_8 = TWO_8 * Dcst_pi_8
************************************************************************
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
      n = (k-1)*nij + ((j-1)*l_ni) + i
*
      ij = mod( n-1, nij ) + 1
************************************************************************
* cartesian coordinates of grid points                                 *
************************************************************************
      pdx_8 = Adw_cx2d_8(ij)
      pdy_8 = Adw_sx2d_8(ij)
      pdz_8 = Adw_sy2d_8(ij)
************************************************************************
* if very small wind set upwind point to grid point                    *
************************************************************************
      if ( abs(F_um(n))+abs(F_vm(n)) .ge. 1.e-10 ) then 
*
      pdx_8 = pdx_8 * Adw_cy2d_8(ij)
      pdy_8 = pdy_8 * Adw_cy2d_8(ij)
*
************************************************************************
* sin and cosin of first guess of upwind positions                     *
************************************************************************
*     TRAJECTORY
*     ----------
      pdsam_8  = F_zm(n)
      pdcam_8  = cos( F_latm(n) )
      pdcaim_8 = 1.0/pdcam_8
      pdsom_8  = F_ym(n) * pdcaim_8
      pdcom_8  = F_xm(n) * pdcaim_8
*
*     TLM
*     ---
      pdsa_8  = F_z(n)
      pdca_8  = -sin( F_latm(n) ) * F_lat(n) 
      pdcai_8 = -pdca_8/(pdcam_8*pdcam_8)
      pdso_8  = F_ym(n) * pdcai_8 + F_y(n) * pdcaim_8
      pdco_8  = F_xm(n) * pdcai_8 + F_x(n) * pdcaim_8
*
************************************************************************
* wind components in cartesian coordinate at upwind positions          *
************************************************************************
*     TRAJECTORY
*     ----------
      pduxm1_8 = ( - F_um(n) * pdsom_8 - F_vm(n) * pdcom_8 * pdsam_8 )
      pduym1_8 = (   F_um(n) * pdcom_8 - F_vm(n) * pdsom_8 * pdsam_8 )
      pduzm1_8 =     F_vm(n) * pdcam_8
*
*     TLM
*     ---
      pdux_8 =  - F_um(n) * pdso_8  - F_vm(n) * ( pdcom_8 * pdsa_8 + pdco_8 * pdsam_8)
     %          - F_u (n) * pdsom_8 - F_v (n) *   pdcom_8 * pdsam_8
      pduy_8 =    F_um(n) * pdco_8  - F_vm(n) * ( pdsom_8 * pdsa_8 + pdso_8 * pdsam_8)
     %          + F_u (n) * pdcom_8 - F_v (n) *   pdsom_8 * pdsam_8
      pduz_8 = F_vm(n) * pdca_8 + F_v(n) * pdcam_8
*
*     TRAJECTORY
*     ----------
      pdsinalm1_8 = pdx_8 * pduxm1_8 + pdy_8 * pduym1_8 + pdz_8 * pduzm1_8
      pduxm_8 = pduxm1_8 - pdx_8 * pdsinalm1_8
      pduym_8 = pduym1_8 - pdy_8 * pdsinalm1_8
      pduzm_8 = pduzm1_8 - pdz_8 * pdsinalm1_8
*
C     pdsinalm_8  = sin( sqrt( F_u_m(n) ** 2 + F_v_m(n) ** 2 ) * F_dt )
      F_uvm       = sqrt( F_um(n) ** 2 + F_vm(n) ** 2 ) 
      pdsinalm_8  = sin( F_uvm                                 * F_dt )
*
      pdcosalm_8  = sqrt( ( 1.0 + pdsinalm_8 ) * ( 1.0 - pdsinalm_8 ) )
      pdsinalm2_8 = pdsinalm_8 /
     %             sqrt( pduxm_8 * pduxm_8 + pduym_8 * pduym_8 + pduzm_8 * pduzm_8 )
*
*     TLM
*     ---
      pdsinal_8 = pdx_8 * pdux_8 + pdy_8 * pduy_8 + pdz_8 * pduz_8
      pdux_8 = pdux_8 - pdx_8 * pdsinal_8
      pduy_8 = pduy_8 - pdy_8 * pdsinal_8
      pduz_8 = pduz_8 - pdz_8 * pdsinal_8
*
      pdsinal_8 =  F_dt*pdcosalm_8*((F_um(n)*F_u(n)+F_vm(n)*F_v(n))/F_uvm)
      pdcosal_8 = -F_dt*pdsinalm_8*((F_um(n)*F_u(n)+F_vm(n)*F_v(n))/F_uvm)
      pdsinal_8 =
     %      pdsinal_8 /
     %                 sqrt( pduxm_8 * pduxm_8 + pduym_8 * pduym_8 + pduzm_8 * pduzm_8 )
     %    - pdsinalm2_8 * (( pduxm_8 * pdux_8  + pduym_8 * pduy_8  + pduzm_8 * pduz_8   )/
     %                     ( pduxm_8 * pduxm_8 + pduym_8 * pduym_8 + pduzm_8 * pduzm_8 ))
*
*     TRAJECTORY
*     ----------
      F_xm(n) = pdcosalm_8 * pdx_8 - pdsinalm2_8 * pduxm_8
      F_ym(n) = pdcosalm_8 * pdy_8 - pdsinalm2_8 * pduym_8
      F_zm(n) = pdcosalm_8 * pdz_8 - pdsinalm2_8 * pduzm_8
*
*     TLM
*     ---
      F_x(n) = pdcosal_8 * pdx_8 - pdsinal_8 * pduxm_8 - pdsinalm2_8 * pdux_8
      F_y(n) = pdcosal_8 * pdy_8 - pdsinal_8 * pduym_8 - pdsinalm2_8 * pduy_8
      F_z(n) = pdcosal_8 * pdz_8 - pdsinal_8 * pduzm_8 - pdsinalm2_8 * pduz_8
*
      endif
*
*     TRAJECTORY + TLM
*     ----------------
*     Replace the following line by two IF blocks:
*     F_zm(n) = min(1.0D0,max(F_zm(n),-1.0D0))
*
      if ( F_zm(n) .lt. -1.0D0 ) then
         F_zm(n) = -1.0D0
         F_z (n) =  0.0D0
      elseif ( F_zm(n) .gt.  1.0D0 ) then
         F_zm(n) =  1.0D0
         F_z (n) =  0.0D0
      endif
*
*     TRAJECTORY
*     ----------
      F_latm(n) = asin( F_zm(n) )
      F_lonm(n) = atan2( F_ym(n), F_xm(n) )
*
*     TLM
*     ---
      F_lat(n) =  F_z(n)/( sqrt(1.0 - F_zm(n)*F_zm(n)))
      F_lon(n) = (F_xm(n)*F_y (n) - F_ym(n)*F_x (n))/
     %           (F_xm(n)*F_xm(n) + F_ym(n)*F_ym(n))
*
      enddo
      enddo
      enddo
*
*     TRAJECTORY + TLM
*     ----------------
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
      n = (k-1)*nij + ((j-1)*l_ni) + i
      if ( F_lonm(n) .lt. 0.0 ) F_lonm(n) = F_lonm(n) + r2pi_8
      enddo
      enddo
      enddo
*
      return
      end
