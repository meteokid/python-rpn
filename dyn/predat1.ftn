***s/r predat1 - Performs preprocessing of the data: part1
*
#include <model_macros_f.h>
*
      subroutine predat1
*
#include "impnone.cdk"
*
*author 
*     Michel Roch - rpn - oct 1993 
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from predat1 v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of HUT1 and QCT1
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*	Performs preprocessing of the data: part1. We compute:
*                                             dp
* s, pi', q, phi, T staggered, T', phi', pi', ---, (1+d)q', P and T'
*      t                                      dpi                  lin
*
*     The model is initialized from an "hydrostatic state".
*     For that reason, the computations found in that routine are
*     performed considering that:
*             dp
*     q' = 0, --- = 1 and p = pi.
*             dpi
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "p_geof.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "lctl.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      real    pr1, pr2
      integer pnerr, pnlkey1(10), i, j, k , i0,in,j0,jn
**
*     __________________________________________________________________
*
      if (Lun_out.gt.0) WRITE(Lun_out,1000)

      pnlkey1 (1) = VMM_KEY(fit1)
      pnlkey1 (2) = VMM_KEY(topo)
      pnlkey1 (3) = VMM_KEY(fipt1)
      pnlkey1 (4) = VMM_KEY(st1)
      pnlkey1 (5) = VMM_KEY(qt1)
      pnlkey1 (6) = VMM_KEY(pipt1)
      pnlkey1 (7) = VMM_KEY(tt1)
      pnlkey1 (8) = VMM_KEY(tpt1)
      pnlkey1 (9) = VMM_KEY(tplt1)
      pnlkey1(10) = VMM_KEY(gptx)
*
      pnerr = vmmlod(pnlkey1,10)
      pnerr = VMM_GET_VAR(st1)
      pnerr = VMM_GET_VAR(qt1)
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(fit1)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(fipt1)
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(gptx)
*
      do j= 1, l_nj
      do i= 1, l_ni 
           st1(i,j)      = alog( exp(qt1(i,j,G_nk)) / Cstv_pisrf_8 )
         pipt1(i,j,   1) = 0.
         pipt1(i,j,G_nk) = exp(qt1(i,j,G_nk)) - geomg_z_8(G_nk)
      end do
      end do
*
      do k= 2, G_nk-1
      do j= 1, l_nj
      do i= 1, l_ni
           qt1(i,j,k) = alog(geomg_pia(k) + geomg_pib(k)*exp(st1(i,j)))
         pipt1(i,j,k) = exp(qt1(i,j,k))   - geomg_z_8(k)
      end do
      end do
      end do
*
      do k= 1, G_nk
         pr1 = Dcst_rgasd_8 * Cstv_tstr_8 * geomg_pib(k) / geomg_z_8(k)
         pr2 = Cstv_tstr_8*(geomg_pib(k)/geomg_z_8(k) - geomg_dpib(k))
         do j= 1, l_nj 
         do i= 1, l_ni 
            fipt1(i,j,k) =  fit1(i,j,k) - Cstvr_fistr_8(k) - topo(i,j)
             tpt1(i,j,k) =   tt1(i,j,k) - Cstv_tstr_8
             gptx(i,j,k) = fipt1(i,j,k) + pr1 * st1(i,j)
            tplt1(i,j,k) = (Cstv_tstr_8+tpt1(i,j,k))*
     $           (1.0+geomg_dpib(k)*(exp(st1(i,j))-1.))*
     $           geomg_z_8(k)/(geomg_z_8(k)+pipt1(i,j,k)) - Cstv_tstr_8
            tplt1(i,j,k) = tplt1(i,j,k) + pr2 * st1(i,j)
         end do
         end do
      end do
*
      if (G_lam) then
          i0=lam_i0
          in=lam_in
          j0=lam_j0
          jn=lam_jn
      else
          i0 = glb_i0
          in=  glb_in
          j0 = glb_j0
          jn = glb_jn
      endif
      i0=i0-5
      in=in+5
      j0=j0-5
      jn=jn+5
      if (Lctl_debug_L) then
      call glbstat (fit1,'FIT1',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
      call glbstat (fipt1,'FIPT1',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
      call glbstat (qt1,'QT1',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
      call glbstat (tt1,'TT1',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
      call glbstat (st1,'ST1',LDIST_DIM,1,i0,in,j0,jn,1,1)
      call glbstat (topo,'Fis',LDIST_DIM,1,i0,in,j0,jn,1,1)
      endif
*
      pnerr = vmmuld(-1,0)
*
      if ( .not. Schm_hydro_L ) then
*
         pnlkey1(1) = VMM_KEY(mut1)
         pnlkey1(2) = VMM_KEY(multx)
         pnerr = vmmlod(pnlkey1,2)
         pnerr = VMM_GET_VAR(mut1)
         pnerr = VMM_GET_VAR(multx)
         do k= 1, G_nk
         do j= 1, l_nj
         do i= 1, l_ni
            multx(i,j,k) = 0.
            mut1 (i,j,k) = 0.
         end do
         end do
         end do
         pnerr = vmmuld(-1,0)
*
      endif
*
1000  format(/,'PREPROCESSING DATA: PART 1 (S/R PREDAT1)',
     %       /,'========================================')
*
*     __________________________________________________________________
      return
      end
