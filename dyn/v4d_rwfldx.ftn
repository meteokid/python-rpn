***s/r v4d_rwfldx - Read (Write) a specific field from (on) WA file 
*                   when the field has no HALO
*
#include <model_macros_f.h>
*
      subroutine v4d_rwfldx (F_field,Ni,Nj,Nk,
     %                       F_iun,F_addr,F_diag_L,F_name_S,F_adjoint_L,F_diff,F_icode)
*
#include "impnone.cdk"
*
      integer NI,Nj,Nk,F_icode
      real F_field(*)
*
      integer F_iun,F_addr,F_diff
      logical F_diag_L,F_adjoint_L
      character*8 F_name_S
*
*author
*     M.Tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
*
*object
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_field      I/O                 Field without HALO
* Ni Nj Nk     I                   Dimensions of F_field 
* F_iun        I                   Unit of WA file
* F_addr       I/O                 Position in WA file
* F_diag_L     I                   Give diagnostics if TRUE 
* F_name_S     I                   Name of the field
* F_adjoint_L  I                   TRUE if adjoint run
* F_diff       I                   To be subtracted from position if adjoint run 
* F_icode      I                   If F_icode.GT.0 -Write F_field on WA file 
*                                  If F_icode.LE.0 -Read  F_field from WA file
*----------------------------------------------------------------
*
*implicits
#include "lun.cdk"
#include "v4dg.cdk"
*
      integer ind
*
      if (F_icode.gt.0) then
*
*         Write F_field on WA file or incore
*         ----------------------------------
          if(V4dg_incore_L) then
*
             if(F_iun.eq.V4dg_iuntr) then
*
                if(V4dg_trsize.lt.F_addr + Ni*Nj*Nk -1) then
                   if(Lun_debug_L) write (Lun_out,*) 'ARRAY TRINCORE TOO SMALL'
                   call gefstop ('v4d_rwfld')
                endif
                do ind = 1,Ni*Nj*Nk
                  V4dg_trincore(F_addr + ind - 1) = F_field(ind)
                enddo
*
             elseif(F_iun.eq.V4dg_iunfr) then
*
                if(V4dg_frsize.lt.F_addr + Ni*Nj*Nk -1) then
                   if(Lun_debug_L) write (Lun_out,*) 'ARRAY FRINCORE TOO SMALL'
                   call gefstop ('v4d_rwfld')
                endif
                do ind = 1,Ni*Nj*Nk
                  V4dg_frincore(F_addr + ind - 1) = F_field(ind)
                enddo
*
             elseif(F_iun.eq.V4dg_iunob) then
*
                if(V4dg_obsize.lt.F_addr + Ni*Nj*Nk -1) then
                   if(Lun_debug_L) write (Lun_out,*) 'ARRAY OBINCORE TOO SMALL'
                   call gefstop ('v4d_rwfld')
                endif
                do ind = 1,Ni*Nj*Nk
                  V4dg_obincore(F_addr + ind - 1) = F_field(ind)
                enddo
*
             endif
*
          else
*
             call wawrit (F_iun,F_field,F_addr,Ni*Nj*Nk)
*
          endif

*
*         Diagnostics
*         -----------
          if(F_diag_L) write(Lun_out,*) 
     %                 'WA FILE: wawrit ','Waf_adr = ',F_addr,'for ',F_name_S
*
*         Update address
*         --------------
          F_addr = F_addr + Ni*Nj*Nk 
*
      else
*
*         Read F_field from WA file or incore
*         -----------------------------------
          if(V4dg_incore_L) then
*
             if(F_iun.eq.V4dg_iuntr) then
*
                do ind = 1,Ni*Nj*Nk
                  F_field(ind) = V4dg_trincore(F_addr + ind - 1)
                enddo
*
             elseif(F_iun.eq.V4dg_iunfr) then
*
                do ind = 1,Ni*Nj*Nk
                  F_field(ind) = V4dg_frincore(F_addr + ind - 1)
                enddo
*
             elseif(F_iun.eq.V4dg_iunob) then
*
                do ind = 1,Ni*Nj*Nk
                  F_field(ind) = V4dg_obincore(F_addr + ind - 1)
                enddo
*
             endif
*
          else
*
             call waread (F_iun,F_field,F_addr,Ni*Nj*Nk)
*
          endif

*
*         Diagnostics
*         -----------
          if(F_diag_L) write(Lun_out,*)
     %                 'WA FILE: waread ','Waf_adr = ',F_addr,'for ',F_name_S
*
*         Update address
*         --------------
          if(     F_adjoint_L) F_addr = F_addr - F_diff 
          if(.not.F_adjoint_L) F_addr = F_addr + Ni*Nj*Nk 
*
      endif
*
*     ---------------------------------------------------------------
*
      return
      end
