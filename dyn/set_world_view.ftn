***s/r set_world_view
*
#include "model_macros_f.h"
*
      subroutine set_world_view
*
      implicit none
*
*author
*     Michel Desgagne
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_10 - Lee V.            - added watch_pid mechanism (returnpid)
* v2_10 - Desgagne M.       - Add partitioning checks
* v2_20 - Desgagne M.       - remove watch_dog (MPISUSPEND=ON)
* v2_21 - Dugas B.          - possibly initialize convip
* v2_21 - Lee V.            - modifications for LAM version and slab outputs
* v2_30 - Dugas B.          - add call to gemtim
* v2_30 - Desgagne M.       - entry vertical interpolator in gemdm
* v2_32 - Desgagne M.       - option for FST2000 encoding of ip1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_03 - Desgagne M.       - new procedure for call to set_dcst8
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Lee V.            - place output in local PE directory
* v3_21 - Desgagne M.       - using RMNLIB to access constants
*
*object
*
*arguments
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "cst_lis.cdk"
#include "dcst.cdk"
#include "path.cdk"
#include "ptopo.cdk"
#include "grid.cdk"
#include "hgc.cdk"
#include "pres.cdk"
#include "grd.cdk"
#include "dimout.cdk"
#include "cstv.cdk"
#include "level.cdk"
#include "hblen.cdk"
#include "pilot.cdk"
*
*modules
      logical  check_parti,set_dcst_8
      integer  longueur, hybref_to_ig, gnthread, RPN_COMM_bloc
      external set_world_view1,set_dcst_8,check_parti,
     %         longueur,hybref_to_ig,gnthread,
     %         RPN_COMM_bloc
**
      integer ipcode,ipmode,ierr,mindimx,mindimy,
     $        n1,n2,n3,n4,n5,n6,n7,
     $        maxblenx,maxbleny,cte_ok
      character*256 prejob_S
      character*12 dumc1_S
      real pcode,x1,x2
*
      integer pni, pnj, pniu, pnjv, pnk, lam
      
      namelist / dyndim / pni, pnj, pniu, pnjv, pnk, lam
*
c     integer omp_get_num_threads,omp_get_thread_num
c     These variables are for OpenMp compilation
*
*-------------------------------------------------------------------
*
      lun_out  = -1
      lun_in   = -1
      lun_lab  = -1
      lun_tsrs = -1
      Lun_zonl = -1
      Lun_cte  = -1
      lun_waphy= 65
      lun_wapta= 66
      Lun_rstrt= -1
      Lun_debug_L=.false.
*
      call rpn_comm_init (set_world_view1, Ptopo_myproc, Ptopo_numproc, 
     $                                     Ptopo_npex  , Ptopo_npey)
      Ptopo_npeOpenMP = gnthread()
      if (Lun_out.gt.0) then
         write(6,*) 'BLOC TOPO: Ptopo_nblocx=',
     $                Ptopo_nblocx, 'Ptopo_nblocy=',Ptopo_nblocy
         call write_status_file2 ('communications_established=YES' )
	 write(6,*) 'OpenMP will use ',Ptopo_npeOpenMP
     $                    ,' thread(s)'
      endif
*
      call bcastc1 ()
      Ptopo_numpe_perb = Ptopo_npex/Ptopo_nblocx * Ptopo_npey/Ptopo_nblocy

      call rpn_comm_mype (Ptopo_myproc, Ptopo_mycol, Ptopo_myrow)

      ierr = RPN_COMM_bloc ( Ptopo_nblocx, Ptopo_nblocy )
      if (ierr.lt.0) call gem_stop ('rpn_comm_bloc',ierr)

      call RPN_COMM_carac ( Ptopo_npex,Ptopo_npey,Ptopo_myproc,
     $                      n1,n2,n3,n4,n5,n6,n7,Ptopo_mybloc,
     $                      Ptopo_myblocx,Ptopo_myblocy,Ptopo_blocme,dumc1_S )
      call tmg_init0  ( Ptopo_myproc, 'GEMDM' )
      call tmg_start0 ( 1, 'GEMDM' ) 
*
*     fst2000 ip1 encoding 
      if ((Level_ip12000_L).and.(Ptopo_myproc.gt.0))
     $     call convip( ipcode, pcode, ipmode, 0, ' ', .false. )
*
#if defined (NEC)
      if (Lun_out.gt.0) call gemtim (Lun_out)
#endif
*
*
*     Initializing physical constants
*
      cte_ok = 0
      if ( .not. set_dcst_8 ( Dcst_cpd_8,liste_S,cnbre,
     $                      Ptopo_myproc,Ptopo_numproc ) ) 
     $     cte_ok=-1
      call gem_stop ('set_dcst_8',cte_ok)
*
*     Running script Um_hook.sh
*
c      write (prejob_S,33) Ptopo_myproc
c      prejob_S='Um_hook.sh -pre '//prejob_S(1:longueur(prejob_S))
c      call system (prejob_S)
*
*     Establishing data topology
*
      l_west  = (0            .eq. Ptopo_mycol)
      l_east  = (Ptopo_npex-1 .eq. Ptopo_mycol)
      l_south = (0            .eq. Ptopo_myrow)
      l_north = (Ptopo_npey-1 .eq. Ptopo_myrow)
      north   = 0
      south   = 0
      east    = 0
      west    = 0
      if (l_north) north = 1
      if (l_south) south = 1
      if (l_east ) east  = 1
      if (l_west ) west  = 1
      pil_w     = 0
      pil_n     = 0
      pil_e     = 0
      pil_s     = 0
      Lam_pil_w = 0
      Lam_pil_n = 0
      Lam_pil_e = 0
      Lam_pil_s = 0
      G_periodx = .true.
      G_periody = .false.
      Pil_current_S = '20000101.000000'
*     
      if (G_lam) then
         if (l_west ) pil_w = Glb_pil_w
         if (l_north) pil_n = Glb_pil_n
         if (l_east ) pil_e = Glb_pil_e
         if (l_south) pil_s = Glb_pil_s
         G_periodx = .false.
         Lam_pil_w = Glb_pil_w
         Lam_pil_n = Glb_pil_n
         Lam_pil_e = Glb_pil_e
         Lam_pil_s = Glb_pil_s
         mindimx = G_ni/2 - (1-mod(G_ni,2))
         mindimy = G_nj/2 - (1-mod(G_nj,2))
         maxblenx= max ( Hblen_momentx,Hblen_tx,Hblen_massx,Hblen_trx )
         maxbleny= max ( Hblen_momenty,Hblen_ty,Hblen_massy,Hblen_try )

         if ( (max(Glb_pil_w,Glb_pil_e)+maxblenx).gt.mindimx .or.
     $        (max(Glb_pil_s,Glb_pil_n)+maxbleny).gt.mindimy )
     $        call gem_stop
     $        ('LAM grid too small -- ABORT in set_world_view --',-1)
*
         if (Hblen_wfct_S .eq. "CONST") then
            maxblenx=mindimx-(max(Glb_pil_w,Glb_pil_e))+2
            maxbleny=mindimy-(max(Glb_pil_s,Glb_pil_n))+2
            Hblen_momentx=maxblenx
            Hblen_momenty=maxbleny
            Hblen_tx=maxblenx
            Hblen_ty=maxbleny
            Hblen_massx=maxblenx
            Hblen_massy=maxbleny
            Hblen_trx=maxblenx
            Hblen_try=maxbleny
            print *,'*****************************************'
            print *,'Constant Function applied for Pilot Zones'
            print *,'Values maxblenx, maxbleny=',maxblenx, maxbleny
            print *,'*****************************************'
*
            if ((Ptopo_npex.gt.2).or.(Ptopo_npey.gt.2))
     $        call gem_stop
     $        ('IN OFF-LINE MODE:MAXIMUM PE ALONG X,Y IS 2--',-1)
         endif
*
      endif
*
      call rpn_comm_topo ( G_ni,l_minx,l_maxx,l_ni,G_lnimax,
     $                            G_halox,l_i0,.true.,.true.) 
      call rpn_comm_topo ( G_nj,l_miny,l_maxy,l_nj,G_lnjmax,
     $                           G_haloy,l_j0,.false.,.true.)
      if (.not.check_parti (l_i0,G_ni,Ptopo_npex)) then
         if (Lun_out.gt.0) write(Lun_out,1001) 
     $        Ptopo_myproc,l_i0,Ptopo_npex
         call gem_stop('set_world_view',-1)
      endif
      if (.not.check_parti (l_j0,G_nj,Ptopo_npey)) then
         if (Lun_out.gt.0) write(Lun_out,1002) 
     $        Ptopo_myproc,l_j0,Ptopo_npey
         call gem_stop('set_world_view',-1)
      endif
*
      l_nk = G_nk
      l_njv= l_nj
      l_niu= l_ni
      if (l_north) l_njv= l_nj - 1
      if ((l_east).and.(G_lam)) l_niu = l_ni - 1
*
*     Check grid dimensions for LAM
      if (G_lam.and.Hblen_wfct_S .ne."CONST") then
         mindimx  = max ( pil_w,pil_e ) + maxblenx
         mindimy  = max ( pil_s,pil_n ) + maxbleny
         ierr=0
         if (l_niu.le.mindimx .or. l_njv.le.mindimy) ierr=-1
         call gem_stop
     $         ('LAM grid too small for chosen processor topology',ierr)
      endif
*
      call glbpos  
*
      call set_run_dir_xy (Ptopo_mycol, Ptopo_myrow)
*
*
*C    Initialize the schemes control comdeck
*     --------------------------------------
      call set_schm()
*
 1001 format (/,'Checkparti G_ni error on PE:',i4,' l_i0=',i4,' npex=',i4,/)
 1002 format (/,'Checkparti G_nj error on PE:',i4,' l_j0=',i4,' npey=',i4,/)
 1003 format ('PE ',i4,': l_niu or l_njv smaller than pil_?')
 1004 format ('l_niu=',i5,' l_njv=',i5,
     %        ' pil_w=',i3,' pil_e=',i3,' pil_s=',i3,'pil_n=',i3)
 5000 format (' Standard file version: ',i6/)
 9115 format (/,' PROBLEM INITIALIZATING PHYSICAL CONSTANTS',/)
 33   format (i6)
*
*-------------------------------------------------------------------
*
      return
      end
