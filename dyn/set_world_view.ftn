! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r set_world_view
*
#include "model_macros_f.h"
*
      subroutine set_world_view
*
      implicit none
*
*author
*     Michel Desgagne
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_10 - Lee V.            - added watch_pid mechanism (returnpid)
* v2_10 - Desgagne M.       - Add partitioning checks
* v2_20 - Desgagne M.       - remove watch_dog (MPISUSPEND=ON)
* v2_21 - Dugas B.          - possibly initialize convip
* v2_21 - Lee V.            - modifications for LAM version and slab outputs
* v2_30 - Dugas B.          - add call to gemtim
* v2_30 - Desgagne M.       - entry vertical interpolator in gemdm
* v2_32 - Desgagne M.       - option for FST2000 encoding of ip1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_03 - Desgagne M.       - new procedure for call to set_dcst8
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Lee V.            - place output in local PE directory
* v3_21 - Desgagne M.       - using RMNLIB to access constants
* v3_30 - Desgagne M.       - Cleaner approach to model startup
* v3_30 - Desgagne & Winger - Initialize variable for VMM files
*
*object
*
*implicits
#include "lun.cdk"
#include "cst_lis.cdk"
#include "dcst.cdk"
#include "ptopo.cdk"
#include "grd.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "path.cdk"
#include "vmmlist.cdk"
#include "itf_phy_config.cdk"
#include "adw.cdk"
#include "adx.cdk"
*
      logical  set_dcst_8
      integer  gem_nml,var4d_nml,v4d_config,gemdm_config,grid_nml
      external pe_zero_topo, set_dcst_8, gem_nml, var4d_nml,
     $         v4d_config, gemdm_config, grid_nml
**
      integer ierr,cte_ok,f1,f2,f3
*
*-------------------------------------------------------------------
*
* Initializing MPI and processor topology (pe_zero_topo on PE #0 only)
*
      call rpn_comm_init ( pe_zero_topo, Ptopo_myproc, Ptopo_numproc, 
     $                               Ptopo_npex  , Ptopo_npey )
*
* Broadcasts processor topology and continue initialization steps
*
      call pe_all_topo
      cte_ok = 0
      if ( .not. set_dcst_8 ( Dcst_cpd_8,liste_S,cnbre,
     $                        Lun_out,Ptopo_numproc ) ) cte_ok=-1
      call gem_stop ('set_dcst_8',cte_ok)
*
      if ( Schm_theoc_L ) then
*
         call theo_cfg
*
      else
*
* Initializes physical constants
*
*
* Read namelist gem_cfgs and var4d from file Path_nml_S
*
         f1 = grid_nml  (Path_nml_S)
         G_lam = Grd_typ_S(1:1).eq.'L'
         f2 = gem_nml   (Path_nml_S)
         f3 = var4d_nml (Path_nml_S)
         call gem_stop  ('SET_WORLD_VIEW_SET',min(f1,f2,f3))
      endif
*
*
* Establish final configuration
*
      f1 = gemdm_config ( )
      f2 = v4d_config   ( )
      call gem_stop ('SET_WORLD_VIEW',min(f1,f2))
*
      ierr = grid_nml  ('print')
      ierr = gem_nml   ('print')
      ierr = var4d_nml ('print')

      Adx_nkbz_L=Adw_nkbz_L
      Adx_exdg_L=Adw_exdg_L
      Adx_ckbd_L=Adw_ckbd_L
      Adx_mono_L=Adw_mono_L
      Adx_interp_type_S=Adw_interp_type_S
      Adx_nosetint_L=Adw_nosetint_L
      Adx_trunc_traj_L=Adw_trunc_traj_L
      Adx_halox=Adw_halox
      Adx_haloy=Adw_haloy
      if (G_lam) then
         Adx_halox=Adw_halox
         Adx_haloy=Adw_haloy
      endif
*
      call gemtim2 (Lun_out,.false.,0,ierr)
*
* Establish domain decomposition (mapping subdomains and processors)
*
      call domain_decomp
*
* Initializes schemes control comdeck
*
      call set_schm
*
* Initialize variable for VMM files
      vmm_read_done_L = .false.
*
*-------------------------------------------------------------------
*
      return
      end
