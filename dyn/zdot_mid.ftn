!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r zdot_mid - compute lagrangian model velocity (zdot) for advection
*
#include "model_macros_f.h"
*
      subroutine zdot_mid()
*
      implicit none
*
*author
*     Andre Plante, Claude Girard August 2007.
*
*revision
*
*object
***********************************************************************
* See GEMzdotlag.doc
***********************************************************************
*
*arguments
*        None
*
*implicits
#include "lun.cdk"
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "vth.cdk"
#include "ver.cdk"
#include "cstv.cdk"
#include "offc.cdk"
#include "dcst.cdk"
#include "schm.cdk"
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer  pnerr, pnlod, pnlkey1(8), i,j,k,i0,in,j0,jn
*----------------------------------------------------------------
*
      real    zz(LDIST_SHAPE,G_nk+1)
      real*8  one,half,www,zdd
**
      parameter( one = 1.d0, half = 0.5d0 )
*     __________________________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)

      pnlkey1( 1) = VMM_KEY(zz1)
      pnlkey1( 2) = VMM_KEY(zzh1)
      pnlkey1( 3) = VMM_KEY(fiptx)
      pnlkey1( 4) = VMM_KEY(wup)
      pnlkey1( 5) = VMM_KEY(wt0)
      pnlkey1( 6) = VMM_KEY(zdt0)
      pnlkey1( 7) = VMM_KEY(zdth)
      pnlkey1( 8) = VMM_KEY(zdup)
      pnlod = 8
*     - - - - - - - - - - - - - 
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - 
      pnerr = VMM_GET_VAR(zz1)
      pnerr = VMM_GET_VAR(zzh1)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(wup)
      pnerr = VMM_GET_VAR(wt0)
      pnerr = VMM_GET_VAR(zdt0)
      pnerr = VMM_GET_VAR(zdth)
      pnerr = VMM_GET_VAR(zdup)
*
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
*
         if (l_west)  i0=   1+Glb_pil_w
         if (l_east)  in=l_ni-Glb_pil_e
         if (l_south) j0=   1+Glb_pil_s
         if (l_north) jn=l_nj-Glb_pil_n
*
      endif
*
!$omp parallel private(zdd,www)
*
      if(Schm_zdotlag_L) then
*
*     ========================================
*     Make the bar t on fip on momentum levels
*     ========================================
!$omp do
      do k=1,G_nk+1
         do j=j0,jn
         do i=i0,in
            zz(i,j,k)=half*(fiptx(i,j,k)+fiptx(i,j,k-1))
         end do
         end do
      end do
!$omp enddo
*
*     Note : optimizing on j due to dependency on k
!$omp do
      do j=j0,jn
         do k=1,G_nk
         do i=i0,in
            zz(i,j,k)=(zz(i,j,k+1)-zz(i,j,k))*Ver_idz_8%m(k)
         end do
         end do
      end do
!$omp enddo
*     
!$omp do         
      do k=1,G_nk
         do j=j0,jn
         do i=i0,in
            www=Ver_wp_8%m(k)*wt0(i,j,k+1)+Ver_wm_8%m(k)*wt0(i,j,k)
            www      =      half*(www       + wup(i,j,k))
            zz(i,j,k)=      half*(zz(i,j,k) + zz1(i,j,k))
            zdth(i,j,k) = ( (zzh1(i,j,k)-fiptx(i,j,k))/Cstv_dt_8
     $                  + Dcst_grav_8*www ) / ( zz(i,j,k) - Cstv_RTstr_8 )
         end do
         end do
      end do
!$omp enddo
*
      else
*
!$omp do          
      do k=1,G_nk
         do j=j0,jn 
         do i=i0,in
            zdd=Ver_wp_8%m(k)*zdt0(i,j,k+1)+Ver_wm_8%m(k)*zdt0(i,j,k)
            zdth(i,j,k) = half*(zdd+zdup(i,j,k))
         end do
         end do
      end do
!$omp enddo
*
      endif
*
!$omp end parallel      
*
*     __________________________________________________________________ 
*
1000  format(3X,'COMPUTE LAGRANGIAN ZDOT: (S/R ZDOT_MID)')
*
*     __________________________________________________________________
*
      return
      end
