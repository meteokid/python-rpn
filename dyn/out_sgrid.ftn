! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
copyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
***s/r out_sgrid - to setup output grid
#include  "model_macros_f.h"
*
      subroutine out_sgrid ( F_x0,F_x1,F_y0,F_y1,F_periodx_L,
     $                       F_stride,F_etikext_s,
     $                       F_etikadd_S)

      implicit none
*
      integer F_x0, F_x1,F_y0,F_y1,F_stride,NI,NJ
      logical F_periodx_L
      character*(*) F_etikext_s, F_etikadd_S
*
*AUTHOR   Michel Desgagne     July 2004
*
*REVISION
* v3_20 - Lee V.            - Adapted for GEMDM
* v3_30 - McTaggart-Cowan R.- Append user defined grid tag to namelist value
* v4_03 - Lee V.            - modification of Out_etik_S in out_sgrid only
*
*
*ARGUMENTS
*    NAMES       I/O  TYPE  DESCRIPTION
*    F_x0        I    int   g_id
*    F_x1        I    int   g_if
*    F_y0        I    int   g_jd
*    F_y1        I    int   g_jf
*    F_stride    I    int   number of points to stride 
*    F_periodx   I    logic periodicity on X
*    F_etikext_s I    char  grid-specific tag extension
*
#include "out.cdk"
#include "ptopo.cdk"
*
      integer i
      integer  longueur
      external longueur
**
*----------------------------------------------------------------------
*
      Out_stride= F_stride
      Out_gridi0=F_x0
      Out_gridin=F_x1
      Out_gridj0=F_y0
      Out_gridjn=F_y1
      out_idl = max(F_x0 - out_bloci0 + 1, 1)
      out_ifl = min(F_x1 - out_bloci0 + 1, Out_blocni)
      out_jdl = max(F_y0 - out_blocj0 + 1, 1)
      out_jfl = min(F_y1 - out_blocj0 + 1, Out_blocnj)
*
      out_nisg  = 0
      out_njsg  = 0
      out_nisl  = 0
      out_njsl  = 0
      if ((out_idl.le.Out_blocni).and.(out_ifl.ge.1).and.
     $    (out_jdl.le.Out_blocnj).and.(out_jfl.ge.1) ) then
         out_idg = out_idl + out_bloci0 - F_x0
         out_ifg = out_ifl + out_bloci0 - F_x0
         out_jdg = out_jdl + out_blocj0 - F_y0
         out_jfg = out_jfl + out_blocj0 - F_y0
         out_nisg  = (F_x1 - F_x0) / Out_stride + 1
         out_njsg  = (F_y1 - F_y0) / Out_stride + 1
         out_nisl  = (out_ifg - out_idg) / Out_stride + 1
         out_njsl  = (out_jfg - out_jdg) / Out_stride + 1
      endif
      if (F_periodx_L) Out_nisg=Out_nisg+1
*
      if ((out_nisl.gt.0).and.(out_njsl.gt.0)) then
*
          Out_ig3 = out_idg
          Out_ig4 = out_jdg
*
      endif
*
      Out_etik_S = Out_etiket_S(1:min(len_trim(Out_etiket_S),
     $   len(Out_etiket_S)-len_trim(F_etikext_s))) //trim(F_etikext_s)
      if (F_etikadd_S.ne.' ') Out_etik_S =
     $        Out_etik_S(1: min(longueur(Out_etik_S),12-longueur(F_etikadd_S)))//F_etikadd_S
*
*----------------------------------------------------------------------
      return
      end

