***s/r nest_init -- Initializes nesting data for LAM configuration
*
#include "model_macros_f.h"
*
      subroutine nest_init
      implicit none
*
*author   M. Desgagne - April 2002
*
*revision
* v3_00 - Desgagne M.          - initial version
* v3_03 - Tanguay M.           - Adjoint Lam configuration
*
*implicits
#include "glb_ld.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "nest.cdk"
#include "schm.cdk"
#include "v4dg.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      real tr1,trf
      pointer (patr1, tr1(LDIST_SHAPE,*)), (patrf, trf(LDIST_SHAPE,*))
      integer i,j,k,err,pnlkey1(12),nvar,key1(Tr3d_ntr),key1_, 
     $        key2(Tr3d_ntr),key2_,n
*
      logical done_init_L
      data done_init_L /.false./
      save done_init_L

*     ---------------------------------------------------------------
*
*     -------------------------------------------------------
*     When Regular forward GEM, done_init_L = .F.
*     When 4D-Var, done_init_L = .T. if not first forward run 
*     -------------------------------------------------------
*     
      if ( V4dg_conf.eq.0.or..not.done_init_L ) then
*
      pnlkey1(1)  = VMM_KEY(ut1)
      pnlkey1(2)  = VMM_KEY(vt1)
      pnlkey1(3)  = VMM_KEY(tt1)
      pnlkey1(4)  = VMM_KEY(psdt1)
      pnlkey1(5)  = VMM_KEY(st1)
      pnlkey1(6)  = VMM_KEY(nest_u)
      pnlkey1(7)  = VMM_KEY(nest_v)
      pnlkey1(8)  = VMM_KEY(nest_t)
      pnlkey1(9)  = VMM_KEY(nest_psd)
      pnlkey1(10) = VMM_KEY(nest_s)
      nvar = 10
*
      if (.not. Schm_hydro_L) then
         pnlkey1(11) = VMM_KEY(wt1)
         pnlkey1(12) = VMM_KEY(nest_w)
         nvar = 12
      endif
*
      err = vmmlod(pnlkey1,nvar)
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR(st1)
      err = VMM_GET_VAR(nest_u)
      err = VMM_GET_VAR(nest_v)
      err = VMM_GET_VAR(nest_t)
      err = VMM_GET_VAR(nest_psd)
      err = VMM_GET_VAR(nest_s)
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(wt1)
         err = VMM_GET_VAR(nest_w)
      endif
*
      do k= 1, G_nk
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_u  (i,j,k) = ut1  (i,j,k)
         nest_v  (i,j,k) = vt1  (i,j,k)
      end do
      end do
      end do
      do k= 1, G_nk+1
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_t  (i,j,k) = tt1  (i,j,k)
         nest_psd(i,j,k) = psdt1(i,j,k)
      end do
      end do
      end do
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_s(i,j) = st1(i,j)
      end do
      end do
*
      if (.not. Schm_hydro_L) then
          do k= 1, G_nk+1
          do j= 1, l_nj 
          do i= 1, l_ni
             nest_w  (i,j,k) = wt1  (i,j,k)
          end do
          end do
          end do
      endif
*
      err = vmmuld(pnlkey1,nvar)
*
      key1_ = VMM_KEY (trt1)
      key2_ = VMM_KEY (nest_tr)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
         key2(n) = key2_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         err = vmmlod(key2,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),patr1,tr1)
            err = vmmget(key2(n),patrf,trf)
            do k= 1, G_nk+1
            do j= 1, l_nj 
            do i= 1, l_ni
               trf (i,j,k) = tr1 (i,j,k)
            end do
            end do
            end do
         end do
         err = vmmuld(key1,Tr3d_ntr)
         err = vmmuld(key2,Tr3d_ntr)
      endif
*
      if(V4dg_conf.ne.0) then
*
*       -----------------------------------------------
*       Store FIXED NESTING fields at initial time step
*       -----------------------------------------------
        V4dg_rwnest = 1
        call v4d_rwnest ()
*
        done_init_L = .true.
*
      endif
*
*     -----------------------
*     4D-Var when done_init_L
*     -----------------------
      else
*
*       -------------------------------------------------
*       Recover FIXED NESTING fields at initial time step
*       -------------------------------------------------
        V4dg_rwnest = 0
        call v4d_rwnest ()
*
      endif
*
*     ---------------------------------------------------------------
      return
      end
