!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r nest_init -- Initializes nesting data for LAM configuration
*
#include "model_macros_f.h"
*
      subroutine nest_init ()
      implicit none
*
      integer nesd
*
*author   M. Desgagne - April 2002
*
*revision
* v3_00 - Desgagne M.          - initial version
* v3_03 - Tanguay M.           - Adjoint Lam configuration
* v3_30 - Tanguay M.           - adapt to bcs
* v4_05 - Plante A.            - Top nesting
*
*implicits
#include "glb_ld.cdk"
#include "bcsdim.cdk"
#include "bcsmem.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "nest.cdk"
#include "schm.cdk"
#include "v4dg.cdk"
#include "lun.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      real tr1,trf
      pointer (patr1, tr1(LDIST_SHAPE,*)), (patrf, trf(LDIST_SHAPE,*))
      integer i,j,k,err,pnlkey1(14),nvar,key1(Tr3d_ntr),key1_, 
     $        key2(Tr3d_ntr),key2_,n,id
      integer*8 pnt_tr1(Tr3d_ntr),pnt_trf(Tr3d_ntr)
*
      logical done_init_L
      data done_init_L /.false./
      save done_init_L

*     ---------------------------------------------------------------
*
*     -------------------------------------------------------
*     When Regular forward GEM, done_init_L = .F.
*     When 4D-Var, done_init_L = .T. if not first forward run 
*     -------------------------------------------------------
*     
      if (V4dg_conf.ne.0 .and. V4dg_part.ne.3) return

      if ( .not.done_init_L ) then
*
      if (Lun_debug_L) write(Lun_out,1000)

      pnlkey1(1)  = VMM_KEY(ut1)
      pnlkey1(2)  = VMM_KEY(vt1)
      pnlkey1(3) = VMM_KEY(wt1)
      pnlkey1(4)  = VMM_KEY(tt1)
      pnlkey1(5)  = VMM_KEY(zdt1)
      pnlkey1(6)  = VMM_KEY(st1)
      pnlkey1(7)  = VMM_KEY(nest_u)
      pnlkey1(8)  = VMM_KEY(nest_v)
      pnlkey1(9)  = VMM_KEY(nest_w)
      pnlkey1(10) = VMM_KEY(nest_t)
      pnlkey1(11) = VMM_KEY(nest_zd)
      pnlkey1(12) = VMM_KEY(nest_s)
      nvar = 12
      if (.not. Schm_hydro_L) then
         pnlkey1(nvar+1) = VMM_KEY(qt1)
         pnlkey1(nvar+2) = VMM_KEY(nest_q)
         nvar = nvar+2
      endif

*
      err = vmmlod(pnlkey1,nvar)
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(wt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(zdt1)
      err = VMM_GET_VAR(st1)
      err = VMM_GET_VAR(nest_u)
      err = VMM_GET_VAR(nest_v)
      err = VMM_GET_VAR(nest_w)
      err = VMM_GET_VAR(nest_t)
      err = VMM_GET_VAR(nest_zd)
      err = VMM_GET_VAR(nest_s)
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(qt1)
         err = VMM_GET_VAR(nest_q)
      endif

      err = vmmlod(pnlkey1,nvar)
*
      key1_ = VMM_KEY (trt1)
      key2_ = VMM_KEY (nest_tr)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
         key2(n) = key2_ + n
      end do
      err = vmmlod(key1,Tr3d_ntr)
      err = vmmlod(key2,Tr3d_ntr)

      do n=1,Tr3d_ntr
         err = vmmget(key1(n),patr1,tr1)
         err = vmmget(key2(n),patrf,trf)
         pnt_tr1(n) = patr1
         pnt_trf(n) = patrf
      end do
*
*     copying values from UT1 to BCS_U boundary condition boxes
*
      call trnes (ut1,bcs_u(bcs_is),bcs_u(bcs_in),bcs_u(bcs_iw),
     $            bcs_u(bcs_ie),bcs_u(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+1,0)
      call trnes (vt1,bcs_v(bcs_is),bcs_v(bcs_in),bcs_v(bcs_iw),
     $            bcs_v(bcs_ie),bcs_v(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+1,0)
      call trnes (wt1,bcs_w(bcs_is),bcs_w(bcs_in),bcs_w(bcs_iw),
     $           bcs_w(bcs_ie),bcs_w(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+1,0)
      call trnes (tt1,bcs_t(bcs_is),bcs_t(bcs_in),bcs_t(bcs_iw),
     $            bcs_t(bcs_ie),bcs_t(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+2,0)
      call trnes (zdt1,bcs_zd(bcs_is),bcs_zd(bcs_in),bcs_zd(bcs_iw),
     $          bcs_zd(bcs_ie),bcs_zd(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+1,0)
      call trnes (st1,bcs_s(bcs_is),bcs_s(bcs_in),bcs_s(bcs_iw),
     $            bcs_s(bcs_ie),bcs_s(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,1,1,1,0)
*
      if (.not. Schm_hydro_L) then
         call trnes (qt1,bcs_q(bcs_is),bcs_q(bcs_in),bcs_q(bcs_iw),
     $               bcs_q(bcs_ie),bcs_q(bcs_it),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                            minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+2,0)
      endif
*
      do n=1,Tr3d_ntr
         id = (n-1)*bcs_sz+1
         patr1 = pnt_tr1(n)
         call trnes (tr1,bcs_tr(id),bcs_tr(id+bcs_in-1),
     $               bcs_tr(id+bcs_iw-1),bcs_tr(id+bcs_ie-1),bcs_tr(id+bcs_it-1),
     $               l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $               minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+2,0)
      end do
*
*     copying values from UT1 to nest_u variables
*
      do k= 1, G_nk+1
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_u (i,j,k) = ut1 (i,j,k)
         nest_v (i,j,k) = vt1 (i,j,k)
         nest_w (i,j,k) = wt1 (i,j,k)
         nest_t (i,j,k) = tt1 (i,j,k)
         nest_zd(i,j,k) = zdt1(i,j,k)
      end do
      end do
      end do
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_s(i,j) = st1(i,j)
         nest_t (i,j,G_nk+2) = tt1 (i,j,G_nk+2)
      end do
      end do
*
      if (.not. Schm_hydro_L) then
          do k= 0, G_nk+1
          do j= 1, l_nj 
          do i= 1, l_ni
             nest_q  (i,j,k) = qt1  (i,j,k)
          end do
          end do
          end do
      endif
*
c     if (Acid_test_L) then u,t,zd,s
c         if (Lun_out.gt.0) write(Lun_out,*)'Nest variables'
c     call glbstat (nest_u,'u',LDIST_DIM,G_nk,1+acid_i0,G_ni-1-acid_in,
c    %                                        1+acid_j0,G_nj-acid_jn,1,G_nk)
      err = vmmuld(pnlkey1,nvar)
*
      do n=1,Tr3d_ntr
         patr1 = pnt_tr1(n)
         patrf = pnt_trf(n)
         do k= 1, G_nk+2
            do j= 1, l_nj 
            do i= 1, l_ni
               trf (i,j,k) = tr1 (i,j,k)
            end do
            end do
         end do
      end do
*
      if(V4dg_conf.ne.0) then
*
        done_init_L = .true.
*
*       DO NOTHING 
*
      endif
* done_init loop
      endif
*
 1000 format(3X,'NESTING INITIALIZATION (NEST_INIT)')
*     ---------------------------------------------------------------
      return
      end
