***s/r v4d_4dvar - Control of Main Event Loop of 4D-Var based on GEM model
*
#include <model_macros_f.h>
*
      subroutine v4d_4dvar
*
*author
*    P. Gauthier
*
*revision
* v3_00   P. Gauthier        - initial version 
* v3_00   M. Tanguay         - adapt to Simon's exchange 
*
*object
*     Initialize the TLM/Adjoint and set-up an externally controlled Event Loop
*
*arguments
*     none
*
*implicits
      use v4d_prof, only: Pr_mode_S, Pr_llfrm_L, Pr_dsnooze_8, Pr_nsim4d, 
     %                    Pr_wopen_L, Pr_ropen_L, Pr_ihdlout, Pr_traj0to9_L 
*
#include "impnone.cdk"
*
#include "lun.cdk"
#include "glb_ld.cdk"
#include "v4dg.cdk"
#include "lctl.cdk"
#include "ptopo.cdk"
#include "step.cdk"
#include <prof_f.h>
#include "cstv.cdk"
*
      integer ierr, nevent, nstatus, keepsteptotal
*
*     1. Creation of reference trajectory
*     
*     --------------------------------------
*     Read given analysis of model variables
*     --------------------------------------
      if(Lun_out > 0) then
         write(Lun_out,
     $        fmt='('' V4D_4DVar-  4D-VARIATIONAL JOB with CONF = '',I6)')
     S        V4dg_conf
         write(Lun_out,
     $        fmt='('' ----------------------------------'')')  
         write(Lun_out, fmt='(//''-------------------'')')
         write(Lun_out
     S        , fmt='(  ''READ ANALYSIS for reference trajectory'')')
         write(Lun_out, fmt='(  ''-------------------'')')
      endif
*
      call indata()
*
*     Set non-linear direct run
*     -------------------------
      V4dg_ds_L = .true.
      V4dg_nl_L = .true.
      V4dg_di_L =      V4dg_ds_L.and.     V4dg_nl_L
      V4dg_tl_L =      V4dg_ds_L.and..not.V4dg_nl_L
      V4dg_ad_L = .not.V4dg_ds_L.and..not.V4dg_nl_L
*
      if(Pr_traj0to9_L) then
*     -----------------------------------------------------------------------
*     NOTE: Done if the giving analysis starts at 0Z instead of 3Z 
*           Do REFERENCE integration over 3 hr and prepare an additional 6 hr  
*     -----------------------------------------------------------------------
*
*       PART1 = REFERENCE integration over 3 hr without keeping TRAJ
*       ------------------------------------------------------------
*
*       Set status of the 0-3 integration period  (REFERENCE integration)
*       -----------------------------------------------------------------
        V4dg_status = 99 
*
*       Set Step_total to cover a 3 hr period
*       -------------------------------------
        keepsteptotal = Step_total 
        Step_total = nint( (3*3600.)/Cstv_dt_8 )
*
*       Set over-riding switch for dynout and blocstat
*       ----------------------------------------------
        V4dg_out = 0 
*
*       Set initial time step
*       ---------------------
        Lctl_step = 0
*     
*       Set no WRITE option on TRAJ Vmm WA file
*       ---------------------------------------
        V4dg_oktr_L = .false.
*
*       Complete the preprocessing (derived fields)
*       -------------------------------------------
        V4dg_part = 3
        call v4d_procdyn
*
*       Run NLM model
*       -------------
        call gem_ctrl
*
        if(Lun_out > 0) then
           write(Lun_out,*) '>>> V4D_4DVAR::  End of 3 hr nonlinear integration over 0-3'
        end if
*
*       PART2 = Prepare REFERENCE integration over an additional 6 hr
*       -------------------------------------------------------------
*
*       Convert wind images to true winds
*       ---------------------------------
        call v4d_img2uv()
*
*       Reset original Step_total  
*       -------------------------
        Step_total = keepsteptotal
*
      endif
*
*     Set status of the 6 hr integration period  (REFERENCE integration)
*     ------------------------------------------------------------------
      V4dg_status = 9 
* 
*     Set over-riding switch for dynout and blocstat
*     ----------------------------------------------
      V4dg_out = 0 
*
*     Set initial time step
*     ---------------------
      Lctl_step = 0
*     
*     Set WRITE option on TRAJ Vmm WA file
*     ------------------------------------
      V4dg_oktr_L = .true.
      V4dg_rwtr   = 1
*
*     Initialize addresses of TRAJ Vmm/Conversion WA files
*     ----------------------------------------------------
      V4dg_addtr  = 1
      V4dg_addcv  = 1
*
*     Complete the preprocessing (derived fields)
*     -------------------------------------------
      V4dg_part = 3
      call v4d_procdyn
*
*     Write trajectory for conversion in v4d_getdx or v4d_putdx 
*     ---------------------------------------------------------
      V4dg_rwcv = 1
      call v4d_rwconv() 
*
      call dynout2( V4dg_out.ne.0 )
*     
*     Run NLM model
*     -------------
      call gem_ctrl
*
      if(Lun_out > 0) then
         write(Lun_out,*) '>>> V4D_4DVAR::  End of 6 hr nonlinear integration over assimilation period'
      end if
*
*     Initialization of static information regarding the observations
*     ---------------------------------------------------------------
      Pr_llfrm_L = .true.
      Pr_dsnooze_8 = 0.01
      Pr_mode_S = 'FILE'
      write(Lun_out,*) '>>> V4D_4DVAR::  SNOOZE TIME = ',Pr_dsnooze_8,' LLFRM = ',Pr_llfrm_L
*     
*     /---------------------------------\
*     <        Main Event Loop          >
*     \---------------------------------/
*     
*     Set to zero simultations no.
*     ----------------------------
      Pr_nsim4d = 0
*     
      nstatus = 0
*     
      event_loop: do while (nstatus.eq.0)
*     
         call rpn_comm_barrier("GRID",ierr)
*
         if(Ptopo_myproc.eq.0) then
*     
*           Get the event to know what to do next
*           -------------------------------------
            Call v4d_getevent(Lun_out,nevent,nstatus)
*
            if(Lun_out > 0) 
     %      write(Lun_out,*) '>>> V4D_4DVAR::  Processing event = ', nevent,' status = ',nstatus 
*
         end if
*
         call rpn_comm_bcast(nevent, 1,"MPI_INTEGER",0,"GRID",ierr)
         call rpn_comm_bcast(nstatus,1,"MPI_INTEGER",0,"GRID",ierr)
*     
*     Select Case ---------------
*     
*        ------------------------------------
*   ===> EVN_TLMO:   Integration of TLM model
*        ------------------------------------
         if(nevent.eq.EVN_TLMO) then 
*
            Pr_nsim4d = Pr_nsim4d + 1   
*
            if(Lun_out > 0) write(Lun_out,*) '>>> V4D_4DVAR::  Integration of TLM - Nevent = '
     %                                       ,nevent,' EVN_TLMO = ',EVN_TLMO,' NSIM4D = ',Pr_nsim4d
*
*           Set linear direct run
*           ---------------------
            V4dg_ds_L = .true.
            V4dg_nl_L = .false.
            V4dg_di_L =      V4dg_ds_L.and.     V4dg_nl_L
            V4dg_tl_L =      V4dg_ds_L.and..not.V4dg_nl_L
            V4dg_ad_L = .not.V4dg_ds_L.and..not.V4dg_nl_L
*     
*     A.   Input: initial conditions and convert variables 3D-Var --> GEM
*     
*           Set initial time step
*           ---------------------
            Lctl_step = 0
*
*           Set READ option on TRAJ Vmm WA file
*           -----------------------------------
            V4dg_rwtr   = 0 
*
*           Reset address of TRAJ Conversion WA file
*           ----------------------------------------
            V4dg_addcv  = 1
*
*           Read trajectory for conversion in v4d_getdx 
*           -------------------------------------------
            V4dg_rwcv = 0 
            call v4d_rwconv()
*
*           Read increments from 3D-Var and prepare them for GEM
*           ----------------------------------------------------
            call v4d_getdx(nstatus)
*     
*     B.   Run the tangent linear model
*     
            if(nstatus.eq.0) then 
*
*           Set status of the integration
*           -----------------------------
            V4dg_status = 0
*     
*           Complete the preprocessing (derived fields)
*           -------------------------------------------
            V4dg_part = 3
            call v4d_procdyn_tl()
*     
*           Set over-riding switch for dynout and blocstat
*           ----------------------------------------------
            V4dg_out = 0 
            if(Pr_nsim4d.eq.2) V4dg_out = 1 
*
            call dynout2( V4dg_out.ne.0 )
*     
*           Run TLM model
*           -------------
            call gem_ctrl_tl()
*
*     C.   Output to 3D-Var: model profiles interpolated at obs. locations
*
*           Close dwyf PROF file to be used by 3D-Var
*           -----------------------------------------
            write(Lun_out,*) '>>> V4D_4DVAR::  Closing dwyf MODEL-PROFILE output file'
            ierr = prof_close(Pr_ihdlout)
*
            if(ierr .lt. 0) then
               write(Lun_out,*) '>>> V4D_4DVAR::  Error in closing dwyf PROF file'
               nstatus = -99
            endif
*
*           Set write/read flags for the next iteration
*           -------------------------------------------
            Pr_wopen_L = .false.
            Pr_ropen_L = .false.
*     
            if(nstatus.eq.0)  then
               if(Lun_out > 0) 
     %         write(Lun_out,*) '>>> V4D_4DVAR::  End of TLM integration  NSIM4D = ',Pr_nsim4d
*
               call rpn_comm_barrier("GRID",ierr)
*
            else
               if(Lun_out > 0) 
     %            write(Lun_out,*) '>>> V4D_4DVAR::  Problem in writing dwyf PROF file nstatus = ',
     %                             nstatus
               nstatus = -99
            endif
*
            else
               if(Lun_out > 0) 
     %            write(Lun_out,*) '>>> V4D_4DVAR::  Problem in getting dwgf PROF file nstatus = ',
     %                             nstatus
               nstatus = -99
            endif
*     
*        --------------------------------------------------
*   ===> EVN_ADJM:   Backward integration of Adjoint Model
*        --------------------------------------------------
         else if (nevent.eq.EVN_ADJM) then
*     
            if(Lun_out > 0) write(Lun_out,*)
     %           '>>> V4D_4DVAR::  Backward Integration of Adjoint - Nevent = '
     %           ,nevent,' EVN_ADJM = ',EVN_ADJM,' NSIM4D = ',Pr_nsim4d
*
*     B.   Run the adjoint model backward
*
*           Set status of the integration
*           -----------------------------
            V4dg_status = 0
*
*           Set final time step
*           -------------------
            Lctl_step = Step_total 
*
*           Zero adjoint variables
*           ----------------------
            call v4d_zero()
*
*           Set ADJ integration 
*           -------------------
            V4dg_ds_L = .false.
            V4dg_nl_L = .false.
            V4dg_di_L =      V4dg_ds_L.and.     V4dg_nl_L
            V4dg_tl_L =      V4dg_ds_L.and..not.V4dg_nl_L
            V4dg_ad_L = .not.V4dg_ds_L.and..not.V4dg_nl_L
*     
*           Set READ option on TRAJ Vmm WA file
*           -----------------------------------
            V4dg_rwtr = 0
*
*           Reset address of TRAJ Conversion WA file
*           ----------------------------------------
            V4dg_addcv = V4dg_addcv - l_ni*l_nj
*
*     A.   Input from 3D-Var: adjoint model states interpolated at obs. locations
*
            if(nstatus.eq.0) then 
*
*           Set over-riding switch for dynout and blocstat
*           ----------------------------------------------
            V4dg_out = 0 
            if(Pr_nsim4d.eq.1) V4dg_out = 1 
*
*           Run ADJ model
*           -------------
            call gem_ctrl_ad()
*
*           ADJOINT of
*           Complete the preprocessing (derived fields)
*           -------------------------------------------
            V4dg_part = 3
            call v4d_procdyn_ad()
*
            if( V4dg_out.ne.0 ) call v4d_dynout
*     
*     C.  Output: (Delta X)^* = grad J_o
*
*           Read trajectory for conversion in v4d_putdx
*           -------------------------------------------
            V4dg_rwcv = 0
            call v4d_rwconv()
*
*           Prepare and Write adjoint increments to be read by 3D-Var   
*           ---------------------------------------------------------
            call v4d_putdx(nstatus)
*
            if(nstatus.eq.0)  then
               if(Lun_out > 0) 
     %         write(Lun_out,*) '>>> V4D_4DVAR::  End of ADJ integration  NSIM4D = ',Pr_nsim4d
            else
               if(Lun_out > 0) 
     %            write(Lun_out,*) '>>> V4D_4DVAR::  Problem in putting dwga PROF file nstatus = ',
     %                             nstatus
               nstatus = -99
            end if
*
            else
               if(Lun_out > 0) 
     %            write(Lun_out,*) '>>> V4D_4DVAR::  Problem in getting dwya PROF file nstatus = ',
     %                             nstatus
               nstatus = -99
            end if
*     
*        ----------------------------------------------------------
*   ===> EVN_NLMO:   Forward Integration of Direct Nonlinear Model
*        ----------------------------------------------------------
         else if(nevent.eq.EVN_NLMO) then
*
            if(Lun_out > 0) write(Lun_out,*) '>>> V4D_4DVAR::  NOT DONE YET End of Job - Nevent = '
     %                                       ,nevent,' EVN_NLMO = ',EVN_NLMO
            nstatus = -99
*
*        ------------------------------------------------
*   ===> EVN_ESIM: Nothing more to do. You can go home!!
*        ------------------------------------------------
         else if(nevent.eq.EVN_ESIM) then
*
            if(Lun_out > 0) write(Lun_out,*) '>>> V4D_4DVAR::  End of Job - Nevent = '
     %                                       ,nevent,' EVN_ESIM = ',EVN_ESIM
            nstatus = -99
*     
*        -----------------------------------------------------------------
*   ===> EVN_FERR:  Something very wrong happened. Close shop and go...
*        -----------------------------------------------------------------
         else if(nevent.eq.EVN_FERR) then
*
            if(Lun_out > 0) write(Lun_out,*) '>>> V4D_4DVAR::  Aborting - Nevent = ' 
     %                                       ,nevent,' EVN_FERR = ',EVN_FERR
            nstatus = -99
*     
*        ------------------------------
*   ===> Default Case: Wrong Event Type
*        ------------------------------
         else
            if(Lun_out > 0) write(Lun_out,*) '>>> V4D_4DVAR::  wrong event type. Nevent = ',nevent
            nstatus = -99
            call gefstop('v4d_4dvar')
         end if
*     
         call rpn_comm_barrier("GRID",ierr)
*     
      end do Event_Loop
*     
*     ----------------------------------\
*     End of Main Event Loop             >
*     ----------------------------------/
*     
      if(Lun_out > 0) write(Lun_out,*) '>>> V4D_4DVAR::  End of Job' 
*
      return
*
      end subroutine v4d_4dvar
