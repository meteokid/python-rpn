!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r hzd_fact - applies horizontal diffusion on a given set of fields
*                 ( computation and microtasking )
*
#include "model_macros_f.h"
*
      subroutine hzd_fact (  F_u,    F_v,  F_psd,  F_tp,  F_ip,
     %                      F_td,    F_t,   F_it, F_plt,   F_q,
     %                     F_pip,    F_w,   F_qp,  F_mu, F_mul, F_s, 
     %                     F_xfis, DIST_DIM,Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
      real     F_u(DIST_SHAPE,Nk), F_v (DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %        F_ip(DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %         F_t(DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk), F_q (DIST_SHAPE,Nk),
     %       F_pip(DIST_SHAPE,Nk), F_w (DIST_SHAPE,Nk),
     %        F_qp(DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk), F_s(DIST_SHAPE), F_xfis(DIST_SHAPE)
*
*author
*     Alain Patoine - split from hzdif.ftn
*
*revision
* v2_00 - Desgagne M.       - initial MPI version 
* v2_10 - Desgagne M.       - routine changed name to accomodate 
* v2_10                       high order hor. diffusion option
* v2_10 - J.P. Toviessi     - reset V grid operator on call to hzd_abc
* v2_11 - Desgagne M.       - remove vertical modulation
* v2_11 - M. Roch           - diff. on phi instead of phi' at model lid
* v2_21 - Desgagne M.       - control for diffusion on momentum only
* v2_31 - Desgagne M.       - remove stkmemw
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Corbeil L.        - new RPNCOMM transpose
* v3_20 - J. P. Toviessi    - variable higher order diffusion operator
*
*object
*     The diffusion coefficients are (Cstv_uvdf_8*Cstv_dt_8) for the
*     horizontal winds and (Cstv_phidf_8*Cstv_dt_8) for other variables 
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_u
*----------------------------------------------------------------
* 
*implicits
#include "glb_ld.cdk"
#include "ldnh.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "ptopo.cdk"
#include "lun.cdk"
*
      integer i, j, k
      real*8 c_8
      real work(LDIST_SHAPE,Nk)
      real*8 wk1_8
      real*8 g1_8(LYDIST_SIZ*(Trp_12dmax-Trp_12dmin+1)*(G_ni+Ptopo_npex))
      real*8 g2_8((Trp_12dmax-Trp_12dmin+1)*(Trp_22max-Trp_22min+1)*(G_nj+Ptopo_npey))
      real*8, dimension (Ldnh_maxy*G_ni) :: aix_8,bix_8,cix_8,dix_8
      real*8, dimension (Trp_22max *G_nj) :: aiy_8,biy_8,ciy_8
**
*     __________________________________________________________________
*
      if (Lun_debug_L) write(Lun_out,1000)
*
*     Momentum
*     ~~~~~~~~
      if ( Cstv_uvdf_8 .gt. 0.0 ) then
*
*        Horizontal Momentum
*        ~~~~~~~~~~~~~~~~~~~      
         c_8 = Cstv_uvdf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         if (Hzd_difva_L) then
           call hzd_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Hzd_yp2su_8,
     $       G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         else
           call hzd_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Opr_opsyp2_8,
     $       G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         endif
*
         call hzd_del2 (F_u, wk1_8, Hzd_opsxp0_8, Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         call hzd_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cyv2_8,Opr_opsxp0_8,Opr_opsxp2_8,Hzd_yp0_8,Hzd_yp2_8,
     $       G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_njv,l_njv)
*
         call hzd_del2 (F_v, wk1_8, Opr_opsxp0_8(G_ni+1), Hzd_opsyp0_8,
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_njv)
*
      endif
*
      if ( Cstv_phidf_8 .gt. 0.0) then
*
         c_8 = Cstv_phidf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         if (Hzd_difva_L) then
           call hzd_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $       Hzd_yp2su_8,G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         else
           call hzd_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $       Opr_opsyp2_8,G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         endif
*
*        Vertical motion in pressure coord. 
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_psd, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)

*
*        Total divergence 
*        ~~~~~~~~~~~~~~~~
         call hzd_del2  (F_td, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         if (Hzd_uvwdt_L) goto 9988
*
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_ip, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         call hzd_del2  (F_it, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
!$omp do
         do k = 2, Nk
         do j = 1,l_nj
         do i = 1,l_ni
            F_it(i,j,k) = F_ip(i,j,k) + Cstvr_fistr_8(k) + F_xfis(i,j)
         end do
         end do
         end do
!$omp enddo
*
* updating phi' at the top
*
!$omp do
         do j = 1,l_nj
         do i = 1,l_ni
            F_ip(i,j,1) = F_it(i,j,1) - Cstvr_fistr_8(1) - F_xfis(i,j)
         end do
         end do
!$omp enddo
*
*
*     The temperature: T', T'lin & hence T 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_tp, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         call hzd_del2  (F_plt, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
!$omp do
         do k=1, Nk
         do j=1,l_nj
         do i=1,l_ni 
            F_t(i,j,k) = F_tp(i,j,k) + Cstv_tstr_8
         end do
         end do
         end do
!$omp enddo
*
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
!$omp do
            do k = 1, Nk
            do j = 1,l_nj 
            do i = 1,l_ni 
               work(i,j,k) = F_pip(i,j,k)
            end do
            end do
            end do
!$omp enddo
         endif 
*
*     The hydrostatic pressure: pi'  
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_pip, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
*****************************
*  3. Nonyhydrostatic model * 
*****************************
*
         if ( .not. Schm_hydro_L ) then
****** HAVE NOT OPTIMIZE THIS PART FOR IBM YET. VL.
*
*     Vertical wind (physical) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_w, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         if ( Schm_difqp_L ) then ! q' & related variables
*
         call hzd_del2  (F_mu, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
         call hzd_del2  (F_mul, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
*        Indirect diffusion of q' 
*        ~~~~~~~~~~~~~~~~~~~~~~~~
!$omp do
         do k=1, Nk  ! 
         do j=1,l_nj ! p = (pi)exp(q') 
         do i=1,l_ni ! ~~~~~~~~~~~~~~~ 
            work(i,j,k) = ( Geomg_z_8(k) + dble(work(i,j,k)) )
     %                       *exp( dble(F_qp(i,j,k)) )
         end do
         end do
         end do
!$omp enddo
*
         call hzd_del2  (work, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
!$omp do
         do k=1, Nk  ! 
         do j=1,l_nj ! q' = log(p/pi) 
         do i=1,l_ni ! ~~~~~~~~~~~~~~
            F_qp(i,j,k) = log(             dble(work(i,j,k))
     %                       /( Geomg_z_8(k) + dble(F_pip(i,j,k)) )  )
         end do
         end do
         end do
!$omp enddo
*
         endif
         endif
*
      endif
*
 9988 continue
*     __________________________________________________________________
 1000 format(/,3X,
     + 'PERFORM FACTORIZED DEL-2 HORIZONTAL DIFFUSION: (S/R HZD_FACT)')
*
      return
      end
