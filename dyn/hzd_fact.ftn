***s/r hzd_fact - applies horizontal diffusion on a given set of fields
*                 ( computation and microtasking )
*
#include "model_macros_f.h"
*
      subroutine hzd_fact ( F_u, F_v, F_t, F_w, DIST_DIM, Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
      real     F_u(DIST_SHAPE,Nk  ), F_v (DIST_SHAPE,Nk  ),
     %         F_t(DIST_SHAPE,Nk+1), F_w(DIST_SHAPE,Nk+1)
*
*author
*     Alain Patoine - split from hzdif.ftn
*
*revision
* v2_00 - Desgagne M.       - initial MPI version 
* v2_10 - Desgagne M.       - routine changed name to accomodate 
* v2_10                       high order hor. diffusion option
* v2_10 - J.P. Toviessi     - reset V grid operator on call to hzd_abc
* v2_11 - Desgagne M.       - remove vertical modulation
* v2_11 - M. Roch           - diff. on phi instead of phi' at model lid
* v2_21 - Desgagne M.       - control for diffusion on momentum only
* v2_31 - Desgagne M.       - remove stkmemw
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Corbeil L.        - new RPNCOMM transpose
* v3_20 - J. P. Toviessi    - variable higher order diffusion operator
*
*object
*     The diffusion coefficients are (Cstv_uvdf_8*Cstv_dt_8) for the
*     horizontal winds and (Cstv_phidf_8*Cstv_dt_8) for other variables 
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_u
*----------------------------------------------------------------
* 
*implicits
#include "glb_ld.cdk"
#include "ldnh.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "ptopo.cdk"
#include "lun.cdk"
#include "type.cdk"
#include "ver.cdk"
*
      integer i, j, k
      real*8 c_8
      real work(LDIST_SHAPE,Nk)
      real*8 wk1_8
      real*8 g1_8(LYDIST_SIZ*(Trp_12dmax-Trp_12dmin+1)*(G_ni+Ptopo_npex))
      real*8 g2_8((Trp_12dmax-Trp_12dmin+1)*(Trp_22max-Trp_22min+1)*(G_nj+Ptopo_npey))
      real*8, dimension (Ldnh_maxy*G_ni) :: aix_8,bix_8,cix_8,dix_8
      real*8, dimension (Trp_22max *G_nj) :: aiy_8,biy_8,ciy_8
**
*     __________________________________________________________________
*
      if (Lun_debug_L) write(Lun_out,1000)
*
*     Momentum
*     ~~~~~~~~
      if ( Cstv_uvdf_8 .gt. 0.0 ) then
*
*        Horizontal Momentum
*        ~~~~~~~~~~~~~~~~~~~      
         c_8 = Cstv_uvdf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         if (Hzd_difva_L) then
           call hzd_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Hzd_yp2su_8,
     $       G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         else
           call hzd_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Opr_opsyp2_8,
     $       G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         endif
*
         call hzd_del2 (F_u, wk1_8, Hzd_opsxp0_8, Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         call hzd_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cyv2_8,Opr_opsxp0_8,Opr_opsxp2_8,Hzd_yp0_8,Hzd_yp2_8,
     $       G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_njv,l_njv)
*
         call hzd_del2 (F_v, wk1_8, Opr_opsxp0_8(G_ni+1), Hzd_opsyp0_8,
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_njv)
*
*        ************************
*        *Nonyhydrostatic model * 
*
*        ************************
         if ( .not. Schm_hydro_L ) then
*
*        Vertical momentum (physical)
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_w, wk1_8,
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
         endif
*
      endif
*
      if ( Cstv_phidf_8 .gt. 0.0) then
*
         c_8 = Cstv_phidf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         if (Hzd_difva_L) then
           call hzd_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $       Hzd_yp2su_8,G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         else
           call hzd_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $       Geomg_cy2_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $       Opr_opsyp2_8,G_ni,G_nj,Ldnh_maxy,l_nj,
     $       Trp_22max,Trp_22n,LYDIST_DIM,G_nj,l_nj)
         endif
*
*        Mass related fields
*        ~~~~~~~~~~~~~~~~~~~
         call gem_stop('hzd_fact : ne pas diffuser la masse',-1)
*
*        The temperature: T
*        ~~~~~~~~~~~~~~~~~~
         call hzd_del2  (F_t, wk1_8, 
     $              Opr_opsxp0_8(G_ni+1), Opr_opsyp0_8(G_nj+1),
     $              aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,g1_8,g2_8,
     $              LDIST_DIM,Nk, G_ni,G_nj, Ldnh_maxy,
     $              Trp_12dmax,Trp_12dn, Trp_22max ,Trp_22n ,G_nj)
*
      endif
*
*     __________________________________________________________________
 1000 format(/,3X,
     + 'PERFORM FACTORIZED DEL-2 HORIZONTAL DIFFUSION: (S/R HZD_FACT)')
*
      return
      end
