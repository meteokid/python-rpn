***s/r vspng_drv - Main driver for top sponge layer
*
#include "model_macros_f.h"
*
      subroutine vspng_drv(F_u,F_v,F_w,F_t,F_s,F_csh,F_fi,F_qsec,
     $     F_topo,DIST_DIM,Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
      real F_u   (DIST_SHAPE,Nk)    , F_v   (DIST_SHAPE,Nk)    ,
     $     F_w   (DIST_SHAPE,Nk+1)  , F_t   (DIST_SHAPE,Nk+1)  ,
     $     F_s   (DIST_SHAPE)       , F_csh (DIST_SHAPE)       ,
     $     F_fi  (DIST_SHAPE,0:Nk+1), F_qsec(DIST_SHAPE,0:Nk+1),
     $     F_topo(DIST_SHAPE)
*
*author
*     Michel Desgagne  - October 2000
*
*revision
* v2_11 - Desgagne M.       - initial version 
* v2_21 - Desgagne M.       - control for sponge on momentum only
* v2_21                       Vspng_nk levels + sponge on top level only
* v2_21                       on all other variables
* v2_31 - Tanguay M.        - restaure link between F_pip and F_ip at 
*                             top; remove top_only_L and stkmemw
* v3_01 - Desgagne & Lee    - introduce Vspng_rwnd_L
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Toviessi J. P.    - variable higher order diffusion operator
* v3_30 - Spacek L.         - Added Vspng_zmean_L. If .true. the zonal
*                             mean of u component is subtracted before
*                             the diffusion and added back after it
*
*object
*     The diffusion coefficients are (Cstv_uvdf_8*Cstv_dt_8) for the
*     horizontal momentum and (Cstv_phidf_8*Cstv_dt_8) for all other
*     variables.
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_u
*----------------------------------------------------------------
* 
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "trp.cdk"
#include "vspng.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "grd.cdk"
#include "type.cdk"
#include "ver.cdk"
*
      integer i,j,jj,k,nkspng,i0,in,j0,jn,niks,nij_halo 
      real*8 HALF_8,TWO_8,c_8,c1, invp0t_8
      parameter( HALF_8  = 0.5 )
      parameter(  TWO_8  = 2.0 )
      parameter(invp0t_8 = .00001d0)
*
      real work_ijk(DIST_SHAPE,Nk+1), tmean(l_nj,Nk)
      real*8, dimension (trp_12emax*G_ni*Vspng_nk) :: 
     $                                          aix_8,bix_8,cix_8,dix_8
      real*8, dimension (trp_22emax*G_nj*Vspng_nk) :: aiy_8,biy_8,ciy_8
      real*8 cy_8(l_nj+1), xp0_8(G_ni), yp0_8(G_nj)
      real*8 exps_8(DIST_SHAPE)
      real*8 exner_8(DIST_SHAPE,Vspng_nk)
      real*8 work_iks1(1-G_halox:l_ni+G_halox,Vspng_nk)
      real*8 work_iks2(1-G_halox:l_ni+G_halox,Vspng_nk)
**
*     __________________________________________________________________
*
      if (Vspng_uvwdt_L)then
         call gem_stop('vspng_drv : key Vspng_uvwdt_L is obsolete',-1)
      endif

      i0=1-G_halox
      in=l_ni+G_halox
      j0=1-G_haloy
      jn=l_nj+G_haloy
      
      niks=(in-i0+1)*Vspng_nk
      nij_halo=(in-i0+1)*(jn-j0+1)

      do i = 1, G_ni
         xp0_8 (i) = G_xg_8(i+1) - G_xg_8(i)
      end do
      do j = 1, G_nj
         yp0_8 (j) = sin(G_yg_8(j+1))-sin(G_yg_8(j))
      end do
*
*     Momentum
*     ~~~~~~~~
      if ( Cstv_uvdf_8 .gt. 0.0 ) then
*
*        Horizontal Momentum
*        ~~~~~~~~~~~~~~~~~~~       
         if (Vspng_rwnd_L) then
!$omp parallel private(c1)
!$omp do
            do k=1,G_nk
               do j=1,l_nj
                  c1 = Dcst_rayt_8 / geomg_cy_8(j)
                  do i=1,l_ni
                     f_u(i,j,k) = f_u(i,j,k) * c1
                  end do
               end do
               do j=1,l_njv
                  c1 = Dcst_rayt_8 / geomg_cy_8(j)
                  do i=1,l_ni
                     f_v(i,j,k) = f_v(i,j,k) * c1
                  end do
               end do
            end do
!$omp enddo
!$omp end parallel
         endif
*
*  Substract the mean for the zonal component if wanted
*
         if (Vspng_zmean_L)
     $   call vspng_zmean (F_u,F_u,tmean,DIST_DIM,Nk,.true.)
*
         do j = 1, l_nj+1
            cy_8(j) = G_yg_8(l_j0+j-1)
         end do
         c_8 = Cstv_uvdf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         if (Hzd_difva_L) then
           call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Hzd_yp2su_8,
     $               G_ni,G_nj,G_nj)
         else
           call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Opr_opsyp2_8,
     $               G_ni,G_nj,G_nj)
         endif
*
         call vspng_del2 ( F_u, xp0_8, Opr_opsyp0_8(G_nj+1),
     $                 aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                 LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         do j = 1, l_nj+1
            jj = l_j0+j-1
            cy_8(j) = cos((G_yg_8(jj+1)+G_yg_8(jj)) * HALF_8) **TWO_8
         end do
         call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Hzd_yp0_8,Hzd_yp2_8,
     $               G_ni,G_nj,G_njv)
*
         call vspng_del2 ( F_v, Opr_opsxp0_8(G_ni+1), yp0_8,
     $                 aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                 LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_njv)
*
*  Add back the mean for the zonal component
*
         if (Vspng_zmean_L)
     $   call vspng_zmean (F_u,F_u,tmean,DIST_DIM,Nk,.false.)
*
         if (Vspng_rwnd_L) then
!$omp parallel private(c1)
!$omp do
            do k=1,G_nk
               do j=1,l_nj
                  c1 = geomg_cy_8(j) / Dcst_rayt_8
                  do i=1,l_ni
                     f_u(i,j,k) = f_u(i,j,k) * c1
                  end do
               end do
               do j=1,l_nj
                  c1 = geomg_cy_8(j) / Dcst_rayt_8
                  do i=1,l_ni
                     f_v(i,j,k) = f_v(i,j,k) * c1
                  end do
               end do
            end do
!$omp enddo
!$omp end parallel
         endif
*
*         ************************
*         *Nonyhydrostatic model *
*         ************************
*
          if ( .not. Schm_hydro_L ) then
*
*            Vertical wind (physical)
*            ~~~~~~~~~~~~~~~~~~~~~~~~
             call vspng_del2 (F_w,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
          endif
*
      endif     
*
      if ( Cstv_phidf_8 .gt. 0.0) then
*
         c_8 = Cstv_phidf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         do j = 1, l_nj+1
            cy_8(j) = G_yg_8(l_j0+j-1)
         end do
         
         if (Hzd_difva_L) then
           call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $                     cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $                     Hzd_yp2su_8,G_ni,G_nj,G_nj)
         else
           call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $                     cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $                     Opr_opsyp2_8,G_ni,G_nj,G_nj)
         endif
*
*        The potential temperature
*        ~~~~~~~~~~~~~~~~~~~~~~~~~
*
*        Computing the potential temperature on level 1 to Vspng_nk
*       
!$omp parallel private(work_iks1,work_iks2)
!$omp do
         do j=j0,jn
            do i=i0,in
               exner_8(i,j,1)=F_s(i,j)
            end do
            call vexp(exps_8(i0,j),exner_8(i0,j,1),(in-i0+1))
*
*           Note : Vspng_nk is generally low, this is why we optimize on j
*     
            do k=1,Vspng_nk
            do i=i0,in
               work_iks1(i,k) = invp0t_8*
     $              (Ver_pia_8%t(k)+Ver_pib_8%t(k)*exps_8(i,j))
            end do
            end do
            call vpown1(work_iks2,work_iks1,Dcst_cappa_8,niks)
            do k=1,Vspng_nk
            do i=i0,in
               exner_8(i,j,k) = work_iks2(i,k)
               work_ijk(i,j,k) = F_t(i,j,k) / exner_8(i,j,k)
            end do
            end do
         end do
!$omp enddo
!$omp end parallel

c         call glbstat (work_ijk,'THETA',DIST_DIM,G_nk+1,i0,in,j0,jn,1,Vspng_nk)
c         call glbstat (F_t     ,'TT'   ,DIST_DIM,G_nk+1,i0,in,j0,jn,1,Vspng_nk)

         call vspng_del2 (work_ijk,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*

!$omp parallel
!$omp do
         do k=1,Vspng_nk
            do j=j0,jn
            do i=i0,in
               F_t(i,j,k) = work_ijk(i,j,k) * exner_8(i,j,k)
            end do
            end do
         end do
!$omp enddo
!$omp end parallel
c         call glbstat (F_t ,'TT' ,DIST_DIM,G_nk+1,i0,in,j0,jn,1,Vspng_nk)
c         call glbstat (F_fi,'FIx' ,DIST_DIM,G_nk+2,i0,in,j0,jn,1,Vspng_nk+1)

         call diag_fip(F_fi, F_csh, F_t, F_qsec, F_topo,i0,in,j0,jn,l_nk)

c         call glbstat (F_fi,'FIy' ,DIST_DIM,G_nk+2,i0,in,j0,jn,1,Vspng_nk+1)

*
         
      endif
*
*     __________________________________________________________________
*
      return
      end
