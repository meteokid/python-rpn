! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r vspng_drv - Main driver for top sponge layer
*
#include "model_macros_f.h"
*
      subroutine vspng_drv(F_u,F_v,F_w,F_t,DIST_DIM,Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
      real F_u   (DIST_SHAPE,Nk)    , F_v   (DIST_SHAPE,Nk)    ,
     $     F_w   (DIST_SHAPE,Nk+1)  , F_t   (DIST_SHAPE,Nk+1)
*
*author
*     Michel Desgagne  - October 2000
*
*revision
* v2_11 - Desgagne M.       - initial version 
* v2_21 - Desgagne M.       - control for sponge on momentum only
* v2_21                       Vspng_nk levels + sponge on top level only
* v2_21                       on all other variables
* v2_31 - Tanguay M.        - restaure link between F_pip and F_ip at 
*                             top; remove top_only_L and stkmemw
* v3_01 - Desgagne & Lee    - introduce Vspng_rwnd_L
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Toviessi J. P.    - variable higher order diffusion operator
* v3_30 - Spacek L.         - Added Vspng_zmean_L. If .true. the zonal
*                             mean of u component is subtracted before
*                             the diffusion and added back after it
* v4_02 - Plante  A.        - Revision for vertical stag version
* v4_03 - Tanguay M.        - Bugfix for calculation of cy_8 for vert wind
*
*object
*     The diffusion coefficients are (Vspng_coef*Cstv_dt_8) for the
*     momentum only.
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_u
*----------------------------------------------------------------
* 
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "trp.cdk"
#include "vspng.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "grd.cdk"
*
      integer i,j,jj,k,nkspng
      real*8 HALF_8,TWO_8,c_8,c1, invp0t_8
      parameter( HALF_8  = 0.5 )
      parameter(  TWO_8  = 2.0 )
      parameter(invp0t_8 = .00001d0)
*
      real tmean(l_nj,Nk)
      real*8, dimension (trp_12emax*G_ni*Vspng_nk) :: 
     $                                          aix_8,bix_8,cix_8,dix_8
      real*8, dimension (trp_22emax*G_nj*Vspng_nk) :: aiy_8,biy_8,ciy_8
      real*8 cy_8(l_nj+1), xp0_8(G_ni), yp0_8(G_nj)
**
*     __________________________________________________________________
*
      do i = 1, G_ni
         xp0_8 (i) = G_xg_8(i+1) - G_xg_8(i)
      end do
      do j = 1, G_nj
         yp0_8 (j) = sin(G_yg_8(j+1))-sin(G_yg_8(j))
      end do
*
*     Momentum
*     ~~~~~~~~
      if ( Vspng_coef .gt. 0.0 ) then
*
*        Horizontal Momentum
*        ~~~~~~~~~~~~~~~~~~~       
!$omp parallel private(c1)
!$omp do
         do k=1,G_nk
            do j=1,l_nj
               c1 = Dcst_rayt_8 / geomg_cy_8(j)
               do i=1,l_ni
                  f_u(i,j,k) = f_u(i,j,k) * c1
               end do
            end do
            do j=1,l_njv
               c1 = Dcst_rayt_8 / geomg_cy_8(j)
               do i=1,l_ni
                  f_v(i,j,k) = f_v(i,j,k) * c1
               end do
            end do
         end do
!$omp enddo
!$omp end parallel
*
*  Substract the mean for the zonal component if wanted
*
         if (Vspng_zmean_L)
     $   call vspng_zmean (F_u,F_u,tmean,DIST_DIM,Nk,.true.)
*
         do j = 1, l_nj+1
            cy_8(j) = G_yg_8(l_j0+j-1)
         end do
         c_8 = Vspng_coef*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         if (Hzd_difva_L) then
           call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Hzd_yp2su_8,
     $               G_ni,G_nj,G_nj)
         else
           call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Opr_opsyp2_8,
     $               G_ni,G_nj,G_nj)
         endif
*
         call vspng_del2 ( F_u, xp0_8, Opr_opsyp0_8(G_nj+1),
     $                 aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                 LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         do j = 1, l_nj+1
            jj = l_j0+j-1
            cy_8(j) = cos((G_yg_8(jj+1)+G_yg_8(jj)) * HALF_8) **TWO_8
         end do
         call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Hzd_yp0_8,Hzd_yp2_8,
     $               G_ni,G_nj,G_njv)
*
         call vspng_del2 ( F_v, Opr_opsxp0_8(G_ni+1), yp0_8,
     $                 aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                 LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_njv)
*
*  Add back the mean for the zonal component
*
         if (Vspng_zmean_L)
     $   call vspng_zmean (F_u,F_u,tmean,DIST_DIM,Nk,.false.)
*
!$omp parallel private(c1)
!$omp do
         do k=1,G_nk
            do j=1,l_nj
               c1 = geomg_cy_8(j) / Dcst_rayt_8
               do i=1,l_ni
                  f_u(i,j,k) = f_u(i,j,k) * c1
               end do
            end do
            do j=1,l_nj
               c1 = geomg_cy_8(j) / Dcst_rayt_8
               do i=1,l_ni
                  f_v(i,j,k) = f_v(i,j,k) * c1
               end do
            end do
         end do
!$omp enddo
!$omp end parallel
*
         do j = 1, l_nj+1
            cy_8(j) = G_yg_8(l_j0+j-1)
         end do
*     
         if (Hzd_difva_L) then
            call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $           cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $           Hzd_yp2su_8,G_ni,G_nj,G_nj)
         else
            call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $           cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $           Opr_opsyp2_8,G_ni,G_nj,G_nj)
         endif
*        Vertical wind
*        ~~~~~~~~~~~~~
         call vspng_del2 (F_w,
     $        Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $        aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $        LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*     
*        Temperature, last level only
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         nkspng   = Vspng_nk
         Vspng_nk = 1
         if (Hzd_difva_L) then
            call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $           cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $           Hzd_yp2su_8,G_ni,G_nj,G_nj)
         else
            call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $           cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $           Opr_opsyp2_8,G_ni,G_nj,G_nj)
         endif
         call vspng_del2 (F_t,
     $        Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $        aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $        LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*     
         Vspng_nk = nkspng
      endif     
*
*     __________________________________________________________________
*
      return
      end
