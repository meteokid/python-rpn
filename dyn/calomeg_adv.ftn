!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/p calomeg_adv - compute vertical velocity in pressure coordinates
*                    from advection
*
#include "model_macros_f.h"
*
      subroutine calomeg_adv (F_ww,F_st1,F_piup,DIST_DIM,Nk,F_checkstep_L)
*
      implicit none
*
      integer DIST_DIM, Nk
      real F_ww(DIST_SHAPE,Nk+1),F_st1(DIST_SHAPE)
      real F_piup(DIST_SHAPE,Nk+1)
      logical F_checkstep_L
*
*author
*     Andre Plante dec 2006 based on calzz from Richard Moffet.
*
*revision
*
*object
*	compute vertical velocity in hydrostatic pressure coordinates
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_ww           O                 dpi/dt (Pa/s)
* F_st1        I                   s at time t1 = exp(PIt1/Zsruf)
* F_piup       I                   Hydrostatic pressure at upstream location
*                                  obtaned from lagragian advection.
*
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "lctl.cdk"
#include "type.cdk"
#include "ver.cdk"
*
**
      integer i,j,k,i0,in,j0,jn
*     __________________________________________________________________
*
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
*
      if ( Lctl_step .eq. 0 .and. F_checkstep_L)then
*
!$omp parallel
!$omp do
         do k=1,l_nk+1
            do j=j0,jn
            do i=i0,in
               F_ww (i,j,k) = 0.0
            end do
            end do
         end do
!$omp enddo
!$omp end parallel
*
      else
*
!$omp parallel
!$omp do
         do k=1,l_nk+1
            do j=j0,jn
            do i=i0,in
c  a revoir pour exp
               F_ww (i,j,k) = (exp(Ver_z_8%t(k) + Ver_b_8%t(k)*F_st1(i,j))
     $              - F_piup(i,j,k) )/Cstv_dt_8            
            end do
            end do
         end do
!$omp enddo
!$omp end parallel
*
      endif
*     __________________________________________________________________
*
      return
      end 
