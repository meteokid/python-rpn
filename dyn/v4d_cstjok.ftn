***s/r v4d_cstjok - Interpolate model states at obs. locations and 
*                   output the result to be read by 3D-Var 
*
#include <model_macros_f.h>
*
      subroutine v4d_cstjok 
*
      use v4d_prof
      use v4dz
      use v4d_interint0
*
#include "impnone.cdk"
*
*author N. Ek
*
*revision
* v3_00 - N.Ek              - initial MPI version
* v3_00   M.Tanguay         - adapt to Simon's exchange
*
*object
*     -----------------------------------------------------------------------
*     Each processor do the following at the current observation time:
*         1) Conversion from GEM units to 3D-Var units and Reverse Staggering
*         2) Interpolate model profiles to obs. locations
*         3) Write model profiles to be read by 3D-Var
*     -----------------------------------------------------------------------
*
*arguments
*
*implicits
#include "glb_ld.cdk"
#include "lctl.cdk"
#include "lun.cdk"
#include "v4dg.cdk"
#include "vt1.cdk"
#include "vt1m.cdk"
#include "ptopo.cdk"
#include "tr3d.cdk"
#include "adw.cdk"
#include "path.cdk"
#include <prof_f.h>
*
*     Local variables
*     ---------------
      integer  vmmlod, vmmget, vmmuld, prof_wrrec, longueur
      external vmmlod, vmmget, vmmuld, prof_wrrec, longueur
*
      integer nvar, kstatus, pnlkey1(9), err, pnerr, istat, i, j,
     %        k, n, i1, i2, j1, j2, indx, indy, ntime, npr
*
      integer key1(Tr3d_ntr), key1_, key1m(Tr3d_ntr), key1m_
      real hut1, hut1m
      pointer (pahu1, hut1(LDIST_SHAPE,*)), (pahu1m, hut1m(LDIST_SHAPE,*))
*
      real,   pointer, dimension(:,:) :: profx,profy,prof2d 
      real*8, pointer, dimension(:,:) :: gomu_8,gomv_8,gomt_8,gomq_8,gomps_8 
*
      real wijk1(LDIST_SHAPE,l_nk),wijk2(LDIST_SHAPE,l_nk),
     %     wijk3(LDIST_SHAPE,l_nk),wijk4(LDIST_SHAPE,l_nk),wij5(LDIST_SHAPE)
*
      logical plpr_L
*
      character(len=2) :: cljx_S, cljy_S
*     ______________________________________________________
*
      if ( Tr3d_ntr.gt.1 ) call gefstop('v4d_cstjok')
*     ______________________________________________________
*
      write(Lun_out,1000) Lctl_step
*
*     Flags for diagnostics
*     ---------------------
      plpr_L = .false.
      plpr_L = plpr_L.and.Lun_out.gt.0
*
*     Open dwyf PROF file to write the model profiles
*     -----------------------------------------------
      if(.not.Pr_wopen_L) then
*
        write(cljx_S,'(i2.2)') Ptopo_myrow 
        write(cljy_S,'(i2.2)') Ptopo_mycol 
*
        Pr_type2file_S = Path_xchg_S(1:longueur( Path_xchg_S) )//'/dwyf_'
     %                   //cljx_S//'_'//cljy_S//'.prof'
*
        write(Lun_out,*) 'Opening dwyf MODEL-PROFILE output file'
*
        Pr_ihdlout = prof_open (Pr_type2file_S,'WRITE','FILE')
*
        if(Pr_ihdlout.le.0) then
           write(Lun_out,*) 'Cannot open MODEL-PROFILE output file !'
           kstatus = - 99
        endif
*
        Pr_wopen_L=.true.
*
      endif
*
*     Prepare number of processors in X and Y to be send to 3D-Var
*     ------------------------------------------------------------
      indx = Ptopo_npex-1
      indy = Ptopo_npey-1
      call mvbits(indx,0,16,indy,16)
*
*     Recall the dimensions of the fields presented to the interpolation
*     ------------------------------------------------------------------
      i1=V4dz_i1
      i2=V4dz_i2
      j1=V4dz_j1
      j2=V4dz_j2
*
*     Define observation time as timestep scaled by V4dg_stepob 
*     ---------------------------------------------------------
      ntime = Lctl_step/V4dg_stepob 
*
*     Get fields in memory
*     --------------------
      pnlkey1(1)= VMM_KEY( ut1)
      pnlkey1(2)= VMM_KEY( vt1)
      pnlkey1(3)= VMM_KEY( tpt1)
      pnlkey1(4)= VMM_KEY( st1)
      nvar= 4 
*
      err = vmmlod(pnlkey1,nvar)
*
      err = VMM_GET_VAR( ut1)
      err = VMM_GET_VAR( vt1)
      err = VMM_GET_VAR( tpt1)
      err = VMM_GET_VAR( st1)
*
      err = VMM_GET_VAR( tpt1m)
      err = VMM_GET_VAR( st1m)
*
*     Load humidity field assuming Tr3d_ntr=1
*     ---------------------------------------
      key1_ = VMM_KEY (trt1)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),pahu1,hut1)
         end do
      endif
*     
      if(V4dg_tl_L) then
         pnlkey1(1)= VMM_KEY(tpt1m)
         pnlkey1(2)= VMM_KEY( st1m)
         nvar= 2 
         err = vmmlod(pnlkey1,nvar)
*
         err = VMM_GET_VAR( tpt1m)
         err = VMM_GET_VAR( st1m)
*
*        Load TRAJ humidity field assuming Tr3d_ntr=1
*        --------------------------------------------
         key1m_ = VMM_KEY (trt1m)
         do n=1,Tr3d_ntr
            key1m(n) = key1m_ + n
         end do
         if (Tr3d_ntr.gt.0) then
            err = vmmlod(key1m,Tr3d_ntr)
            do n=1,Tr3d_ntr
            err = vmmget(key1m(n),pahu1m,hut1m)
            end do
         endif
      end if
*
*     Transfer fields
*     ---------------
      do k=1,l_nk
         do j=1,l_nj
           do i=1,l_ni
               wijk1(i,j,k) = ut1 (i,j,k)
               wijk2(i,j,k) = vt1 (i,j,k)
               wijk3(i,j,k) = tpt1(i,j,k)
               wijk4(i,j,k) = hut1(i,j,k)
            end do
         end do
      end do
*
      do j=1,l_nj
            do i=1,l_ni
               wij5(i,j) = st1(i,j)
            end do
      end do
*
      if(plpr_L) then
         if(Ptopo_myproc.eq.0) write(Lun_out,*) 'BEFORE VARCONV'
         call glbstat(wijk1,'UU',LDIST_DIM,G_nk,1,G_ni,1,G_nj,1,G_nk)
         call glbstat(wijk2,'VV',LDIST_DIM,G_nk,1,G_ni,1,G_nj-1,1,G_nk)
         call glbstat(wijk3,'TP',LDIST_DIM,G_nk,1,G_ni,1,G_nj,1,G_nk)
         call glbstat(wij5 ,'4S',LDIST_DIM,   1,1,G_ni,1,G_nj,1,   1)
         call glbstat(wijk4,'HU',LDIST_DIM,G_nk,1,G_ni,1,G_nj,1,G_nk)
         if(Ptopo_myproc.eq.0) write(Lun_out,*) '-----------------------'
      endif
*
*     ----------------------------------------------------------------
*     Conversion from GEM units to 3D-Var units and Reverse Staggering
*     ----------------------------------------------------------------
*     Direct (nonlinear)
*     ------------------
      if(V4dg_di_L) then
*     
         call v4d_varconv(wijk1,wijk2,wijk3,wijk4,wij5,LDIST_DIM,l_nk,.FALSE.)
*
*     TLM
*     ---
      elseif(V4dg_tl_L) then
*     
         call v4d_varconv_tl(wijk1,wijk2,wijk3,wijk4,wij5,
     %                       tpt1m,hut1m,st1m,LDIST_DIM,l_nk,.FALSE.)
*     
      end if
*
      if(plpr_L) then
         if(Ptopo_myproc.eq.0) write(Lun_out,*) 'BEFORE PROFILE'
         call glbstat(wijk1,'UU',LDIST_DIM,G_nk,1,G_ni,1,G_nj,1,G_nk)
         call glbstat(wijk2,'VV',LDIST_DIM,G_nk,1,G_ni,1,G_nj-1,1,G_nk)
         call glbstat(wijk3,'TP',LDIST_DIM,G_nk,1,G_ni,1,G_nj,1,G_nk)
         call glbstat(wij5 ,'4S',LDIST_DIM,   1,1,G_ni,1,G_nj,1,   1)
         call glbstat(wijk4,'HU',LDIST_DIM,G_nk,1,G_ni,1,G_nj,1,G_nk)
         if(Ptopo_myproc.eq.0) write(Lun_out,*) '-----------------------'
      endif
*
*     -------------------------------------------
*     Evaluate profiles at observations locations
*     -------------------------------------------
*
*     --------------------------------
*     Contribution from U-V components  
*     --------------------------------
      npr = Pr_l_mv(V3D_UTRU,ntime) % nprof
      write(Lun_out,*) 'Evaluate profiles UV at OBSTIME = ',ntime,
     %                 'Number of profiles = ',npr 
*
      if(npr.ne.0) then
*
        allocate ( profx(l_nk,npr), profy(l_nk,npr) ) 
        allocate (gomu_8(l_nk,npr),gomv_8(l_nk,npr) )
*
      endif
*
*     Interpolation to observation locations using EZSCINT
*     ----------------------------------------------------
      call v4d_uvint0 (profx,profy,Pr_l_mv(V3D_UTRU,ntime)%px,Pr_l_mv(V3D_UTRU,ntime)%py,npr,
     %                 wijk1,wijk2,V4dz_ax,V4dz_ay,V4dz_cx,V4dz_cy,Adw_wx_8,Adw_cx_8,Adw_sx_8,Adw_sy_8,
     %                 i1,i2,j1,j2,l_nk,V4dz_grtypi,V4dz_degree,'UV')
*
      if(npr.ne.0) then
*
*       Store UU profiles 
*       -----------------
        do j = 1, npr
           do k = 1, l_nk
              gomu_8(k,j) = dble(profx(k,j))
           enddo
        enddo
*
        call v4d_putfld ('UU',kstatus,gomu_8,l_nk,npr,V3D_UTRU)
*
        deallocate (profx,gomu_8)
*
*       Store VV profiles 
*       -----------------
        do j = 1, npr
          do k = 1, l_nk
             gomv_8(k,j) = dble(profy(k,j))
          enddo
        enddo
*
        call v4d_putfld ('VV',kstatus,gomv_8,l_nk,npr,V3D_VTRU)
*
        deallocate (profy,gomv_8)
*
      endif ! if (npr.ne.0)
*
*     -----------------------------
*     Contribution from temperature  
*     -----------------------------
      npr = Pr_l_mv(V3D_TEMP,ntime) % nprof
      write(Lun_out,*) 'Evaluate profiles TT at OBSTIME = ',ntime,
     %                 'Number of profiles = ',npr 
*
      if(npr.ne.0) allocate (profx(l_nk,npr), gomt_8(l_nk,npr))
*
*     Interpolation to observation locations using EZSCINT
*     ----------------------------------------------------
      call v4d_scint0 (profx,Pr_l_mv(V3D_TEMP,ntime)%px,Pr_l_mv(V3D_TEMP,ntime)%py,npr,
     %                 wijk3,V4dz_ax,V4dz_ay,V4dz_cx,V4dz_cy,Adw_wx_8,i1,i2,j1,j2,l_nk,
     %                 V4dz_grtypi,V4dz_degree,'TT')
*
      if(npr.ne.0) then
*
*       Store Temp. profiles 
*       --------------------
        do j = 1, npr
          do k = 1, l_nk
             gomt_8(k,j) = dble(profx(k,j))
          enddo
        enddo
*
        call v4d_putfld ('TT',kstatus,gomt_8,l_nk,npr,V3D_TEMP)
*
        deallocate (profx,gomt_8)
*
      endif ! if (npr.ne.0)
*
*     --------------------------
*     Contribution from humidity  
*     --------------------------
      npr = Pr_l_mv(V3D_SPHU,ntime) % nprof
      write(Lun_out,*) 'Evaluate profiles HU at OBSTIME = ',ntime,
     %                 'Number of profiles = ',npr 
*
      if(npr.ne.0) allocate (profx(l_nk,npr), gomq_8(l_nk,npr))
*
*     Interpolation to observation locations using EZSCINT
*     ----------------------------------------------------
      call v4d_scint0 (profx,Pr_l_mv(V3D_SPHU,ntime)%px,Pr_l_mv(V3D_SPHU,ntime)%py,npr,
     %                 wijk4,V4dz_ax,V4dz_ay,V4dz_cx,V4dz_cy,Adw_wx_8,i1,i2,j1,j2,l_nk,
     %                 V4dz_grtypi,V4dz_degree,'HU')
*
      if(npr.ne.0) then
*
*       Store Humidity profiles 
*       -----------------------
        do j = 1, npr
          do k = 1, l_nk
             gomq_8(k,j) = dble(profx(k,j))
          enddo
        enddo
*
        call v4d_putfld ('HU',kstatus,gomq_8,l_nk,npr,V3D_SPHU)
*
        deallocate (profx,gomq_8)
*
      endif ! if (npr.ne.0)
*
*     ----------------------------------
*     Contribution from surface pressure  
*     ----------------------------------
      npr = Pr_l_mv(V2D_PSUR,ntime) % nprof
      write(Lun_out,*) 'Evaluate profiles PS at OBSTIME = ',ntime,
     %                 'Number of profiles = ',npr 
*
      if(npr.ne.0) allocate (prof2d(1,npr), gomps_8(1,npr))
*
*     Interpolation to observation locations using EZSCINT
*     ----------------------------------------------------
      call v4d_scint0 (prof2d,Pr_l_mv(V2D_PSUR,ntime)%px,Pr_l_mv(V2D_PSUR,ntime)%py,npr,
     %                 wij5,V4dz_ax,V4dz_ay,V4dz_cx,V4dz_cy,Adw_wx_8,i1,i2,j1,j2,1,
     %                 V4dz_grtypi,V4dz_degree,'4S')
*
      if(npr.ne.0) then
*
*       Store Psurf. profiles 
*       ---------------------
        do j=1,npr
           gomps_8(1,j) = dble(prof2d(1,j))
        enddo
*
        call v4d_putfld ('SP',kstatus,gomps_8,1,npr,V2D_PSUR)
*
        deallocate (prof2d,gomps_8)
*
      endif ! if (npr.ne.0)
*
      pnerr = vmmuld(-1,0)
*
      write(Lun_out,1001) Lctl_step
*
      return
*
 1000 format(/,'V4D_CSTJOK_TL: Beginning for TIMESTEP = ',I8,
     +       /,'=====================================')
 1001 format(/,'V4D_CSTJOK_TL:    Ending for TIMESTEP = ',I8,
     +       /,'=====================================')
*
      contains
      subroutine v4d_putfld (cdvar,kstatus,gomvar_8,kdim,kobs,indexvar)
*
#include "impnone.cdk"
*
      character*2,INTENT(IN):: cdvar
      integer, INTENT(INOUT) :: kstatus
      integer, INTENT(IN):: kdim,kobs,indexvar
      real*8,  INTENT(IN):: gomvar_8(kdim,kobs)
*
*author
*     P. Gauthier
*
*revision
* v3_00 - P. Gauthier        - initial MPI version
* v3_00   M. Tanguay         - adapt to Simon's exchange
*
*object
*
*arguments
* Name         I/O                 Description
*----------------------------------------------------------------
* cdvar        I                   Type of profiles 
* kstatus      O                   Status of the job
* gomvar_8     I                   Model profiles     
* kdim         I                   Vertical dimension of px_8 
* kobs         I                   Number of observed profiles 
* indexvar     I                   Index of variable 
*----------------------------------------------------------------
*
      integer icma
*
*     Store simulation no. in each PROF record
*     ----------------------------------------
      istat = prof_pvar (Pr_ihdlout, Pr_nsim4d, PRM_EVNT)
*
*     Store number of processors in X and Y in each PROF record
*     ---------------------------------------------------------
      istat = prof_pvar (Pr_ihdlout, indy, PRM_PEXY )
*
*     Store profiles of the variable 
*     ------------------------------
      icma = 0
      icma = ibset ( icma, indexvar )
      istat = prof_pvar (Pr_ihdlout, icma, PRM_MVAR )
      istat = prof_pvar (Pr_ihdlout, Pr_l_mv(indexvar,ntime) % obstag, V2D_OTAG )
      istat = prof_pvar (Pr_ihdlout, Pr_l_mv(indexvar,ntime) % mdltag, V2D_MTAG )
      istat = prof_pvar (Pr_ihdlout, gomvar_8, indexvar )
      istat = prof_wrrec(Pr_ihdlout)
*
      end subroutine v4d_putfld
      end subroutine v4d_cstjok
