***s/r hspng_main - applies del-2 horizontal diffusion on the poles
*                   for Hspng_nj rows with the diffusion coefficient Hspng_mf
*
#include "model_macros_f.h"
*
      subroutine hspng_main
*
#include "impnone.cdk"
*
*author
*     Michel Desgagne  - (vspng_main v2_30)
*
*revision
* v3_01 - Lee V.            - initial version for hspng_main
*
*object
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cstv.cdk"
#include "hspng.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "p_geof.cdk"
#include "type.cdk"
#include "ver.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer pnerr, pnlod, pnlkey1(6), i, j, k
      real wk0(LDIST_SHAPE), wk1(LDIST_SHAPE)
      real*8  ONE_8, bbb_8, eta_8
      parameter( ONE_8 = 1. )
**
*     _________________________________________________________________
*
      if (Hspng_nj.lt.1) return
      if (Lun_debug_L) write (Lun_out,1000) Hspng_nj
*
      pnlkey1(1)  = VMM_KEY(ut1)
      pnlkey1(2)  = VMM_KEY(vt1)
      pnlkey1(3)  = VMM_KEY(tt1)
      pnlkey1(4) = VMM_KEY(st1)
      pnlkey1(5) = VMM_KEY(st0)
      pnlod = 5
      if (.not. Schm_hydro_L) then
         pnlkey1(6) = VMM_KEY(wt1)
         pnlod = 6
      endif
*     - - - - - - - - - - - - - - -
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(st1)
      pnerr = VMM_GET_VAR(st0)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(wt1)
      else
         wt1_  = 0
      endif
*
*
      call hspng_drv ( ut1, vt1, tt1, wt1, LDIST_DIM, G_nk)
*
*
      if (Cstv_phidf_8.gt.0.) then
*
*     Adjust surface pressure and hence pi' (FOR CLIMATE APPLICATIONS) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (Schm_psadj_L) then
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            wk0(i,j) = st0(i,j)
            wk1(i,j) = st1(i,j)
         end do
         call vsexp (wk0(1+pil_w,j),wk0(1+pil_w,j),(l_ni-pil_e-pil_w))
         call vsexp (wk1(1+pil_w,j),wk1(1+pil_w,j),(l_ni-pil_e-pil_w))
         do i= 1+pil_w, l_ni-pil_e
            wk0(i,j) = (wk0(i,j)-1.)*Cstv_pisrf_8
            wk1(i,j) = (wk1(i,j)-1.)*Cstv_pisrf_8
         end do
         end do
*
         call horwavg ( bbb_8, wk0, wk1, LDIST_DIM )
*
*        Redistribute the average mass loss at the surface, ...
*
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            wk1(i,j) = wk1(i,j) + bbb_8
         end do
         end do
*
*        ... correct s immediately and ...
*
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            st1(i,j)= log(ONE_8+wk1(i,j)/Cstv_pisrf_8)
         end do
         end do
*
      endif
*
      endif
*
      pnerr = vmmuld(-1,0)
*    
 1000 format(/,3X,
     $ 'DEL-2 SPONGE LAYER ON THE POLES FOR ',I3,' ROWS: (S/R HSPNG_MAIN)')
*
      return
      end
