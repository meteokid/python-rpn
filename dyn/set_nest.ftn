***s/r set_nest - initialization of the commons for nesting variables
*		  within the Virtual Memory manager (VMM)
*
#include "model_macros_f.h"
*
      subroutine set_nest
#include "impnone.cdk"
*
*author
*     Desgagne/Lee -        spring 2002
*
*revision
* v3_00 - Desgagne/Lee      - initial version
* v3_20 - Lee V.            - shorten length of vmmname for psd
*object
*	This subroutine initializes the commons containing the
*	keys used by the Virtual Memory Manager to identify the
*	nesting variables
*	
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "nest.cdk" 
#include "tr3d.cdk"
#include "schm.cdk"
#include "pilot.cdk"
*
*modules
      integer vmmcre
      external vmmcre
      character*80 ptath
      integer i
*
**
*
*     ---------------------------------------------------------------
*
      if (Lun_out.gt.0) write (Lun_out,1000)
*
      COMMON_INIT(nest,-100)
*
*	Assign the names of the variables
*
      VMM_NAM(nest_u   ) = 'NEST_U'
      VMM_NAM(nest_v   ) = 'NEST_V'
      VMM_NAM(nest_t   ) = 'NEST_T'
      VMM_NAM(nest_psd ) = 'NEST_PSD'
      VMM_NAM(nest_w   ) = 'NEST_W'
      VMM_NAM(nest_s   ) = 'NEST_S'
      VMM_NAM(nest_qsec) = 'NEST_QSEC'
      VMM_NAM(nest_tr  ) = 'NEST_TR'
      VMM_NAM(nest_uf   ) = 'NEST_UF'
      VMM_NAM(nest_vf   ) = 'NEST_VF'
      VMM_NAM(nest_tf   ) = 'NEST_TF'
      VMM_NAM(nest_psdf ) = 'NST_PSDF'
      VMM_NAM(nest_wf   ) = 'NEST_WF'
      VMM_NAM(nest_sf   ) = 'NEST_SF'
      VMM_NAM(nest_qsecf) = 'NEST_QSECF'
      VMM_NAM(nest_trf  ) = 'NEST_TRF'
      VMM_NAM(nest_ux   ) = 'NEST_UX'
      VMM_NAM(nest_vx   ) = 'NEST_VX'
      VMM_NAM(nest_tx   ) = 'NEST_TX'
      VMM_NAM(nest_psdx ) = 'NST_PSDX'
      VMM_NAM(nest_wx   ) = 'NEST_WX'
      VMM_NAM(nest_sx   ) = 'NEST_SX'
      VMM_NAM(nest_qsecx) = 'NEST_QSECX'
      VMM_NAM(nest_trx  ) = 'NEST_TRX'
*
*  Set the attributes of the variables
*
      ptath='SAVE=Y,CL=1,W=5,INIT=0,MUSTEXIST'
*
      VMM_CREATE(nest_u   , LARRAY3D, 1, ptath)
      VMM_CREATE(nest_v   , LARRAY3D, 1, ptath)
      VMM_CREATE(nest_t   , LARRAY2D*(l_nk+1), 1, ptath)
      VMM_CREATE(nest_psd , LARRAY2D*(l_nk+1), 1, ptath)
      VMM_CREATE(nest_s   , LARRAY2D, 1, ptath)
      if (.not. Pil_ctebcs_L) then
         VMM_CREATE(nest_uf   , LARRAY3D, 1, ptath)
         VMM_CREATE(nest_vf   , LARRAY3D, 1, ptath)
         VMM_CREATE(nest_tf   , LARRAY2D*(l_nk+1), 1, ptath)
         VMM_CREATE(nest_psdf , LARRAY2D*(l_nk+1), 1, ptath)
         VMM_CREATE(nest_sf   , LARRAY2D, 1, ptath)
      endif
      if (.not. Schm_theoc_L) then
         VMM_CREATE(nest_ux   , LARRAY3D, 1, ptath)
         VMM_CREATE(nest_vx   , LARRAY3D, 1, ptath)
         VMM_CREATE(nest_tx   , LARRAY2D*(l_nk+1), 1, ptath)
         VMM_CREATE(nest_psdx , LARRAY2D*(l_nk+1), 1, ptath)
         VMM_CREATE(nest_sx   , LARRAY2D, 1, ptath)
      endif
      if (.not. Schm_hydro_L) then
         VMM_CREATE(nest_w   , LARRAY2D*(l_nk+1), 1, ptath)
         VMM_CREATE(nest_qsec, LARRAY2D*(l_nk+2), 1, ptath)
         if (.not. Pil_ctebcs_L) then
            VMM_CREATE(nest_wf   , LARRAY2D*(l_nk+1), 1, ptath)
            VMM_CREATE(nest_qsecf, LARRAY2D*(l_nk+2), 1, ptath)
         endif
         if (.not. Schm_theoc_L) then
            VMM_CREATE(nest_wx   , LARRAY2D*(l_nk+1), 1, ptath)
            VMM_CREATE(nest_qsecx, LARRAY2D*(l_nk+2), 1, ptath)
         endif
      endif
      if ( Tr3d_ntr .gt. 0 ) then
         VMM_CREATE(nest_tr  , LARRAY2D*(l_nk+1), Tr3d_ntr, ptath)
         if (.not. Pil_ctebcs_L)
     %   VMM_CREATE(nest_trf  , LARRAY2D*(l_nk+1), Tr3d_ntr, ptath)
         if (.not. Schm_theoc_L)
     %   VMM_CREATE(nest_trx  , LARRAY2D*(l_nk+1), Tr3d_ntr, ptath)
      endif
*
 1000 format(
     +/,'INITIALIZATION OF NESTING VARIABLE COMDECKS (S/R SET_NEST)',
     +/,'=========================================================')
*
*     ---------------------------------------------------------------
*
      return
      end
