!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r set_nest - initialization of the commons for nesting variables
*		  within the Virtual Memory manager (VMM)
*
#define SPY_VMM_CREATE spy_vmm_create
#include "model_macros_f.h"
*
      subroutine set_nest
      implicit none
*
*author
*     Desgagne/Lee -        spring 2002
*
*revision
* v3_00 - Desgagne/Lee      - initial version
* v3_20 - Lee V.            - shorten length of vmmname for zd
* v3_30 - Lee V.            - remove some VMM variables
* v4_05 - Lepine M.         - VMM replacement with GMM
* v4_10 - Tanguay M.        - Adjust digital filter when LAM
*object
*	This subroutine initializes the commons containing the
*	keys used by the Virtual Memory Manager to identify the
*	nesting variables
*	
*arguments
*	none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "nest.cdk" 
#include "tr3d.cdk"
#include "schm.cdk"
#include "lam.cdk"
#include "init.cdk"
*
      character*16 tr_name
      integer i
      real, pointer, dimension (:,:,:) :: tr
**
*     ---------------------------------------------------------------
*
      if (Lun_out.gt.0) write (Lun_out,1000)
*
*	Assign the names of the variables
*
      gmmk_nest_u_s  = 'NEST_U'
      gmmk_nest_v_s  = 'NEST_V'
      gmmk_nest_t_s  = 'NEST_T'
      gmmk_nest_zd_s = 'NEST_ZD'
      gmmk_nest_w_s  = 'NEST_W'
      gmmk_nest_s_s  = 'NEST_S'
      gmmk_nest_q_s  = 'NEST_Q'
*
      gmmk_nest_uf_s = 'NEST_UF'
      gmmk_nest_vf_s = 'NEST_VF'
      gmmk_nest_tf_s = 'NEST_TF'
      gmmk_nest_zdf_s= 'NEST_ZDF'
      gmmk_nest_wf_s = 'NEST_WF'
      gmmk_nest_sf_s = 'NEST_SF'
      gmmk_nest_qf_s = 'NEST_QF'
*
      nullify(nest_u ,nest_v ,nest_w ,nest_t ,nest_zd ,nest_s ,nest_q )
      nullify(nest_uf,nest_vf,nest_wf,nest_tf,nest_zdf,nest_sf,nest_qf)
*
      gmmstat = gmm_create(gmmk_nest_u_s, nest_u, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_u )'
      gmmstat = gmm_create(gmmk_nest_v_s, nest_v, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_v )'
      gmmstat = gmm_create(gmmk_nest_w_s, nest_w, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_w )'
      gmmstat = gmm_create(gmmk_nest_t_s, nest_t, meta3d_nk2,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_t )'
      gmmstat = gmm_create(gmmk_nest_zd_s,nest_zd,meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_zd)'
      gmmstat = gmm_create(gmmk_nest_s_s, nest_s, meta2d    ,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_s )'
*
      if (.not. Lam_ctebcs_L) then
         gmmstat = gmm_create(gmmk_nest_uf_s, nest_uf, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_uf )'
         gmmstat = gmm_create(gmmk_nest_vf_s, nest_vf, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_vf )'
         gmmstat = gmm_create(gmmk_nest_wf_s, nest_wf, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_wf )'
         gmmstat = gmm_create(gmmk_nest_tf_s, nest_tf, meta3d_nk2,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_tf )'
         gmmstat = gmm_create(gmmk_nest_zdf_s,nest_zdf,meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_zdf)'
         gmmstat = gmm_create(gmmk_nest_sf_s, nest_sf, meta2d    ,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_sf )'
      endif
*
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_create(gmmk_nest_q_s,nest_q,meta3d_0nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_q)'
         if (.not. Lam_ctebcs_L) then
            gmmstat = gmm_create(gmmk_nest_qf_s,nest_qf,meta3d_0nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
            if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_qf)'
         endif
      endif
*
      do i=1,Tr3d_ntr
         tr_name = Tr3d_name_S(i)
         nullify(tr)
         gmmstat = gmm_create('NEST/'//trim(tr_name)//':C',tr,meta3d_nk2,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         nullify(tr)
         gmmstat = gmm_create('NEST/'//trim(tr_name)//':F',tr,meta3d_nk2,GMM_FLAG_RSTR+GMM_FLAG_IZER)
      end do
*
      if (G_lam.and.Init_balgm_L) then
         gmmk_nest_u2_s = 'NEST_U2'
         gmmk_nest_v2_s = 'NEST_V2'
         gmmk_nest_t2_s = 'NEST_T2'
         gmmk_nest_zd2_s= 'NEST_ZD2'
         gmmk_nest_w2_s = 'NEST_W2'
         gmmk_nest_s2_s = 'NEST_S2'
         gmmk_nest_q2_s = 'NEST_Q2'
         nullify (nest_u2,nest_v2,nest_w2,nest_t2,nest_zd2,nest_s2,nest_q2)
         gmmstat = gmm_create(gmmk_nest_u2_s, nest_u2, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_u2 )'
         gmmstat = gmm_create(gmmk_nest_v2_s, nest_v2, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_v2 )'
         gmmstat = gmm_create(gmmk_nest_w2_s, nest_w2, meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_w2 )'
         gmmstat = gmm_create(gmmk_nest_t2_s, nest_t2, meta3d_nk2,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_t2 )'
         gmmstat = gmm_create(gmmk_nest_zd2_s,nest_zd2,meta3d_nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_zd2)'
         gmmstat = gmm_create(gmmk_nest_s2_s, nest_s2, meta2d    ,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_s2 )'
         if (.not. Schm_hydro_L) then 
            gmmstat = gmm_create(gmmk_nest_q2_s,nest_q2,meta3d_0nk1,GMM_FLAG_RSTR+GMM_FLAG_IZER)
            if (GMM_IS_ERROR(gmmstat)) print *,'set_nest ERROR at gmm_create(nest_q2)'
         endif
         do i=1,Tr3d_ntr
            tr_name = Tr3d_name_S(i)
            nullify(tr)
            gmmstat = gmm_create('NEST/'//trim(tr_name)//':S',tr,meta3d_nk2,GMM_FLAG_RSTR+GMM_FLAG_IZER)
         end do
      endif
*
 1000 format(
     +/,'INITIALIZATION OF NESTING VARIABLE COMDECKS (S/R SET_NEST)',
     +/,'=========================================================')
*
*     ---------------------------------------------------------------
*
      return
      end
