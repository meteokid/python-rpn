***s/r mirror - mirror boundary condition for BUBBLE theoretical
*               case
*
#include "model_macros_f.h"
*
      subroutine mirror ()
      implicit none
*author 
*     Gravel              - spring 2003 (after MC2 v_4.9.3)
*
*revision
* v3_11 - Gravel             - initial version
*
*object
*
*arguments
*       none
*
*implicits
#include "glb_ld.cdk"
#include "vt0.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "lun.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer err,key(7),i,j,k,km,kt,nvar
      integer ii, iin, jj, jin
      integer key0(Tr3d_ntr),key0_,n
      real tr0
      pointer (patr0,tr0(LDIST_SHAPE,*))
*----------------------------------------------------------------------
*
      key(1)=VMM_KEY(ut0)
      key(2)=VMM_KEY(vt0)
      key(3)=VMM_KEY(tt0)
      key(4)=VMM_KEY(psdt0)
      key(5)=VMM_KEY(qsect0)
      key(6)=VMM_KEY(st0)
      nvar = 6
*
      if (.not.Schm_hydro_L) then
         key(7)=VMM_KEY(wt0)
         nvar = 7
      endif
*
      err = vmmlod(key,nvar)
      err = VMM_GET_VAR(ut0)
      err = VMM_GET_VAR(vt0)
      err = VMM_GET_VAR(tt0)
      err = VMM_GET_VAR(psdt0)
      err = VMM_GET_VAR(qsect0)
      err = VMM_GET_VAR(st0)
      if (.not.Schm_hydro_L) then
         err = VMM_GET_VAR(wt0)
      endif
*
      if (l_north) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do i=1,l_ni
               vt0  (i,l_nj-pil_n,km) = 0.
            end do
            do j=1,pil_n-1
            jin = max(pil_s+1,l_nj-pil_n-j)
            jj = l_nj-pil_n+j
            do i=1,l_ni
               vt0  (i,jj,km) = - vt0  (i,jin,km)
            end do
            end do
            do j=1,pil_n
            jin = max(pil_s+1,l_nj-pil_n-j+1)
            jj  = l_nj-pil_n+j
            do i=1,l_ni
               tt0   (i,jj,kt) = tt0   (i,jin,kt)
               psdt0 (i,jj,kt) = psdt0 (i,jin,kt)
               qsect0(i,jj,k)  = qsect0(i,jin,k)            
            end do
            do i=1,l_niu
               ut0   (i,jj,km) = ut0   (i,jin,km)
            end do
            end do
         end do
         do j=1,pil_n
         jin = max(pil_s+1,l_nj-pil_n-j+1)
         jj  = l_nj-pil_n+j
         do i=1,l_ni
            st0  (i,jj) = st0  (i,jin)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,pil_n
            jin = max(pil_s+1,l_nj-pil_n-j+1)
            jj  = l_nj-pil_n+j
            do i=1,l_ni
               wt0 (i,jj,k) = wt0 (i,jin,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_east) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do j=1,l_nj
               ut0  (l_ni-pil_e,j,km) = 0.
            end do
            do j=1,l_nj
            do i=1,pil_e-1
               iin = max(pil_w+1,l_ni-pil_e-i)
               ii  = l_ni-pil_e+i
               ut0  (ii,j,km) = - ut0  (iin,j,km)
            end do
            end do
            do j=1,l_nj
            do i=1,pil_e
               iin = max(pil_w+1,l_ni-pil_e-i+1)
               ii  = l_ni-pil_e+i
               tt0   (ii,j,kt) = tt0   (iin,j,kt)
               psdt0 (ii,j,kt) = psdt0 (iin,j,kt)
               qsect0(ii,j,k)  = qsect0(iin,j,k)            
            end do
            end do
            do j=1,l_njv
            do i=1,pil_e
               iin = max(pil_w+1,l_ni-pil_e-i+1)
               ii  = l_ni-pil_e+i
               vt0  (ii,j,km) = vt0  (iin,j,km)
            end do
            end do
         end do
         do j=1,l_nj
         do i=1,pil_e
            iin = max(pil_w+1,l_ni-pil_e-i+1)
            ii  = l_ni-pil_e+i
            st0  (ii,j) = st0  (iin,j)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,l_nj
            do i=1,pil_e
               iin = max(pil_w+1,l_ni-pil_e-i+1)
               ii  = l_ni-pil_e+i
               wt0 (ii,j,k) = wt0 (iin,j,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_south) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do i=1,l_ni
               vt0  (i,pil_s,km) = 0.
            end do
            do j=1,pil_s-1
            jin = min(l_nj-pil_n-1,pil_s+j)
            jj  = pil_s-j
            do i=1,l_ni
               vt0  (i,jj,km) = - vt0 (i,jin,km)
            end do
            end do
            do j=1,pil_s
            jin = min(l_nj-pil_n,pil_s+j)
            jj  = pil_s-j+1
            do i=1,l_ni
               tt0   (i,jj,kt) = tt0   (i,jin,kt)
               psdt0 (i,jj,kt) = psdt0 (i,jin,kt)
               qsect0(i,jj,k)  = qsect0(i,jin,k)            
            end do
            do i=1,l_niu
               ut0  (i,jj,km) = ut0  (i,jin,km)
            end do
            end do
         end do
         do j=1,pil_s
         jin = min(l_nj-pil_n,pil_s+j)
         jj  = pil_s-j+1
         do i=1,l_ni
            st0  (i,jj) = st0  (i,jin)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,pil_s
            jin = min(l_nj-pil_n,pil_s+j)
            jj  = pil_s-j+1
            do i=1,l_ni
               wt0 (i,jj,k) = wt0 (i,jin,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_west) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do j=1,l_nj
               ut0  (pil_w,j,km) = 0.
            end do
            do j=1,l_nj
            do i=1,pil_w-1
               iin = min(l_ni-pil_e-1,pil_w+i)
               ii  = pil_w-i
               ut0  (ii,j,km) = - ut0  (iin,j,km)
            end do
            end do
            do j=1,l_nj
            do i=1,pil_w
               iin = min(l_ni-pil_e,pil_w+i)
               ii  = pil_w-i+1
               tt0   (ii,j,kt) = tt0   (iin,j,kt)
               psdt0 (ii,j,kt) = psdt0 (iin,j,kt)
               qsect0(ii,j,k)  = qsect0(iin,j,k)            
            end do
            end do
            do j=1,l_njv
            do i=1,pil_w
               iin = min(l_ni-pil_e,pil_w+i)
               ii  = pil_w-i+1
               vt0  (ii,j,km) = vt0  (iin,j,km)
            end do
            end do
         end do
         do j=1,l_nj
         do i=1,pil_w
            iin = min(l_ni-pil_e,pil_w+i)
            ii  = pil_w-i+1
            st0  (ii,j) = st0  (iin,j)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,l_nj
            do i=1,pil_w
               iin = min(l_ni-pil_e,pil_w+i)
               ii  = pil_w-i+1
               wt0 (ii,j,k) = wt0 (iin,j,k)
            end do
            end do
            end do
         endif
      endif
*
      err = vmmuld(key,nvar)
*
      key0_ = VMM_KEY (trt0)
      do n=1,Tr3d_ntr
         key0(n) = key0_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key0,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key0(n),patr0,tr0)
            if (l_north) then
                do k=1,G_nk+1
                   do j=1,pil_n
                   jin = max(pil_s+1,l_nj-pil_n-j+1)
                   jj  = l_nj-pil_n+j
                   do i=1,l_ni
                      tr0  (i,jj,k) = tr0 (i,jin,k)
                   enddo
                   enddo
                enddo
            endif
            if (l_east) then
                do k=1,G_nk+1
                   do j=1,l_nj
                   do i=1,pil_e
                      iin = max(pil_w+1,l_ni-pil_e-i+1)
                      ii  = l_ni-pil_e+i
                      tr0  (ii,j,k) = tr0 (iin,j,k)
                   enddo
                   enddo
                enddo
            endif
            if (l_south) then
                do k=1,G_nk+1
                   do j=1,pil_s
                   jin = min(l_nj-pil_n,pil_s+j)
                   jj  = pil_s-j+1
                   do i=1,l_ni
                      tr0  (i,jj,k) = tr0 (i,jin,k)
                   enddo
                   enddo
                enddo
            endif
            if (l_west) then
                do k=1,G_nk+1
                   do j=1,l_nj
                   do i=1,pil_w
                      iin = min(l_ni-pil_e,pil_w+i)
                      ii  = pil_w-i+1
                      tr0  (ii,j,k) = tr0 (iin,j,k)
                   enddo
                   enddo
                enddo
            endif
         enddo
         err = vmmuld(key0,Tr3d_ntr)
      endif
*
*----------------------------------------------------------------------
      return
      end
