***s/r mirror - mirror boundary condition for BUBBLE theoretical
*               case
*
#include "model_macros_f.h"
*
      subroutine mirror ()
      implicit none
*author 
*     Gravel              - spring 2003 (after MC2 v_4.9.3)
*
*revision
* v3_11 - Gravel             - initial version
*
*object
*
*arguments
*       none
*
*implicits
#include "glb_ld.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "lun.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer err,key(7),i,j,k,km,kt,nvar
      integer ii, iin, jj, jin
      integer key1(Tr3d_ntr),key1_,n
      real tr1
      pointer (patr1,tr1(LDIST_SHAPE,*))
*----------------------------------------------------------------------
*
      key(1)=VMM_KEY(ut1)
      key(2)=VMM_KEY(vt1)
      key(3)=VMM_KEY(tt1)
      key(4)=VMM_KEY(zdt1)
      key(5)=VMM_KEY(qt1)
      key(6)=VMM_KEY(st1)
      nvar = 6
*
      if (.not.Schm_hydro_L) then
         key(7)=VMM_KEY(wt1)
         nvar = 7
      endif
*
      err = vmmlod(key,nvar)
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(zdt1)
      err = VMM_GET_VAR(qt1)
      err = VMM_GET_VAR(st1)
      if (.not.Schm_hydro_L) then
         err = VMM_GET_VAR(wt1)
      endif
*
      if (l_north) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do i=1,l_ni
               vt1  (i,l_nj-pil_n,km) = 0.
            end do
            do j=1,pil_n-1
            jin = max(pil_s+1,l_nj-pil_n-j)
            jj = l_nj-pil_n+j
            do i=1,l_ni
               vt1  (i,jj,km) = - vt1  (i,jin,km)
            end do
            end do
            do j=1,pil_n
            jin = max(pil_s+1,l_nj-pil_n-j+1)
            jj  = l_nj-pil_n+j
            do i=1,l_ni
               tt1   (i,jj,kt) = tt1   (i,jin,kt)
               zdt1 (i,jj,kt) = zdt1 (i,jin,kt)
               qt1(i,jj,k)  = qt1(i,jin,k)            
            end do
            do i=1,l_niu
               ut1   (i,jj,km) = ut1   (i,jin,km)
            end do
            end do
         end do
         do j=1,pil_n
         jin = max(pil_s+1,l_nj-pil_n-j+1)
         jj  = l_nj-pil_n+j
         do i=1,l_ni
            st1  (i,jj) = st1  (i,jin)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,pil_n
            jin = max(pil_s+1,l_nj-pil_n-j+1)
            jj  = l_nj-pil_n+j
            do i=1,l_ni
               wt1 (i,jj,k) = wt1 (i,jin,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_east) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do j=1,l_nj
               ut1  (l_ni-pil_e,j,km) = 0.
            end do
            do j=1,l_nj
            do i=1,pil_e-1
               iin = max(pil_w+1,l_ni-pil_e-i)
               ii  = l_ni-pil_e+i
               ut1  (ii,j,km) = - ut1  (iin,j,km)
            end do
            end do
            do j=1,l_nj
            do i=1,pil_e
               iin = max(pil_w+1,l_ni-pil_e-i+1)
               ii  = l_ni-pil_e+i
               tt1   (ii,j,kt) = tt1   (iin,j,kt)
               zdt1 (ii,j,kt) = zdt1 (iin,j,kt)
               qt1(ii,j,k)  = qt1(iin,j,k)            
            end do
            end do
            do j=1,l_njv
            do i=1,pil_e
               iin = max(pil_w+1,l_ni-pil_e-i+1)
               ii  = l_ni-pil_e+i
               vt1  (ii,j,km) = vt1  (iin,j,km)
            end do
            end do
         end do
         do j=1,l_nj
         do i=1,pil_e
            iin = max(pil_w+1,l_ni-pil_e-i+1)
            ii  = l_ni-pil_e+i
            st1  (ii,j) = st1  (iin,j)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,l_nj
            do i=1,pil_e
               iin = max(pil_w+1,l_ni-pil_e-i+1)
               ii  = l_ni-pil_e+i
               wt1 (ii,j,k) = wt1 (iin,j,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_south) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do i=1,l_ni
               vt1  (i,pil_s,km) = 0.
            end do
            do j=1,pil_s-1
            jin = min(l_nj-pil_n-1,pil_s+j)
            jj  = pil_s-j
            do i=1,l_ni
               vt1  (i,jj,km) = - vt1 (i,jin,km)
            end do
            end do
            do j=1,pil_s
            jin = min(l_nj-pil_n,pil_s+j)
            jj  = pil_s-j+1
            do i=1,l_ni
               tt1   (i,jj,kt) = tt1   (i,jin,kt)
               zdt1 (i,jj,kt) = zdt1 (i,jin,kt)
               qt1(i,jj,k)  = qt1(i,jin,k)            
            end do
            do i=1,l_niu
               ut1  (i,jj,km) = ut1  (i,jin,km)
            end do
            end do
         end do
         do j=1,pil_s
         jin = min(l_nj-pil_n,pil_s+j)
         jj  = pil_s-j+1
         do i=1,l_ni
            st1  (i,jj) = st1  (i,jin)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,pil_s
            jin = min(l_nj-pil_n,pil_s+j)
            jj  = pil_s-j+1
            do i=1,l_ni
               wt1 (i,jj,k) = wt1 (i,jin,k)
            end do
            end do
            end do
         endif
      endif
*
      if (l_west) then
         do k=0,G_nk+1
            km=max(1,min(k,G_nk))
            kt=max(k,1)
            do j=1,l_nj
               ut1  (pil_w,j,km) = 0.
            end do
            do j=1,l_nj
            do i=1,pil_w-1
               iin = min(l_ni-pil_e-1,pil_w+i)
               ii  = pil_w-i
               ut1  (ii,j,km) = - ut1  (iin,j,km)
            end do
            end do
            do j=1,l_nj
            do i=1,pil_w
               iin = min(l_ni-pil_e,pil_w+i)
               ii  = pil_w-i+1
               tt1   (ii,j,kt) = tt1   (iin,j,kt)
               zdt1 (ii,j,kt) = zdt1 (iin,j,kt)
               qt1(ii,j,k)  = qt1(iin,j,k)            
            end do
            end do
            do j=1,l_njv
            do i=1,pil_w
               iin = min(l_ni-pil_e,pil_w+i)
               ii  = pil_w-i+1
               vt1  (ii,j,km) = vt1  (iin,j,km)
            end do
            end do
         end do
         do j=1,l_nj
         do i=1,pil_w
            iin = min(l_ni-pil_e,pil_w+i)
            ii  = pil_w-i+1
            st1  (ii,j) = st1  (iin,j)
         end do
         end do
         if (.not. Schm_hydro_L) then
            do k=1,G_nk+1
            do j=1,l_nj
            do i=1,pil_w
               iin = min(l_ni-pil_e,pil_w+i)
               ii  = pil_w-i+1
               wt1 (ii,j,k) = wt1 (iin,j,k)
            end do
            end do
            end do
         endif
      endif
*
      err = vmmuld(key,nvar)
*
      key1_ = VMM_KEY (trt1)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),patr1,tr1)
            if (l_north) then
                do k=1,G_nk+1
                   do j=1,pil_n
                   jin = max(pil_s+1,l_nj-pil_n-j+1)
                   jj  = l_nj-pil_n+j
                   do i=1,l_ni
                      tr1  (i,jj,k) = tr1 (i,jin,k)
                   enddo
                   enddo
                enddo
            endif
            if (l_east) then
                do k=1,G_nk+1
                   do j=1,l_nj
                   do i=1,pil_e
                      iin = max(pil_w+1,l_ni-pil_e-i+1)
                      ii  = l_ni-pil_e+i
                      tr1  (ii,j,k) = tr1 (iin,j,k)
                   enddo
                   enddo
                enddo
            endif
            if (l_south) then
                do k=1,G_nk+1
                   do j=1,pil_s
                   jin = min(l_nj-pil_n,pil_s+j)
                   jj  = pil_s-j+1
                   do i=1,l_ni
                      tr1  (i,jj,k) = tr1 (i,jin,k)
                   enddo
                   enddo
                enddo
            endif
            if (l_west) then
                do k=1,G_nk+1
                   do j=1,l_nj
                   do i=1,pil_w
                      iin = min(l_ni-pil_e,pil_w+i)
                      ii  = pil_w-i+1
                      tr1  (ii,j,k) = tr1 (iin,j,k)
                   enddo
                   enddo
                enddo
            endif
         enddo
         err = vmmuld(key1,Tr3d_ntr)
      endif
*
*----------------------------------------------------------------------
      return
      end
