***s/r v4d_cststep - Extract fields and evaluate contribution to
*                    cost function at a specific time step
*
#include <model_macros_f.h>
*
      subroutine v4d_cststep 
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - adapt to f90 native dynamic memory allocation 
*
*object
*     see id section 
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "geomn.cdk"
#include "geomg.cdk"
#include "v4dg.cdk"
#include "tr3d.cdk"
#include "v4dj.cdk"
#include "v4d_vmm.cdk"
#include "vt1.cdk"
#include "dcst.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer pnerr,pnlkey1(12),i,j,k
*
      real pr1, prpj
*
      real wijk1(LDIST_SHAPE,l_nk),wijk2(LDIST_SHAPE,l_nk)
*     ______________________________________________________
*
      if ( V4dj_kdcst.ne.2 ) call gefstop('v4d_cststep')
      if ( V4dj_jb   .ne.1 ) call gefstop('v4d_cststep')
*     ______________________________________________________
*
      if( V4dj_jb.eq.1 ) then
*
*     Read OBSERVATIONS 
*     -----------------
      V4dg_rwob = 0
      call v4d_rwobfr (1)
*
      endif
*
*     ---------------------------- 
*     JB with Energy inner product
*     ---------------------------- 
      if( V4dj_kdcst.eq.2.and.V4dj_jb.eq.1 ) then
*
*     Get fields in memory
*     --------------------
      pnlkey1(1) = VMM_KEY(ut1  )
      pnlkey1(2) = VMM_KEY(vt1  )
      pnlkey1(3) = VMM_KEY(tpt1 )
      pnlkey1(4) = VMM_KEY(st1  )
*
      pnlkey1(5) = VMM_KEY(ut1r  )
      pnlkey1(6) = VMM_KEY(vt1r  )
      pnlkey1(7) = VMM_KEY(tpt1r )
      pnlkey1(8) = VMM_KEY(st1r  )
*
      pnlkey1(9) = VMM_KEY(locu )
      pnlkey1(10)= VMM_KEY(locv )
      pnlkey1(11)= VMM_KEY(locg )
      pnlkey1(12)= VMM_KEY(locs )
*
*     - - - - - - - - - - - - -
      pnerr = vmmlod(pnlkey1,12)
*     - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1  )
      pnerr = VMM_GET_VAR(vt1  )
      pnerr = VMM_GET_VAR(tpt1 )
      pnerr = VMM_GET_VAR(st1  )
*
      pnerr = VMM_GET_VAR(ut1r )
      pnerr = VMM_GET_VAR(vt1r )
      pnerr = VMM_GET_VAR(tpt1r)
      pnerr = VMM_GET_VAR(st1r )
*
      pnerr = VMM_GET_VAR(locu )
      pnerr = VMM_GET_VAR(locv )
      pnerr = VMM_GET_VAR(locg )
      pnerr = VMM_GET_VAR(locs )
*
      prpj = 0.
*
*     -----------------------
*     Contribution from winds  
*     -----------------------
*
*     Calculation of real wind components from images
*     -----------------------------------------------
      do j=1,l_nj
         pr1 = Dcst_rayt_8 / geomg_cy_8(j)
         do k=1,l_nk
            do i=1,l_ni
               wijk1(i,j,k) = pr1 * (ut1(i,j,k) - ut1r(i,j,k))
            end do
         end do
      end do
*
      do j=1,l_njv
         pr1 = Dcst_rayt_8 / geomg_cyv_8(j)
         do k=1,l_nk
            do i=1,l_ni
               wijk2(i,j,k) = pr1 * (vt1(i,j,k) - vt1r(i,j,k))
            end do
         end do
      end do
*
      do k = 1,l_nk
      do j = 1,l_nj
      do i = 1,l_ni
      prpj = V4dj_thickxu(i) * V4dj_thicky(j) * V4dj_thickz(k) *
     %       V4dj_uvwt * V4dj_invarea *
     %       locu(i,j,k) *
     %       .5 * ( wijk1(i,j,k) )**2 + prpj
      end do
      end do
      end do
*
      do k = 1,l_nk
      do j = 1,l_njv
      do i = 1,l_ni
      prpj = V4dj_thickx(i) * V4dj_thickyv(j) * V4dj_thickz(k) * 
     %       V4dj_uvwt * V4dj_invarea *
     %       locv(i,j,k) *
     %       .5 * ( wijk2(i,j,k) )**2 + prpj 
      end do
      end do
      end do
*
*     -----------------------------
*     Contribution from temperature  
*     -----------------------------
      do k = 1,l_nk
      do j = 1,l_nj
      do i = 1,l_ni
      prpj = V4dj_thickx(i) * V4dj_thicky(j) * V4dj_thickz(k) * 
     %       V4dj_tpwt * V4dj_invarea *
     %       locg(i,j,k) *
     %       .5 * ( tpt1(i,j,k) - tpt1r(i,j,k) )**2 + prpj 
      end do
      end do
      end do
*
*     ----------------------------------
*     Contribution from surface pressure  
*     ----------------------------------
      do j = 1,l_nj
      do i = 1,l_ni
      prpj = V4dj_thickx(i) * V4dj_thicky(j) *
     %       V4dj_spwt * V4dj_invarea * 
     %       locs(i,j) *
     %       .5 * ( st1(i,j) - st1r(i,j) )**2 + prpj 
      end do
      end do
*
      pnerr = vmmuld(-1,0)
*
      endif
*
      V4dj_pj = V4dj_pj + prpj 
*
      return
      end
