***s/r v4d_cain_ad - ADJ of v4d_cain
*
#include <model_macros_f.h>
*
      subroutine v4d_cain_ad (Ndim,F_px)
*
#include "impnone.cdk"
*
      integer Ndim
      real F_px(Ndim)
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
*                             (based on CAINAD of IFS/ARPEGE)
* v2_31 - Tanguay M.        - adapt for tracers in tr3d  
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration
*
*object
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* Ndim         I                   Dimension of F_px
* F_px         I/O                 Control variable
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt1.cdk"
#include "v4dc.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
      integer pnerr, pnlkey1(5), key1(Tr3d_ntr),
     $        key1_, err, i, j, k, m, n
      real tr
      pointer (patr, tr(LDIST_SHAPE,*))
*
      real z
*
*     Get fields in memory
*     --------------------
      pnlkey1(1) = VMM_KEY(ut1 )
      pnlkey1(2) = VMM_KEY(vt1 )
      pnlkey1(3) = VMM_KEY(tpt1)
      pnlkey1(4) = VMM_KEY(st1 )
      if (.not. Schm_hydro_L) then
          pnlkey1(5) = VMM_KEY(fipt1 )
          pnerr = vmmlod(pnlkey1,5)
      else
          pnerr = vmmlod(pnlkey1,4)
      endif
*
*     - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1 )
      pnerr = VMM_GET_VAR(vt1 )
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(st1 )
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(fipt1 )
      endif
*     - - - - - - - - - - - - -
*
      m = 0
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_niu
         m = m+1
         if(V4dc_scalp(m).eq.0.) then
            z = 0.
         else
            z = 1./V4dc_scalp(m)
         endif
         F_px(m) = F_px(m) + ut1(i,j,k)*z
      end do
      end do
      end do
*
      do k=1,l_nk
      do j=1,l_njv
      do i=1,l_ni
         m = m+1
         if(V4dc_scalp(m).eq.0.) then
            z = 0.
         else
            z = 1./V4dc_scalp(m)
         endif
         F_px(m) = F_px(m) + vt1(i,j,k)*z
      end do
      end do
      end do
*
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
         m = m+1
         if(V4dc_scalp(m).eq.0.) then
            z = 0.
         else
            z = 1./V4dc_scalp(m)
         endif
         F_px(m) = F_px(m) + tpt1(i,j,k)*z
      end do
      end do
      end do
*
      do j=1,l_nj
      do i=1,l_ni
         m = m+1
         if(V4dc_scalp(m).eq.0.) then
            z = 0.
         else
            z = 1./V4dc_scalp(m)
         endif
         F_px(m) = F_px(m) + st1(i,j)*z
      end do
      end do
*
      if (.not. Schm_hydro_L) then
*
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
         m = m+1
         if(V4dc_scalp(m).eq.0.) then
            z = 0.
         else
            z = 1./V4dc_scalp(m)
         endif
         F_px(m) = F_px(m) + fipt1(i,j,k)*z
      end do
      end do
      end do
*
      endif
*
      pnerr = vmmuld(-1,0)
*
      key1_ = VMM_KEY (trt1)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
      end do
*
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),patr,tr)
            do k=1,l_nk
            do j=1,l_nj
            do i=1,l_ni
               m = m+1
               if(V4dc_scalp(m).eq.0.) then
                  z = 0.
               else
                  z = 1./V4dc_scalp(m)
               endif
               F_px(m) = F_px(m) + tr(i,j,k)*z
            end do
            end do
            end do
         end do
         err = vmmuld(key1,Tr3d_ntr)
      endif
*
*     ______________________________________________________
*
      if(m.ne.Ndim) call gem_stop('v4d_cain_ad',-1)
*     ______________________________________________________
*
      return
      end
