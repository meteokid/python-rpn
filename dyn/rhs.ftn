!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r rhs - compute the right-hand sides of governing and derived equations
*
#include "model_macros_f.h"
*
      subroutine rhs()
*
      implicit none
*
*author
*     Alain Patoine - Gabriel Lemay
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of hut1 and qct1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_21 - Desgagne M.       - Revision Openmp
* v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
* v4_05 - Lepine M.         - VMM replacement with GMM
*
*object
***********************************************************************
* See GEMergo4.doc
***********************************************************************
*
*arguments
*        None
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "orh.cdk"
#include "p_geof.cdk" 
#include "rhsc.cdk"
#include "vt1.cdk" 
#include "vtx.cdk" 
#include "nest.cdk"
#include "acid.cdk"
*
*modules
*
      integer  i,j,k
**
*     __________________________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)

      gmmstat = gmm_get(gmmk_ruw1_s,ruw1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(ruw1)'
      gmmstat = gmm_get(gmmk_rvw1_s,rvw1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(rvw1)'
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(wt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_bspqtx_s,bspqtx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(bspqtx)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(st1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(fiptx)'
      gmmstat = gmm_get(gmmk_fipt1_s,fipt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(fipt1)'
      gmmstat = gmm_get(gmmk_orhsu_s,orhsu,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(orhsu)'
      gmmstat = gmm_get(gmmk_orhsv_s,orhsv,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(orhsv)'
      gmmstat = gmm_get(gmmk_orhsc_s,orhsc,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(orhsc)'
      gmmstat = gmm_get(gmmk_orhst_s,orhst,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(orhst)'
      gmmstat = gmm_get(gmmk_orhsf_s,orhsf,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(orhsf)'
      if (G_lam) then
         gmmstat = gmm_get(gmmk_rhsu_s,rhsu,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(rhsu)'
         gmmstat = gmm_get(gmmk_rhsv_s,rhsv,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(rhsv)'
         gmmstat = gmm_get(gmmk_nest_u_s,nest_u,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(nest_u)'
         gmmstat = gmm_get(gmmk_nest_v_s,nest_v,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(nest_v)'
      endif
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_mutx_s,mutx,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(mutx)'
         gmmstat = gmm_get(gmmk_orhsw_s,orhsw,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(orhsw)'
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(qt1)'
      endif

      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs ERROR at gmm_get(topo)'
*
*     Perform the computation in the first 
*     cycle of Crank-Nicholson procedure only
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
      call diag_var( bspqtx, mutx, st1, qt1, 1,l_ni,1,l_nj,l_nk)       
*
      call diag_fip(fiptx, st1, tt1, topo, 1,l_ni,1,l_nj,l_nk)         
*
!$omp parallel
!$omp do
      do k=0,G_nk+1
         do j=1,l_nj
         do i=1,l_ni
            fipt1(i,j,k)=fiptx(i,j,k)
         end do
         end do
      end do
!$omp enddo
!$omp end parallel
*
      if (Acid_test_L)call acid_stat_rhs(fipt1,orhsu,ruw1,orhst,orhsc,1)
*
      call rhsp_2  ( orhsu, orhsv, orhsc,  orhst, orhsw,  orhsf,
     %                ruw1,  rvw1,  rhsu,   rhsv,nest_u, nest_v,
     %                 ut1,   vt1,   wt1,    tt1,   st1,   zdt1,
     %              bspqtx, fiptx,  mutx,
     $               LDIST_DIM,l_nk  )
*     
      if (Acid_test_L)call acid_stat_rhs(fipt1,orhsu,ruw1,orhst,orhsc,2)

C     Pour debug
c      if (Acid_test_L) then
c         call glbstat (orhsc,'rhsc',LDIST_DIM,G_nk  ,1,l_ni,1,l_nj,1,G_nk  )
c         call glbstat (orhst,'rhst',LDIST_DIM,G_nk+1,1,l_ni,1,l_nj,1,G_nk+1)
c         call handle_error0('rhs','rhs',-1)
c      endif

*
1000  format(3X,'COMPUTE THE RIGHT-HAND-SIDES: (S/R RHS)')
*
*     __________________________________________________________________
*
      return
      end
