***s/r rhs - compute rhs of different equations 
*            ( memory management and call to rhsp_2 )
*
#include "model_macros_f.h"
*
      subroutine rhs()
*
      implicit none
*
*author
*     Alain Patoine - Gabriel Lemay
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of hut1 and qct1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_21 - Desgagne M.       - Revision Openmp
* v_stg - Plante A.         - Staggered version
*
*object
***********************************************************************
* See GEMergo4.doc
***********************************************************************
*
*arguments
*        None
*
*implicits
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "orh.cdk"
#include "p_geof.cdk" 
#include "rhsc.cdk"
#include "vt1.cdk" 
#include "vtx.cdk" 
#include "nest.cdk"
#include "func.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer  pnerr, pnlod, pnlkey1(29), i,j,k, longueur
**
*     __________________________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)

      pnlkey1( 1) = VMM_KEY(rhsu)
      pnlkey1( 2) = VMM_KEY(rhsv)
      pnlkey1( 3) = VMM_KEY(rhsc)
      pnlkey1( 4) = VMM_KEY(rhst)
      pnlkey1( 5) = VMM_KEY(orhsu)
      pnlkey1( 6) = VMM_KEY(orhsv)
      pnlkey1( 7) = VMM_KEY(orhsc)
      pnlkey1( 8) = VMM_KEY(orhst)
      pnlkey1( 9) = VMM_KEY(ruw1)
      pnlkey1(10) = VMM_KEY(rvw1)
      pnlkey1(11) = VMM_KEY(ut1)
      pnlkey1(12) = VMM_KEY(vt1)
      pnlkey1(13) = VMM_KEY(tt1)
      pnlkey1(14) = VMM_KEY(bspqtx)
      pnlkey1(15) = VMM_KEY(st1)
      pnlkey1(16) = VMM_KEY(zdt1)
      pnlkey1(17) = VMM_KEY(fiptx)
      pnlkey1(18) = VMM_KEY(topo)
      pnlkey1(19) = VMM_KEY(that_8)
      pnlkey1(20) = VMM_KEY(dlnth_8)
      pnlod = 20
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(rhsw)
         pnlkey1(pnlod+2) = VMM_KEY(rhsf)
         pnlkey1(pnlod+3) = VMM_KEY(orhsw)
         pnlkey1(pnlod+4) = VMM_KEY(orhsf)
         pnlkey1(pnlod+5) = VMM_KEY(wt1)
         pnlkey1(pnlod+6) = VMM_KEY(mutx)
         pnlkey1(pnlod+7) = VMM_KEY(qt1)
         pnlod = pnlod+7
      endif
      if (G_lam) then
         pnlkey1(pnlod+1) = VMM_KEY(nest_u)
         pnlkey1(pnlod+2) = VMM_KEY(nest_v)
         pnlod = pnlod+2
      endif
*     - - - - - - - - - - - - - 
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - 
      pnerr = VMM_GET_VAR(rhsu)
      pnerr = VMM_GET_VAR(rhsv)
      pnerr = VMM_GET_VAR(rhsc)
      pnerr = VMM_GET_VAR(rhst)
      pnerr = VMM_GET_VAR(orhsu)
      pnerr = VMM_GET_VAR(orhsv)
      pnerr = VMM_GET_VAR(orhsc)
      pnerr = VMM_GET_VAR(orhst)
      pnerr = VMM_GET_VAR(ruw1)
      pnerr = VMM_GET_VAR(rvw1)
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(bspqtx)
      pnerr = VMM_GET_VAR(st1)
      pnerr = VMM_GET_VAR(zdt1)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(that_8)
      pnerr = VMM_GET_VAR(dlnth_8)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt1)
         pnerr = VMM_GET_VAR(rhsw)
         pnerr = VMM_GET_VAR(rhsf)
         pnerr = VMM_GET_VAR(orhsw)
         pnerr = VMM_GET_VAR(orhsf)
         pnerr = VMM_GET_VAR(wt1)
         pnerr = VMM_GET_VAR(mutx)
      else
         qt1_ =0
         rhsw_   = 0
         rhsf_    = 0
         orhsw_  = 0
         orhsf_ = 0
         wt1_  = 0
         mutx_ = 0
      endif
      if (G_lam) then
         pnerr = VMM_GET_VAR(nest_u)
         pnerr = VMM_GET_VAR(nest_v)
      else
         nest_u_ = 0
         nest_v_ = 0
      endif
*
*     Perform the computation in the first 
*     cycle of Crank-Nicholson procedure only
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
      call diag_var( bspqtx, mutx, st1, qt1,
     $                       1,l_ni,1,l_nj,l_nk)       
*
      call diag_fip(fiptx, st1, tt1, qt1, topo,
     $        1,l_ni,1,l_nj,l_nk)         
*
      call rhsp_2  (  rhsu,  rhsv,  rhsc,  rhst,  rhsw,   rhsf,
     %               orhsu, orhsv, orhsc, orhst, orhsw,  orhsf,
     %                ruw1,  rvw1,   ut1,   vt1,   tt1, bspqtx,
     %                 st1, zdt1,nest_u,nest_v,
     %                 wt1, fiptx,  mutx,that_8,dlnth_8,
     $         LDIST_DIM,l_nk  )
*     
c     if (Acid_test_L) then
c     If (Lun_out.gt.0) write(Lun_out,*) 'After rhsp_2, computed area'
c     call glbstat (rhsu,'RU0',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
c    %                                      8+acid_j0,G_nj-7-acid_jn,1,G_nk)
c     call glbstat (ruw1,'RUW1',LDIST_DIM,G_nk,6+acid_i0,G_ni-5-acid_in,
c    %                                      5+acid_j0,G_nj-4-acid_jn,1,G_nk)
c     call glbstat (rhst,'RT',LDIST_DIM,G_nk,8+acid_i0,G_ni-7-acid_in,
c    %                                      8+acid_j0,G_nj-7-acid_jn,1,G_nk)
*     Rc0 will not match to the piloting run because it includes new Ru,Rv
c     If (Lun_out.gt.0) 
c    %  write(Lun_out,*) 'Rc0 includes nesting area and new Ru,Rv, will not match'
c     call glbstat (rhsc,'Rc0',LDIST_DIM,G_nk,1+acid_i0,G_ni-acid_in,
c    %                                        1+acid_j0,G_nj-acid_jn,1,G_nk)
c     endif
      pnerr = vmmuld(-1,0)
      pnerr = vmmuld(-1,0)
*
1000  format(3X,'COMPUTE THE RIGHT-HAND-SIDES: (S/R RHS)')
*
*     __________________________________________________________________
*
      return
      end
