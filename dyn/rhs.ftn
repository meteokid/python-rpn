! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r rhs - compute the right-hand sides of governing and derived equations
*
#include "model_macros_f.h"
*
      subroutine rhs()
*
      implicit none
*
*author
*     Alain Patoine - Gabriel Lemay
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
* v2_31 - Desgagne M.       - remove treatment of hut1 and qct1
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_21 - Desgagne M.       - Revision Openmp
* v_stg - Plante A.         - Staggered version
*
*object
***********************************************************************
* See GEMergo4.doc
***********************************************************************
*
*arguments
*        None
*
*implicits
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "orh.cdk"
#include "p_geof.cdk" 
#include "rhsc.cdk"
#include "vt1.cdk" 
#include "vtx.cdk" 
#include "nest.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer  pnerr, pnlod, pnlkey1(24), i,j,k
**
*     __________________________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)

      pnlkey1( 1) = VMM_KEY(orhsu)
      pnlkey1( 2) = VMM_KEY(orhsv)
      pnlkey1( 3) = VMM_KEY(orhsc)
      pnlkey1( 4) = VMM_KEY(orhst)
      pnlkey1( 5) = VMM_KEY(orhsf)
      pnlkey1( 6) = VMM_KEY(ruw1)
      pnlkey1( 7) = VMM_KEY(rvw1)
      pnlkey1( 8) = VMM_KEY(ut1)
      pnlkey1( 9) = VMM_KEY(vt1)
      pnlkey1(10) = VMM_KEY(wt1)
      pnlkey1(11) = VMM_KEY(tt1)
      pnlkey1(12) = VMM_KEY(bspqtx)
      pnlkey1(13) = VMM_KEY(st1)
      pnlkey1(14) = VMM_KEY(zdt1)
      pnlkey1(15) = VMM_KEY(fiptx)
      pnlkey1(16) = VMM_KEY(fipt1)
      pnlkey1(17) = VMM_KEY(topo)
      pnlod = 17
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(orhsw)
         pnlkey1(pnlod+2) = VMM_KEY(qt1)
         pnlkey1(pnlod+3) = VMM_KEY(mutx)
         pnlod = pnlod+3
      endif
      if (G_lam) then
         pnlkey1(pnlod+1) = VMM_KEY(rhsu)
         pnlkey1(pnlod+2) = VMM_KEY(rhsv)
         pnlkey1(pnlod+3) = VMM_KEY(nest_u)
         pnlkey1(pnlod+4) = VMM_KEY(nest_v)
         pnlod = pnlod+4
      endif
*     - - - - - - - - - - - - - 
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - 
      pnerr = VMM_GET_VAR(orhsu)
      pnerr = VMM_GET_VAR(orhsv)
      pnerr = VMM_GET_VAR(orhsc)
      pnerr = VMM_GET_VAR(orhst)
      pnerr = VMM_GET_VAR(orhsf)
      pnerr = VMM_GET_VAR(ruw1)
      pnerr = VMM_GET_VAR(rvw1)
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(wt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(bspqtx)
      pnerr = VMM_GET_VAR(st1)
      pnerr = VMM_GET_VAR(zdt1)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(fipt1)
      pnerr = VMM_GET_VAR(topo)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(orhsw)
         pnerr = VMM_GET_VAR(qt1)
         pnerr = VMM_GET_VAR(mutx)
      else
         rhsw_   = 0
         orhsw_  = 0
         qt1_ =0
         mutx_ = 0
      endif
      if (G_lam) then
         pnerr = VMM_GET_VAR(rhsu)
         pnerr = VMM_GET_VAR(rhsv)
         pnerr = VMM_GET_VAR(nest_u)
         pnerr = VMM_GET_VAR(nest_v)
      else
         nest_u_ = 0
         nest_v_ = 0
      endif
*
*     Perform the computation in the first 
*     cycle of Crank-Nicholson procedure only
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
      call diag_var( bspqtx, mutx, st1, qt1, 1,l_ni,1,l_nj,l_nk)       
*
      call diag_fip(fiptx, st1, tt1, topo, 1,l_ni,1,l_nj,l_nk)         
*
!$omp parallel
!$omp do
      do k=0,G_nk+1
         do j=1,l_nj
         do i=1,l_ni
            fipt1(i,j,k)=fiptx(i,j,k)
         end do
         end do
      end do
!$omp enddo
!$omp end parallel
*
      call rhsp_2  ( orhsu, orhsv, orhsc,  orhst, orhsw,  orhsf,
     %                ruw1,  rvw1,  rhsu,   rhsv,nest_u, nest_v,
     %                 ut1,   vt1,   wt1,    tt1,   st1,   zdt1,
     %              bspqtx, fiptx,  mutx,
     $               LDIST_DIM,l_nk  )
*     
c     if (Acid_test_L) then
c     If (Lun_out.gt.0) write(Lun_out,*) 'After rhsp_2, computed area'
c     call glbstat (orhsu,'RU0',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
c    %                                      8+acid_j0,G_nj-7-acid_jn,1,G_nk)
c     call glbstat (ruw1,'RUW1',LDIST_DIM,G_nk,6+acid_i0,G_ni-5-acid_in,
c    %                                      5+acid_j0,G_nj-4-acid_jn,1,G_nk)
c     call glbstat (orhst,'RT',LDIST_DIM,G_nk,8+acid_i0,G_ni-7-acid_in,
c    %                                      8+acid_j0,G_nj-7-acid_jn,1,G_nk)
*     Rc0 will not match to the piloting run because it includes new Ru,Rv
c     If (Lun_out.gt.0) 
c    %  write(Lun_out,*) 'Rc0 includes nesting area and new Ru,Rv, will not match'
c     call glbstat (orhsc,'Rc0',LDIST_DIM,G_nk,1+acid_i0,G_ni-acid_in,
c    %                                        1+acid_j0,G_nj-acid_jn,1,G_nk)
c     endif

C     Pour debug
c      call glbstat (orhsc,'rhsc',LDIST_DIM,G_nk  ,1,l_ni,1,l_nj,1,G_nk  )
c      call glbstat (orhst,'rhst',LDIST_DIM,G_nk+1,1,l_ni,1,l_nj,1,G_nk+1)
c      call gem_stop('rhs',-1)

      pnerr = vmmuld(-1,0)
      pnerr = vmmuld(-1,0)
*
1000  format(3X,'COMPUTE THE RIGHT-HAND-SIDES: (S/R RHS)')
*
*     __________________________________________________________________
*
      return
      end
