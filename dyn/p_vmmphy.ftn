***s/r p_vmmphy - load all fields required by the physics
*
#include <model_macros_f.h>
*
      subroutine p_vmmphy( F_up, F_vp, F_wp, F_tp, F_qp, F_trp,
     $                     F_um,F_vm,F_tm,F_gzm,F_topo,  F_trm,
     $                     F_lnpsm, F_sig, DIST_DIM, Nk )
*
      implicit none
*
      integer DIST_DIM,Nk
      real F_up (DIST_SHAPE,Nk), F_vp (DIST_SHAPE,Nk)  ,
     $     F_wp (DIST_SHAPE,Nk), F_tp (DIST_SHAPE,Nk)  , 
     $     F_qp (DIST_SHAPE,Nk), F_trp(DIST_SHAPE,Nk,*),
     $     F_um (DIST_SHAPE,Nk), F_vm (DIST_SHAPE,Nk)  ,
     $     F_tm (DIST_SHAPE,Nk), F_gzm (DIST_SHAPE,Nk), 
     $     F_topo(DIST_SHAPE) ,  F_trm(DIST_SHAPE,Nk,*),
     $     F_lnpsm(DIST_SHAPE),  F_sig(DIST_SHAPE,Nk)  
*
*author
*     Michel Roch - rpn - april 1994
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_31 - Desgagne          - clean up and introduce h2o tracers
* v3_00 - Laroche S.        - adaptation for v4d
* v3_12 - Leduc A-M.        - Add arguments gzm and topo
* v3_20 - Lee V.            - Corrected loop i=1,p_nj to i-1,p_ni
* v3_21 - Desgagne M.       - Revision Openmp
*
*object
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_up     
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "p_cond.cdk"
#include "p_bus.cdk"
#include "inuvl.cdk"
#include "vt1.cdk"
#include "vt0.cdk"
#include "busind.cdk"
#include "p_geof.cdk"
*
**
      integer  vmmlod,vmmget,vmmuln
      external vmmlod,vmmget,vmmuln
*
      integer*8 pnt_trp(phyt_ntr),pnt_trm(phyt_ntr)
      integer err, key(15), i, j, k, n, i0, j0, in, jn, nksurf,
     $        keyp(phyt_ntr), keym(phyt_ntr), keyp_, keym_
      real dt, dzmin, dzmin_, sigsfc, trp, trm
      real wk1(LDIST_SHAPE),wk2(LDIST_SHAPE),wk3(LDIST_SHAPE),
     $     wk4(LDIST_SHAPE)
      pointer (patrp, trp(LDIST_SHAPE,*)),(patrm, trm(LDIST_SHAPE,*))
*
*     ________________________________________________________________
*
      key( 1) = VMM_KEY(ut0)
      key( 2) = VMM_KEY(vt0)
      key( 3) = VMM_KEY(tt0)
      key( 4) = VMM_KEY(ut1)
      key( 5) = VMM_KEY(vt1)
      key( 6) = VMM_KEY(tt1)
      key( 7) = VMM_KEY(fit1)
      key( 8) = VMM_KEY(topo)
      key( 9) = VMM_KEY(qt0)
      key(10) = VMM_KEY(qt1)
      key(11) = VMM_KEY(st1)
      key(12) = VMM_KEY(psdt1)
      key(13) = VMM_KEY(tdt1)
      err = vmmlod(key,13)
      err = VMM_GET_VAR(ut0)
      err = VMM_GET_VAR(vt0)
      err = VMM_GET_VAR(tt0)
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(fit1)
      err = VMM_GET_VAR(topo)
      err = VMM_GET_VAR(qt0)
      err = VMM_GET_VAR(qt1)
      err = VMM_GET_VAR(st1)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR(tdt1)
      if (.not.Schm_hydro_L) then
         key(14) = VMM_KEY(qpt0)
         key(15) = VMM_KEY(qpt1)
         err = vmmlod(key(14),2)
         err = VMM_GET_VAR(qpt0)
         err = VMM_GET_VAR(qpt1)
      endif
*
      keyp_ = VMM_KEY (trt1)
      keym_ = VMM_KEY (trt0)
      if (phyt_ntr.gt.0) then
         do n=1,phyt_ntr
            keyp(n) = keyp_ + n
            keym(n) = keym_ + n
         end do
         err   = vmmlod(keyp,phyt_ntr)  
         err   = vmmlod(keym,phyt_ntr)
         do n=1,phyt_ntr
            err = vmmget(keyp(n),patrp,trp)
            pnt_trp(n) = patrp
            err = vmmget(keym(n),patrp,trm)
            pnt_trm(n) = patrp
         end do
      endif  
*
****************************************************
*   Copy variables at time t- and t* in workfields *
****************************************************
*
!$omp parallel
*
!$omp do
      do k=1,l_nk
         do j= 1, l_nj
         do i= 1, l_ni 
            F_um(i,j,k) =  ut0(i,j,k)
            F_vm(i,j,k) =  vt0(i,j,k)
            F_tm(i,j,k) =  tt0(i,j,k)
            F_gzm(i,j,k)=  fit1(i,j,k)
            F_up(i,j,k) =  ut1(i,j,k)
            F_vp(i,j,k) =  vt1(i,j,k)
            F_tp(i,j,k) =  tt1(i,j,k)
         end do
         end do
         if (Schm_hydro_L) then
            do j= 1, l_nj
            do i= 1, l_ni 
               F_qp(i,j,k) = qt1(i,j,k)
            end do
            end do
         else
            do j= 1, l_nj
            do i= 1, l_ni 
               F_qp(i,j,k) = qt1(i,j,k) - qpt1(i,j,k) 
            end do
            end do
         endif
      end do
!$omp enddo
*
!$omp do
      do j= 1, l_nj
         do i= 1, l_ni
            F_topo(i,j) = topo(i,j)
         end do
         if (Schm_hydro_L) then
            do i= 1, l_ni
               F_lnpsm(i,j) = qt0(i,j,l_nk)
            end do
         else
            do i= 1, l_ni 
               F_lnpsm(i,j) = qt0(i,j,l_nk) - qpt0(i,j,l_nk) 
            end do
         endif
      end do
!$omp enddo
*
*     compute sigma levels from F_qp
*     --------------------------------
*
!$omp do
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni 
         F_sig(i,j,k) = exp(F_qp(i,j,k)-F_qp(i,j,l_nk))
      end do
      end do
      end do
!$omp enddo
*
      call calomeg (F_wp,psdt1,tdt1,st1,LDIST_DIM,l_nk,1,l_ni,1,l_nj)
*
*C    interpolate wind images at time t1 and t2
*     -----------------------------------------
*
      call p_uvgridscal ( F_up, F_vp, LDIST_DIM, l_nk, .true. )
      call p_uvgridscal ( F_um, F_vm, LDIST_DIM, l_nk, .true. )
*
      do n=1,phyt_ntr
         patrp = pnt_trp(n)
         patrm = pnt_trm(n)
!$omp do
         do k=1,l_nk
         do j= 1, l_nj 
         do i= 1, l_ni 
            F_trp(i,j,k,n) =  trp(i,j,k)
            F_trm(i,j,k,n) =  trm(i,j,k)
         end do
         end do
         end do
!$omp enddo
      end do
*
!$omp end parallel
*
*C    dzmin determines the micro-physical timestep for sedimentation
*
*     P_cond_dzsedi is the minimal thickness of the sedimentation layer.
*     If NOT set, get default value from the physics package.
*
      if (P_cond_dzsedi.lt.0.) 
     $     call phyoptr('DZSEDI',P_cond_dzsedi,1,'GET' )
*
*     The mixed-phase microphysics scheme combines the lower model
*     layers (excluding the lowest) to compute a sedimentation 
*     timestep that is not too short in order to save on computing 
*     time. In order to do that, the dynamics must compute NKSURF
*     (the index of the eta level just below dzsedi) and DZMIN (the
*     minimal thickness in the domain, taking into account the 
*     combined levels).
*
      dt = Cstv_dt_8
      sigsfc=1.-(min(dt,P_cond_dzsedi))/10000.
      do k=G_nk-1,1,-1     
         if (geomg_hybm(k).lt.sigsfc) go to 100
      end do
 100  nksurf = min(G_nk-1,k+1)
*
      dzmin_=1.e+5
      if ( nksurf .eq. G_nk-1 ) then
*C                                     The sedimentation is made
*C                                     over all model levels
        do j= 1, p_nj
        do i= 1, p_ni 
         dzmin_= min(1.0d0*(dzmin_),
     $         Dcst_rgasd_8*(1.0d0*(F_tp(i,j,G_nk-1)+F_tp(i,j,G_nk-2)))/2.d0/
     $         Dcst_grav_8 * log(1.0d0*(geomg_hybm(G_nk-1)/geomg_hybm(G_nk-2))))
        end do
        end do
*
      else  
*C                                     The sedimentation is made
*C                                     over a reduced set of levels
        do j= 1, p_nj 
        do i= 1, p_ni
         dzmin_= min(1.0d0*(dzmin_),
     $      Dcst_rgasd_8*(1.0d0*(F_tp(i,j,nksurf-1)+F_tp(i,j,nksurf-2)))/2.d0/
     $      Dcst_grav_8 *log(1.0d0*(geomg_hybm(nksurf-1)/geomg_hybm(nksurf-2))))
         dzmin_= min(1.0d0*(dzmin_),
     $      Dcst_rgasd_8*(1.0d0*(F_tp(i,j,G_nk-1)+F_tp(i,j,nksurf-1)))/2.d0/
     $      Dcst_grav_8 *log(1.0d0*(geomg_hybm(G_nk-1)/geomg_hybm(nksurf-1))))
        end do
        end do
*
      endif
*
      call rpn_comm_ALLREDUCE (dzmin_,dzmin,1,"MPI_REAL",
     $                         "MPI_MIN","grid",err)
*
*     send dzmin and nksurf to the physics
      call phycom ('dzmin' ,dzmin ,1,'set')
      call phycom ('nksurf',nksurf,1,'set')
*
*     ________________________________________________________________
*
      return
      end

