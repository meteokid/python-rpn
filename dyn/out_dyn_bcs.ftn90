!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!opyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
!**s/r out_dyn_bcs - output in the form of BCS files
!
#include "model_macros_f.h"
!
      subroutine out_dyn_bcs ( datev, is,nis,js,jn,njs, &
                               iw, ie, niw, jw, njw, mode  )
      implicit none
!
      character* (*) datev
      integer is,nis,js,jn,njs,iw,ie,niw,jw,njw,mode
!
!author M.Desgagne ( MC2 2001)
!
!revision
! v3_30 - V.Lee - initial version for GEM LAM (new I/O)
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_11 - V.Lee - put back initialization of nvar
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "p_geof.cdk"
#include "out.cdk"
#include "vt1.cdk"
#include "lctl.cdk"
#include "schm.cdk"
#include "grdc.cdk"
#include "tr3d.cdk"
#include "ptopo.cdk"
!
!
      integer i,j,k,ind_o(G_nk+2),cnt,unf,key(13), &
              nvar,err,keyp_,keyp(Grdc_ntr)
      real, pointer    , dimension(:,:,:) :: tr1
!
!------------------------------------------------------------------
!
      do k=1,G_nk+2
         ind_o(k) = k
      end do
!
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(st1)'
      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(topo)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(wt1)'
      nvar=7
      if (.not.Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'out_dyn_bcs ERROR at gmm_get(qt1)'
         nvar=nvar+1
      endif
!
      call out_sfile_bcs (datev,unf,is,nis,js,jn,njs,iw,ie, &
                          niw,jw,njw,'DYNAMICS', nvar,Grdc_ntr,mode)
!
      call write_bcs (  tt1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+2,'TT  ',1.0,ind_o,unf)
      call write_bcs (  st1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,     1,'S   ',1.0,ind_o,unf)
      call write_bcs ( topo,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,     1,'GZ  ',1.0,ind_o,unf)
      call write_bcs (  wt1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+1,'W   ',1.0,ind_o,unf)
      call write_bcs ( zdt1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+1,'ZD  ',1.0,ind_o,unf)
!
      if (.not.Schm_hydro_L) then
      call write_bcs (  qt1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+2,'Q   ',1.0,ind_o,unf)
      endif
      do k=1,Grdc_ntr
          nullify (tr1)
          gmmstat=gmm_get('TR/'//trim(Grdc_trnm_S(k))//':P',tr1,meta3d)
          if (.not.GMM_IS_ERROR(gmmstat)) then
            call write_bcs (tr1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+2,Grdc_trnm_S(k), &
                                   1.0,ind_o,unf)
          endif
      end do
      call write_bcs (  ut1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+1,'UU  ',1.0,ind_o,unf)
      call write_bcs (  vt1,l_minx,l_maxx,l_miny,l_maxy,is,nis,js,jn, &
                        njs,iw,ie,niw,jw,njw,G_nk+1,'VV  ',1.0,ind_o,unf)
!
      if (Out_myproc.eq.0) then
         close (unf)
      endif
!
!------------------------------------------------------------------
      return
      end
!
