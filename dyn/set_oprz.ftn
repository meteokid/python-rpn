***s/r set_oprz - Computes vertical operators and matrices a,b,c
*                  for the elliptic solver
*
#include "model_macros_f.h"
*
      subroutine set_oprz
*
#include "impnone.cdk"
*
*author
*     M. Desgagne - initial MPI version (from setoprz v1_03)
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_30 - Edouard  S.       - replace Schm_elast_L by Schm_cptop_L 
*
*object
*     see ID section above
*
*arguments
*     None
*
*implicits
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "opr.cdk"
#include "sol.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "ptopo.cdk"
#include "matlab.cdk"
*
*modules
**
      real*8 ZERO, ONE, TWO, HALF
      parameter( ZERO = 0.0 )
      parameter( ONE  = 1.0 )
      parameter( TWO  = 2.0 )
      parameter( HALF = 0.5 )
*
      integer k, k0,longueur
      real*8  pdsc, wk(G_nk)
      real*8, dimension 
     $((trp_12smax-trp_12smin+1)*(trp_22max-trp_22min+1)*G_nj) :: a,b,c

      if(matlab_write_L.and.Ptopo_myproc.eq.0)then
         open(unit=62,file=matlab_dir_S(1:longueur(matlab_dir_S))//'from_fortran_set_oprz.bin',status='replace',form='unformatted')
         write(62)G_nk
      endif
*
*     ---------------------------------------------------------------
*
*     Compute the vertical operators
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*     Pzz and Pz0
      do k = 1, G_nk
         wk(k) = Ver_hz_8%t(k+1)/Ver_z_8%t(k+1)**2.
         Opr_opszp0_8(       k)=0.d0
         Opr_opszp0_8(G_nk  +k)=Ver_hz_8%m(k)
         Opr_opszp0_8(G_nk*2+k)=0.d0
      end do
      call set_ops8 (Opr_opszp2_8,wk        ,ONE,.false.,G_nk, G_nk, 1)
*      
*     Apply vertical boundary conditions
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Opr_opszp2_8(2*G_nk) = Opr_opszp2_8(2*G_nk) - 
     $     (1.d0-ver_alphas_8)*Ver_z_8%t(G_nk+1)**2/Ver_hz_8%t(G_nk+1)
      Opr_opszp2_8(G_nk+1) = Opr_opszp2_8(G_nk+1) -
     $     (1.d0-Ver_alphat_8)*Ver_z_8%t(1)**2/Ver_hz_8%t(1)

      if (.not. Schm_cptop_L) then
         print*,'Constant pressure top only'
         call gem_stop('set_oprz',-1)         
      endif
      
      if(.not.Schm_hydro_L)then
*        Prepare average operator.
         do k = 1, G_nk
            wk(k) = 4.d0/Ver_hz_8%t(k+1)
         end do
         call set_ops8 (Opr_opszpm_8,wk        ,ONE,.false.,G_nk, G_nk, 5)
         Opr_opszpm_8(2*G_nk)=Opr_opszpm_8(2*G_nk)+(1+ver_alphas_8)*.25d0*Ver_hz_8%t(G_nk+1)
         Opr_opszpm_8(G_nk+1)=Opr_opszpm_8(G_nk+1)+(1+ver_alphat_8)*.25d0*Ver_hz_8%t(1)
      endif

      if(matlab_write_L)write(62)(Opr_opszp2_8(k),k=1,3*G_nk)
      if(matlab_write_L)write(62)(Opr_opszpm_8(k),k=1,3*G_nk)
      if(matlab_write_L)write(62)(Opr_opszp0_8(k),k=1,3*G_nk)

*
*     Compute eigenvalues and eigenvector in the vertical
*     ---------------------------------------------------
*
      call set_pois (Opr_zeval_8, Opr_zevec_8,G_nk, G_nk)
*
      do k=1,G_nk
         do k0=1,G_nk
            wk(k) = Opr_zevec_8 ((k-1)*G_nk+k0)
         enddo
         wk(k)= (Cstv_hco0_8*Opr_zeval_8(k)-Cstv_hco1_8)
      enddo
*     
      call sol_abc ( wk,G_yg_8(1),Opr_opsyp0_8,
     $               Opr_opsyp2_8,Opr_xeval_8,
     $               trp_12sn0, trp_22n0 , trp_12smin, trp_12smax  ,
     $               trp_22min, trp_22max, trp_12sn  , trp_22n,G_nj,
     $               Sol_ai_8, Sol_bi_8, Sol_ci_8 , a, b, c)
*
*     ---------------------------------------------------------------
*
      if(matlab_write_L.and.Ptopo_myproc.eq.0)close(62)
      return
      end
