!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r hzd_hof_lam - applies horizontal diffusion on a given set of fields
*
#include "model_macros_f.h"
      subroutine hzd_hof_lam ( F_u,    F_v,  F_psd,  F_tp, F_ip,
     %                         F_td,   F_t,  F_it,   F_plt,   
     %                         F_pip,  F_w,  F_qp,   F_mu, F_mul,  
     %                         F_xfis, DIST_DIM,Nk)
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
*
      real     F_u(DIST_SHAPE,Nk),  F_v(DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %        F_ip(DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %         F_t(DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk),  
     %       F_pip(DIST_SHAPE,Nk),  F_w(DIST_SHAPE,Nk),
     %        F_qp(DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk),  F_xfis(DIST_SHAPE)
*
*author
*     Abdessamad Qaddouri
*
*revision
* v2_10 - Qaddouri A.       - initial version
* v2_21 - Desgagne M.       - control for diffusion on momentum only
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
*
*object
* The diffusion includes: second order(Hzd_pwr=1), 
* fourth order(Hzd_pwr=2),
* sixth (Hzd_pwr=3) and eightth order (Hzd_pwr=4) diffusion
*
*arguments
*  Name        I/O        Description
*----------------------------------------------------------------
*  F_u         I/0        see subroutine
*  F_v         I/0            "
*  F_ip       I/0            "
*  F_td        I/0            "
*  F_tp        I/0            "
*  F_plt       I/0            "
*  F_t         I/0            "
*  F_pip       I/0            "
*  F_psd       I/0            "
*  F_w         I/0            "
*  F_mu        I/0            "
*  F_mul       I/0            "
*  F_qp        I/0            "
*----------------------------------------------------------------
* 
*implicits
#include "fft.cdk"
#include "glb_ld.cdk"
#include "ldnh.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
*
      integer i, j, k, dpwr
      real*8 wk1_8(LDIST_SHAPE,Nk)
      real   wk2(LDIST_SHAPE,Nk)
**
*     __________________________________________________________________
*
      dpwr = Hzd_pwr / 2
      if (Lun_debug_L) write(Lun_out,1000) Hzd_pwr
*
      if ( Hzd_cdiff .gt. 0.0 ) then
*
*     Momentum
*     ~~~~~~~~
c        print *,'hzd_areal on F_u'
c        call hzd_areal(F_u,Hzd_xp0_8,Opr_opsyp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
c        do i=1,10
         call hzd_solfft_lam(F_u, wk1_8, Fft_pri_8, 
     %                   Hzd_au_8,Hzd_cu_8,Hzd_deltau_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx, 
     %                   l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Hzd_xp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
c        enddo
c        call hzd_areal(F_u,Hzd_xp0_8,Opr_opsyp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
*
c        print *,'hzd_areal on F_v'
c        call hzd_areal(F_v,Opr_opsxp0_8,Hzd_yp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
c        do i=1,10
         call hzd_solfft_lam(F_v, wk1_8, Fft_pri_8 ,
     %                   Hzd_av_8,Hzd_cv_8,Hzd_deltav_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj, 
     %                   trp_12dn,Opr_opsxp0_8,Hzd_yp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
c        enddo
c        call hzd_areal(F_v,Opr_opsxp0_8,Hzd_yp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
*
*     Vertical motion in pressure coord. 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c        print *,'hzd_areal on F_psd'
c        call hzd_areal(F_psd,Opr_opsxp0_8,Opr_opsyp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
c        do i=1,10
         call hzd_solfft_lam(F_psd, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
c        enddo
c        call hzd_areal(F_psd,Opr_opsxp0_8,Opr_opsyp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
*
*     Total divergence 
*     ~~~~~~~~~~~~~~~~
c        print *,'hzd_areal on F_td'
c        call hzd_areal(F_td,Opr_opsxp0_8,Opr_opsyp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
c        do i=1,10
         call hzd_solfft_lam(F_td, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
c        enddo
c        call hzd_areal(F_td,Opr_opsxp0_8,Opr_opsyp0_8,
c    $        l_minx,l_maxx,l_miny,l_maxy,G_ni,G_nj,Nk)
*
         if (Hzd_uvwdt_L) goto 9988
*
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
         call hzd_solfft_lam(F_ip, wk1_8, Fft_pri_8,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
         call hzd_solfft_lam(F_it, wk1_8, Fft_pri_8,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
!$omp parallel
!$omp do
         do k = 2, Nk
         do j = 1+pil_s,l_nj-pil_n
         do i = 1+pil_w,l_ni-pil_e
            F_it(i,j,k) = F_ip(i,j,k) + Cstvr_fistr_8(k) + F_xfis(i,j)
         end do
         end do
         end do
!$omp enddo
*
* updating phi' at the top only relevant if none hydrostatic
*
         if (.not. Schm_hydro_L) then
!$omp do
         do j = 1+pil_s,l_nj-pil_n
         do i = 1+pil_w,l_ni-pil_e
            F_ip(i,j,1) = F_it(i,j,1) - Cstvr_fistr_8(1) - F_xfis(i,j)
         end do
         end do
!$omp enddo
         endif
!$omp end parallel
*
*     The temperature: T', T'lin & hence T 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solfft_lam(F_tp, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
         call hzd_solfft_lam(F_plt, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
!$omp parallel
!$omp do
         do k=1, Nk
         do j=1+pil_s,l_nj-pil_n
         do i=1+pil_w,l_ni-pil_e
            F_t(i,j,k) = F_tp(i,j,k) + Cstv_tstr_8
         end do
         end do
         end do
!$omp enddo
*
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
!$omp do
            do k = 1, Nk
            do j = 1+pil_s,l_nj-pil_n
            do i = 1+pil_w,l_ni-pil_e
               wk2(i,j,k) = F_pip(i,j,k)
            end do
            end do
            end do
!$omp enddo
         endif 
!$omp end parallel
*
*     The hydrostatic pressure: pi'  
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solfft_lam(F_pip, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
*****************************
*  3. Nonyhydrostatic model * 
*****************************
*
         if ( .not. Schm_hydro_L ) then
*
*     Vertical wind (physical) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solfft_lam(F_w, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
         if ( Schm_difqp_L ) then ! q' & related variables
*
         call hzd_solfft_lam(F_mu, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
         call hzd_solfft_lam(F_mul, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)
*
*        Indirect diffusion of q' 
*        ~~~~~~~~~~~~~~~~~~~~~~~~
!$omp parallel do
         do k=1, Nk  ! 
         do j=1+pil_s,l_nj-pil_n ! p = (pi)exp(q') 
         do i=1+pil_w,l_ni-pil_e ! ~~~~~~~~~~~~~~~ 
            wk2(i,j,k) = ( geomg_z_8(k) + dble(wk2(i,j,k)) )
     %                       *exp( dble(F_qp(i,j,k)) )
         end do
         end do
         end do
!$omp end parallel do
*
         call hzd_solfft_lam(wk2, wk1_8, Fft_pri_8 ,
     %                   Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                   trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                   trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                   l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                   trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                   Ptopo_npex,Ptopo_npey)

*
!$omp parallel do
         do k=1, Nk  ! 
         do j=1+pil_s,l_nj-pil_n ! q' = log(p/pi) 
         do i=1+pil_w,l_ni-pil_e ! ~~~~~~~~~~~~~~
            F_qp(i,j,k) = log(             dble(wk2(i,j,k))
     %                       /( geomg_z_8(k) + dble(F_pip(i,j,k)) )  )
         end do
         end do
         end do
!$omp end parallel do
*
         endif
         endif
*
      endif
*
 9988 continue
*
 1000 format(/,
     $  3X,'PERFORM DEL-',i1,' FFT HORIZONTAL DIFFUSION: (S/R HZD_HOF_LAM)')
*     __________________________________________________________________
*
      return
      end
