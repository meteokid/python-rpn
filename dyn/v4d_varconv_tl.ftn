***s/r v4d_varconv_tl - TLM of conversion control variables GEM <--> 3D-Var
*
#include <model_macros_f.h>
*
      subroutine v4d_varconv_tl( C_ut1, C_vt1, C_tt1, C_hut1, C_st1,
     $                           C_tt1m, C_hut1m, C_st1m, DIST_DIM, Nk, inverse_L )
*
#include "impnone.cdk"
*
      integer DIST_DIM,Nk
      real C_ut1 (DIST_SHAPE,Nk), C_vt1  (DIST_SHAPE,Nk),
     %     C_tt1 (DIST_SHAPE,Nk), C_hut1 (DIST_SHAPE,Nk),
     %     C_st1 (DIST_SHAPE),
     %     C_tt1m(DIST_SHAPE,Nk), C_hut1m(DIST_SHAPE,Nk),
     %     C_st1m(DIST_SHAPE)
      logical inverse_L
*
*author
*     Stephane Laroche 
*
*revision
* v3_00 - Laroche S.       - initial MPI version
* v3_00 - Gauthier P.      - ln q to q 
* v3_00 - Tanguay M.       - verify zeroing of hut1m 
*
*object
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* C_ut1
* C_vt1
* C_tt1
* C_hut1
* C_st1
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
*
*modules
*
      integer i, j, k
      real*8 pri2c_8

      if(.not.inverse_L) then
C
C      Conversion GEM --> 3D-Var
C      =========================
C
*
C
C      Winds
C      -----
C
      call p_uvgridscal ( C_ut1, C_vt1, LDIST_DIM, Nk, .true. )

       do k=1,Nk
        do j= 1+pil_s, l_nj-pil_n 
         pri2c_8 = Dcst_rayt_8/Geomg_cy_8(j)
         do i= 1+pil_w, l_ni-pil_e 
            C_ut1(i,j,k) = C_ut1(i,j,k)*pri2c_8
            C_vt1(i,j,k) = C_vt1(i,j,k)*pri2c_8
         end do
      end do
      end do
C     
C     Temperature
C     -----------
C     
      do k=1,Nk
         do j= 1+pil_s, l_nj-pil_n 
            do i= 1+pil_w, l_ni-pil_e 

               C_tt1(i,j,k) = ( (C_tt1m(i,j,k) + Cstv_tstr_8)
     $              /(1.0 + Dcst_delta_8*C_hut1m(i,j,k)) )
     $              * (  C_tt1(i,j,k)/(C_tt1m(i,j,k) + Cstv_tstr_8)
     $              -Dcst_delta_8*C_hut1(i,j,k)/(1.0 + Dcst_delta_8*C_hut1m(i,j,k)) )

            end do
         end do
      end do

C     
C     Surface pressure
C     ----------------
C     
      do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 

            C_st1(i,j) =  (Geomg_z_8(Nk) - Cstv_pitop_8)
     $           *   exp(C_st1m(i,j)) * C_st1(i,j)

         end do
      end do
*
*     Humidity: Delta(log q) = Delta q / q(ref)
*
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 
                  if(C_hut1m(i,j,k).eq.0.0) then
                     C_hut1(i,j,k) = 0.0 
                  else
                     C_hut1(i,j,k) = C_hut1(i,j,k)/C_hut1m(i,j,k) 
                  endif
               end do
            end do
         end do

      else
*     
C     
C     Conversion 3D-Var --> GEM
C     =========================
C
C     Humidity: Delta q = q(ref) * Delta( log q)
C     
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 
                  C_hut1(i,j,k) = C_hut1(i,j,k)*C_hut1m(i,j,k)
               end do
            end do
         end do
C     
C     Winds
C     -----
C     

         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               pri2c_8 = (1.0/Geomg_cy_8(j))*Dcst_rayt_8
               do i= 1+pil_w, l_ni-pil_e 

                  C_ut1(i,j,k) = C_ut1(i,j,k)/pri2c_8
                  C_vt1(i,j,k) = C_vt1(i,j,k)/pri2c_8

               end do
            end do
         end do

         call p_uvgridscal ( C_ut1, C_vt1, LDIST_DIM, Nk, .false. )
C     
C     Temperature
C     -----------
C     
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 

                  C_tt1(i,j,k) =  C_tt1(i,j,k)*(1.0 + Dcst_delta_8*C_hut1m(i,j,k))
     $                 + C_hut1(i,j,k)*Dcst_delta_8*(C_tt1m(i,j,k) + Cstv_tstr_8)
     $                 /(1.0 + Dcst_delta_8*C_hut1m(i,j,k))

               end do
            end do
         end do

C     
C     Surface pressure
C     ----------------
C     
         do j= 1+pil_s, l_nj-pil_n 
            do i= 1+pil_w, l_ni-pil_e 

               C_st1(i,j) = C_st1(i,j)/((Geomg_z_8(Nk) - Cstv_pitop_8)
     $              * exp(C_st1m(i,j)))

            end do
         end do

      endif
*     
      return
      end

