***s/r tstpdyn_tl -  TLM of tstpdyn 
*
#include <model_macros_f.h>
*
      subroutine tstpdyn_tl ( F_fnitraj )
*
#include "impnone.cdk"
*
      integer F_fnitraj
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - ADJ of HO option
*                           - ADJ of vertical sponge layer
* v2_31 - Tanguay M.        - adapt ADJ to new advection code,
*                             hybrid coord. and diffusion in gem_run
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v3_02 - Tanguay M.        - TLM of Eigv_parity_L and Hspng_main done
*
*object
*     see id section
*
*arguments
*     see tstpdyn
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "sol.cdk"
#include "nl.cdk"
#include "v4dg.cdk"
#include "nlm.cdk"
#include "vt1m.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "fft.cdk"
#include "vspng.cdk"
#include "hspng.cdk"
#include "lctl.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer iln,dim,err,pnerr,pnlkey1(4)
      real prdth
*     ______________________________________________________
*
      if(.not. Schm_hydro_L) call gem_stop('tstpdyn_tl',-1)
      if(.not. Orh_crank_L ) call gem_stop('tstpdyn_tl',-1)
*     ______________________________________________________
*
      prdth =  Cstv_dt_8/2.
*
      if (Lun_debug_L) write(Lun_out,1000)
*
      if ( V4dg_oktrtl_L ) then
*
         if(Orh_crank_L .and. Orh_icn .eq. 1) then
*
*        Recover TRAJ PIPT1 before diffusion
*        -----------------------------------
         V4dg_numtr = 2 
         Lctl_step  = Lctl_step - 1
         call v4d_rwtraj ()
         Lctl_step  = Lctl_step + 1
*
*        HZD Diffusion of TRAJ PIPT1
*        ---------------------------
         if ( Hzd_fact_L.or.Hzd_ho_L ) then
*
            pnlkey1(1) = VMM_KEY(pipt1m)
            pnerr = vmmlod(pnlkey1,1)
            pnerr = VMM_GET_VAR(pipt1m)
            if( Hzd_fact_L ) call hzd_fact_tr (pipt1m,LDIST_DIM,G_nk)
            if( Hzd_ho_L   ) then
              if( Fft_fast_L ) then
                  call hzd_hof_tr(pipt1m,LDIST_DIM,G_nk)
              else
*                 use MXMA in diffusion-solver
                  if ( .not. Eigv_parity_L) then
                      call hzd_ho_tr(pipt1m,LDIST_DIM,G_nk)
                  else
                      call hzd_ho_parite_tr(pipt1m,LDIST_DIM,G_nk)
                  endif
              endif
            endif
            pnerr = vmmuld(-1,0)
*
         endif
*
*        VSNPG Diffusion of TRAJ PIPT1
*        -----------------------------
         if ( Vspng_nk.gt.0 ) then
*
            pnlkey1(1) = VMM_KEY(pipt1m)
            pnerr = vmmlod(pnlkey1,1)
            pnerr = VMM_GET_VAR(pipt1m)
            call vspng_drv_tr(pipt1m,LDIST_DIM,G_nk)
            pnerr = vmmuld(-1,0)
*
         endif
*
*        HSNPG Diffusion of TRAJ PIPT1
*        -----------------------------
         if ( Hspng_nj.ge.1 ) then
*
            pnlkey1(1) = VMM_KEY(pipt1m)
            pnerr = vmmlod(pnlkey1,1)
            pnerr = VMM_GET_VAR(pipt1m)
            call hspng_drv_tr(pipt1m,LDIST_DIM,G_nk)
            pnerr = vmmuld(-1,0)
*
         endif
*
*        Recover TRAJ predictive variables except PIPT1M
*        -----------------------------------------------
         V4dg_numtr = 3 
         call v4d_rwtraj ()
*
         endif
*
      endif
*
      call rhs_tl ()
*
      if ( V4dg_oktrtl_L ) then
*
*        Recover TRAJ Positions TH
*        -------------------------
         V4dg_numtr = 4 
         call v4d_rwtraj ()
*
*        Recover TRAJ Winds TH
*        ---------------------
         V4dg_numtr = 5 
         call v4d_rwtraj ()
*
      endif
*
      call adw_main_tl ( F_fnitraj )
*
      call pre_tl ()
*
      if ( Orh_icn .eq. 1) call frstgss   ( )
      if ( Orh_icn .eq. 1) call frstgss_tr( )
*
      if (Lun_debug_L) write (Lun_out,1005) Schm_itnlh
*
*     TRAJECTORY
*     ----------
      dim = (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*l_nk
      call hpalloc (nlm_num_  , dim, err,1)
      call hpalloc (nlm_nvm_  , dim, err,1)
      call hpalloc (nlm_nthm_ , dim, err,1)
      call hpalloc (nlm_ncnm_ , dim, err,1)
      nlm_n3m_  = 0
      nlm_n3pm_ = 0
      if (.not. Schm_hydro_L) then
         call hpalloc (nlm_n3m_  , dim, err,1)
         call hpalloc (nlm_n3pm_ , dim, err,1)
      endif
*
*     TLM
*     ---
      dim = (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*l_nk
      call hpalloc (nl_nu_  , dim, err,1)
      call hpalloc (nl_nv_  , dim, err,1)
      call hpalloc (nl_nth_ , dim, err,1)
      call hpalloc (nl_ncn_ , dim, err,1)
      nl_n3_  = 0
      nl_n3p_ = 0
      if (.not. Schm_hydro_L) then
         call hpalloc (nl_n3_  , dim, err,1)
         call hpalloc (nl_n3p_ , dim, err,1)
      endif
*
      do 100 iln=1,Schm_itnlh
*
      if ( V4dg_oktrtl_L ) then
*
         if(.not.( (Orh_icn.eq.1.and.iln.eq.1).or.
     %           (                   iln.gt.1))    ) then
*
*        Recover TRAJ TPLT0,ST0 and relatives
*        ------------------------------------
         V4dg_numtr = 6 
         call v4d_rwtraj ()
*
         endif
*
      endif 
*
      call nli_tl ()
*
*        TLM
*        ---
         call sol_main ()
*
*        TRAJECTORY
*        ----------
         call sol_main_tr ()
*
         call bac_tl ( iln, Schm_itnlh )
*
 100  continue
*
*     TRAJECTORY 
*     ----------
      call hpdeallc(nlm_num_ , err)
      call hpdeallc(nlm_nvm_ , err)
      call hpdeallc(nlm_nthm_, err)
      call hpdeallc(nlm_ncnm_, err)
      if (.not. Schm_hydro_L) then
         call hpdeallc(nlm_n3m_ , err)
         call hpdeallc(nlm_n3pm_, err)
      endif
*
*     TLM
*     ---
      call hpdeallc(nl_nu_ , err)
      call hpdeallc(nl_nv_ , err)
      call hpdeallc(nl_nth_, err)
      call hpdeallc(nl_ncn_, err)
      if (.not. Schm_hydro_L) then
         call hpdeallc(nl_n3_ , err)
         call hpdeallc(nl_n3p_, err)
      endif
*
*     ---------------------------------------------------------------
*
 1000 format(
     + 3X,'TLM of PERFORM A DYNAMICAL STEP: (S/R TSTPDYN_TL)',
     +/3X,'================================================',/)
 1005 format(
     $3X,'TLM of ITERATING SCHM_ITNLH=',I3,' TIMES TO SOLVE NON-LINEAR '
     $   'HELMHOLTZ PROBLEM')
      return
      end
