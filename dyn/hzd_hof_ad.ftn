***s/r hzd_hof_ad - ADJ of hzd_hof_tl 
*
#include <model_macros_f.h>
      subroutine hzd_hof_ad ( F_u,   F_v, F_psd, F_tp, F_ip,
     %                        F_td,  F_t, F_it,  F_plt,   
     %                        F_pip, F_w, F_qp,  F_mu, F_mul,  
     %                        F_xfis, DIST_DIM,Nk)
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
*
      real     F_u(DIST_SHAPE,Nk),  F_v(DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %        F_ip(DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %         F_t(DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk),  
     %       F_pip(DIST_SHAPE,Nk),  F_w(DIST_SHAPE,Nk),
     %        F_qp(DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk),  F_xfis(DIST_SHAPE)
*
*author
*     M.Tanguay
*
*revision
* v2_21 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - ADJ of control for diffusion on momentum only
*
*object
*     see id section
*
*arguments
*  Name        I/O        Description
*----------------------------------------------------------------
*  F_u         I/0        see subroutine
*  F_v         I/0            "
*  F_ip        I/0            "
*  F_td        I/0            "
*  F_tp        I/0            "
*  F_plt       I/0            "
*  F_t         I/0            "
*  F_pip       I/0            "
*  F_psd       I/0            "
*  F_w         I/0            "
*  F_mu        I/0            "
*  F_mul       I/0            "
*  F_qp        I/0            "
*----------------------------------------------------------------
* 
*implicits
#include "fft.cdk"
#include "glb_ld.cdk"
#include "ldnh.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
*
      integer i, j, k, dpwr
      real*8 wk1_8(LDIST_SHAPE,Nk)
*
      real*8 ZERO_8
      parameter (ZERO_8=0.0)
*
*     ______________________________________________________
*
      if(.not. Schm_hydro_L) call gefstop('hzd_hof_ad')
*     ______________________________________________________
*
      dpwr = Hzd_pwr / 2
      if (Lun_debug_L) write(Lun_out,1000) Hzd_pwr
*
*     Zero adjoint variables
*     ----------------------
      do k=1,l_nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
      wk1_8(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
*
      if ( Hzd_cdiff .gt. 0.0 ) then
*
      if (Hzd_uvwdt_L) goto 9988
*
*     ADJ of
*     The hydrostatic pressure: pi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solfft_ad(F_pip, wk1_8, Fft_pri_8 ,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
*     ADJ of
*     The temperature: T', T'lin & hence T
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do k=1, Nk
         do j=1,l_nj
         do i=1,l_ni
            F_tp(i,j,k) = F_t(i,j,k) + F_tp(i,j,k)
            F_t (i,j,k) = ZERO_8
         end do
         end do
         end do
*
         call hzd_solfft_ad(F_plt, wk1_8, Fft_pri_8 ,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
         call hzd_solfft_ad(F_tp, wk1_8, Fft_pri_8 ,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
*     ADJ of
* updating phi' at the top
*
         do j = 1,l_nj
         do i = 1,l_ni
            F_it(i,j,1) = F_ip(i,j,1) + F_it(i,j,1)
            F_ip(i,j,1) = ZERO_8
         end do
         end do
*
*     ADJ of
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
         do k = 2, Nk
         do j = 1,l_nj
         do i = 1,l_ni
            F_ip(i,j,k) = F_it(i,j,k) + F_ip(i,j,k)
            F_it(i,j,k) = ZERO_8
         end do
         end do
         end do
*
         call hzd_solfft_ad(F_it, wk1_8, Fft_pri_8,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
         call hzd_solfft_ad(F_ip, wk1_8, Fft_pri_8,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
 9988 continue
*
*     ADJ of
*     Total divergence
*     ~~~~~~~~~~~~~~~~
         call hzd_solfft_ad(F_td, wk1_8, Fft_pri_8 ,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
*     ADJ of
*     Vertical motion in pressure coord.
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call hzd_solfft_ad(F_psd, wk1_8, Fft_pri_8 ,
     %                      Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
*     ADJ of
*     Momentum
*     ~~~~~~~~
         call hzd_solfft_ad(F_v, wk1_8, Fft_pri_8 ,
     %                      Hzd_av_8,Hzd_cv_8,Hzd_deltav_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %                      l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Opr_opsxp0_8,Hzd_yp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
         call hzd_solfft_ad(F_u, wk1_8, Fft_pri_8, 
     %                      Hzd_au_8,Hzd_cu_8,Hzd_deltau_8,
     %                      trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %                      trp_12dn,trp_22n,G_nj, dpwr,l_minx, 
     %                      l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,
     %                      trp_12dn,Hzd_xp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                      Ptopo_npex,Ptopo_npey)
*
      endif
*
 1000 format(/,
     $  3X,'ADJ of PERFORM DEL-',i1,' FFT HORIZONTAL DIFFUSION: (S/R HZD_HOF_AD)')
*     __________________________________________________________________
*
      return
      end
