***s/r hzd_main - applies horizontal diffusion on a given set of fields
*
#include "model_macros_f.h"
*
      subroutine hzd_main 
*
      implicit none
*
*author
*     Joseph-Pierre Toviessi ( after version v1_03 of dif )
*
*revision
* v2_00 - Desgagne M.       - initial MPI version 
* v2_10 - Qaddouri&Desgagne - higher order diffusion operator
* v2_21 - Desgagne M.       - new call to horwavg
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_01 - Toviessi J. P.    - add call hzd_ho_parite
* v3_02 - Desgagne M.       - correction for non-hydrostatic version
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_20 - Tanguay M.        - Introduce Hzd_hzdmain_n_L
* v3_21 - Desgagne M.       - added explicit horiz diff.
* v4_xx - Gravel, S.        - adapt to vertical staggering
* v3_30 - Tanguay M.        - activate Hzd_type_S='EXPLICIT' 
*
*object
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "fft.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "p_geof.cdk"
#include "grd.cdk"
#include "lctl.cdk"
#include "type.cdk"
#include "ver.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer err, nlod, key1(7), i, j, k
      real wk0(LDIST_SHAPE), wk1(LDIST_SHAPE)
      real*8  ONE_8, bbb_8, eta_8
      parameter( ONE_8 = 1. )
**
*     _________________________________________________________________
*
      if (.not.G_lam.and.Hzd_type_S.eq.'EXPLICIT') 
     %    call gem_stop('ABORT .not.G_lam.and.Hzd_type=EXPLICIT',-1)

      if ((.not.Hzd_fact_L).and.(.not.Hzd_ho_L).or..not.Hzd_hzdmain_0_L) then
         if (Lun_debug_L) write(Lun_out,1001)
         return
      endif
*
      key1(1)  = VMM_KEY(ut1)
      key1(2)  = VMM_KEY(vt1)
      key1(3)  = VMM_KEY(zdt1)
      key1(4)  = VMM_KEY(tt1)
      key1(5) = VMM_KEY(st0)
      key1(6) = VMM_KEY(st1)
      nlod = 6
      if (.not. Schm_hydro_L) then
         key1(nlod+1) = VMM_KEY(wt1)
         nlod = nlod+1
      endif
*     - - - - - - - - - - - - - - -
      err = vmmlod(key1,nlod)
*     - - - - - - - - - - - - - - -
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(zdt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(st0)
      err = VMM_GET_VAR(st1)
      wt1_  = 0
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(wt1)
      endif
*************************************
*  1. Implicit horizontal diffusion *
*************************************


      if (Hzd_fact_L) then
c         call gem_stop('hzd_main : ajouter zdot 4',-4)
         call hzd_fact ( ut1, vt1, tt1, wt1, LDIST_DIM, G_nk)
      endif
*
      if (Hzd_ho_L) then
         if (Hzd_type_S.eq.'EXPLICIT') then
            call hzd_exhrdif ( ut1, vt1, zdt1, LDIST_DIM, G_nk)
         else
         if (Fft_fast_L) then
*           use FFT in diffusion-solver
            if (G_lam) then
c               call gem_stop('hzd_main : ajouter zdot 1',-1)
                call hzd_hof_lam ( ut1, vt1, tt1, wt1, LDIST_DIM, G_nk)
            else
                call hzd_hof ( ut1, vt1, zdt1, tt1, wt1, LDIST_DIM, G_nk)
            endif
         else
*           use MXMA in diffusion-solver
            if ( .not. Eigv_parity_L) then
c               call gem_stop('hzd_main : ajouter zdot 2',-2)
                call hzd_ho ( ut1, vt1, tt1, wt1, LDIST_DIM, G_nk)
            else
c               call gem_stop('hzd_main : ajouter zdot 3',-3)
                call hzd_ho_parite( ut1, vt1, tt1, wt1, LDIST_DIM, G_nk)
            endif
         endif
         endif
      endif



      if ((Hzd_fact_L.and.Cstv_phidf_8.gt.0.).or.(Hzd_ho_L)) then
*
*     Adjust surface pressure and hence pi' (FOR CLIMATE APPLICATIONS) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      if (Schm_psadj_L) then         
!$omp parallel
!$omp do
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            wk0(i,j) = st0(i,j)
            wk1(i,j) = st1(i,j)
         end do
         call vsexp (wk0(1+pil_w,j),wk0(1+pil_w,j),(l_ni-pil_e-pil_w))
         call vsexp (wk1(1+pil_w,j),wk1(1+pil_w,j),(l_ni-pil_e-pil_w))
         do i= 1+pil_w, l_ni-pil_e 
            wk0(i,j) = (wk0(i,j)-1.)*Cstv_pisrf_8
            wk1(i,j) = (wk1(i,j)-1.)*Cstv_pisrf_8
         end do
         end do
!$omp enddo
*
!$omp single
         call horwavg ( bbb_8, wk0, wk1, LDIST_DIM )
!$omp end single
*
*        Redistribute the average mass loss at the surface, ...
*
!$omp do
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            wk1(i,j) = wk1(i,j) + bbb_8
         end do
!         end do
!!$omp enddo
*
*        ... correct s immediately and ...
*
!!$omp do
!         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            st1(i,j)= log(ONE_8+dble(wk1(i,j)/Cstv_pisrf_8))
         end do
         end do
!$omp enddo
*
!$omp end parallel

*
      endif
      endif
*
      err = vmmuld(-1,0)
*    
 1001 format(/,3X,'NO HORIZONTAL DIFFUSION REQUIRED')

*
      return
      end
