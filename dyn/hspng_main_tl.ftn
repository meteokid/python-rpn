***s/r hspng_main_tl - TLM of hspng_main
*
#include <model_macros_f.h>
*
      subroutine hspng_main_tl
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v3_02 - Tanguay M.        - initial MPI version
*
*object
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "hspng.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "p_geof.cdk"
#include "vt1m.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer pnerr, pnlod, pnlkey1(25), i, j, k
      real*8  ONE_8, bbb_8, eta_8
      parameter( ONE_8 = 1. )
*
      real wtt1m(LDIST_SHAPE,l_nk), wfit1m(LDIST_SHAPE,l_nk)
*     _________________________________________________________________
*
      if (Hspng_nj.lt.1) return
*     _________________________________________________________________
*
      if( .not. Schm_hydro_L ) call gem_stop('hspng_main_tl',-1)
      if(       Schm_psadj_L ) call gem_stop('hspng_main_tl',-1)
      if( .not. Schm_cptop_L ) call gem_stop('hspng_main_tl',-1)
*     ______________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000) Hspng_nj
*
      pnlkey1(1)  = VMM_KEY(ut1)
      pnlkey1(2)  = VMM_KEY(vt1)
      pnlkey1(3)  = VMM_KEY(psdt1)
      pnlkey1(4)  = VMM_KEY(tpt1)
      pnlkey1(5)  = VMM_KEY(fipt1)
      pnlkey1(6)  = VMM_KEY(tdt1)
      pnlkey1(7)  = VMM_KEY(tt1)
      pnlkey1(8)  = VMM_KEY(fit1)
      pnlkey1(9)  = VMM_KEY(topo)
      pnlkey1(10) = VMM_KEY(tplt1)
      pnlkey1(11) = VMM_KEY(qt1)
      pnlkey1(12) = VMM_KEY(pipt1)
      pnlkey1(13) = VMM_KEY(st1)
      pnlod = 13
*
      pnlkey1(pnlod+1)  = VMM_KEY(ut1m)
      pnlkey1(pnlod+2)  = VMM_KEY(vt1m)
      pnlkey1(pnlod+3)  = VMM_KEY(psdt1m)
      pnlkey1(pnlod+4)  = VMM_KEY(tpt1m)
      pnlkey1(pnlod+5)  = VMM_KEY(fipt1m)
      pnlkey1(pnlod+6)  = VMM_KEY(tdt1m)
      pnlkey1(pnlod+7)  = VMM_KEY(tplt1m)
      pnlkey1(pnlod+8)  = VMM_KEY(qt1m)
      pnlkey1(pnlod+9)  = VMM_KEY(pipt1m)
      pnlkey1(pnlod+10) = VMM_KEY(st1m)
      pnlod = pnlod+10
*
*     - - - - - - - - - - - - - - -
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(psdt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(fipt1)
      pnerr = VMM_GET_VAR(tdt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(fit1)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(qt1)
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(st1)
*
      pnerr = VMM_GET_VAR(ut1m)
      pnerr = VMM_GET_VAR(vt1m)
      pnerr = VMM_GET_VAR(psdt1m)
      pnerr = VMM_GET_VAR(tpt1m)
      pnerr = VMM_GET_VAR(fipt1m)
      pnerr = VMM_GET_VAR(tdt1m)
      pnerr = VMM_GET_VAR(tplt1m)
      pnerr = VMM_GET_VAR(qt1m)
      pnerr = VMM_GET_VAR(pipt1m)
      pnerr = VMM_GET_VAR(st1m)
*
      if (.not. Schm_hydro_L) then
*
*        ----------------------
*        HSPNG_MAIN_TL not done
*        ----------------------
*
      else
         wt1_  = 0
         qpt1_ = 0
         mut1_ = 0
         multx_= 0
      endif
*
*     Restore TRAJECTORY
*     ------------------
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
      wfit1m(i,j,k) = fipt1m(i,j,k) + Cstvr_fistr_8(k) + topo(i,j)
      wtt1m (i,j,k) =  tpt1m(i,j,k) + Cstv_tstr_8
      end do
      end do
      end do
*
c*PDIR RESERVE=Macr_cpud
*
*     TLM
*     ---
      call hspng_drv_tl ( ut1 , vt1 , psdt1, tpt1, fipt1, tdt1,
     %                    tt1 , fit1, tplt1, qt1 , pipt1, wt1 ,
     %                    qpt1, mut1, multx, st1 , topo ,
     %                     LDIST_DIM, G_nk)
*
*     TRAJECTORY 
*     ----------
      call hspng_drv ( ut1m , vt1m , psdt1m, tpt1m, fipt1m, tdt1m,
     %                 wtt1m ,wfit1m,tplt1m, qt1m , pipt1m, wt1 ,
     %                 qpt1, mut1, multx, st1 , topo ,
     %                 LDIST_DIM, G_nk)
*
c*PDIR RELEASE
*
      if (Cstv_phidf_8.gt.0.) then
*
*******************************************
*  $. Indirect diffusion of s through pi' *
*******************************************
*
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        TRAJECTORY
*        ----------
         st1m(i,j)= log(ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
*
*        TLM
*        ---
         st1(i,j)= (      dble(pipt1 (i,j,G_nk)/geomg_pib(G_nk)))/
     %             (ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
*
      end do
      end do
*
*******************************************
*  $. Indirect diffusion of q through pi' *
*******************************************
*
      do k=1,G_nk
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        TRAJECTORY
*        ----------
         qt1m(i,j,k) = log( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
*
*        TLM
*        ---
         qt1(i,j,k) = ( dble(pipt1(i,j,k)) ) /
     %                ( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
*
      end do
      end do
      end do
*
      endif
*
      pnerr = vmmuld(-1,0)
*    
 1000 format(/,3X,
     $ 'TLM of DEL-2 SPONGE LAYER ON THE POLES FOR ',I3,' ROWS: (S/R HSPNG_MAIN_TL)')
*
      return
      end
