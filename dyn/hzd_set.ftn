***s/r hzd_set - Compute diffusion operator matrix on G, U and V grids
*
#include <model_macros_f.h>
*
      subroutine hzd_set 
*
#include "impnone.cdk"
*
*
*author    
*     J.P. Toviessi - CMC - Jan 1999
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_10 - Qaddouri&Desgagne - higher order diffusion operator
* v2_11 - Desgagne M.       - remove vertical modulation
* v2_31 - Qaddouri A.       - remove stkmemw and correction to yp2
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*     see id section
*       
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "geomg.cdk"
#include "hzd.cdk"
#include "dcst.cdk"
#include "fft.cdk"
#include "trp.cdk"
#include "opr.cdk"
#include "cstv.cdk"
#include "lun.cdk"
#include "vspng.cdk"
#include "ptopo.cdk"
*      
      integer i,j,k,istat,dim,dpwr,Gni
      real*8, dimension(:)  ,allocatable :: wk1_8,wk2_8
      real*8 ZERO_8, ONE_8, HALF_8
      real*8 c_8, gdx_8
      PARAMETER( ZERO_8 = 0.0 , ONE_8  = 1.0 , HALF_8 = 0.5 )
**
*     ---------------------------------------------------------------
*
*
*     Set the length of the work matrices to the region without 
*     the pilot region for LAM

      Gni=G_ni-Lam_pil_w-Lam_pil_e
*
      Hzd_fact_L = .false.
      Hzd_ho_L   = .false.
      if ((Hzd_type_S.eq."FACT").and.
     $   ((Cstv_uvdf_8.gt.0.).or.(Cstv_phidf_8.gt.0)) ) 
     $                                               Hzd_fact_L = .true.
      if ((Hzd_type_S.eq."HO").and.(Hzd_lnr.gt.0.))    Hzd_ho_L = .true.
      if (Hzd_fact_L .and. Lun_out.gt.0) write(Lun_out,1001)
      if (Hzd_ho_L .and. Lun_out.gt.0) write(Lun_out,1002)
      if (Lun_debug_L)print *,'HZD_SET: Hzd_type_S=',Hzd_type_S,' Hzd_ho_L=',Hzd_ho_L
* 
      if ((Hzd_fact_L.or.Hzd_ho_L).or.(Vspng_nk.gt.0)) then
*
         call hpalloc(VAR_PTR(Hzd_xp0_8)      ,3*G_ni*2,istat,1)
         call hpalloc(VAR_PTR(Hzd_xp2_8)      ,3*G_ni*2,istat,1)
         call hpalloc(VAR_PTR(Hzd_yp0_8)      ,3*G_nj*2,istat,1)
         call hpalloc(VAR_PTR(Hzd_yp2_8)      ,3*G_nj*2,istat,1)

         do i = 1, 3*G_ni
            Hzd_xp0_8(i) = ZERO_8
         end do
         do i = 1+Lam_pil_w, G_ni-Lam_pil_e
            Hzd_xp0_8(G_ni+i) = G_xg_8(i+1) - G_xg_8(i)
         end do

         allocate ( wk1_8(Gni) )
         allocate ( wk2_8(Gni*3) )

         do i = 1, 3*G_ni
            Hzd_xp2_8(i) = ZERO_8
         end do

         do i = 1+Lam_pil_w, G_ni-Lam_pil_e
            wk1_8(i-Lam_pil_w) = (G_xg_8(i+2)-G_xg_8(i)) * HALF_8
         end do
         call set_ops8 (wk2_8,wk1_8,ONE_8,G_periodx,Gni,Gni,1)
         do i=1,Gni
            Hzd_xp2_8(i+Lam_pil_w)=wk2_8(i)
            Hzd_xp2_8(G_ni+i+Lam_pil_w)=wk2_8(Gni+i)
            Hzd_xp2_8(G_ni*2+i+Lam_pil_w)=wk2_8(Gni*2+i)
         enddo
*
         deallocate (wk1_8,wk2_8)
*
         do j = 1, 3*G_nj
            Hzd_yp0_8(j) = ZERO_8
            Hzd_yp2_8(j) = ZERO_8
         end do    
         do j = 1+Lam_pil_s, G_nj-Lam_pil_n
            Hzd_yp0_8(G_nj+j) = sin(G_yg_8(j+1))-sin(G_yg_8(j))
         end do
*
         j=1+Lam_pil_s
         Hzd_yp2_8(2*G_nj+j)= (cos(G_yg_8(j+1))**2)/(
     %                      sin((G_yg_8(j+2)+G_yg_8(j+1  ))* HALF_8)-
     %                      sin((G_yg_8(j  )+G_yg_8(j+1))* HALF_8))
         Hzd_yp2_8(G_nj+j) =-Hzd_yp2_8(2*G_nj+j)

         do j = 2+Lam_pil_s, G_njv-1-Lam_pil_n
            Hzd_yp2_8(2*G_nj+j)= (cos(G_yg_8(j+1))**2)/(
     %                          sin((G_yg_8(j+2)+G_yg_8(j+1))* HALF_8)-
     %                          sin((G_yg_8(j+1)+G_yg_8(j  ))* HALF_8))
            Hzd_yp2_8(j) = (cos(G_yg_8(j))**2)/(
     %                      sin((G_yg_8(j+1)+G_yg_8(j  ))* HALF_8)-
     %                      sin((G_yg_8(j  )+G_yg_8(j-1))* HALF_8))
            Hzd_yp2_8(G_nj+j) = - (Hzd_yp2_8(j) + Hzd_yp2_8(2*G_nj+j))
         enddo

         j=G_njv-Lam_pil_n
         Hzd_yp2_8(j) =Hzd_yp2_8(2*G_nj+j-1)
         Hzd_yp2_8(G_nj+j) = - (Hzd_yp2_8(j) + Hzd_yp2_8(2*G_nj+j))
*
         if (Hzd_fact_L) then
*
            if (Lun_out.gt.0) write(Lun_out,1001)
*
            call hpalloc(VAR_PTR(Hzd_opsxp0_8)   ,  G_ni*2,istat,1)
            call hpalloc(VAR_PTR(Hzd_opsyp0_8)   ,  G_nj*2,istat,1)
*
            do i = 1,G_ni
               Hzd_opsxp0_8 (i) = ZERO_8
            enddo
            do i = 1+Lam_pil_w, G_ni-Lam_pil_e
               Hzd_opsxp0_8 (i) = G_xg_8(i+1) - G_xg_8(i)
            end do
*
            do j = 1,G_nj
               Hzd_opsyp0_8 (j) = ZERO_8
            enddo
            do j = 1+Lam_pil_s, G_nj-Lam_pil_n
               Hzd_opsyp0_8 (j) = sin(G_yg_8(j+1))-sin(G_yg_8(j))
            end do
*
         endif
c     do i=1,G_ni*3
c        print *,'hzd_xp0_8(',i,')=',Hzd_xp0_8(i)
c     enddo
c     do i=1, G_nj*3
c        print *,'hzd_yp0_8(',i,')=',Hzd_yp0_8(i)
c     enddo
c     do i=1,G_ni*3
c        print *,'hzd_xp2_8(',i,')=',Hzd_xp2_8(i)
c     enddo
c     do i=1, G_nj*3
c        print *,'hzd_yp2_8(',i,')=',Hzd_yp2_8(i)
c     enddo
c     if (Hzd_fact_L) then
c     do i=1,G_ni*3
c        print *,'hzd_opsxp0_8(',i,')=',Hzd_opsxp0_8(i)
c     enddo
c     do i=1, G_nj*3
c        print *,'hzd_opsyp0_8(',i,')=',Hzd_opsyp0_8(i)
c     enddo
c     endif
*
*     Compute eigenvalues and eigenvector for high-order diffusion.
*              Eigenvalue problem in East-West direction
*        -------------------------------------------------------
         if (Hzd_ho_L) then
*
            if (Lun_out.gt.0) write(Lun_out,1002)
            call hpalloc( Hzd_xeval_8_, G_ni*2, istat, 1 )
            if ( .not. Fft_fast_L ) then
               call hpalloc( Hzd_xevec_8_, G_ni*G_ni*2, istat, 1 )
               call set_poic  ( Hzd_xeval_8, Hzd_xevec_8 , Hzd_xp0_8,
     $                                        Hzd_xp2_8, Gni, G_ni )
            else
               c_8 = Dcst_pi_8 / dble( Gni )
               if (G_lam) then
                   gdx_8 = (G_xg_8(G_ni-Lam_pil_e)-G_xg_8(Lam_pil_w) )/dble(Gni)
                   if(Lun_debug_L)print *,'gdx=',gdx_8
                   do i=1,1+Lam_pil_w
                      Hzd_xeval_8(i)    = ZERO_8
                   enddo
                   do i=G_ni-Lam_pil_e+1,G_ni
                      Hzd_xeval_8(i)    = ZERO_8
                   enddo
                   do i = 2+Lam_pil_w, G_ni-Lam_pil_e
                      Hzd_xeval_8(i) = 
     $                    - (2*sin(float(i-Lam_pil_w-1)*c_8/2)/gdx_8)**2
                   enddo
               else
                   Hzd_xeval_8(1)    =   ZERO_8
                   Hzd_xeval_8(G_ni) = - ONE_8 / ( c_8 ** 2. )
                   do i = 1, (G_ni-1)/2
                      Hzd_xeval_8(2*i+1) = - (sin(dble(i) * c_8) / c_8) **2.
                      Hzd_xeval_8(2*i)   =  Hzd_xeval_8(2*i+1)
                   end do
               endif
            endif
c           do i=1,G_ni
c              print *,'hzd_xeval_8(',i,')=',Hzd_xeval_8(i)
c           enddo
c           if (.not.Fft_fast_L) then
c                do i=1,G_ni*G_ni
c                   print *,'hzd_xevec_8(',i,')=',Hzd_xevec_8(i)
c                enddo
c           endif
*
*     initialize operator nord_south for U, V and scalar grids
*                              for high-order diffusion-solver
*
            dpwr= Hzd_pwr / 2
            dim = (trp_22max-trp_22min+1)
            dim = dim * G_nj * dpwr*dpwr * 2
            call hpalloc(Hzd_au_8_    , dim, istat, 1)
            call hpalloc(Hzd_cu_8_    , dim, istat, 1)
            call hpalloc(Hzd_deltau_8_, dim, istat, 1)
            call hpalloc(Hzd_av_8_    , dim, istat, 1)
            call hpalloc(Hzd_cv_8_    , dim, istat, 1)
            call hpalloc(Hzd_deltav_8_, dim, istat, 1)
            call hpalloc(Hzd_as_8_    , dim, istat, 1)
            call hpalloc(Hzd_cs_8_    , dim, istat, 1)
            call hpalloc(Hzd_deltas_8_, dim, istat, 1)
*
            c_8= 1.E+32
            if(max(G_ni,2*G_nj).eq.G_ni) then
               do i = 1+Lam_pil_w, G_ni-Lam_pil_e
                  c_8 = min(c_8,(G_xg_8(i+1) - G_xg_8(i)))
               end do
            else
               do j= 1+Lam_pil_s,G_nj-Lam_pil_n
                  c_8 = min(c_8,(G_yg_8(j+1) - G_yg_8(j)))
               end do
            endif
            hzd_lnR   = log(1.- Hzd_lnR)
            Hzd_cdiff = (2./c_8)**Hzd_pwr / (-Hzd_lnR)
            if (Lun_out.gt.0) then
               write(Lun_out,1010) 
     $         (Dcst_rayt_8**Hzd_pwr)/(Cstv_dt_8*Hzd_cdiff),Hzd_pwr
            endif
            allocate (wk1_8(3*G_nj),wk2_8(3*G_nj))
            do j = 1,3*G_nj
               wk1_8 (j) = ZERO_8
               wk2_8 (j) = ZERO_8
            enddo
            do j = 1+Lam_pil_s, G_nj-Lam_pil_n
               wk1_8 (       j) = ZERO_8
               wk1_8 (  G_nj+j) = Opr_opsyp0_8(G_nj+j)/cos(G_yg_8(j))**2
               wk1_8 (2*G_nj+j) = ZERO_8
               wk2_8 (       j) = ZERO_8
               wk2_8 (  G_nj+j) = (sin(G_yg_8(j+1))-sin(G_yg_8(j)))/
     %               ( cos ( (G_yg_8(j+1  )+G_yg_8(j))* HALF_8) **2)
               wk2_8 (2*G_nj+j) = ZERO_8
            end do
*
            if (Lun_debug_L) print *,'HZD_DELPWR on U'
            call hzd_delpwr (Hzd_au_8,Hzd_cu_8,Hzd_deltau_8,dpwr,
     $                       trp_22min,trp_22max,G_nj,trp_22n,trp_22n0,
     $                       Opr_opsyp0_8,Opr_opsyp2_8,wk1_8,
     $                       Hzd_xeval_8, Hzd_cdiff)
*
            if (Lun_debug_L) print *,'HZD_DELPWR on V'
            call hzd_delpwr (Hzd_av_8,Hzd_cv_8,Hzd_deltav_8,dpwr,
     $                       trp_22min,trp_22max,G_nj,trp_22n,trp_22n0,
     $                       Hzd_yp0_8,Hzd_yp2_8,wk2_8,
     $                       Opr_xeval_8, Hzd_cdiff)
*
            if (Lun_debug_L) print *,'HZD_DELPWR on scalar'
            call hzd_delpwr (Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,dpwr,
     $                       trp_22min,trp_22max,G_nj,trp_22n,trp_22n0,
     $                       Opr_opsyp0_8,Opr_opsyp2_8,wk1_8,
     $                       Opr_xeval_8, Hzd_cdiff)
*
c           print *,'trp_22max,trp_22min=',trp_22max,trp_22min
c           do i=1,((trp_22max-trp_22min+1)*G_nj)
c              print *,'Hzd_as_8(',i,')=',Hzd_as_8(i)
c           enddo
c           do i=1,((trp_22max-trp_22min+1)*G_nj)
c              print *,'Hzd_cs_8(',i,')=',Hzd_cs_8(i)
c           enddo
c           do i=1,((trp_22max-trp_22min+1)*G_nj)
c              print *,'Hzd_deltas_8(',i,')=',Hzd_deltas_8(i)
c           enddo
            deallocate (wk1_8,wk2_8)
         endif
      else
         if (Lun_out.gt.0) write(Lun_out,1003)
      endif
*
 1001 format(/,'INITIALIZATING FACTORIZED HORIZONTAL DIFFUSION ', 
     $         '(S/R HZD_SET)',/,60('='))
 1002 format(/,'INITIALIZATING HIGH ORDER HORIZONTAL DIFFUSION ',
     $         '(S/R HZD_SET)',/,60('='))
 1003 format(/,'NO HORIZONTAL DIFFUSION REQUIRED',/,32('='))
 1010 format (3X,'Diffusion Coefficient = ',e22.14,' m**',i1,'/sec' )
*
*     ---------------------------------------------------------------
      return
      end
