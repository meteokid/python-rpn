***s/r indata - Read and process the input data at 
*               beginning of integration
*
#include "model_macros_f.h"
*
      subroutine indata
*
      implicit none
*
*author 
*     Michel Roch - rpn - apr 1994
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from indata v1_03)
* v2_10 - Tanguay M.        - introduce partition of preprocessing when 4D-Var 
* v2_20 - Pellerin P.       - read geophysical fields depending on schemes
* v2_20 - Lee V.            - eliminated p_slicgeo, output of geophysical fields
* v2_20 -                     will be from the entry or permanent physics bus
* v2_30 - Desgagne M.       - entry vertical interpolator in gemdm
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_02 - Buehner M.        - leave winds as images for 4dvar or SV jobs
* v3_03 - Tanguay M.        - Adjoint Lam configuration 
* v3_11 - Gravel S.         - Adapt for theoretical cases and varying topo
* v3_11 - Tanguay M.        - Abort when V4dg_conf.ne.0 and Vtopo_L  
* v3_21 - Tanguay M.        - do filtering at t=0 in v4d_predat
*
*object
*	
*arguments
*	none
*
*implicits
#include "schm.cdk"
#include "glb_ld.cdk"
#include "v4dg.cdk"
#include "bmf.cdk"
#include "out1.cdk"
#include "ind.cdk"
#include "p_geof.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "theo.cdk"
#include "vtopo.cdk"
#include "ptopo.cdk"
#include "lctl.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer key1(10),nvar,err
*
*     ---------------------------------------------------------------
*
*     ----------------------------------------
*     Store TRAJ initial state
*     for Preprocessing of Dependent variables
*     ----------------------------------------
      if ( V4dg_conf.ne.0.and.V4dg_part.eq.3.and.V4dg_oktr_L ) 
     $     call v4d_rwtraj (1) 
*
      key1( 1) = VMM_KEY(  ut1)
      key1( 2) = VMM_KEY(  vt1)
      key1( 3) = VMM_KEY(  tt1)
      key1( 4) = VMM_KEY(psdt1)
      key1( 5) = VMM_KEY(  st1)
      key1( 6) = VMM_KEY(fiptx)
      key1( 7) = VMM_KEY( topo)
      nvar = 7
*
      Vtopo_L = ((Vtopo_start .ge. 0)
     %           .and. (Lctl_step-Vtopo_start .le. Vtopo_ndt))
*
      if(V4dg_conf.ne.0.and.Vtopo_L) then
         call gem_stop ('INDATA: V4dg_conf.ne.0.and.Vtopo_L NOT VALID', -1)
      endif   

      if (Vtopo_L) then
         key1(8) = VMM_KEY(dtopo)
         nvar=8
      endif

      if (.not. Schm_hydro_L) then
         key1(nvar+1) = VMM_KEY(wt1)
         key1(nvar+2) = VMM_KEY(qsect1)
         nvar = nvar+2
      endif
*
      err = vmmlod(key1,nvar)
*
      err = VMM_GET_VAR(  ut1)
      err = VMM_GET_VAR(  vt1)
      err = VMM_GET_VAR(  tt1)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR(  st1)
      err = VMM_GET_VAR(fiptx)
      err = VMM_GET_VAR( topo)
*
      Ind_u_   = ut1_
      Ind_v_   = vt1_
      Ind_t_   = tt1_
      Ind_psd_ = psdt1_
      Ind_s_   = st1_
      Ind_fip_ = fiptx_
      Ind_topo_= topo_
*
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(   wt1)
         err = VMM_GET_VAR(qsect1)
         Ind_w_     = wt1_
         Ind_qsec_  = qsect1_
      endif
      if ( Vtopo_L) then
         err = VMM_GET_VAR( dtopo)
         Ind_dtopo_= dtopo_
      endif
*
*C       1.    If theoretical case, generate initial data, 
*              otherwise read input data
*              -------------------------------------------
*
*     -----------------------------------------
      if ( V4dg_conf.eq.0.or.V4dg_part.eq.2 ) then 
*     -----------------------------------------
*
      bmf_time1 = Out1_dato(1)
      bmf_time2 = Out1_dato(2)
      if ( Schm_phyms_L ) call readgeo()
      if ( Schm_theoc_L ) then
         if (      Theo_case_S.eq.'BUBBLE'
     $        .or. Theo_case_S.eq.'BUBBLE_G'
     $        .or. Theo_case_S.eq.'2_BUBBLES') then
            call bubble()
         else if ( Theo_case_S.eq.'MTN_SCHAR' 
     $        .or. Theo_case_S.eq.'MTN_SCHAR2'
     $        .or. Theo_case_S.eq.'MTN_PINTY'
     $        .or. Theo_case_S.eq.'MTN_PINTY2'
     $        .or. Theo_case_S.eq.'MTN_PINTYNL') then
            call mtn_case()
         else
            call abort
         endif
      else
         call readdyn()
      endif
*
*     In specific 4D-Var runs, Convert wind images to true winds
*     ----------------------------------------------------------
      if ( V4dg_conf.ne.0.and..not.(V4dg_4dvar_L.or.V4dg_sgvc_L) ) 
     $     call v4d_img2uv () 
*
*     Initialize the dynamics model configuration
*     -------------------------------------------
*
      call set_dync()
*
*     Initialize model and SL operators
*     ---------------------------------
      call set_opr()
      call adw_set()
*
*     -----
      endif
*     -----
*
*C       2.    Performs preprocessing of the dynamics input data
*              -------------------------------------------------
*
      call predat()
*
      err = vmmuld(-1,0)
*
      if (G_lam.and.(V4dg_conf.eq.0.or.V4dg_part.eq.3)) 
     $      call nest_init 
*
*     ---------------------------------------------------------------
*
      return
      end
