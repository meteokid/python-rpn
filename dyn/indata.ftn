! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r indata - Read and process the input data at 
*               beginning of integration
*
#include "model_macros_f.h"
*
      subroutine indata
*
      implicit none
*
*author 
*     Michel Roch - rpn - apr 1994
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from indata v1_03)
* v2_10 - Tanguay M.        - introduce partition of preprocessing when 4D-Var 
* v2_20 - Pellerin P.       - read geophysical fields depending on schemes
* v2_20 - Lee V.            - eliminated p_slicgeo, output of geophysical fields
* v2_20 -                     will be from the entry or permanent physics bus
* v2_30 - Desgagne M.       - entry vertical interpolator in gemdm
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_02 - Buehner M.        - leave winds as images for 4dvar or SV jobs
* v3_03 - Tanguay M.        - Adjoint Lam configuration 
* v3_11 - Gravel S.         - Adapt for theoretical cases and varying topo
* v3_11 - Tanguay M.        - Abort when V4dg_conf.ne.0 and Vtopo_L  
* v3_30 - Desgagne M.       - re-organize code to eliminate v4d controls
* v3_30 - Lee V.            - new LAM I/O interface
*
*object
*	
*arguments
*	none
*
*implicits
#include "acid.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "filename.cdk"
#include "bmf.cdk"
#include "out3.cdk"
#include "ind.cdk"
#include "p_geof.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "theo.cdk"
#include "vtopo.cdk"
#include "ptopo.cdk"
#include "lctl.cdk"
#include "lun.cdk"
#include "modconst.cdk"
#include "itf_phy_buses.cdk"
*
      integer  vmmlod,vmmget,vmmuld,nav_3df,newdate,readgeo
      external vmmlod,vmmget,vmmuld,nav_3df,newdate,readgeo
*
      character*16, dimension (:,:), allocatable ::  listgeonm
      character*256 fn
      integer key1(12),nvar,err,unf,errop,ungeo,dat,k,
     $        err_geo,skipcode
*
*     ---------------------------------------------------------------
*
      if (Lun_out.gt.0) write (Lun_out,1000)
*
      call v4d_indata1(Vtopo_L)
*
      key1( 1) = VMM_KEY(  ut1)
      key1( 2) = VMM_KEY(  vt1)
      key1( 3) = VMM_KEY(  wt1)
      key1( 4) = VMM_KEY(  tt1)
      key1( 5) = VMM_KEY( zdt1)
      key1( 6) = VMM_KEY(  st1)
      key1( 7) = VMM_KEY(fiptx)
      key1( 8) = VMM_KEY( topo)
      key1( 9) = VMM_KEY( topu)
      key1(10) = VMM_KEY( topv)
      nvar = 10
*
      if (Vtopo_L) then
         key1(nvar+1) = VMM_KEY(dtopo)
         nvar=nvar+1
      endif

      if (.not. Schm_hydro_L) then
         key1(nvar+1) = VMM_KEY(qt1)
         nvar = nvar+1
      endif
*
      err = vmmlod(key1,nvar)
*
      err = VMM_GET_VAR(  ut1)
      err = VMM_GET_VAR(  vt1)
      err = VMM_GET_VAR(  wt1)
      err = VMM_GET_VAR(  tt1)
      err = VMM_GET_VAR( zdt1)
      err = VMM_GET_VAR(  st1)
      err = VMM_GET_VAR(fiptx)
      err = VMM_GET_VAR( topo)
      err = VMM_GET_VAR( topu)
      err = VMM_GET_VAR( topv)
*
*     Equivalencing Ind_u to ut1
*
      Ind_u_   = ut1_
      Ind_v_   = vt1_
      Ind_w_   = wt1_
      Ind_t_   = tt1_
      Ind_zd_  = zdt1_
      Ind_s_   = st1_
      Ind_fip_ = fiptx_
      Ind_topo_= topo_
      Ind_topu_= topu_
      Ind_topv_= topv_
*
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(qt1)
         Ind_q_  = qt1_
      endif
      if ( Vtopo_L) then
         err = VMM_GET_VAR(dtopo)
         Ind_dtopo_= dtopo_
      endif
*
      skipcode=0
      call v4d_indata2(skipcode)
      if (skipcode.eq.1) goto 9999
*
      err_geo = readgeo()
      allocate (listgeonm(2,p_bgeo_top))
      listgeonm(1,:) = geonm(:,1)
      listgeonm(2,:) = 'NIL'
      if (err_geo.eq.0) listgeonm(2,:) = 'OK'
*
      if (G_lam) then
         prefgeo = '!@#$%^&*'
         ungeo   = 91
         open(ungeo,FILE='../geophy_fileprefix_for_LAM',
     $                          status='OLD',iostat=err)
         if (err.eq.0) then
            read (ungeo, '(a)', end = 9120) prefgeo
 9120       close(ungeo)
         endif
         if (prefgeo.ne.'!@#$%^&*') call geodata (G_ni,G_nj,listgeonm)
      endif
*
      errop = -1
      if (G_lam) then
         unf = 76
         fn  = '../casc/3df_filemap.txt'
         open (unf,file=fn,access='SEQUENTIAL',status='OLD',
     $                        iostat=errop,form='FORMATTED')
      endif
*
      if ( errop.eq.0 ) then
         err = nav_3df  (unf,1.2,1.0d0)
         call gem_stop  ('nav_3df',err)
         if (Acid_test_L) then
            call acid_3df_dynp (G_ni,G_nj,unf)
         else
            call casc_3df_dynp (G_ni,G_nj,unf,listgeonm)
         endif
      else
         call datp2f   ( dat, Mod_runstrt_S )
         err = newdate ( dat, bmf_time1, bmf_time2, -3 )
*
         if ( Schm_theoc_L ) then
            call theo_3D ! canonical cases - generate initial data
         else
            call readdyn ()
         endif	  
*
         call v4d_indata3()
         call set_dync ()
         call predat   ()
      endif
*
      if (Lun_out.gt.0) write (Lun_out,1001)
*
      do k=1,P_bgeo_top
         if ((geonm(k,1).eq.'MT').or.(geonm(k,1).eq.'MF'))
     $        call glbstat1(geofld(geopar(k,1)),geonm(k,1)(1:8),"geop",
     $          1,l_ni,1,l_nj,geopar(k,3), 1,G_ni,1,G_nj,1,geopar(k,3))
      end do
*
      if ( Schm_phyms_L ) then
         err=0
         do k=1,P_bgeo_top
         if ((geonm(k,1).ne.'MT').and.(geonm(k,1).ne.'MF')) then
            if (listgeonm(2,k).ne.'NIL') then
               call glbstat1(geofld(geopar(k,1)),geonm(k,1)(1:8),"geop",
     $          1,l_ni,1,l_nj,geopar(k,3), 1,G_ni,1,G_nj,1,geopar(k,3))
            endif
         endif
         end do
         do k=1,P_bgeo_top
            if (listgeonm(2,k).eq.'NIL') then
               err=-1
               if (Lun_out.gt.0) 
     $         write(Lun_out,*) listgeonm(1,k),listgeonm(2,k)
            endif
         end do
         call gem_stop('indata',err)
      endif
*
 9999 if (G_lam) call nest_init ()
*
*     ---------------------------------------------------------------
*
 1000 format(/,'TREATING INITIAL CONDITIONS  (S/R INDATA)',/,41('='))
 1001 format(/,'GLOBAL STAT OF GEOPHYSICAL FIELDS',/,33('='))
*
      return
      end
