! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nest_intt -- Linear interpolation in time of nesting data
*
#include "model_macros_f.h"
*
      subroutine nest_intt (F_done)
*
      implicit none
*
      logical F_done
*
*author   M. Desgagne - April 2002
*
*revision
* v3_01 - Desgagne M.               - initial version (after MC2 v_4.9.3)
* v3_03 - Tanguay M.                - Adjoint Lam configuration
* v3_20 - Pellerin P. and Y. Delage - Special interpolations for MEC 
* v4    - Girard-Plante-Lee         - Staggered version
* v4_04 - Plante A.                 - Remove offline
*
*implicits
#include "glb_ld.cdk"
#include "bmf.cdk"
#include "lam.cdk"
#include "nest.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "ptopo.cdk"
#include "lctl.cdk"
#include "cstv.cdk"
#include "v4dg.cdk"
#include "bcsmem.cdk"
#include "bcsdim.cdk"
#include "lun.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld,newdate
      external vmmlod,vmmget,vmmuld,newdate
      logical done
      character*16 datev
      integer yy,mo,dd,hh,mm,ss,dum,i,j,k,dat,np,ip,id
      real tr1,trf,a2,b2
      pointer (patr1, tr1(LDIST_SHAPE,*)), (patrf, trf(LDIST_SHAPE,*))
      integer err, key1(14+Tr3d_ntr), nvar, nstepno, key1_, 
     $        key2(Tr3d_ntr),key2_,n
      real*8  one,sid,rsid,dayfrac,tx,tf_nest,dtf,a,b,ax,bx
      parameter(one=1.0d0, sid=86400.0d0, rsid=one/sid)
      data done /.false./
      save done,tf_nest
*
      integer bidon_rwtr
*
*
*     ---------------------------------------------------------------
*
*     -------------------------------------------------------
*     When Regular forward GEM, F_done = .F.
*     When 4D-Var, F_done = .T. if not first forward run
*     -------------------------------------------------------
*
      if ( V4dg_conf.eq.0.or..not.F_done ) then
*
      if (Lctl_step.eq.1) Lam_current_S = Lam_runstrt_S
      if (.not.done) then
         call prsdate   (yy,mo,dd,hh,mm,ss,dum,Lam_current_S)
         call pdfjdate2 (tf_nest,yy,mo,dd,hh,mm,ss)
      endif
*
      if (Lun_debug_L) write(Lun_out,1000)
      key1(1)  = VMM_KEY(nest_u)
      key1(2)  = VMM_KEY(nest_v)
      key1(3)  = VMM_KEY(nest_w)
      key1(4)  = VMM_KEY(nest_t)
      key1(5)  = VMM_KEY(nest_zd)
      key1(6)  = VMM_KEY(nest_s)
      key1(7)  = VMM_KEY(nest_uf)
      key1(8)  = VMM_KEY(nest_vf)
      key1(9)  = VMM_KEY(nest_wf)
      key1(10) = VMM_KEY(nest_tf)
      key1(11) = VMM_KEY(nest_zdf)
      key1(12) = VMM_KEY(nest_sf)
      nvar = 12
*
      if (.not. Schm_hydro_L) then
         key1(13) = VMM_KEY(nest_q)
         key1(14) = VMM_KEY(nest_qf)
         nvar = 14
      endif
*
      err = vmmlod(key1,nvar)
      err = VMM_GET_VAR(nest_u)
      err = VMM_GET_VAR(nest_v)
      err = VMM_GET_VAR(nest_w)
      err = VMM_GET_VAR(nest_t)
      err = VMM_GET_VAR(nest_zd)
      err = VMM_GET_VAR(nest_s)
      err = VMM_GET_VAR(nest_uf)
      err = VMM_GET_VAR(nest_vf)
      err = VMM_GET_VAR(nest_wf)
      err = VMM_GET_VAR(nest_tf)
      err = VMM_GET_VAR(nest_zdf)
      err = VMM_GET_VAR(nest_sf)
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(nest_q)
         err = VMM_GET_VAR(nest_qf)
      endif
*
      dayfrac = dble(Lctl_step)*Cstv_dt_8*rsid
      call incdatsd (datev,Lam_runstrt_S,dayfrac)
      call prsdate (yy,mo,dd,hh,mm,ss,dum,datev)
      call pdfjdate2 (tx,yy,mo,dd,hh,mm,ss)
*
      if (datev.gt.Lam_current_S) then
         dtf = (tx-tf_nest) * sid / Cstv_dt_8
         dayfrac = dble(Lam_nesdt)*rsid
         call incdatsd(datev,Lam_current_S,dayfrac)
         Lam_current_S = datev
         call prsdate (yy,mo,dd,hh,mm,ss,dum,Lam_current_S)
         call pdfjdate2 (tf_nest,yy,mo,dd,hh,mm,ss)
         if (Lctl_step.gt.1) then
*
*           Copy contents from BCS_UF to BCS_U
*
            do i=1,bcs_sz
               bcs_u(i) = bcs_uf(i)
               bcs_v(i) = bcs_vf(i)
               bcs_w(i) = bcs_wf(i)
               bcs_t(i) = bcs_tf(i)
               bcs_zd(i) = bcs_zdf(i)
               bcs_s(i) = bcs_sf(i)
            enddo
            if (.not. Schm_hydro_L) then
               do i=1,bcs_sz
                  bcs_q(i) = bcs_qf(i)
               enddo
            endif
            do n=1,Tr3d_ntr
               id = (n-1)*bcs_sz+1
               do i=1,bcs_sz
                  bcs_tr(id+i-1) = bcs_trf(id+i-1)
               enddo
            enddo
*
*           Copy contents from NEST_UF to NEST_U
*
            do k= 1, G_nk+1
            do j= 1, l_nj 
            do i= 1, l_ni
               nest_u (i,j,k) = nest_uf (i,j,k)
               nest_v (i,j,k) = nest_vf (i,j,k)
               nest_w (i,j,k) = nest_wf (i,j,k)
               nest_t (i,j,k) = nest_tf (i,j,k)
               nest_zd(i,j,k) = nest_zdf(i,j,k)
            end do
            end do
            end do
            do j= 1, l_nj 
            do i= 1, l_ni
               nest_s(i,j) = nest_sf(i,j)
               nest_t (i,j,G_nk+2) = nest_tf (i,j,G_nk+2)

            end do
            end do
            if (.not. Schm_hydro_L) then
               do k= 0, G_nk+1
               do j= 1, l_nj 
               do i= 1, l_ni
                  nest_q (i,j,k) = nest_qf (i,j,k)
               end do
               end do
               end do
            end if
            key1_ = VMM_KEY (nest_tr)
            key2_ = VMM_KEY (nest_trf)
            do n=1,Tr3d_ntr
               key1(n) = key1_ + n
               key2(n) = key2_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1,Tr3d_ntr)
               err = vmmlod(key2,Tr3d_ntr)
               do n=1,Tr3d_ntr
                  err = vmmget(key1(n),patr1,tr1)
                  err = vmmget(key2(n),patrf,trf)
                  do k= 1, G_nk+2
                  do j= 1, l_nj 
                  do i= 1, l_ni
                     tr1 (i,j,k) = trf (i,j,k)
                  end do
                  end do
                  end do
               end do
               err = vmmuld(key1,Tr3d_ntr)
               err = vmmuld(key2,Tr3d_ntr)
            endif
*
         endif
*
         call datp2f   ( dat, Lam_current_S )
         err = newdate ( dat, bmf_time1,bmf_time2,-3 )
         call nest_indata
*
      else
*
         dtf = 1.0
*
      endif
*
*     Temporal linear interpolation
*
      a = (tf_nest-tx)/ (tf_nest - tx + (dtf*Cstv_dt_8 * rsid) )
      b = one - a
      do i=1,bcs_sz
         bcs_u(i) = a*bcs_u(i) + b*bcs_uf(i)
         bcs_v(i) = a*bcs_v(i) + b*bcs_vf(i)
         bcs_w(i) = a*bcs_w(i) + b*bcs_wf(i)
         bcs_t(i) = a*bcs_t(i) + b*bcs_tf(i)
         bcs_zd(i) = a*bcs_zd(i) + b*bcs_zdf(i)
         bcs_s(i) = a*bcs_s(i) + b*bcs_sf(i)
      enddo
      if (.not. Schm_hydro_L) then
         do i=1,bcs_sz
            bcs_q(i) = a*bcs_q(i) + b*bcs_qf(i)
         enddo
      endif
      do n=1,Tr3d_ntr
         id = (n-1)*bcs_sz+1
         do i=1,bcs_sz
            bcs_tr(id+i-1) = a*bcs_tr(id+i-1) + b*bcs_trf(id+i-1)
         enddo
      enddo
*
      do k= 1, G_nk+1
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_u (i,j,k) = a*nest_u (i,j,k) + b*nest_uf (i,j,k)
         nest_v (i,j,k) = a*nest_v (i,j,k) + b*nest_vf (i,j,k)
         nest_w (i,j,k) = a*nest_w (i,j,k) + b*nest_wf (i,j,k)
         nest_t (i,j,k) = a*nest_t (i,j,k) + b*nest_tf (i,j,k)
         nest_zd(i,j,k) = a*nest_zd(i,j,k) + b*nest_zdf(i,j,k)
      end do
      end do
      end do
*
      do j= 1, l_nj 
      do i= 1, l_ni
         nest_s(i,j) = a*nest_s(i,j) + b*nest_sf(i,j)
         nest_t (i,j,G_nk+2) = a*nest_t (i,j,G_nk+2) + b*nest_tf (i,j,G_nk+2)
      end do
      end do
      if (.not. Schm_hydro_L) then
         do k= 0, G_nk+1
         do j= 1, l_nj 
         do i= 1, l_ni
            nest_q(i,j,k) = a*nest_q(i,j,k) + b*nest_qf(i,j,k)
         end do
         end do
         end do
      end if
      err = vmmuld(key1,nvar)
      key1_ = VMM_KEY (nest_tr)
      key2_ = VMM_KEY (nest_trf)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
         key2(n) = key2_ + n
      end do

      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         err = vmmlod(key2,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),patr1,tr1)
            err = vmmget(key2(n),patrf,trf)
               do k= 1, G_nk+2
               do j= 1, l_nj 
               do i= 1, l_ni
                  tr1 (i,j,k) = a*tr1(i,j,k) + b*trf(i,j,k)
               end do
               end do
            end do
         end do
*
         err = vmmuld(key1,Tr3d_ntr)
         err = vmmuld(key2,Tr3d_ntr)
      endif
*
      done = .true.
*
      if ( V4dg_conf.ne.0 ) then
*
*        ----------------------------------------------
*        Store TRAJ NESTING fields at current time step
*        ----------------------------------------------
         call v4d_rwtraj (10)
*
      endif
*
*     -----------------------
*     4D-Var when F_done
*     -----------------------
      else
*
*        ------------------------------------------------
*        Recover TRAJ NESTING fields at current time step
*        ------------------------------------------------
         bidon_rwtr = V4dg_rwtr
*
         V4dg_rwtr = 0
         call v4d_rwtraj (10)
*
         V4dg_rwtr = bidon_rwtr
*
      endif
*
 1000 format(3X,'LINEAR INTERP IN TIME FOR NEST DATA (NEST_INTT)')
*     ---------------------------------------------------------------
      return
      end

