!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r bcs_hollow - to define the exact points to be extracted from the input
*                   data grid that would be needed for the cascade grid
#include "model_macros_f.h"
*     
      subroutine bcs_hollow (gid,gif,gjd,gjf,gjdi,hbsn,hbwe,
     $             is,nis,js,njs,jn,iw,niw,ie,jw,njw)
      implicit none
*     
      logical prout
      integer gid,gif,gjd,gjf,gjdi,hbsn,hbwe
      integer is,nis,js,njs,jn,iw,niw,ie,jw,njw
*
*author
*        Vivian Lee - Dec 2006 (from MC2 ac_posi)
*revision
* v3_30 - Lee V.       - initial version for GEMDM
*
*object
*    This routine will adjust the points initially found by
*    ac_posi to accomodate neighboring interpolation points,
*    the number of points needed for blending and the pilot area
*
**
*
*---------------------------------------------------------------------
*
      prout = .false.
      if (prout) write(6,1006) gid,gif,gjd,gjf,gjdi,hbsn,hbwe
      is  = gid
      nis = gif-gid+1
      js  = gjd
      njs = hbsn+2
      jn  = gjf-njs+1
*
      iw  = gid
      niw = hbwe+2
      ie  = gif-niw+1
*
      jw  = gjdi-2
      njw = jn-jw +6

      if (prout) write(6,1007) is,nis,js,njs,iw,ie,niw,jw,jn,njw
*
 1006 format (' Cascade grid: gid,gif,gjd,gjf,gjdi,hbsn,hbwe'//4x,7I6)
 1007 format (' Cascade grid: is,nis,js,njs,iw,ie,niw,jw,jn,njw'//4x,10I6)
*--------------------------------------------------------------------
      return
      end

