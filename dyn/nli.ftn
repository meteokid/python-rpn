***s/r nli - compute nonlinear portion of governing & derived equations
*
#include "model_macros_f.h"
*
      subroutine nli()
*
      implicit none
*
*authors
*      Alain Patoine & Gabriel Lemay
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
*                             add Ncn
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*******************************************************************************
*
*arguments
*       none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "cori.cdk"
#include "vt0.cdk" 
#include "vtx.cdk" 
#include "ptopo.cdk"
#include "lctl.cdk"
#include "func.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*    
      integer  pnerr, pnlod, pnlkey1(14), i, j 
**
*     __________________________________________________________________
*
*
      if (Lun_debug_L)  write(Lun_out,1000)
*
      pnlkey1(1) = VMM_KEY(rhsp)
      pnlkey1(2) = VMM_KEY(rhsc)
      pnlkey1(3) = VMM_KEY(tt0)
      pnlkey1(4) = VMM_KEY(st0)
      pnlkey1(5) = VMM_KEY(bspqtx)
      pnlkey1(6) = VMM_KEY(fiptx)
      pnlkey1(7) = VMM_KEY(topo)
      pnlkey1(8) = VMM_KEY(zdt0)
      pnlkey1(9) = VMM_KEY(that_8)
      pnlkey1(10) = VMM_KEY(dlnth_8)
      pnlod =10 
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0)
         pnlkey1(pnlod+2) = VMM_KEY(mutx)
         pnlod = pnlod+2
      endif
      if (Cori_cornl_L) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0)
         pnlkey1(pnlod+2) = VMM_KEY(vt0)
         pnlod = pnlod+2
      endif
*
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(rhsp)
      pnerr = VMM_GET_VAR(rhsc)
      pnerr = VMM_GET_VAR(tt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(bspqtx)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(zdt0)
      pnerr = VMM_GET_VAR(that_8)
      pnerr = VMM_GET_VAR(dlnth_8)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0)
         pnerr = VMM_GET_VAR(mutx)
      else
         qt0_= 0
         mutx_  = 0
      endif
      if (Cori_cornl_L) then
         pnerr = VMM_GET_VAR(ut0)
         pnerr = VMM_GET_VAR(vt0)
      else
         ut0_ = 0
         vt0_ = 0
      endif
*
c     if (Acid_test_L) then tpt0,tplt0,pipt0,st0
c     call glbstat (tpt0,'tpt0',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
c    %                                         8+acid_j0,G_nj-8-acid_jn,1,G_nk)
c     call glbstat (st0,'st0',LDIST_DIM,1,8+acid_i0,G_ni-8-acid_in,
c    %                                    8+acid_j0,G_nj-8-acid_jn,1,1)
c     endif
*
      call diag_var( bspqtx, mutx, st0, qt0,
     $     1,l_ni,1,l_nj,l_nk)
*
      if (.not. Schm_hydro_L) 
     $     call glbstat (qt0,'qt0',LDIST_DIM,l_nk+2,1,l_ni,1,l_nj,1,l_nk+2)      

      call diag_fip( fiptx, st0, tt0, qt0, topo,
     $     1,l_ni,1,l_nj,l_nk)
*
      call nlip_2 ( nl_u , nl_v , nl_t , nl_c , nl_w , nl_f , 
     $              rhsp  , rhsc  ,
     $              tt0   , st0   , bspqtx , qt0 , fiptx ,
     $              zdt0 , ut0   , vt0    , mutx   ,
     $              that_8, dlnth_8,
     $              LDIST_DIM, l_nk )
*
*
c     if (Acid_test_L) then nu,nv,nt,nc
c     call glbstat (nl_u,'NU',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
c    %                                        8+acid_j0,G_nj-8-acid_jn,1,G_nk)
*     Rhsp sees future Ru,Rv so it will not match to the piloting run
c     if (Lun_out.gt.0) 
c    % write(Lun_out,*)'Rhsp has future Ru,Rv so no match to pilot run'
c     call glbstat (rhsp,'Rhsp',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
c    %                                        8+acid_j0,G_nj-8-acid_jn,1,G_nk)
c     endif
      pnerr = vmmuld(-1,0)
*
 1000 format(/,5X,'COMPUTE NON-LINEAR RHS: (S/R NLI)')
*
*     __________________________________________________________________
*
      return
      end

