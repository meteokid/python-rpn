!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r nli - compute nonlinear portion of governing & derived equations
*
#include "model_macros_f.h"
*
      subroutine nli()
*
      implicit none
*
*authors
*      Alain Patoine & Gabriel Lemay
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
*                             add Ncn
* v3_00 - Desgagne & Lee    - Lam configuration
* v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
* v4_05 - Girard C.         - Open top
*
*object
*******************************************************************************
*
*arguments
*       none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "cori.cdk"
#include "vt0.cdk" 
#include "vtx.cdk" 
#include "ptopo.cdk"
#include "lctl.cdk"
#include "acid.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*    
      integer  pnerr, pnlod, pnlkey1(11), i, j 
**
*     __________________________________________________________________
*
*
      if (Lun_debug_L)  write(Lun_out,1000)
*
      pnlkey1(1) = VMM_KEY(rhsp)
      pnlkey1(2) = VMM_KEY(rhsc)
      pnlkey1(3) = VMM_KEY(tt0)
      pnlkey1(4) = VMM_KEY(st0)
      pnlkey1(5) = VMM_KEY(bspqtx)
      pnlkey1(6) = VMM_KEY(fiptx)
      pnlkey1(7) = VMM_KEY(topo)
      pnlod =7 
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0)
         pnlkey1(pnlod+2) = VMM_KEY(mutx)
         pnlod = pnlod+2
      endif
      if (Cori_cornl_L) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0)
         pnlkey1(pnlod+2) = VMM_KEY(vt0)
         pnlod = pnlod+2
      endif
*
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(rhsp)
      pnerr = VMM_GET_VAR(rhsc)
      pnerr = VMM_GET_VAR(tt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(bspqtx)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(topo)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0)
         pnerr = VMM_GET_VAR(mutx)
      else
         qt0_= 0
         mutx_  = 0
      endif
      if (Cori_cornl_L) then
         pnerr = VMM_GET_VAR(ut0)
         pnerr = VMM_GET_VAR(vt0)
      else
         ut0_ = 0
         vt0_ = 0
      endif
*
      if (Acid_test_L)
     $     call acid_stat_nli(qt0,st0,bspqtx,nl_u,nl_v,nl_t,nl_c,nl_f,1)
*
      call diag_var( bspqtx, mutx, st0, qt0, 1,l_ni,1,l_nj,l_nk)
*
      call diag_fip( fiptx, st0, tt0, topo, 1,l_ni,1,l_nj,l_nk)
*

      if (Acid_test_L)
     %   call glbstat (bspqtx,'BSPQ',LDIST_DIM,G_nk+2,8+acid_i0,G_ni-8-acid_in,
     %                                         8+acid_j0,G_nj-8-acid_jn,1,G_nk+2)

      call nlip_2 ( nl_u , nl_v , nl_t , nl_c , nl_w , nl_f , nl_b,
     $              ut0  , vt0  , tt0  , st0  , qt0  , fiptx,
     $              rhsp , rhsc ,bspqtx, mutx ,
     $              LDIST_DIM, l_nk )
*
*
      if (Acid_test_L)
     $     call acid_stat_nli(qt0,st0,bspqtx,nl_u,nl_v,nl_t,nl_c,nl_f,2)
*
      pnerr = vmmuld(-1,0)
*
 1000 format(/,5X,'COMPUTE NON-LINEAR RHS: (S/R NLI)')
*
*     __________________________________________________________________
*
      return
      end

