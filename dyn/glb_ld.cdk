!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
#if defined (DOC)
*
***comdeck glb_ld.cdk
*
*______________________________________________________________________
*                                                                      |
*  VARIABLES FOR GLOBAL(G) and LOCAL(L) reference (set_world_view)     |
*______________________________________________________________________|
*                    |                                                 |
* NAME               | DESCRIPTION                                     |
*--------------------|-------------------------------------------------|
* G_lam              | .true.  for Limited Area Grid (LAM)             |
* G_periodx          | .true. if periodic on X                         |
* G_periody          | .true. if periodic on Y                         |
* G_ni               | global # of grid points along X  (scalar grid)  |
* G_nj               | global # of grid points along Y  (scalar grid)  |
* G_nk               | total number of computational vertical levels   |
* G_niu              | global # of grid points along X  (U      grid)  |
* G_njv              | global # of grid points along Y  (V      grid)  |
* G_lnimax           | largest l_ni of all subdomain                   |
* G_lnjmax           | largest l_nj of all subdomain                   |
* G_halox            | number of points for the halo on X              |
* G_haloy            | number of points for the halo on y              |
* G_xg_8             | longitudes of the scalar grid in radians        |
* G_yg_8             | latitudes  of the scalar grid in radians        |
* l_north            | .true. if subdomain owns global north boundary  |
* l_south            | .true. if subdomain owns global south boundary  |
* l_east             | .true. if subdomain owns global east  boundary  |
* l_west             | .true. if subdomain owns global west  boundary  |
* l_mesg_proc        | NOT USED                                        |
* l_ni               | local # of grid points on X (scalar grid)       |
* l_nj               | local # of grid points on Y (scalar grid)       |
* l_nk               | total number of computational vertical levels   |
* l_niu              | local # of grid points on X (U      grid)       |
* l_njv              | local # of grid points on Y (V      grid)       |
* l_i0               | left   global index of local subdomain          |
* l_j0               | bottom global index of local subdomain          |
* l_minx             | minimum value for first  index of main 3D var.  |
* l_maxx             | maximum value for first  index of main 3D var.  |
* l_miny             | minimum value for second index of main 3D var.  |
* l_maxy             | maximum value for second index of main 3D var.  |
* l_dimmsg           | NOT USED                                        |
* l_dim2d            | NOT USED                                        |
* l_dim3d            | NOT USED                                        |
* pil_n              | # of points on global north boundary for pilot  |
* pil_s              | # of points on global south boundary for pilot  |
* pil_w              | # of points on global west  boundary for pilot  |
* pil_e              | # of points on global east  boundary for pilot  |
* north              | =1 if touching north boundary for LAM           |
* south              | =1 if touching south boundary for LAM           |
* east               | =1 if touching east  boundary for LAM           |
* west               | =1 if touching west  boundary for LAM           |
*----------------------------------------------------------------------
*
*
#endif
*
      logical G_lam, G_periodx, G_periody
      integer G_ni, G_nj, G_nk, G_niu, G_njv, G_lnimax, G_lnjmax,
     $        G_halox, G_haloy
      real*8 G_xg_8, G_yg_8
      pointer (paxg_8, G_xg_8(1-G_ni:2*G_ni)), 
     $        (payg_8, G_yg_8(1-G_nj:2*G_nj))
      common / G_p / paxg_8,payg_8
*
      MARK_COMMON_BEG (G)
      common / G / G_ni, G_nj, G_nk, G_niu, G_njv, G_lnimax, G_lnjmax,
     $             G_halox, G_haloy
      MARK_COMMON_END (G)
      MARK_COMMON_BEG (G_l)
      common / G_l / G_lam,G_periodx,G_periody
      MARK_COMMON_END (G_l)
*
      logical l_north, l_south, l_east, l_west, l_mesg_proc
      integer l_ni, l_nj, l_nk, l_niu, l_njv, l_i0, l_j0,
     $        l_minx, l_maxx, l_miny, l_maxy,
     $        l_dimmsg, l_dim2d, l_dim3d,
     $        pil_n,pil_s,pil_w,pil_e,north,south,east,west

      MARK_COMMON_BEG (l)
      common / l / l_north, l_south, l_east, l_west, l_mesg_proc,
     $             l_ni, l_nj, l_nk, l_niu, l_njv, l_i0, l_j0,
     $             l_minx, l_maxx, l_miny, l_maxy,
     $             l_dimmsg, l_dim2d, l_dim3d,
     $             pil_n,pil_s,pil_w,pil_e,north,south,east,west
      MARK_COMMON_END (l)
*
