!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r wil_settings - Do settings for Williamson's cases 
*                 
#include "model_macros_f.h"
*
      subroutine wil_settings()
*
      implicit none
*
*author M.Tanguay
*
*revision
* v4_04 - Tanguay M.        - initial MPI version 
* v4_04 - Tanguay M.        - Williamson's cases   
*
*object
*     See id section
*
*arguments
*     none
*
*implicits
#include "wil_lun.cdk"
#include "wil_glb_ld.cdk"
#include "wil_dcst.cdk"
#include "wil_init1.cdk"
#include "wil_fft.cdk"
#include "wil_init2.cdk"
#include "wil_init3.cdk"
#include "wil_williamson.cdk"
*
*modules
      EXTERNAL SET77,WIL_EPSLON,WIL_GLAT
      REAL WIL_EPSLON,WIL_GLAT,RLAT
*
      INTEGER ILG,ILAT,J,N,ERR,JM,NL,N1,N2
*
*     WORK ARRAYS
*     -----------
      real,    pointer, dimension (:)   :: CMN,DMN,EMN,EPSIL
      integer, pointer, dimension (:,:) :: LROW
*
      REAL UNDEF2
      PARAMETER (UNDEF2=1.E+30)
*
*     -------------------------------------------------------------
      if (Wil_Lun_out.gt.0) write(Wil_Lun_out, fmt='(  '' SETTINGS AND ALLOCATIONS IN WIL_SETTINGS'')')
*     -------------------------------------------------------------
*
      ILG   = G_nlon
      ILAT  = G_nlat
*
*------------------------------------------------------------------
*     COMMON: WIL_GLB_LD (DERIVED) 
*------------------------------------------------------------------
      G_nfc    = (G_nlon+2)/2
      G_nlatb2 =  G_nlat/2
      G_lmn    =  G_mm+G_nn-G_kk
      G_nalp   = (G_mm+1)*(G_nn+1)-(G_lmn**2+G_lmn)/2
      G_lrm    = (G_mm+1)*(G_kk+1)-(G_mm*G_mm+G_mm)/2
*
*------------------------------------------------------------------
*     COMMON: WIL_FFT
*------------------------------------------------------------------
*
*     Allocate and Set FFT information 
*     ---------------------------------
      allocate(  TRIGS (3*G_nlon/2+1), STAT=err)
*
      CALL SET77(TRIGS,IFAX,ILG)
*
*------------------------------------------------------------------
*     COMMON: WIL_INIT1
*------------------------------------------------------------------
      allocate( PHICON(G_nlat), STAT=err)
      allocate( PHIA  (G_nlat), STAT=err)
      allocate( PHIB  (G_nlat), STAT=err)
      allocate( PHIC  (G_nlat), STAT=err)
      allocate( UCON  (G_nlat), STAT=err)
      allocate( VCON  (G_nlat), STAT=err)
*
      allocate( TOPOSC(G_NALP), STAT=err)
*
*------------------------------------------------------------------
*     COMMON: WIL_INIT2
*------------------------------------------------------------------
      allocate(  LDIAG (0:G_NN,2),         STAT=err)
*
      allocate(  THTA    (G_nlat),         STAT=err)
      allocate(  WTS     (G_nlat),         STAT=err)
*
      allocate(  ALP_0 (G_NALP,G_NLATB2),  STAT=err)
      allocate(  DALP_0(G_NALP,G_NLATB2),  STAT=err)
*
      allocate(  FFTWS2  (G_nlat*(G_nlon+1)),STAT=err)
      allocate(  ANNP1   (G_KK),           STAT=err)
      allocate(  A2NNP1(0:G_KK),           STAT=err)
      allocate(  WTACSJ  (G_nlat),         STAT=err)
      allocate(  REALM   (G_MM+1),         STAT=err)
*
*     Allocate WORK ARRAY
*     -------------------
      allocate( CMN   (G_LRM),             STAT=err)
      allocate( DMN   (G_LRM),             STAT=err)
      allocate( EMN   (G_LRM),             STAT=err)
*
      allocate( EPSIL (G_NALP),            STAT=err)
*
      allocate( LROW(0:G_KK,2),            STAT=err)
*
*     ---------------------------------
*     Initialize CONSTANTS in WIL_INIT1
*     ---------------------------------
*
*        EPS    => MACHINE ACCURACY OF FLOATING POINT REPRESENTATION
*        -----------------------------------------------------------
         EPS    = WIL_EPSLON(1.0)
*
*        PRINT MACHINE EPSILON
*        ---------------------
         if (Wil_Lun_out.gt.0) WRITE (Wil_Lun_out,1000) EPS
 1000    FORMAT (/,' MACHINE EPSILON (1.0 + EPS > 1.0) = ',1PE16.9)
*
*        Allow mountains
*        --------------- 
         FTOPO_L= .FALSE.
*
*     ------------------------------------------
*     Initialize spectral CONSTANTS in WIL_INIT2
*     ------------------------------------------
*
*        DETERMINE GAUSSIAN LATITUDES AND ASSOCIATED WEIGHTS
*        ---------------------------------------------------
*
*        GET LATITUDES AND WGHTS
*        -----------------------
         CALL WIL_GLATS(G_nlat, EPS, THTA, WTS)
*
*        CALCULATE THE STRUCTURE OF ASSOCIATED LEGENDRE POLYNOMIAL ARRAY,
*        EPSILON ARRAY, AND OTHER REQUIRED RECURRENCE COEFFICIENT MATRICES
*        -----------------------------------------------------------------
         do n=1,G_LRM
            cmn(n) = UNDEF2
            dmn(n) = UNDEF2
            emn(n) = UNDEF2
         enddo
         CALL WIL_CEPS(CMN,DMN,EMN,EPSIL,LROW,LDIAG)
*
*        CALCULATE THE ASSOCIATED LEGENDRE POLYNOMIALS AND DERIVATIVES
*        -------------------------------------------------------------
         do n2=1,G_NLATB2
         do n1=1,G_NALP
            alp_0 (n1,n2) = UNDEF2
            dalp_0(n1,n2) = UNDEF2
         enddo
         enddo
         CALL WIL_CALP(CMN,DMN,EMN,EPSIL,LROW,LDIAG,ALP_0,DALP_0)
*
*        CALCULATE ANNP1(KK), A2NNP1(0:KK), AND WTACSJ(1:NLAT)
*        FOR LATER USE IN VARIOUS TRANSFORM PROCEDURES
*        -----------------------------------------------------
         A2NNP1(0) = 0.0
         DO N=1,G_KK
            ANNP1(N)  = Wil_Dcst_rayt_8/REAL(N*(N+1))
            A2NNP1(N) = REAL(N*(N+1))/Wil_Dcst_rayt_8**2
         ENDDO
*
         DO NL=1,G_nlat
            RLAT = WIL_GLAT(NL)
            WTACSJ(NL) = 1.0/(Wil_Dcst_rayt_8*COS(RLAT)**2)
         ENDDO
*
*        COMPUTE CORIOLIS PARAMETER FOR ROTATED COORDINATES
*        --------------------------------------------------
*        f = 2.0*OMEGA*(-COS(LAMBDA)*COS(THETA)*SIN(ALPHA)+
*            SIN(THETA)*COS(ALPHA))
*
*        TRANSFORM INTO SPECTRAL SPACE:
*        -----------------------------
*
*         WAVE M=0, N=1
*         -------------
          CORSC1 = SQRT(8.0/3.0)*Wil_Dcst_omega_8*COS(Williamson_alpha)
*
*         WAVE M=1, N=1
*         -------------
          CORSC2 = - SQRT(4.0/3.0)*Wil_Dcst_omega_8*SIN(Williamson_alpha)
*
*         COMPUTE M INDEX ARRAY (SINCE CRAY HAS SLOW INTEGER DIVISION !)
*         --------------------------------------------------------------
          DO JM=1,G_MM+1
             REALM(JM) = REAL(JM-1)
          ENDDO
*
*         Deallocate WORK ARRAY
*         ---------------------
          deallocate( CMN,DMN,EMN,EPSIL,LROW  )
*
*------------------------------------------------------------------
*     COMMON: WIL_WILLIAMSON 
*------------------------------------------------------------------
      if (Williamson_case.eq.7) then
*
          Williamson_MAXH_Read  = 42
          Williamson_NALPH_Read = (Williamson_MAXH_Read+1)*(Williamson_MAXH_Read+1)-
     %                            (Williamson_MAXH_Read**2+ Williamson_MAXH_Read)/2
*
      endif
*
      return
      end
