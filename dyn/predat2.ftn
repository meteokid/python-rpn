***s/r predat2 - Performs preprocessing of the data: part2
*
#include <model_macros_f.h>
*
      subroutine predat2
*
#include "impnone.cdk"
*
*author 
*     Michel Roch - rpn - oct 1993
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from predat2 v1_03)
* v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
* v2_31 - Edouard S.        - change calling to initw for initw2 (non-hydro version)
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*
*arguments
*       none
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "dcst.cdk"
#include "init.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "vt1.cdk"
#include "lctl.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer pnerr, pnlkey1(8), pnlod, i0,in,j0,jn
      real w1(LDIST_SHAPE),w2(LDIST_SHAPE),
     $     t1(LDIST_SHAPE,G_nk),t2(LDIST_SHAPE,G_nk),
     $     t3(LDIST_SHAPE,G_nk),t4(LDIST_SHAPE,G_nk)
**
*     __________________________________________________________________
*
      if (Lun_out.gt.0)  write (Lun_out,1000)

*     Allocate and load fields
*     ~~~~~~~~~~~~~~~~~~~~~~~~
      pnlkey1(1) = VMM_KEY(ut1)
      pnlkey1(2) = VMM_KEY(vt1)
      pnlkey1(3) = VMM_KEY(tdt1)
      pnlkey1(4) = VMM_KEY(st1)
      pnlkey1(5) = VMM_KEY(psdt1)
      pnlkey1(6) = VMM_KEY(wt1)
      pnlkey1(7) = VMM_KEY(tt1)
      pnlkey1(8) = VMM_KEY(fit1)

      pnlod = 5
*
      if (.not. Schm_hydro_L) pnlod = 8
      pnerr = vmmlod( pnlkey1, pnlod )
*     - - - - - - - - - - - - - - - - 
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(tdt1)
      pnerr = VMM_GET_VAR(st1)
      pnerr = VMM_GET_VAR(psdt1)
      if (.not. Schm_hydro_L) then  
         pnerr = VMM_GET_VAR(wt1)
         pnerr = VMM_GET_VAR(tt1)
         pnerr = VMM_GET_VAR(fit1)
      endif
*
******************************************************
*  2. Compute total divergence and vertical velocity *
******************************************************
*
*     Exchange the haloes for computing derivatives 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      call rpn_comm_xch_halo( ut1, LDIST_DIM, l_niu, l_nj , l_nk,
     $                G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo( vt1, LDIST_DIM, l_ni , l_njv, l_nk,
     $                G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
      call uv2tdpsd( tdt1, psdt1, ut1, vt1, st1, LDIST_DIM, l_nk )
*
      if (.not. Schm_hydro_L)
     $     call initw2 (wt1, ut1, vt1, psdt1, fit1, tt1, st1,
     $                            t1,t2,t3,t4,w1, LDIST_DIM, l_nk ) 
*
      if (G_lam) then
          i0=lam_i0
          in=lam_in
          j0=lam_j0
          jn=lam_jn
      else
          i0 = glb_i0
          in=  glb_in
          j0 = glb_j0
          jn = glb_jn
      endif
      if (Lctl_debug_L) then
      call glbstat (tdt1,'Td',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
      call glbstat (psdt1,'Psd',LDIST_DIM,G_nk,i0,in,j0,jn,1,G_nk)
      call glbstat (st1,'St1',LDIST_DIM,1,i0-7,in+7,j0-7,jn+7,1,1)
      if (.not. Schm_hydro_L)
     %call glbstat (wt1,'Wt1',LDIST_DIM,G_nk,i0-7,in+7,j0-7,jn+7,1,G_nk)
      endif
      pnerr = vmmuld(-1,0)
*
1000  format(/,'PREPROCESSING DATA: PART 2 (S/R PREDAT2)',
     %       /,'========================================')
*     __________________________________________________________________
*
      return
      end
