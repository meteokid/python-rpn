***s/r v4d_settraj - Allocate WA file and VMM space for TRAJECTORY 
*
#include <model_macros_f.h>
*
      subroutine v4d_settraj
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - adapt ADJ for new advection code 
*                           - adapt for tracers in tr3d  
* v3_00 - Tanguay M         - open WA file Conversion  
* v3_00 - Laroche S.        - additions for simplified physics
* v3_02 - Buehner M.        - added section for ref state file for NLMX event (SV job)
*
*object
*     Open WA file for TRAJECTORY (all timesteps)
*     Allocate VMM space for TRAJECTORY comdecks (one timestep)
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "v4dg.cdk"
#include "vt0m.cdk"
#include "vthm.cdk"
#include "vt1m.cdk"
#include "vt2m.cdk"
#include "vtxm.cdk"
#include "rhscm.cdk"
#include "orhm.cdk"
#include "schm.cdk"
#include "tr3d.cdk"
*
*modules
      external fnom, vmmcre
      integer fnom, vmmcre
*
      integer i,pnerr
*
      character*80 attrib_S,attrit_S
*     ______________________________________________________
*
      if(.not. Schm_hydro_L) call gem_stop('v4d_settraj',-1)
*     ______________________________________________________
*
*C    -------------------------------------------
*C    Open WA file for TRAJECTORY (all timesteps)
*C    --------------------------------------------
*
      if (Lun_out.gt.0) write(Lun_out,1000)
*
*        Set Unit  
*        --------
         V4dg_iuntr = 0
         pnerr = fnom(V4dg_iuntr,'TRAJECTORY','RND',0)
*
*        Open WA file
*        ------------
         call waopen(V4dg_iuntr)
*
*C    -----------------------------------
*C    Open WA file for PHYSICS PARAMETERS
*C    -----------------------------------
*
      if (Lun_out.gt.0) write(Lun_out,1001)
*
*        Set Unit
*        --------
         V4dg_iunph = 0
         pnerr = fnom(V4dg_iunph,'PHYSPATAMETERS','RND',0)
*
*        Open WA file
*        ------------
         call waopen(V4dg_iunph)
*
*C    ---------------------------
*C    Open WA file for Conversion
*C    ---------------------------
*
      if (Lun_out.gt.0) write(Lun_out,1002)
*
*        Set Unit
*        --------
         V4dg_iuncv = 0
         pnerr = fnom(V4dg_iuncv,'CONVERSION','RND',0)
*
*        Set starting address
*        --------------------
         V4dg_addcv = 1
*
*        Open WA file
*        ------------
         call waopen(V4dg_iuncv)
*
*C    ------------------------------------------
*C    Open WA file for NL Perturbation Evolution
*C    ------------------------------------------
*
      if (Lun_out.gt.0) write(Lun_out,1003)
*
*        Set Unit
*        --------
         V4dg_iunnl = 0
         pnerr = fnom(V4dg_iunnl,'NLPERTEVOL','RND',0)
*
*        Set starting address
*        --------------------
         V4dg_addnl = 1
*
*        Open WA file
*        ------------
         call waopen(V4dg_iunnl)
*
*C    ----------------------------------------------------------
*C    Allocate VMM space for TRAJECTORY comdecks (one time step)
*C    ----------------------------------------------------------
*
         if (Lun_out.gt.0) write(Lun_out,2000)
*
*        -------------------------------------------------
*        Initialize TRAJ time-dependent variables comdecks
*        -------------------------------------------------
*
*        Names and keys commons initialization
*        -------------------------------------
         COMMON_INIT(vt0m,-100)
         COMMON_INIT(vthm,-100)
         COMMON_INIT(vt1m,-100)
         COMMON_INIT(vt2m,-100)
         COMMON_INIT(vtxm,-100)
*
*        Assign the names of the variables
*        ---------------------------------
         VMM_NAM(ut0m   )= '4UUT0M'
         VMM_NAM(vt0m   )= '4VVT0M'
         VMM_NAM(tdt0m  )= '4DTDT0M'
         VMM_NAM(qt0m   )= '4QQT0M'
         VMM_NAM(tpt0m  )= '4TTPT0M'
         VMM_NAM(fipt0m )= '4GFIPT0M'
         VMM_NAM(pipt0m )= '4PPIPT0M'
         VMM_NAM(tplt0m )= '4TTPLT0M'
         VMM_NAM(psdt0m )= '4KPSDT0M'
         VMM_NAM(st0m   )= '4SST0M'
         VMM_NAM(trt0m  )= 'TRT0M'
*
         VMM_NAM(uthm   )= '4UUTHM'
         VMM_NAM(vthm   )= '4VVTHM'
         VMM_NAM(psdthm )= '4KPSDTHM'
         VMM_NAM(xthm   )= '4YXTHM'
         VMM_NAM(ythm   )= '4YYTHM'
         VMM_NAM(zthm   )= '4ZZTHM'
         VMM_NAM(xcthm  )= '4YXCTHM'
         VMM_NAM(ycthm  )= '4YYCTHM'
         VMM_NAM(zcthm  )= '4ZZCTHM'
*
         VMM_NAM(ut1m   )= '4UUT1M'
         VMM_NAM(vt1m   )= '4VVT1M'
         VMM_NAM(tdt1m  )= '4DTDT1M'
         VMM_NAM(qt1m   )= '4QQT1M'
         VMM_NAM(tpt1m  )= '4TTPT1M'
         VMM_NAM(fipt1m )= '4GFIPT1M'
         VMM_NAM(pipt1m )= '4PPIPT1M'
         VMM_NAM(tplt1m )= '4TTPLT1M'
         VMM_NAM(psdt1m )= '4KPSDT1M'
         VMM_NAM(st1m   )= '4SST1M'
         VMM_NAM(trt1m  )= 'TRT1M'
*
         VMM_NAM(xct1m  )= '4YXCT1M'
         VMM_NAM(yct1m  )= '4YYCT1M'
         VMM_NAM(zct1m  )= '4ZZCT1M'
*
         VMM_NAM(ut2m   )= '4UUT2M'
         VMM_NAM(vt2m   )= '4VVT2M'
         VMM_NAM(tdt2m  )= '4DTDT2M'
         VMM_NAM(qt2m   )= '4QQT2M'
         VMM_NAM(tpt2m  )= '4TTPT2M'
         VMM_NAM(fipt2m )= '4GFIPT2M'
         VMM_NAM(pipt2m )= '4PPIPT2M'
         VMM_NAM(tplt2m )= '4TTPLT2M'
         VMM_NAM(psdt2m )= '4KPSDT2M'
         VMM_NAM(st2m   )= '4SST2M'
         VMM_NAM(trt2m  )= 'TRT2M'
*
         VMM_NAM(gptxm  )= '4GGPTXM'
         VMM_NAM(gxtxm  )= '4XGXTXM'
*
*        Set the attributes of the variables
*        -----------------------------------
         attrib_S = 'SAVE=Y,CL=1,W=5,INIT=R,MUSTEXIST'
         attrit_S = 'SAVE=Y,CL=3,W=5,INIT=R,MUSTEXIST'
*
*        Create the virtual memory for the variables 
*        -------------------------------------------
         VMM_CREATE(ut0m  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(vt0m  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(tdt0m , LARRAY3D, 1, attrib_S)
         VMM_CREATE(qt0m  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(tpt0m , LARRAY3D, 1, attrib_S)
         VMM_CREATE(fipt0m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(pipt0m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(tplt0m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(psdt0m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(st0m  , LARRAY2D, 1, attrib_S)
*
         if ( Tr3d_ntr .gt. 0 ) then
            VMM_CREATE(trt0m, LARRAY3D, Tr3d_ntr, attrit_S)
         endif
*
         VMM_CREATE(uthm  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(vthm  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(psdthm, LARRAY3D, 1, attrib_S)
         VMM_CREATE(xthm  , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(ythm  , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(zthm  , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(xcthm , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(ycthm , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(zcthm , l_ni*l_nj*l_nk, 1, attrib_S)
*
         VMM_CREATE(ut1m  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(vt1m  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(tdt1m , LARRAY3D, 1, attrib_S)
         VMM_CREATE(qt1m  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(tpt1m , LARRAY3D, 1, attrib_S)
         VMM_CREATE(fipt1m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(pipt1m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(tplt1m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(psdt1m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(st1m,   LARRAY2D, 1, attrib_S)
*
         if ( Tr3d_ntr .gt. 0 ) then
            VMM_CREATE(trt1m, LARRAY3D, Tr3d_ntr, attrit_S)
         endif
*
         VMM_CREATE(xct1m , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(yct1m , l_ni*l_nj*l_nk, 1, attrib_S)
         VMM_CREATE(zct1m , l_ni*l_nj*l_nk, 1, attrib_S)
*
         VMM_CREATE(gptxm , LARRAY3D, 1, attrib_S)
         VMM_CREATE(gxtxm , LARRAY3D, 1, attrib_S)
*
*        ----------------------------------------
*        Initialize TRAJ right hand sides comdeck
*        ----------------------------------------
*
*        Names and keys commons initialization
*        -------------------------------------
         COMMON_INIT(rhscm,-100)
*
*        Assign the names of the variables
*        ---------------------------------
         VMM_NAM(rum  )= '4MRUM'
         VMM_NAM(rvm  )= '4MRVM'
C        VMM_NAM(rw   )= '4MRW'
         VMM_NAM(rcnm )= '4CRCNM'
         VMM_NAM(rthm )= '4ERTHM'
C        VMM_NAM(rvv  )= '4RRVV'
*
         VMM_NAM(rdm  )= '4RRDM'
         VMM_NAM(r1m  )= '41R1M'
C        VMM_NAM(r3   )= '43R3'
C        VMM_NAM(r3p  )= '43R3P'
         VMM_NAM(rhellm)= '4HRHELLM'
         VMM_NAM(rhelnm)= '4HRHELNM'
*
         VMM_NAM(ruw1m )= '4MRUW1M'
         VMM_NAM(ruw2m )= '4MRUW2M'
         VMM_NAM(rvw1m )= '4MRVW1M'
         VMM_NAM(rvw2m )= '4MRVW2M'
*
*        Set the attributes of the variables
*        -----------------------------------
         attrib_S='SAVE=Y,CL=5,W=5,INIT=R'
*
*        Create the virtual memory for the variables 
*        -------------------------------------------
         VMM_CREATE(rum  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(rvm  , LARRAY3D, 1, attrib_S)
C        VMM_CREATE(rw   , LARRAY3D, 1, attrib_S)
         VMM_CREATE(rcnm , LARRAY3D, 1, attrib_S)
         VMM_CREATE(rthm , LARRAY3D, 1, attrib_S)
C        VMM_CREATE(rvv  , LARRAY3D, 1, attrib_S)
*
         VMM_CREATE(rdm  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(r1m  , LARRAY3D, 1, attrib_S)
C        VMM_CREATE(r3   , LARRAY3D, 1, attrib_S)
C        VMM_CREATE(r3p  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(rhellm,LARRAY3D, 1, attrib_S)
         VMM_CREATE(rhelnm,LARRAY3D, 1, attrib_S)
*
         VMM_CREATE(ruw1m ,LARRAY3D, 1, attrib_S)
         VMM_CREATE(ruw2m ,LARRAY3D, 1, attrib_S)
         VMM_CREATE(rvw1m ,LARRAY3D, 1, attrib_S)
         VMM_CREATE(rvw2m ,LARRAY3D, 1, attrib_S)
*
*        -----------------------------------------------------
*        Initialize TRAJ comdeck for Crank-Nicholson procedure
*        -----------------------------------------------------
*
*        Names and keys commons initialization
*        -------------------------------------
         COMMON_INIT(orhm,-100)
*
*        Assign the name of the variables
*        --------------------------------
         VMM_NAM(orum  ) = 'RUORUM'
         VMM_NAM(orvm  ) = 'RVORVM'
         VMM_NAM(orcnm ) = 'RORCNM'
         VMM_NAM(orthm ) = 'RORTHM'
         VMM_NAM(oruw2m) = 'RORUW2M'
         VMM_NAM(orvw2m) = 'RORVW2M'
         VMM_NAM(ortrm ) = 'RORTRM'
*
*        Set the attributes of the variables
*        -----------------------------------
         attrib_S='SAVE=Y,CL=5,W=5,INIT=R'
*
*        Create the virtual memory for the variables 
*        -------------------------------------------
         VMM_CREATE(orum  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(orvm  , LARRAY3D, 1, attrib_S)
         VMM_CREATE(orcnm , LARRAY3D, 1, attrib_S)
         VMM_CREATE(orthm , LARRAY3D, 1, attrib_S)
         VMM_CREATE(oruw2m, LARRAY3D, 1, attrib_S)
         VMM_CREATE(orvw2m, LARRAY3D, 1, attrib_S)
*
         if ( Tr3d_ntr .gt. 0 ) then
            VMM_CREATE(ortrm, LARRAY3D, Tr3d_ntr, attrit_S)
         endif
*
 1000 format(
     +//,'Open WA file for TRAJ (S/R V4D_SET_TRAJ)',
     + /,'========================================',
     +//)
*
 1001 format(
     +//,'Open WA file for PHYSICS PARAMETERS (S/R V4D_SET_TRAJ)',
     + /,'======================================================',
     +//)
*
 1002 format(
     +//,'Open WA file for CONV (S/R V4D_SET_TRAJ)',
     + /,'========================================',
     +//)
*
 1003 format(
     +//,'Open WA file for NL PERT EVOL (S/R V4D_SET_TRAJ)',
     + /,'================================================',
     +//)
*
 2000 format(
     +//,'ALLOCATE VMM SPACE FOR TRAJ COMDECKS USED FOR ONE TIME-STEP (S/R V4D_SETTRAJ)',
     + /,'=============================================================================',
     +//)
*
      return
      end
