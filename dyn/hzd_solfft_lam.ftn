***s/r hzd_solfft_lam - parallel direct sol_8ution of high-order diffusion 
*                   equation with ffft8 

#include <model_macros_f.h>
       subroutine hzd_solfft_lam (F_sol, F_Rhs_8, F_pri_8 ,
     %                        F_a_8, F_c_8, F_deltai_8,
     %             minx1, maxx1, minx2, maxx2, nx1, nx2, nx3, F_pwr,
     %             minx,maxx,miny,maxy,gnk,Gni,nil,njl,nkl,
     %             F_opsxp0_8, F_opsyp0_8,F_cdiff,F_npex,F_npey)
*
#include "impnone.cdk"
*
      integer  minx1, maxx1, minx2, maxx2 , nx1, nx2, nx3, F_pwr,
     $         minx , maxx , miny , maxy  , gnk, Gni,
     $         njl  , nkl  , nil  , F_npex, F_npey
      real*8  F_opsxp0_8(*), F_opsyp0_8(*),F_pri_8,
     $            F_a_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $            F_c_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $       F_deltai_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $       F_Rhs_8(minx:maxx,miny:maxy,gnk)
      real   F_cdiff, F_sol(minx:maxx,miny:maxy,gnk)
*
*author
*     Abdessamad Qaddouri
*
*revision
* v2_10 - Qaddouri A.        - initial version
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_sol        I/O      r.h.s. and result of horizontal diffusion
*  F_Rhs_8         I        work vector
*
*----------------------------------------------------------------
*
#include "ptopo.cdk"
#include "glb_ld.cdk"
#include "glb_pil.cdk"
**

      real*8   fdg1_8(miny :maxy ,minx1:maxx1,Gni+F_npex  )
      real*8   fwft_8(miny :maxy ,minx1:maxx1,Gni+2+F_npex)
      real*8   fdg2_8(minx1:maxx1,minx2:maxx2,nx3+F_npey  )
      real*8   dn3_8(minx1:maxx1,minx2:maxx2,F_pwr,nx3   )
      real*8   sol_8(minx1:maxx1,minx2:maxx2,F_pwr,nx3   )
      real*8   ZERO_8
      parameter( ZERO_8 = 0.0 )      
      integer dim, o1,o2,i,j,k,l_pil_w,l_pil_e
**
*     __________________________________________________________________
*
*  The I vector lies on the Y processor so, l_pil_w and l_pil_e will
*  represent the pilot region along I
      l_pil_w=0
      l_pil_e=0
      if (l_south) l_pil_w= Lam_pil_w
      if (l_north) l_pil_e= Lam_pil_e

      do k = 1, gnk
      do j = 1+pil_s, njl-pil_n
      do i = 1+pil_w,nil-pil_e
         F_Rhs_8(i,j,k) = ((-1)**F_pwr)*dble(F_cdiff)*dble(F_sol(i,j,k))
      enddo
      enddo
      enddo
*       
      call rpn_comm_transpose( F_Rhs_8, Minx, Maxx, Gni, (Maxy-Miny+1),
     %                                Minx1, Maxx1, gnk, fdg1_8,1, 2 )
*
      do k = 1, nkl
         do j = 1+pil_s, njl-pil_n
         do i = 1+Lam_pil_w, Gni-Lam_pil_e
            fdg1_8(j,k,i) = F_opsxp0_8(Gni+i)*fdg1_8(j,k,i)
         enddo
         enddo
      enddo

      do k = 1, nkl
         do j= njl+1-pil_n,maxy
         do i= 1,Gni
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
         do j= miny,pil_s
         do i= 1,Gni
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
      enddo
*
      do k= Nkl+1, maxx1
      do j= miny,maxy
      do i= 1,Gni
         fwft_8(j,k,i) = ZERO_8
      enddo
      enddo
      enddo
*
      do k= minx1, 0
      do j= miny,maxy
      do i= 1,Gni
         fwft_8(j,k,i) = ZERO_8
      enddo
      enddo
      enddo
*
      do k=1,nkl
         do j=1+pil_s,njl-pil_n
         do i = 1+Lam_pil_w, Gni-Lam_pil_e
            fwft_8(j,k,i) = fdg1_8(j,k,i)
         enddo
         enddo
      enddo
*
*     projection ( wfft = x transposed * g )
*
      do k=1,Nkl
      call qcfft8(fwft_8(1+pil_s,k,1+Lam_pil_w),
     %            (Maxy-Miny+1)*(maxx1-minx1+1),1,
     %            (Maxy-Miny+1-pil_s-pil_n), -1 )
      enddo
c     call ffft8 (fwft_8,(Maxy-Miny+1)*(maxx1-minx1+1),
c    %                     1, (Maxy-Miny+1) * Nkl, -1 )
*
      do k = 1, Nkl
         do i = 0+Lam_pil_w, Gni-1-Lam_pil_e
            do j = 1+pil_s, (Maxy-Miny+1)-pil_n
               fwft_8(j,k,i+1) = F_pri_8 * fwft_8(j,k,i+1)
            enddo
         enddo
      enddo
*
      call rpn_comm_transpose 
     $     (fwft_8,Miny,Maxy,nx3, (Maxx1-Minx1+1),
     $                  minx2, maxx2, Gni, fdg2_8, 2, 2)
*
* cote droit
*
      do k = minx1, maxx1
      do i = minx2, maxx2
      do o1= 1, F_pwr
      do j = 1, nx3
         sol_8(k,i,o1,j) = ZERO_8
         dn3_8(k,i,o1,j) = ZERO_8
      enddo
      enddo
      enddo
      enddo
*
      do k = 1, nx1
      do i = 1+l_pil_w, nx2-l_pil_e
      do j = 1+Lam_pil_s, nx3-Lam_pil_n
         dn3_8(k,i,1,j)= F_opsyp0_8(nx3+j)*fdg2_8(k,i,j)
      enddo
      enddo
      enddo
*
* resolution du systeme blok-tridiagonal
*
* aller
      do k= 1, nx1
      do o1= 1,F_pwr
      do i = 1+l_pil_w, nx2-l_pil_e
         sol_8(k,i,o1,1+Lam_pil_s) = dn3_8(k,i,o1,1+Lam_pil_s)
      enddo
      enddo
      enddo
*
      do j = 2+Lam_pil_s, nx3-Lam_pil_n
         do o1= 1, F_pwr
         do o2= 1, F_pwr
         do k = 1, nx1
         do i = minx2+l_pil_w, maxx2-l_pil_e
            sol_8(k,i,o1,j)= sol_8(k,i,o1,j)
     $                       + F_a_8(o1,o2,i,j)*sol_8(k,i,o2,j-1)
         enddo
         enddo
         enddo
         enddo
         do k= 1, nx1
         do o1= 1,F_pwr
         do i = 1+l_pil_w, nx2-l_pil_e
            sol_8(k,i,o1,j) = dn3_8(k,i,o1,j) - sol_8(k,i,o1,j)
         enddo
         enddo
         enddo
      enddo
*
* scale le cote droit pour retour
*
      do j = 1, nx3
         do o1= 1, F_pwr
         do k = minx1, maxx1
         do i = minx2, maxx2
            dn3_8(k,i,o1,j) = ZERO_8
         enddo
         enddo
         enddo
      enddo

      do j = 1+Lam_pil_s, nx3-Lam_pil_n
         do o1=1,F_pwr
         do o2=1,F_pwr
         do k= minx1,maxx1
         do i= minx2+l_pil_w,maxx2-l_pil_e
            dn3_8(k,i,o1,j)= dn3_8(k,i,o1,j)
     $                       + F_deltai_8(o1,o2,i,j)*sol_8(k,i,o2,j)
         enddo
         enddo
         enddo
         enddo
      enddo
*
* retour
*
      do k = 1, nx1
      do o1= 1, F_pwr
      do i = 1, nx2
         do j = 1, nx3
            sol_8(k,i,o1,j)=0.0
         enddo
      enddo
      enddo
      enddo

      do k = 1, nx1
      do o1= 1, F_pwr
      do i = 1+l_pil_w, nx2-l_pil_e
         sol_8(k,i,o1,nx3-Lam_pil_n)=dn3_8(k,i,o1,nx3-Lam_pil_n)
      enddo
      enddo
      enddo
*
      do j = nx3-1-Lam_pil_n, 1+Lam_pil_s, -1
      do o1= 1, F_pwr
      do o2= 1, F_pwr
      do k = minx1, maxx1
      do i = minx2+l_pil_w, maxx2-l_pil_e
         sol_8(k,i,o1,j)= sol_8(k,i,o1,j)
     $                    + F_c_8(o1,o2,i,j)*sol_8(k,i,o2,j+1)
      enddo
      enddo
      enddo
      enddo
*
      do k = 1, nx1
      do o1= 1, F_pwr
      do i = 1+l_pil_w, nx2-l_pil_e
         sol_8(k,i,o1,j)=dn3_8(k,i,o1,j)-sol_8(k,i,o1,j)
      enddo
      enddo
      enddo
      enddo
*
      do k = 1, nx1
      do i = 1+l_pil_w, nx2-l_pil_e
      do j = 1+Lam_pil_s, nx3-Lam_pil_n
         fdg2_8(k,i,j)=sol_8(k,i,F_pwr,j)
      enddo
      enddo
      enddo
*
*     inverse projection ( r = x * w )
*
      call rpn_comm_transpose
     $     ( fwft_8 , Miny, Maxy, nx3, (Maxx1-Minx1+1),
     $               minx2, maxx2,Gni, fdg2_8,- 2, 2 )
*
*
      do k=1,Nkl
      call qcfft8 ( fwft_8(1+pil_s,k,1+Lam_pil_w),
     %                    (Maxy-Miny+1) * (maxx1-minx1+1), 1,
     %                    (Maxy-Miny+1-pil_s-pil_n) , +1 )
      enddo
c     call ffft8 ( fwft_8, (Maxy-Miny+1) * (maxx1-minx1+1), 1,
c    %                               (Maxy-Miny+1) * Nkl, +1 )
*
      call rpn_comm_transpose( F_Rhs_8,Minx, Maxx, Gni, (Maxy-Miny+1),
     %                              Minx1, Maxx1, gnk, fwft_8, -1, 2 )

      do k = 1, gnk
      do j = 1+pil_s, njl-pil_n
      do i = 1+pil_w, nil-pil_e
         F_sol(i,j,k) = sngl(F_Rhs_8(i,j,k))
      enddo
      enddo
      enddo
*     __________________________________________________________________
*
      return
      end

