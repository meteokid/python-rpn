!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "msg.h"
#include "stop_mpi.h"

subroutine adx_trilin_opt2()
   call stop_mpi(STOP_ERROR,'adx_trilin_opt2','called a stub')
   return
end subroutine adx_trilin_opt2

!/**
subroutine adx_trilin_opt3(F_xo,F_yo,F_u1,F_u2,F_xth,F_yth,F_zth, &
     F_dth,F_has_u2_L, F_i0,F_in,F_j0,F_jn, &
     F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,F_nk, F_nk_super)
   implicit none
   !@objective switcher to call adx_setint/adx_trilin or adx_trilin_turbo
   !@arguments
   logical :: F_has_u2_L           !I, .T. if F_u2 needs to be treated
   real    :: F_dth                !I, multiplicative constant (1. or timestep)
   integer :: F_nk, F_nk_super     !I, number of vertical levels
   integer :: F_aminx, F_amaxx, F_aminy, F_amaxy !I, wind fields array bounds
   integer :: F_ni, F_nj           !I, dims of position fields
   integer :: F_i0,F_in,F_j0,F_jn  !I, operator scope
   real,dimension(F_ni,F_nj,F_nk) :: F_xth,F_yth,F_zth !I, x,y,z positions
   real,dimension(F_aminx:F_amaxx,F_aminy:F_amaxy,F_nk_super) :: &
        F_u1, F_u2  !I, field to interpol
   real,dimension(F_ni,F_nj,F_nk) :: F_xo,F_yo !O, F_dt * result of interp
   !**/
#include "adx_nml.cdk"
#include "adx_dims.cdk"
   integer :: num
   logical,parameter :: DO_HORIZ_L = .true.
   logical,parameter :: DO_VERTI_L = .true.
   integer, dimension(F_ni,F_nj,F_nk) :: n1,loci,locj,lock
   real,    dimension(F_ni,F_nj,F_nk) :: capx1,capy1,capz1
   !---------------------------------------------------------------------
   call msg(MSG_DEBUG,'adx_trilin_opt')
   num = F_ni*F_nj*F_nk
   call tmg_start0(64, 'ADX_TRILI' )
   if (.not.adw_nosetint_L) then


      call adx_setint_lin_hor_ver1(n1, capx1,capy1,capz1, F_xth,F_yth,F_zth,&
           F_i0,F_in,F_j0,F_jn, F_nk, num)
!!$      call adx_setint_lin_hor_ver2(n1, capx1,capy1,capz1, F_xth,F_yth,F_zth,&
!!$           F_i0,F_in,F_j0,F_jn, F_ni,F_nj,F_nk)

      call adx_trilin1(F_xo,F_u1,F_dth,n1,capx1,capy1,capz1, &
           F_ni*F_nj*F_nk,F_i0,F_in,F_j0,F_jn,F_nk)
!!$      call adx_trilin3(F_xo,F_u1,F_dth,n1,capx1,capy1,capz1, &
!!$           F_i0,F_in,F_j0,F_jn, &
!!$           F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,F_nk, F_nk_super)

      if (F_has_u2_L) then
         call adx_trilin1(F_yo,F_u2,F_dth,n1,capx1,capy1,capz1, &
              F_ni*F_nj*F_nk,F_i0,F_in,F_j0,F_jn,F_nk)
!!$         call adx_trilin3(F_yo,F_u2,F_dth,n1,capx1,capy1,capz1, &
!!$              F_i0,F_in,F_j0,F_jn, &
!!$              F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,F_nk, F_nk_super)
      endif

   else

      call adx_trilin_turbo1(F_xo, F_u1, F_dth, &
           F_xth,F_yth,F_zth, capz1, loci,locj,lock, &
           num, F_i0, F_in, F_j0, F_jn, F_nk, DO_HORIZ_L,DO_VERTI_L)
!!$      call adx_trilin_turbo3(F_xo,F_u1,F_dth,F_xth,F_yth,F_zth,capz1, &
!!$           loci,locj,lock,DO_HORIZ_L,DO_VERTI_L, &
!!$           F_i0,F_in,F_j0,F_jn, &
!!$           F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,F_nk, F_nk_super)
      if (F_has_u2_L) then
         call adx_trilin_turbo1(F_yo, F_u2, F_dth, &
              F_xth,F_yth,F_zth, capz1, loci,locj,lock, &
              num, F_i0, F_in, F_j0, F_jn, F_nk, .not.DO_HORIZ_L,.not.DO_VERTI_L)
!!$         call adx_trilin_turbo3(F_yo,F_u2,F_dth,F_xth,F_yth,F_zth,capz1, &
!!$              loci,locj,lock,.not.DO_HORIZ_L,.not.DO_VERTI_L, &
!!$              F_i0,F_in,F_j0,F_jn, &
!!$              F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,F_nk, F_nk_super)
      endif

   endif
   call tmg_stop0(64)
   call msg(MSG_DEBUG,'adx_trilin_opt [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_trilin_opt3
