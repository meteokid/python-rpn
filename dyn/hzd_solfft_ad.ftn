***s/r hzd_solfft_ad - ADJ of hzd_solfft 

#include <model_macros_f.h>
       subroutine hzd_solfft_ad (F_sol, F_Rhs_8, F_pri_8 ,
     %                           F_a_8, F_c_8, F_deltai_8,
     %             minx1, maxx1, minx2, maxx2, nx1, nx2, nx3, F_pwr,
     %             minx,maxx,miny,maxy,gnk,gni,nil,njl,nkl,
     %             F_opsxp0_8, F_opsyp0_8,F_cdiff,F_npex,F_npey)
*
#include "impnone.cdk"
*
      integer  minx1, maxx1, minx2, maxx2 , nx1, nx2, nx3, F_pwr,
     $         minx , maxx , miny , maxy  , gnk, gni,
     $         njl  , nkl  , nil  , F_npex, F_npey
      real*8  F_opsxp0_8(*), F_opsyp0_8(*),F_pri_8,
     $            F_a_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $            F_c_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $       F_deltai_8(1:F_pwr,1:F_pwr,minx2:maxx2,nx3),
     $       F_Rhs_8(minx:maxx,miny:maxy,gnk)
      real   F_cdiff, F_sol(minx:maxx,miny:maxy,gnk)
*
*author
*     M.Tanguay
*
*revision
* v2_21 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - adapt to f90 native dynamic memory allocation 
*
*object
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_sol       I/O      r.h.s. and result of horizontal diffusion
*  F_Rhs_8     I/O      work vector
*
*----------------------------------------------------------------
*
**
      real*8   fdg1_8 ( miny:maxy, minx1:maxx1, gni+F_npex ),
     $         fdg2_8 (minx1:maxx1,minx2:maxx2, nx3+F_npey ),
     $         dn3_8 (minx1:maxx1,minx2:maxx2,F_pwr,nx3),
     $         sol_8 (minx1:maxx1,minx2:maxx2,F_pwr,nx3),
     $         fwft_8( miny:maxy ,minx1:maxx1,gni+2+F_npex)
      real*8   ZERO_8, b_8
      parameter( ZERO_8 = 0.0 )      
      integer o1,o2,i,j,k,jw,m
**
*     __________________________________________________________________
*
*     Zero adjoint variables
*     ----------------------
      do k= 1,gni+F_npex
      do j= minx1,maxx1
      do i= miny ,maxy
      fdg1_8(i,j,k) = ZERO_8
      end do
      end do
      end do
*
      do k= 1,gni+2+F_npex
      do j= minx1,maxx1
      do i= miny ,maxy
      fwft_8(i,j,k) = ZERO_8
      end do
      end do
      end do
*
      do k= 1,nx3+F_npey
      do j= minx2,maxx2
      do i= minx1,maxx1
      fdg2_8(i,j,k) = ZERO_8
      end do
      end do
      end do
*
      do m= 1,nx3
      do k= 1,F_pwr
      do j= minx2,maxx2
      do i= minx1,maxx1
      dn3_8(i,j,k,m) = ZERO_8
      sol_8(i,j,k,m) = ZERO_8
      end do
      end do
      end do
      end do
*
* ADJ of
* Resolution
*
* ADJ of
* resolution du systeme blok-tridiagonal
*
* ADJ of
* retour
*
      do k= 1, gnk
      do j= 1, njl
      do i= 1, nil
         F_Rhs_8(i,j,k) = dble(F_sol(i,j,k)) + F_Rhs_8(i,j,k)
         F_sol(i,j,k)   = ZERO_8
      enddo
      enddo
      enddo
*
*     ADJ of
*     inverse projection ( r = x * w )
*
      call rpn_comm_transpose( F_Rhs_8,Minx, Maxx, Gni, (Maxy-Miny+1),
     %                              Minx1, Maxx1, gnk, fwft_8, 1, 2 )
*
      call ffft8 ( fwft_8, (Maxy-Miny+1) * (maxx1-minx1+1), 1,
     %                               (Maxy-Miny+1) * Nkl, -1 )
*
      do k = nkl,1,-1
         do j = (Maxy-Miny+1),1,-1
            fwft_8(j,k,Gni+2) = ZERO_8
            fwft_8(j,k,2)     = ZERO_8
            fwft_8(j,k,2)     = fwft_8(j,k,1) + fwft_8(j,k,2)
            fwft_8(j,k,1)     = ZERO_8
         enddo
         do j=njl,1,-1
         do i = Gni,1,-1
            fdg1_8(j,k,i)   = fwft_8(j,k,i+1) + fdg1_8(j,k,i)
            fwft_8(j,k,i+1) = ZERO_8
         enddo
         enddo
      enddo
*
      call rpn_comm_transpose
     $     ( fdg1_8 , Miny, Maxy, nx3, (Maxx1-Minx1+1),
     $               minx2, maxx2,gni, fdg2_8,  2, 2 )
*
      do k = 1, nx1
      do i = 1, nx2
      do j = 1, nx3
         sol_8(k,i,F_pwr,j) = fdg2_8(k,i,j) + sol_8(k,i,F_pwr,j)
         fdg2_8(k,i,j)      = ZERO_8
      enddo
      enddo
      enddo
*
      do j = 1,nx3-1
         do k = nx1,1,-1
         do o1= F_pwr,1,-1
         do i = nx2,1,-1
            dn3_8(k,i,o1,j)=  sol_8(k,i,o1,j) + dn3_8(k,i,o1,j)
            sol_8(k,i,o1,j)= -sol_8(k,i,o1,j)
         enddo
         enddo
         enddo
*
         do o1= F_pwr,1,-1
         do o2= F_pwr,1,-1
         do k = maxx1,minx1,-1
         do i = maxx2,minx2,-1
            sol_8(k,i,o2,j+1)=F_c_8(o1,o2,i,j)*sol_8(k,i,o1,j) + sol_8(k,i,o2,j+1)
         enddo
         enddo
         enddo
         enddo
*
      enddo
*
      do k = nx1,1,-1
      do o1= F_pwr,1,-1
         do i = nx2,1,-1
            dn3_8(k,i,o1,nx3)= sol_8(k,i,o1,nx3) + dn3_8(k,i,o1,nx3)
            sol_8(k,i,o1,nx3)= ZERO_8
            do j =  nx3,1,-1
C              sol_8(k,i,o1,j)= 0.0
               sol_8(k,i,o1,j)= ZERO_8
            enddo
         enddo
      enddo
      enddo
*
* ADJ of
* scale le cote droit pour retour
*
      do j= nx3,1,-1
         do o1= F_pwr,1,-1
         do o2= F_pwr,1,-1
         do k = maxx1,minx1,-1
         do i = maxx2,minx2,-1
            sol_8(k,i,o2,j)= F_deltai_8(o1,o2,i,j)*dn3_8(k,i,o1,j) + sol_8(k,i,o2,j)
         enddo
         enddo
         enddo
         enddo
*
         do o1= F_pwr,1,-1
         do k= maxx1,minx1,-1
         do i= maxx2,minx2,-1
C           dn3_8(k,i,o1,j)= 0.0
            dn3_8(k,i,o1,j)= ZERO_8 
         enddo
         enddo
         enddo
*
      enddo
*
* ADJ of
* aller
*
      do j = nx3,2,-1
         do k = nx1,1,-1
         do o1= F_pwr,1,-1
         do i = nx2,1,-1
            dn3_8(k,i,o1,j)=  sol_8(k,i,o1,j) + dn3_8(k,i,o1,j)
            sol_8(k,i,o1,j)= -sol_8(k,i,o1,j)
         enddo
         enddo
         enddo
         do o1= F_pwr,1,-1
         do o2= F_pwr,1,-1
         do k = nx1,1,-1
            do i = maxx2,minx2,-1
               sol_8(k,i,o2,j-1) = F_a_8(o1,o2,i,j)*sol_8(k,i,o1,j) 
     %                             + sol_8(k,i,o2,j-1)
            enddo
         enddo
         enddo
         enddo
      enddo
*
      do k = 1, nx1
      do o1= 1, F_pwr
      do i = 1, nx2
         dn3_8(k,i,o1,1)= sol_8(k,i,o1,1) + dn3_8(k,i,o1,1)
         sol_8(k,i,o1,1)= ZERO_8
      enddo
      enddo
      enddo
*
* ADJ of
* cote droit
*
      do k = nx1,1,-1
      do i = nx2,1,-1
      do j = nx3,1,-1
         fdg2_8(k,i,j) = F_opsyp0_8(nx3+j)*dn3_8(k,i,1,j) + fdg2_8(k,i,j)
         dn3_8(k,i,1,j)= ZERO_8
      enddo
      enddo
      enddo
*
      do k = minx1, maxx1
      do i = minx2, maxx2
         do o1 = 1, F_pwr
         do j  = 1, nx3
            sol_8(k,i,o1,j)= ZERO_8
            dn3_8(k,i,o1,j)= ZERO_8
         enddo
         enddo
      enddo
      enddo
*
*     ADJ of
*     projection ( wfft = x transposed * g )
*
      call rpn_comm_transpose (fwft_8(Miny,1,2),Miny,Maxy,nx3,
     $            (Maxx1-Minx1+1),minx2, maxx2,gni,fdg2_8,-2,2)
*
      do k = 1, Nkl
         do j = 1, (Maxy-Miny+1)
            fwft_8(j,k,1) = fwft_8(j,k,2) + fwft_8(j,k,1)
            fwft_8(j,k,2) = ZERO_8
            fwft_8(j,k,Gni+2) = ZERO_8
         enddo
         do i = 0, (Gni)/2
            b_8 = F_pri_8
            do jw = 1, (Maxy-Miny+1)
               fwft_8(jw,k,2*i+2) = b_8 * fwft_8(jw,k,2*i+2)
               fwft_8(jw,k,2*i+1) = b_8 * fwft_8(jw,k,2*i+1)
            enddo
         enddo
      enddo
*
      call ffft8 (fwft_8,(Maxy-Miny+1)*(maxx1-minx1+1),
     %                     1, (Maxy-Miny+1) * Nkl,  1 )
*
      do k=1,nkl
         do j=1,njl
         do i = 1, Gni
C           FDG1_8 should have been set to zero previously 
C           fdg1_8(j,k,i) = fwft_8(j,k,i) + fdg1_8(j,k,i)
            fdg1_8(j,k,i) = fwft_8(j,k,i) 
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
         do j= miny,0
         do i= 1,gni
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
      enddo
*
      do k= Nkl+1, maxx1
      do j= miny,maxy
      do i= 1,gni
         fwft_8(j,k,i) = ZERO_8
      enddo
      enddo
      enddo
*
      do k = 1, nkl
         do j= njl+1,maxy
         do i= 1,gni
            fwft_8(j,k,i) = ZERO_8
         enddo
         enddo
*
         do j = 1, njl
         do i = 1, Gni
            fdg1_8(j,k,i) = F_opsxp0_8(gni+i)*fdg1_8(j,k,i)
         enddo
         enddo
      enddo
*
      call rpn_comm_transpose ( F_Rhs_8, Minx, Maxx, Gni, (Maxy-Miny+1),
     %                          Minx1, Maxx1, gnk, fdg1_8,-1,2 )
*
      do k = 1, gnk
      do j = 1, njl  
      do i = 1,nil
         F_sol(i,j,k)  =sngl(((-1)**F_pwr)*dble(F_cdiff)*F_Rhs_8(i,j,k)) + F_sol(i,j,k)
         F_Rhs_8(i,j,k)=ZERO_8
      enddo
      enddo
      enddo
*
*     __________________________________________________________________
*
      return
      end

