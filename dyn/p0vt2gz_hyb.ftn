***s/r p0vt2gz_hyb - Compute hydrostatic GZ from P0 and VT
*
#include <model_macros_f.h>
*
      subroutine p0vt2gz_hyb (F_gz, F_pia, F_pib, F_ps, F_vt, 
     $                             n, Nk, F_pib_L, F_sig_L)
*
#include "impnone.cdk"
*
      logical F_pib_L,F_sig_L
      integer n, Nk
      real F_gz(n,Nk), F_vt(n,Nk), 
     $     F_ps(n), F_pia(Nk), F_pib(Nk)
*
*author
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from p0vt2gz v1_03)
* v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
* v3_00 - Lee V.            - treats 2D plane as 1-D vector, no halos
*
*
*object
*       see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_gz         O    - geopotential height
* F_pia        I    - actually RNA if F_sig_L=T
*                   - pia          if F_sig_L=F
* F_pib        I    - unused       if F_sig_L=T
*                   - pib          if F_sig_L=F and F_pib_L=T
*                   - pibb         if F_sig_L=F and F_pib_L=F
* F_ps         I    - ln(pi_s/z_s) if F_pib_L=T
*                   - pi_S         if F_pib_L=F or F_sig_L=T
* F_vt         I    - virtual temperature
* F_pib_L      I    - TRUE or FALSE
* F_sig_L      I    - TRUE or FALSE
*
*implicits
#include "lun.cdk"
#include "dcst.cdk"
#include "glb_ld.cdk"
#include "geomg.cdk"
*
**
      integer i,k,l,ik
      real con,q(3),ex,x0,xm,xp,aa,bb,cc,dd,det 
      real pr(Nk), vma(Nk), vmb(Nk), vmc(Nk), zak, zbk, zck
*
*     ---------------------------------------------------------------
*
      con = -Dcst_rgasd_8
*
      do 100 i=1,n
*
         if (F_sig_L) then
            do k=1,Nk
* Note that PIA here is actually RNA
               pr(k) = F_pia(k) * F_ps(i)
* And if ETA analyse had TOPP where F_pt did not have uniform values:
*     then     pr(k) = F_pt(i) + F_pia(k) * ( F_ps(i) - F_pt(i) )
            enddo
         else
            if (F_pib_L) then
               do k=1,Nk
                  pr(k) = F_pia(k) + F_pib(k)*exp(F_ps(i))
               enddo
            else
               do k=1,Nk
                  pr(k)  = F_pia(k) + F_pib(k)*F_ps(i)
               end do
            endif
         endif
         do k=1,Nk            
            x0=pr(k)
            if (k.eq.1) then
               xm=pr(1)
               xp=pr(2)
               aa=pr(3)-x0
               bb=pr(2)-x0
            elseif (k.eq.nk) then
               xm=pr(Nk-1)
               xp=pr(Nk)
               aa=pr(Nk-1)-x0
               bb=pr(Nk-2)-x0
            else
               xm=pr(k-1)
               xp=pr(k+1)
               aa=xm-x0
               bb=xp-x0
            endif
            do l=1,3
               ex=real(l)-1.
               if(ex.ne.0.) q(l)=(xp**ex-xm**ex)/ex
               if(ex.eq.0.) q(l)=alog(xp/xm)
            enddo
            q(3)=q(3)-x0*(2.0*q(2)-x0*q(1))
            q(2)=q(2)-x0*q(1)
            cc=aa**2
            dd=bb**2
            det=aa*dd-bb*cc
            vma(k)=(dd*q(2)-bb*q(3))/(2.0*det)
            vmc(k)=(aa*q(3)-cc*q(2))/(2.0*det)
            vmb(k)=q(1)/2.0-vma(k)-vmc(k)
         end do
*
         zak = -2.0*con*vma(nk)
         zbk = -2.0*con*vmb(nk)
         zck = -2.0*con*vmc(nk)
         F_gz(i,nk-1) = zak * F_vt(i,nk-1) + zbk * F_vt(i,nk)
     $                  + zck * F_vt(i,nk-2) + F_gz(i,nk)
         do k = 1, nk-2
            ik  = nk-1-k
            zak = -2.0*con*vma(ik+1)
            zbk = -2.0*con*vmb(ik+1)
            zck = -2.0*con*vmc(ik+1)
            F_gz(i,ik) = zak * F_vt(i,ik  ) + zbk * F_vt(i,ik+1)
     $                   + zck * F_vt(i,ik+2) + F_gz(i,ik+2)
         enddo
*
 100  CONTINUE
*
*     ---------------------------------------------------------------
*
      return
      end
