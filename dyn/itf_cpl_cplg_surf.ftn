! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***S/R itf_cpl_cplg_surf 
C
#include "model_macros_f.h"
C
      SUBROUTINE itf_cpl_cplg_surf ()
*
      implicit none
*
*author:
C 
C   Sophie Valcke -RPN/CERFACS - March 2005
C
*revision
* v3_30 - Faucher & Chamberland   - final adjustment-debugging
* v3_?? - Chamberland - include timeout for gossip/oasis operations
*
*object:
C
C   Coupling with all other models through oasis   
C
*implicits
#include "glb_ld.cdk"
#include "ptopo.cdk"
#include "cstv.cdk"
#include "itf_cpl_cplg.cdk"
#include "lctl.cdk"
C
C Local variables
C 
      INTEGER :: il_ou,il_in,il_dim,il_n,il_RETURN,il_ERR,i,err
      logical :: isallok,hasgotitall
      DATA lg_getfirst,lg_get/.false.,.false./
C
C===================================================================
C
C     Collect the fields to be sent (in fld_out/all PEs)
C     
      CALL glbcolc (rga_fldout, G_ni, G_nj, rga_cpl2phy, 
     $               1, l_ni, 1, l_nj, ig_max_inout_dim)
C
      err=0
      IF (Ptopo_myproc.eq.0) THEN
C     
C        Define mask coupling fields
         IF (lg_atmos .and. iga_mca(2) .ne. 0) 
     $        rga_fldout(iga_mca(2):iga_mca(2)+G_ni*G_nj)=rga_msk(1:G_ni*G_nj)
         IF (lg_land .and. .not. lg_atmos .and. iga_mcl(2) .ne. 0) THEN
            rga_fldout(iga_mcl(2):iga_mcl(2)+G_ni*G_nj)=rga_msk(1:G_ni*G_nj)
            rga_fldout(iga_mcg(2):iga_mcg(2)+G_ni*G_nj)=rga_msk(1:G_ni*G_nj)
         ENDIF
         IF (lg_ocean .and. .not. lg_atmos .and. iga_mcw(2) .ne. 0) THEN
            rga_fldout(iga_mcw(2):iga_mcw(2)+G_ni*G_nj)=rga_msk(1:G_ni*G_nj)
            rga_fldout(iga_mci(2):iga_mci(2)+G_ni*G_nj)=rga_msk(1:G_ni*G_nj)
         ENDIF
         
         lg_put = .false.
         IF (C_cploasis_L) THEN
            ig_oatime = ig_oatime +  int(Cstv_dt_8)

            IF (ig_oatime .ge. 0) THEN

C     If coupling via oasis, send the fields to oasis
                 
               isallok=.true.
               lg_put =.true.
               DO il_ou = 1, ig_sfc_out_dim
                  il_dim = (il_ou-1)*G_ni*G_nj + 1
                  !- Send field to oasis coupler
                  CALL cpl_oasis_put (rga_fldout(il_dim), G_ni, G_nj,
     $             iga_varidou(il_ou), ig_oatime, ig_compid, il_return)
                    
                  !- Write output coupling fields to RPNSTD FILE
                  print *,'cpl_oasis_put: ',iga_varidou(il_ou), ig_oatime, il_return
                  if (il_return.eq.1 .and. C_cplflds2file_L)
     $               call write_fst (rga_fldout(il_dim), G_ni,G_nj,1,
     $                               sfc_out_S(il_ou),1000.,456,789,0,
     $                               'Z','cpl_fields_ou.std')
                  IF (il_return.lt.0) isallok=.false.
                  IF (il_return.ne.1) lg_put =.false.
               END DO
               if (.not.isallok)
     $              print *,"WARNING: problem occured while",
     $                      " sending cpl flds"              

C     If coupling via oasis, receive coupling fields from oasis

               isallok=.true.
               hasgotitall=.true.
               DO il_in = 1, ig_sfc_in_dim
                  il_dim = (il_in-1)*G_ni*G_nj + 1
                  !- Send field to oasis coupler
                  CALL cpl_oasis_get (rga_fldin(il_dim), G_ni, G_nj,
     $              iga_varidin(il_in), ig_oatime, ig_compid, il_return)
                  print *,'cpl_oasis_get: ',iga_varidin(il_in), ig_oatime, il_return
              
                  !- Write input coupling fields to RPNSTD FILE
                  IF (il_return.eq.1 .and. C_cplflds2file_L) then
                     CALL statfld(rga_fldin(il_dim),sfc_in_S(il_in),
     $                            ig_oatime,'CPL-',1,G_ni,1,G_nj,1,
     $                            1,1,1,G_ni,G_nj,1) 
                     call write_fst (rga_fldin(il_dim),G_ni,G_nj,1,
     $                               sfc_in_S(il_in),1000.,456,789,0,
     $                               'Z','cpl_fields_in.std')
                  endif
                  IF (il_return.lt.0) isallok=.false.
                  IF (il_return.ne.1) hasgotitall=.false.
               END DO

               if (.not.isallok) then
                  print *,"WARNING: problem occured while",
     $                    " geting cpl flds"
                  if (C_isautonomus_L) then
                     print *,"Trying to continue in stand alone mode"
                     C_coupling_L = .false.
                     C_cploasis_L = .false.
                     lg_get       = .false.
                     lg_getfirst  = .false.
                     lg_put       = .false.
                  else
                     print *,'---- Abort in itf_cpl_cplg_surf ----'
                     err=-1
                  endif
               else
                  if (hasgotitall) then
                     ig_ncpl = ig_ncpl + 1
C  lg_get determines if coupling fields are sent to physics with c_fillbu;
C  -> in restart, it should be true as soon as fields are effectively received
C     in cpl_oasis_get (i.e. il_return .eq. 1)
C  -> in notrestart, it should be true only after coupling fields have been
C     received the 3rd time (because the first two exchanges coupling fields
C     from ocean are not valid)
C  lg_getfirst determines if valid coupling fields were received for the
C  first time (it will trigger the transfer of iga_cplfld to physics)
C  -> in restart, it should be true the first time fields are effectively 
C     received
C  -> in notrestart, it should be true only the third time coupling fields 
C     have been received

                     IF (Lctl_step .ge. 2) lg_get      = .true.
                     IF (Lctl_step .eq. 2) lg_getfirst = .true.
                  endif
              ENDIF
          ENDIF
      ENDIF

C         Coupling to other surface modules should be done here

      ENDIF

      call gem_stop('itf_cpl_cplg_surf - cpl_oasis_get error',err)

C     Fill the variable that will be used to transfer info to physics


C     Broadcast value of coupling exchange counter ig_ncpl and logicals
C???SCH      call RPN_COMM_bcast(ig_ncpl, 1,"MPI_INTEGER", 0, "grid", il_err)
      call RPN_COMM_bcast(lg_get, 1,"MPI_LOGICAL", 0, "grid", il_err)
      call RPN_COMM_bcast(lg_getfirst, 1,"MPI_LOGICAL", 0, "grid", il_err)
C     Broadcast value of coupling logicals 
C     since they may have been updated above
      call RPN_COMM_bcast(C_coupling_L, 1,"MPI_LOGICAL", 0, "grid", il_err)
      call RPN_COMM_bcast(C_cploasis_L, 1,"MPI_LOGICAL", 0, "grid", il_err)

      IF (lg_get) call glbdist (rga_fldin, G_ni, G_nj, rga_cpl2phy, 
     $                    1, l_ni, 1, l_nj, ig_max_inout_dim, 0, 0)
*
*     __________________________________________________________________
*
      RETURN
      END

 
