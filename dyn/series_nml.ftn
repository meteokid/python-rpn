!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r series_nml
*
#include "model_macros_f.h"
*
      integer function series_nml (F_namelistf_S)
      implicit none
*
      character* (*) F_namelistf_S
*
*author
*     R. McTaggart-Cowan    - Apr 2009
*
*revision
* v4_05 - McTaggart-Cowan, R.       - initial version
*
*object
*  Default configuration and reading series namelist
*
#include "nml.cdk"
*
      integer  fnom
      external fnom
*
      integer nrec,unf,i
*
*-------------------------------------------------------------------
*
      series_nml = -1
*
      if ((F_namelistf_S.eq.'print').or.(F_namelistf_S.eq.'PRINT')) then
         series_nml = 0
         writing: if (Lun_out > 0) then
            if(P_serg_srsus_L)then
               write(Lun_out,*)"P_serg_serstp =",P_serg_serstp
               write(Lun_out,*)"P_serg_srsus_L=",P_serg_srsus_L
               write(Lun_out,*)"P_serg_srwri  =",P_serg_srwri
               do i=1,size(P_serg_srprf_s)
                  if(trim(P_serg_srprf_s(i)).ne.'')then
                     write(Lun_out,*)"i,P_serg_srprf_s(i)=",i,trim(P_serg_srprf_s(i))
                  endif
               enddo
               do i=1,size(P_serg_srsrf_s)
                  if(trim(P_serg_srsrf_s(i)).ne.'')then
                     write(Lun_out,*)"i,P_serg_srsrf_s(i)=",i,trim(P_serg_srsrf_s(i))
                  endif
               enddo
            else
               if (Lun_out > 0) write(Lun_out,*)"No time series requested."
            endif
         endif writing
         return
      endif
*
* Defaults values for namelist variables
*
      P_serg_srsus_L    = .false.
      P_serg_srsrf_s = ' '
      P_serg_srprf_s = ' '
      P_serg_srwri      = 1
      P_serg_serstp     = 99999
*
      do i=1,MAXSTAT
        Xst_stn_ij(i) = station_ij('UNDEFINED',STN_MISSING,STN_MISSING)
        Xst_stn_latlon(i) = 
     $   station_latlon('UNDEFINED',real(STN_MISSING),real(STN_MISSING))
      enddo
*
      if (F_namelistf_S .ne. '') then
*
         unf = 0
         if (fnom (unf,F_namelistf_S, 'SEQ+OLD', nrec) .ne. 0) goto 9100
         rewind(unf)
         read (unf, nml=series, end = 1000, err=9110)
 1000    call fclos (unf)
*
      endif
*
      series_nml = 1
      goto 9999
*
 9100 if (Lun_out.gt.0) then
         write (Lun_out, 9050) trim( F_namelistf_S )
         write (Lun_out, 8000)
      endif
      goto 9999
*
 9110 call fclos (unf)
      if (Lun_out.ge.0) then  
         write (Lun_out, 9150) 'series',trim( F_namelistf_S ) 
         write (Lun_out, 8000)
      endif
      goto 9999
*
 8000 format (/,'========= ABORT IN S/R series_nml.f ============='/)
 9050 format (/,' FILE: ',A,' NOT AVAILABLE'/)
 9150 format (/,' NAMELIST ',A,' INVALID IN FILE: ',A/)
*
*-------------------------------------------------------------------
*
 9999 return
      end
