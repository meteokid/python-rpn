!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r tstpdyn -  Performs a dynamical timestep of the model
!
#include "model_macros_f.h"
!
      subroutine tstpdyn ( F_fnitraj )
!
      implicit none
!
      integer F_fnitraj
!
!author
!     Alain Patoine ( after version v1_93 of tstpdyn2 )
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_10 - Tanguay M.        - store TRAJ for 4D-Var 
! v2_30 - Edouard S.        - introduce Ncn 
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_03 - Tanguay M.        - Adjoint NoHyd configuration
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ
! v3_21 - Desgagne M.       - introduce new timing routines
! v4_04 - Tanguay M.        - Staggered version TL/AD
! v4_05 - Girard C.         - Added boundary condition for top piloting
!
!object
!    
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_fnitraj     I         number of iterations to compute upstream 
!                         positions  
!----------------------------------------------------------------
!
!implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "sol.cdk"
#include "nl.cdk"
#include "lctl.cdk"
#include "step.cdk"
#include "vtopo.cdk"
       include "v4dg.inc"
!
!      common/xiln/iln
!
      integer iln, dim, dimt, dimb, err
      real dth
!
      logical isStatStep_L
!
!*
!     ---------------------------------------------------------------
!
!C    rhs:	Compute rhs of the governing equations
!C    int:	Perform Semi-Lagrangian advection
!C    pre:	Compute non-linear Helmholtz problem (invariant part)
!C    nli:	Compute non-linear components of the r.h.s. of the 
!C              Helmholtz problem and linear and nonlinear components 
!C              of the r.h.s. of the Helmholtz equation
!C    solver:	Linear Helmholtz solver
!C    bac:	Backsubtitution
!     ---------------------------------------------------------------
      isStatStep_L = mod(Lctl_step,Step_gstat).eq.0
!
      dth =  Cstv_dt_8/2.
!
      if (Lun_debug_L) write(Lun_out,1000)
!
!     ---------------------------------------------------------------
!
!     Store TRAJ predictive variables
!     -------------------------------
      call v4d_rwtraj (2) 
!
      if ( Orh_icn .eq. 1 ) then
         call tmg_start0 ( 3, 'RHS      ' )
         call rhs ()
         call tmg_stop0 (3)
      endif
!
!     Store TRAJ Positions TH/TRAJ Winds TH
!     -------------------------------------
      call v4d_rwtraj (3) 
      call v4d_rwtraj (4) 
!
      call tmg_start0(4, 'ADW      ')
      call itf_adw_main(F_fnitraj,isStatStep_L)
      call tmg_stop0(4)
!
      call tmg_start0(5, 'PRE      ')
!
      if ( Orh_crank_L .and. Orh_icn.eq.1 ) then
!         ------------------------------------------------------------
!        If necessary vary topogragphy according to Vtopo_start and
!        Vtopo_ndt
!         ------------------------------------------------------------
         if (Vtopo_L .and. (Lctl_step .ge. Vtopo_start)) then
            call var_topo( )
            if ( Schm_phyms_L ) call phycom ('varmtn' ,1 ,1,'set')
         else
            if ( Schm_phyms_L ) call phycom ('varmtn' ,0 ,1,'set')
         endif
      endif
!
      call pre ()
      call tmg_stop0 (5)
!
      if ( Orh_icn.eq.1 ) call frstgss( )
!
      if ( Lun_debug_L ) write (Lun_out,1005) Schm_itnlh
!
      dim = (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*l_nk
      dimb= (l_maxx-l_minx+1)*(l_maxy-l_miny+1)
      dimt= (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*(l_nk+1)
      call hpalloc (nl_u_, dim, err,1)
      call hpalloc (nl_v_, dim, err,1)
      call hpalloc (nl_t_, dimt,err,1) 
      call hpalloc (nl_c_, dim, err,1)
      call hpalloc (nl_f_, dimt,err,1)
      call hpalloc (nl_b_, dimb,err,1)
      nl_w_ = 0
      if (.not.Schm_hydro_L) call hpalloc (nl_w_, dimt, err,1)
!
      do 100 iln=1,Schm_itnlh
!
!
!        Store TRAJ modified by BAC at previous Orh_icn
!        ----------------------------------------------
         if ( Orh_icn.ne.1.and.iln.eq.1 ) call v4d_rwtraj (7) 
!
         call tmg_start0 ( 6, 'NLI      ' )
         call nli ()
         call tmg_stop0 (6)
!         
         call tmg_start0 ( 7, 'SOL      ' )
         call sol_main (iln)
         call tmg_stop0 (7)
!
!        Store TRAJ requested to build BAC_TR 
!        ------------------------------------
         if ( V4dg_conf.ne.0 .and. V4dg_oktr_L ) V4dg_iln = iln
         call v4d_rwtraj (8) 
!
         call tmg_start0 ( 8, 'BAC      ' )
         call bac ( iln, Schm_itnlh )
         call tmg_stop0 (8)
!
!        Store TRAJ requested during BAC_AD 
!        ----------------------------------
         call v4d_rwtraj (9) 
!
 100  continue
!
      if(Schm_zdotMid_L) call zdot_mid()
!
      call hpdeallc(nl_u_, err,1)
      call hpdeallc(nl_v_, err,1)
      call hpdeallc(nl_t_, err,1)
      call hpdeallc(nl_c_, err,1)
      call hpdeallc(nl_f_, err,1)
      call hpdeallc(nl_b_, err,1)
      if (.not.Schm_hydro_L) call hpdeallc(nl_w_, err,1)
!
!     ---------------------------------------------------------------
!
 1000 format( &
       3X,'PERFORM A DYNAMICAL STEP: (S/R TSTPDYN)', &
      /3X,'========================================',/)
 1005 format( &
       3X,'ITERATING SCHM_ITNLH=',I3,' TIMES TO SOLVE NON-LINEAR ', &
          'HELMHOLTZ PROBLEM')
      return
      end
