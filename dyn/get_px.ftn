! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r get_px - get 3D pressure using A,B, and p0 for
*                    the purpose of obtaining the hydrostatic surface
*                    pressure
*
#include "model_macros_f.h"
*
      integer function get_px(F_pr, F_p0, NN, F_a_8, F_b_8, NK, F_vcode,F_log_L)
      implicit none
*
      integer NN, NK, F_vcode
      logical F_log_L
      real F_pr(NN,NK), F_p0(NN)
      real*8 F_a_8(NK), F_b_8(NK)
*
*author
*     V.Lee July 2008
*
*revision
*

*object
*       see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_pr           O    - 3D pressure field in Pascals
* F_p0           I    - incoming 2D surface pressure (unit depends on vcode)
* NN             I    - number of points in the 2D field of F_p0
* F_a_8          I    - A 
* F_b_8          I    - B
* NK             I    - Number of levels to the 3D pressure field
* F_vcode        I    - code for:
*
*                     2 formulae             p0             6 anal
*
*            0 => p =    A                         (B=0),  prs-anal
*            1 => p =    A+B*   ps       , F_p0=ps (A=0),  sig-anal
*            2 => p =    A+B*   ps       , F_p0=ps      ,  etasef-anal
*            3 => p =    A+B*   ps       , F_p0=ps      ,  eta-anal
*            4 => p =    A+B*   ps       , F_p0=ps      ,  hyb-anal
*            5 => p =    A+B*   ps       , F_p0=ps      ,  ecm-anal
*            6 => p =exp(A+B*ln(ps/pref)), F_p0=ps      ,  stg-anal
*
*implicits
*
**
      integer i,k
*
*     ---------------------------------------------------------------
*
      get_px = 0
      if (F_log_L) then
*     FOR result in LOG
          if (F_vcode.eq.0) then
*             Pressure levels
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = log(F_a_8(k)*100.)
              enddo
              enddo
          else if (F_vcode.eq.1) then
*             Sigma levels,p0 is in milli-bars
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = log(F_b_8(k)*F_p0(i)*100.0)
              enddo
              enddo
          else if (F_vcode.eq.2.or.F_vcode.eq.3.or.F_vcode.eq.4) then
*             ETASEF levels
*             ETA levels
*             Hyb unstaggered levels,p0 is in milli-bars
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = log(F_a_8(k) + F_b_8(k)*F_p0(i)*100.0)
              enddo
              enddo
          else if (F_vcode.eq.6) then
*             Staggered Hybrid levels (lnp-type),p0 (!!SF) is ln pascals
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = F_a_8(k) + F_b_8(k)*F_p0(i)
              enddo
              enddo
          else 
              print *,'Error in get_px: unrecognizable datatype: F_vcode=',F_vcode
              get_px = -1
          endif

      else
*     FOR result NOT in LOG
          if (F_vcode.eq.0) then
*             Pressure levels
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = F_a_8(k)*100.0
              enddo
              enddo
          else if (F_vcode.eq.1) then
*             Sigma levels
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = F_b_8(k)*F_p0(i)*100.0
              enddo
              enddo
          else if (F_vcode.eq.2.or.F_vcode.eq.3.or.F_vcode.eq.4) then
*             ETASEF levels
*             ETA levels
*             Hyb unstaggered levels
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = F_a_8(k) + F_b_8(k)*F_p0(i)*100.0
              enddo
              enddo
          else if (F_vcode.eq.6) then
*             Staggered Hybrid levels (lnp-type),p0 (!!SF) is ln pascals
              do k=1,NK
              do i=1,NN
                 F_pr(i,k) = exp(F_a_8(k) + F_b_8(k)*F_p0(i))
              enddo
              enddo
          else 
              print *,'Error in get_px: unrecognizable datatype: F_vcode=',F_vcode
              get_px = -1
          endif
      endif
      return
      end
