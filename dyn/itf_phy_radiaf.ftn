!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r itf_phy_radiaf -- Initialization of climatological ozone data
*                        and radiation table
*
#include "model_macros_f.h"
*
      subroutine itf_phy_radiaf (F_fichier_S, F_chemin_S, F_value, 
     $                                               NX, F_flag_L)
      implicit none
*
      character* (*) F_fichier_S, F_chemin_S
      logical F_flag_L
      integer NX
      real F_value (NX)
*
*author
*     M. Desgagne
*
*revision
* v3_31 - Desgagne M.       - initial version
* v4_03 - Desgagne M.       - ISST + new ozone file
*
*object
*     This routine is called by the physics package to initialize
*     either the radiation or ozone arrays in the dynamics
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_nomvar_S    I      array of nom var
* F_fichier_S   I      file name of input file
* F_chemin_S    I      path of the input file
* F_value       O      data read in from input file
* NX            I      number of points of data to read
* F_flag_L      I      .true. for RPN standard file format (ozone)
*                      .false.for sequential unformatted file format (radiation)
*
#include "ptopo.cdk"
#include "path.cdk"
*
      character*1024 filename
      character*26 datatype_S
      logical local_L,found_L,isfst_L
      integer iun,ilir,inbr,indice,long,status,ityp,ierr
      integer fnom,fstouv,fstopc,fstfrm,fclos,wkoffit
      data iun /26/
      data datatype_S /'RADIATION TABLE FILE: '/
*-----------------------------------------------------------------
*
      if (F_flag_L) then
         if (Ptopo_myproc.eq.0) then
             write(*,*)'F_fichier_S',F_fichier_S
             write(*,*)'F_chemin_S',F_chemin_S
         endif
         call itf_phy_rdozone (F_fichier_S, F_chemin_S)
         return
      endif
*
      status = 0
*
      if (Ptopo_myproc.eq.0) then
*
         filename = trim(Path_input_S)//'/'//trim(F_fichier_S)
         inquire (FILE=filename,EXIST=found_L)
         if (.not.found_L) then
            filename = trim(F_chemin_S)//trim(F_fichier_S)
            inquire (FILE=filename,EXIST=found_L)
         endif
*
         if (found_L) then
            ilir = wkoffit(filename)
            if ((ilir.eq.1) .or.(ilir.eq.2).or.
     $          (ilir.eq.33).or.(ilir.eq.34) ) then
               write (6,1001) trim(datatype_S),trim(filename)
               ilir = fnom (iun,filename,'STD+RND+OLD',0)
               ilir = fstouv (iun,'RND')
               call rd_radtab (F_value,iun,NX,status)
               inbr = fstfrm (iun)
               inbr = fclos  (iun)    
            else
               print*, ' FILE ',trim(filename)
               print*, ' NOT FST FILE FORMAT -- ABORT --'
               status = -1
            endif
         else
            print*
            print *,'********************************************'
            print *,'   CAN NOT FIND ',datatype_S,trim(filename)
            print *,'********************************************'
            status = -1
         endif
*     
      endif
*
      call gem_stop('itf_phy_radiaf',status)
*
      call RPN_COMM_bcast (F_value,NX,"MPI_REAL",0,"grid",ierr)
*
 1001 format (/a/a)
*
*-----------------------------------------------------------------
*
      return
      end
