! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r itf_phy_radiaf -- Initialization of climatological ozone data
*                 and radiation table
*
#include "model_macros_f.h"
*
      subroutine itf_phy_radiaf (F_fichier_S, F_chemin_S, F_value, 
     $                                               NX, F_flag_L)
      implicit none
*
      character* (*) F_fichier_S, F_chemin_S
      logical F_flag_L
      integer NX
      real F_value (NX)
*
*author
*     M. Desgagne
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_21 - Desgagne M.       - rpn_comm stooge for MPI
* v3_30 - Desgagne M.       - new itf_phy interface
*
*object
*     This routine is called by the physics package to initialize
*     either the radiation or ozone arrays in the dynamics
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_nomvar_S    I      array of nom var
* F_fichier_S   I      file name of input file
* F_chemin_S    I      path of the input file
* F_value       O      data read in from input file
* NX            I      number of points of data to read
* F_flag_L      I      .true. for RPN standard file format (ozone)
*                      .false.for sequential unformatted file format (radiation)
*
#include "ptopo.cdk"
      character*26 datatype_S(2)
      logical local_L,found_L,isfst_L
      integer iun,ilir,inbr,indice,long,status,ityp,ierr
      integer fnom,fstouv,fstopc,fstfrm,fclos,wkoffit
      data iun /26/
      data datatype_S /'CLIMATOLOGICAL OZONE FILE ',
     $               'RADIATION TABLE FILE '/
*-----------------------------------------------------------------
*
      inbr   = fstopc ('MSGLVL','SYSTEM',.false.)
      status = -1
      ityp = 1
      if (.not.F_flag_L) ityp=2
*
      if (Ptopo_myproc.eq.0) then
*
         inquire (FILE=F_fichier_S,EXIST=local_L)
         if (local_L) then
            F_chemin_S = F_fichier_S
            found_L   = .true.
            indice = 0
            long   = len (F_fichier_S)
         else
            indice = index(F_chemin_S,' ')
            long   = len(F_fichier_S)
            F_chemin_S(indice:indice+long-1) = F_fichier_S
            inquire (FILE=F_chemin_S,EXIST=found_L)
         endif
*
         if (found_L) then
            ilir = wkoffit(F_chemin_S)
            if ((ilir.eq.1) .or.(ilir.eq.2).or.
     $          (ilir.eq.33).or.(ilir.eq.34) ) then
               ilir  = fnom (iun,F_chemin_S,'STD+RND+OLD',0)
               ilir  = fstouv (iun,'RND')
               isfst_L = .true.
            else
               open(iun,file=F_chemin_S,access='SEQUENTIAL',
     $                             form='UNFORMATTED')
               isfst_L = .false.
            endif
*
            print*
            if (isfst_L) then
               print *, datatype_S(ityp),'(FST): ',F_chemin_S(1:indice+long)
               inbr   = fstopc ('MSGLVL','INFORM',.false.)
            else
               print *, datatype_S(ityp),'(SEQ): ',F_chemin_S(1:indice+long)
            endif
*
            call rdradf (F_value,iun,isfst_L,NX,F_flag_L,status)
*
            if (isfst_L) then            
               inbr = fstfrm (iun)
               inbr = fclos  (iun)    
            else
               close (iun)
            endif
*
         else
*
            print*
            print *,'********************************************'
            print *,'   CAN NOT FIND ',datatype_S(ityp)
            print *,'********************************************'
*
         endif
*     
      endif
*
      call RPN_COMM_bcast (status,1,"MPI_INTEGER",0,"grid",ierr)
      if (status.eq.0) then
         call RPN_COMM_bcast (F_value,NX,"MPI_REAL",0,"grid",ierr)
      else
         if(Ptopo_myproc.eq.0) print*, 'COULD NOT READ ',datatype_S(ityp)
         stop
      endif
*
*-----------------------------------------------------------------
*
      return
      end
