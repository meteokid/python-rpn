***function E_SAMEGRID - returns TRUE if analysis is on model's PHI grid
*
      function E_SAMEGRID(f_anal,f_xfi,f_yfi)
*
#include "impnone.cdk"
      logical E_SAMEGRID
      real f_xfi(*), f_yfi(*)
      integer f_anal
*
*author michel roch -  mai 96 - from passtru
*
*revision
* v0_18 - michel roch            - initial version
* v1_01 - andre methot           - Allow horizontal interpolation from GEM
* v1_01                            to GEM
* v1_96 - V.Lee                  - changed calling sequence to pass the values
* v1_96                            of xg,yg instead of the file unit "fngrid"
* v1_96 - alain patoine          - rename passtry to passtry_2
* v1_97 - V.Lee                  - rename passtry_2 to SAMEGRID, eliminated
* v1_97                            variables glhorint,prpassx,prpassy
* v2_31 - V.Lee                  - check values of positional records to model
* v2_31                            descriptors
* v3_00 - Desgagne & Lee    - Lam configuration
*
*object
*         Checks the values in positional records in the analysis file and 
*         compares them to the model grid descriptors
*
*arguments
* -input-
* f_anal     file unit of analysis file
* f_xfi      vector of xfi's
* f_yfi      vector of yfi's
*
* -output-
* E_SAMEGRID - .true. if all grid descriptors and grid dimensions 
*                    from the analysis are the same as the model grid
*
*implicites
#include <model_macros_f.h>
#include "hgc.cdk"
#include "e_maxprms.cdk"
#include "e_files.cdk"
#include "e_grids.cdk"
#include "e_anal.cdk"
#include "e_zgrids.cdk"
*
*modules
      external fstlir, fstprm
      integer  fstlir, fstprm
**
      integer        i, j, k, m, n, l
      integer        dte, det, ipas, p1, p2, p3, g1, g2, g3, g4, bit
      integer        dty, swa, lng, dlf, ubc, ex1, ex2, ex3
      character*1    typ, grd
      character*2    var
      character*8    lab
      real           difxy,aa,bb
*     Threshold for deciding if the x/y analysis value is different from model
      parameter (difxy = 1.e-4)


*     Assume analyse grid is the same as the MODEL grid and for 
*     each condition that is not met, set E_SAMEGRID to FALSE

      E_SAMEGRID = .true.

      write(stdout,1001)
c     IF(ip1fi.ne.ig1a .or. ip2fi.ne.ig2a .or. ip3fi.ne.ig3a) THEN
c        write(stdout,*)vt,' in ANALYSIS has different IG GRID DESCRIPTORS'
c        write(stdout,*)'to model grid IP grid descriptors'
c        write(stdout,*)'ANALYSIS: ig1a,ig2a,ig3a= ', ig1a, ig2a, ig3a
c        write(stdout,*)'Model Grid: ip1,ip2,ip3=', ip1fi, ip2fi, ip3fi
c        E_SAMEGRID = .false.
c     ENDIF

      if(nia.ne.nifi .or. nja.ne.njfi) then
         write(stdout,*)vt,' in ANALYSIS has different GRID DIMENSIONS'
         write(stdout,*)'ANALYSIS dimensions NIA, NJA = ', nia, nja
         write(stdout,*)'MODEL dimensions NIFI, NJFI = ', nifi, njfi
         E_SAMEGRID= .false.
      endif
*
*     Look for >> record given the ig1a,ig2a,ig3a found with TT/VT field
      n = fstlir(grxaxi, f_anal, i, j, k, -1, ' ',
     %           ig1a,  ig2a,  ig3a,  'X', '>>')
*
      if  (n.lt.0) then
          write(stdout,*)'Cannot find >> record from analysis for ',vt
          call e_arret('E_SAMEGRID')
      endif

      if (i.ne.nia) then
          write(stdout,*)'MISMATCH I dimension in >> record for ',vt,'to NIA'
          call e_arret('E_SAMEGRID')
      endif
*
*     >> record found matches the record TT/VT field in analysis
*
*       Obtain gnzg1,gnzg2,gnzg3,gnzg4 for the >> field
      m = fstprm(n, dte, det, ipas, i, j, k, bit, dty, p1, p2, p3,
     x           typ, var, lab, grd, gnzg1, gnzg2, gnzg3, gnzg4,
     x           swa, lng, dlf, ubc, ex1, ex2, ex3 )
*
      if (.not.E_SAMEGRID) goto 100
*
        if(grd.ne.Hgc_gxtyp_s .or. 
     x   gnzg1.ne.Hgc_ig1ro .or. gnzg2.ne.Hgc_ig2ro .or.
     x   gnzg3.ne.Hgc_ig3ro .or. gnzg4.ne.Hgc_ig4ro) then
         write(stdout,*)'>> record has different IG GRID DESCRIPTORS' 
         write(stdout,*)'to model grid IG grid descriptors (Hgc_*)'
         write(stdout,*)'ANALYSIS: grd, gnzg1,gnzg2,gnzg3,gnzg4= ',
     x   grd,  gnzg1,  gnzg2,  gnzg3,  gnzg4
         write(stdout,*)'Model Grid: gxtyp,ig1,ig2,ig3,ig4 =',
     x      Hgc_gxtyp_s,Hgc_ig1ro,Hgc_ig2ro,Hgc_ig3ro,Hgc_ig4ro
         E_SAMEGRID = .false.
        endif
*
      if (.not.E_SAMEGRID) goto 100

      do i=1,nifi
         aa=grxaxi(i)+400.
         bb=f_xfi(i)+400.
         if(abs( (aa-bb)/bb ) .gt. difxy) then
            write(stdout,*)' >> record values do not match model grid xfi(i)'
c           write(stdout,*)'I   =',i,'f_xfi(i)=',f_xfi(i),'grxaxi(I)=',grxaxi(i)
            E_SAMEGRID = .false.
            go to 100
         endif
      enddo

 100  continue
*
*     Look for ^^ record given the ig1a,ig2a,ig3a found with TT/VT field
*
      n = fstlir(gryayi, f_anal, i, j, k, -1, ' ',
     %           ig1a,  ig2a,  ig3a,   'X', '^^')
*
      if  (n.lt.0) then
          write(stdout,*)'Cannot find ^^ record from analysis for ',vt
          call e_arret('E_SAMEGRID')
      endif
      if (j.ne.nja) then
          write(stdout,*)'MISMATCH J dimension in ^^ record for ',vt,'to NIA'
          call e_arret('E_SAMEGRID')
      endif
*
*     ^^ record found matches the record TT/VT field
*
*       obtain g1,g2,g3,g4 for the ^^ field and compare to the >> field
      m = fstprm(n, dte, det, ipas, i, j, k, bit, dty, p1, p2, p3,
     x           typ, var, lab, grd, g1, g2, g3, g4, swa, lng, dlf,
     x           ubc, ex1, ex2, ex3 )
*
      if (g1.ne.gnzg1 .or. g2.ne.gnzg2 .or. g3.ne.gnzg3 .or. g4.ne.gnzg4) then
        write(stdout,*)'IG1,IG2,IG3,IG4 in ^^ record must be same as'
        write(stdout,*)gnzg1,gnzg2,gnzg3,gnzg4
        write(stdout,*)'IG1,IG2,IG3,IG4 in >> record; they are a pair.'
        write(stdout,*)g1,g2,g3,g4
          call e_arret('E_SAMEGRID')
      endif
      if ( .not. E_SAMEGRID ) return

      do j=1,njfi
         aa=gryayi(j)+100.
         bb=f_yfi(j)+100.
         if(abs( (aa-bb)/bb ) .gt. difxy) then
            write(stdout,*)' ^^ record values do not match model grid yfi(j)'
c           write(stdout,*)'J   =',j,'f_yfi(j)=',f_yfi(j),'gryayi(j)=',gryayi(j)
            E_SAMEGRID = .false.
            return
         endif
      enddo
      write(stdout,*)' E_SAMEGRID: ANALYSIS GRID IS SAME AS MODEL GRID'
*

 1001 format(//,'CHECK IF ANALYSIS IS ON MODEL Z GRID (S/R E_SAMEGRID)',
     %        /,'====================================================',//)

      return
      end

