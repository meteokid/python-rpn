!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r gem_run - Performs the integration of the model
!
#include "model_macros_f.h"
!
      subroutine gem_run (F_dgtflt_L, F_rstrt_L)
!
      implicit none
!
      logical F_dgtflt_L, F_rstrt_L
!
!author
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_10 - Tanguay M.        - control cost function when 4D-Var (conf/100=1) 
! v2_20 - Desgagne M.       - correction for Step_total=0
! v2_21 - Dugas B.          - activate climate mode
! v2_21 - Lee V.            - changed calling sequence in p_main
! v2_30 - Dugas B.          - add call to gemtim
! v2_31 - Patoine A.        - logic of restart around Rstri_sdon
! v2_31 - Tanguay M.        - adapt ADJ to diffusion in gem_run 
! v3_00 - Tanguay M.        - cancel parameter in v4d_ctrlcst 
! v3_00 - Laroche S.        - adapt for simplified physics
! v3_01 - Tanguay M.        - introduce identity option
! v3_01 - Lee V.            - introduce horizontal sponge
! v3_02 - Tanguay M.        - cosmetics for identity option
! v3_02 - Buehner M.        - integration stops at timestep V4dg_steplast 
! v3_02                       if in V4d mode
! v3_03 - Tanguay M.        - Call hdif_phy  
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_11 - Tanguay M.        - Extend TRAJ for conversion for DYNOUT2
!                           - ADJ of digital filter
! v3_20 - Gravel S.         - background vertical diffusion
! v3_20 - Tanguay M.        - Introduce Hzd_hdif0_L
! v3_20 - Dugas B.          - Replace GEMTIM by GEMTIM2(may re-define Step_rsti)
! v3_30 - Desgagne M.       - Restructure code, added output for cascade mode
! v4    - Gravel-Girard-Plante - staggered version
! v4_04 - Tanguay M.        - Staggered version TL/AD
! v4_04 - Plante A.         - Remove offline mode
! v4_05 - Desgagne M.       - Restrict length of digital filter
! v4_05 - Plante-Girard     - Remove surfix
! v4_11 - Tanguay M.        - Reset Communication 3D_Var-(TL/AD)
!
!object
!	Performs the integration of the model
!
!       A timestep is composed of a dynamics timestep followed by a
!       physics timestep.
!
!       During initialization, the digital filter data is collected
!       at every timestep.
!
!       Output is performed if required.
!
!       Diagnostics (zonal or grid point) are extracted if required.
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_dgtflt_L    I         Digital initiatization mode
! F_rstrt_L     O         Is a restart required
!----------------------------------------------------------------
!
!implicits
#include "glb_ld.cdk"
#include "init.cdk"
#include "lun.cdk"
#include "step.cdk"
#include "rstr.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "clim.cdk"
#include "hzd.cdk"
#include "modconst.cdk"
!
      logical bkup_L,flag
      integer last_step,fstep,istep,step0,stepf,upperlimit
!*
!     ---------------------------------------------------------------
!
      if (Lun_out.gt.0) write (6,900) Mod_runstrt_S

      call blocstat (.true.)

      fstep = Step_total
      if (F_dgtflt_L) fstep = Init_dfnp-1

      last_step = min ( Step_total, Lctl_step + Step_rsti  &
                              - mod(Lctl_step , Step_rsti) )
      if (F_dgtflt_L) last_step = Init_dfnp-1
!
      upperlimit = max(fstep,Step_total)
      if (Rstri_idon_L) upperlimit = max(Init_dfnp-1,Step_total)
!
      call out_outdir (Lctl_step, upperlimit)
!
      if (Lctl_step.eq.0) then
         call out_dyn (.false., .true.)
         call pw_update_UVT ('P')
         call pw_update_GPW
      endif
!
      call out_dyn (.true., .false.)
      if (.not.F_dgtflt_L) call out_launchpost (.false.)
!
      step0 = Lctl_step+1
      stepf = last_step
!
      call itf_cpl_fillatm
!
      bkup_L = .false.
!
      call gemtim3 ( Lun_out )
!
      do istep = step0, stepf
!
         Lctl_step = istep
!
         if ( bkup_L ) call wrrstrt
!
!C    Incrementing timestep
!
         Rstri_sdon = Rstri_sdon + 1
!
         if (Lun_out.gt.0) write (Lun_out,1001) Lctl_step,fstep
!
         call out_outdir (istep, upperlimit)
!
!C    (Re-)initialize physics surface forcing increments
!     --------------------------------------------------
         if ( Clim_inincr_L ) call itf_phy_inincr
!
!C    Diffusion, Dynamics and Physics
!     -------------------------------
!        Dynamics timestep
!        -----------------
         call dynstep
!
         call pw_shuffle
         call pw_update_UVT ('P')
         call pw_update_GPW
!
         call out_dyn (.false., .true.)
!
!        Physics timestep & Horizontal diffusion & Vertical sponge
!        ---------------------------------------------------------
         call itf_phy_main (Lctl_step)

         call hzd_main ()
!
!C    Digital filter
!     --------------
         if ( F_dgtflt_L ) call digflt
!
!C    Perform output if required
!     --------------------------
!
         call out_dyn (.true., .false.)
!
         call blocstat (.false.)
!
         call itf_cpl_fillatm
!
         if (Lun_out.gt.0) write(Lun_out,3000) Lctl_step
!
         call gemtim3 ( Lun_out )
!
!     * Treating output on the fly
!
         if (Lctl_step.ne.last_step) call trans_clean
!
!     * Must we write a restart file?
!
         bkup_L = mod( Lctl_step ,Step_bkup ).eq.0
!
         if ( Lctl_step.eq.Step_spinphy ) call wrrstrt_phy (.true.)
!
         flag= F_dgtflt_L .and. Lctl_step.ge.(Init_dfnp-1)/2
         if ( (istep.ne.stepf) .and. (.not.flag) ) &
         call out_launchpost (.false.)
!
      end do
!
      call max_rss (' GEMDM',Lun_out.gt.0)
!
      F_rstrt_L = .false.
      if ((Lctl_step.lt.fstep).or.(Clim_climat_L)) F_rstrt_L = .true.
!
      if (Lun_out.gt.0) write(Lun_out,4000) Lctl_step
!
 900  format (/'STARTING THE INTEGRATION WITH THE FOLLOWING DATA: VALID ',a)
 1001 format(/,'GEM_RUN: PERFORMING TIMESTEP #',I8,' OUT OF ',I8, &
             /,'================================================')
 3000 format(/,'THE TIME STEP ',I8,' IS COMPLETED')
 4000 format(/,'END OF THE TIME LOOP (S/R GEM_RUN) AT TIMESTEP',I8, &
      /,'===================================================')
!
!     ---------------------------------------------------------------
!
      return
      end
