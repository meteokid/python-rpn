!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r vspng_drv_lam - Top sponge layer driver for LAM
*
#include "model_macros_f.h"
*
      subroutine vspng_drv_lam ( F_u,    F_v,  F_psd,  F_tp,  F_ip,
     %                      F_td,    F_t,   F_it, F_plt,   F_q,
     %                     F_pip,    F_w,   F_qp,  F_mu, F_mul, F_s, 
     %                     F_xfis, DIST_DIM,Nk)
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
      real     F_u(DIST_SHAPE,Nk), F_v (DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %        F_ip(DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %         F_t(DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk), F_q (DIST_SHAPE,Nk),
     %       F_pip(DIST_SHAPE,Nk), F_w (DIST_SHAPE,Nk),
     %        F_qp(DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk), F_s(DIST_SHAPE), F_xfis(DIST_SHAPE)
*
*author
*     Michel Desgagne  - October 2000
*
*revision
* v3_02   Lee V.    - initial version for LAM from vspng_drv
*
*object
*     Variable Vspng_uvwdt_L controls a mode in which 
*     vertical sponge is applied:
*              on Vspng_nk   levels      for momentum and
*              on top        level only  for all other variables
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_u
*----------------------------------------------------------------
* 
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "vspng.cdk"
*
      integer i, j, k, nkspng
*
      real work(LDIST_SHAPE,Nk)
**
*     __________________________________________________________________
*
*
*     Momentum
*     ~~~~~~~~
         call vspng_lam ( F_u, LDIST_DIM, l_niu, l_nj )
         call vspng_lam ( F_v, LDIST_DIM, l_ni , l_njv)
*
*
*        Vertical motion
*        ~~~~~~~~~~~~~~~
         call vspng_lam ( F_psd, LDIST_DIM, l_ni, l_nj)
*
*        Total divergence 
*        ~~~~~~~~~~~~~~~~
         call vspng_lam ( F_td, LDIST_DIM, l_ni, l_nj)
*
*     The temperature: T', T'lin & hence T 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_lam (  F_tp, LDIST_DIM, l_ni, l_nj)
         call vspng_lam ( F_plt, LDIST_DIM, l_ni, l_nj)
*
         do k=1, Vspng_nk
         do j=1+pil_s, l_nj-pil_n
         do i=1+pil_w, l_ni-pil_e
            F_t(i,j,k) = F_tp(i,j,k) + Cstv_tstr_8
         end do
         end do
         end do
*
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
         if (Vspng_uvwdt_L) then
            nkspng   = Vspng_nk
            Vspng_nk = 1
         endif
*         
         call vspng_lam ( F_ip, LDIST_DIM, l_ni, l_nj)
         call vspng_lam ( F_it, LDIST_DIM, l_ni, l_nj)
*
         do k = 2, Vspng_nk
         do j=1+pil_s, l_nj-pil_n
         do i=1+pil_w, l_ni-pil_e
            F_it(i,j,k) = F_ip(i,j,k) + Cstvr_fistr_8(k) + F_xfis(i,j)
         end do
         end do
         end do
*
* updating phi' at the top 
*
         do j=1+pil_s, l_nj-pil_n
         do i=1+pil_w, l_ni-pil_e
            F_ip(i,j,1) = F_it(i,j,1) - Cstvr_fistr_8(1) - F_xfis(i,j)
         end do
         end do
*
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
            do k = 1, Vspng_nk
            do j=1, l_nj
            do i=1, l_ni
               work(i,j,k) = F_pip(i,j,k)
            end do
            end do
            end do
         endif 
*
*     The hydrostatic pressure: pi'  
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_lam ( F_pip, LDIST_DIM, l_ni, l_nj)
*
*****************************
*  3. Nonyhydrostatic model * 
*****************************
*
         if ( .not. Schm_hydro_L ) then
*
*     Vertical wind (physical) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_lam ( F_w, LDIST_DIM, l_ni, l_nj)
*
         if ( Schm_difqp_L ) then ! q' & related variables
*
         call vspng_lam (  F_mu, LDIST_DIM, l_ni, l_nj)
         call vspng_lam ( F_mul, LDIST_DIM, l_ni, l_nj)
*
*        Indirect diffusion of q' 
*        ~~~~~~~~~~~~~~~~~~~~~~~~
         do k=1, Vspng_nk 
         do j=1, l_nj
         do i=1, l_ni
            work(i,j,k) = ( Geomg_z_8(k) + dble(work(i,j,k)) )
     %                       *exp( dble(F_qp(i,j,k)) )
         end do
         end do
         end do
*
         call vspng_lam ( work, LDIST_DIM, l_ni, l_nj)
*
         do k=1, Vspng_nk
            do j=1+pil_s, l_nj-pil_n
            do i=1+pil_w, l_ni-pil_e
            F_qp(i,j,k) = log(             dble(work(i,j,k))
     %                       /( Geomg_z_8(k) + dble(F_pip(i,j,k)) )  )
         end do
         end do
         end do
*
         endif
         endif         
*
         if (Vspng_uvwdt_L) Vspng_nk = nkspng
*
*     __________________________________________________________________
*
      return
      end
