***s/r itf_cpl_set_coupling
*
#include "model_macros_f.h"
*
      SUBROUTINE itf_cpl_set_coupling
*
      IMPLICIT NONE
*
*author 
*     Sophie Valcke -CERFACS - March 2005
*
*revision
* v3_30 - Faucher & Chamberland   - final adjustment-debugging
*
*object
*     Initialize coupling
*
*implicits
#include "itf_cpl_cplg.cdk"
#include "ptopo.cdk"
#include "glb_ld.cdk"
#include "geomn.cdk"
#include "rstr.cdk"
C
C Local variables
C
      CHARACTER(len=6)  cl_mecname
      INTEGER ila_msk(G_ni*G_nj),il_siz, il_b, ier
      REAL rla_lon(G_ni,G_nj),rla_lat(G_ni,G_nj)

      logical isok
      logical, external :: cpl_oasis_init,itf_cpl_init_oasisfld
C
C===================================================================
C
*     Initialization for the coupling
*
      IF ( C_coupling_L) THEN
*
C         Allocation of array for coupling fields to/from physics
          if (Rstri_rstn_L) THEN
           call glbcolc (rga_msk,G_ni,G_nj,rla_msk,1,l_ni,1,l_nj,1)
          else
           allocate (rga_cpl2phy(l_ni*l_nj*ig_max_inout_dim))
           rga_cpl2phy(1:l_ni*l_nj*ig_max_inout_dim) = 0.0
          endif

          ier=0
          IF (Ptopo_myproc.eq.0) THEN

              IF (.not. lg_ocean .and. C_cpld2ocean_L) THEN
                  call itf_cpl_param_put (ier)
              endif
C
C             Mask definition
C
              ila_msk = 0
              il_siz  = G_ni*G_nj
C
              IF (.not. lg_mcpl) THEN
C                 If explicit coupling mask not present in data file, define
C                 coupling mask based on land-sea mask and MEC role 
                  IF (lg_atmos .or. (lg_ocean .and. lg_land)) THEN
C                     IF MEC is atmos, or ocean+land, the whole domain is valid
                      ila_msk(:) = 0
                  ELSE IF (lg_ocean) THEN
C                     Points with fraction of sea are valid (=0 for Oasis)
                      ila_msk(1:il_siz) = int(rga_msk(1:il_siz))
                  ELSE IF (lg_land) THEN
C                     Points with fraction of land are valid (=0 for Oasis)
                      DO il_b = 1, il_siz
                        IF (rga_msk(il_b) .gt. 0.0) THEN
                            ila_msk(il_b) = 0
                        ELSE
                            ila_msk(il_b) = 1
                        ENDIF
                      END DO
                  ENDIF
C                 Redefine rga_msk that will be sent as coupling field
                  IF (.not.Rstri_rstn_L) then
                  DO il_b = 1, il_siz
                    IF (ila_msk(il_b) .gt. 0) THEN
                        rga_msk(1:il_siz) = 0.0
                    ELSE
                        rga_msk(1:il_siz) = 1.0
                    ENDIF
                  END DO
                  endif
              ENDIF
C
              call write_fst (rga_msk, G_ni,G_nj,1,'MSK',1000.,
     $                               456,789,0,'Z','masks.std')
C
              ig_compid = 0
C
          ENDIF
*
          if (ier < 0) then
             if (C_isautonomus_L) then
                IF (Ptopo_myproc.eq.0)
     $               print *,"Trying to continue in stand alone mode"
                C_coupling_L = .false.
                C_cploasis_L = .false.
             else
                IF (Ptopo_myproc.eq.0)
     $               print *,'---- Abort in itf_cpl_set_coupling ----'
                call gem_stop ('itf_cpl_set_coupling',ier)
             endif
          endif
*
cpp on distribue le mask lu par l entree
          IF (.not.Rstri_rstn_L) call glbdist 
     $             (rga_msk,G_ni,G_nj,rla_msk,1,l_ni,1,l_nj,1,0,0)
C
          IF (C_cploasis_L) THEN
C
C             If coupled via oasis, collect the longitudes and latitudes 
C             (in all PEs); sent to coupler in cpl_oasis_init
             call glbcolc (rla_lon, G_ni, G_nj, Geomn_lonrx, 
     $                                   1, l_ni, 1, l_nj, 1)
             call glbcolc (rla_lat, G_ni, G_nj, Geomn_latrx, 
     $                                   1, l_ni, 1, l_nj, 1)
C
             ier=0
             IF (Ptopo_myproc.eq.0) THEN
C
C                 Write longitudes and latitudes to coupling output file
                  call write_fst (rla_lon, G_ni,G_nj,1,'LON',1000.,
     $                                  56,789,0,'Z','posipar.std')
                  call write_fst (rla_lat, G_ni,G_nj,1,'LAT',1000.,
     $                                  56,789,0,'Z','posipar.std')
C
C                 Define MEC name based on its role
                  IF (lg_atmos .and. .not. lg_ocean .and. .not. lg_land) THEN
                      cl_mecname = 'MECatm'
                  ELSE IF(lg_atmos .and. lg_ocean .and. .not. lg_land) THEN
                      cl_mecname = 'MECaoc'
                  ELSE IF(lg_atmos .and. lg_ocean .and. lg_land) THEN
                      cl_mecname = 'MECaol'
                  ELSE IF(.not.lg_atmos .and. lg_ocean .and. lg_land) THEN
                      cl_mecname = 'MECloc'
                  ELSE IF(.not.lg_atmos .and. .not.lg_ocean .and. lg_land) THEN
                      cl_mecname = 'MEClan'
                  ELSE IF(.not.lg_atmos .and. .not.lg_land .and. lg_ocean) THEN
                      cl_mecname = 'MECoce'
                  ENDIF
C
C                 Oasis coupling initialisation 
                  isok = cpl_oasis_init (cl_mecname, rla_lon, rla_lat,
     $                                 ila_msk, G_ni, G_nj, ig_compid)
                  if (isok) then
C                    Coupling field declaration
C                    Called with global dims because only pe 0 talks to coupler 
                     isok = itf_cpl_init_oasisfld (G_ni, G_nj)
                  endif
                  if (.not.isok) then
                     if (C_isautonomus_L) then
                        print *,"ERROR in cpl_oasis_init"
                        print *,"Trying to continue in stand alone mode"
                        C_coupling_L = .false.
                        C_cploasis_L = .false.
                     else
                        print *,'---- Abort in itf_cpl_set_coupling ----'
                        ier=-1
                     endif
                  endif
               ENDIF
               call gem_stop ('itf_cpl_set_coupling',ier)

            ENDIF

C     Broadcast value of coupling logicals 
C     since they may have been updated above or in itf_cpl_init_oasisfld
      call RPN_COMM_bcast(C_coupling_L, 1,"MPI_LOGICAL", 0, "grid", ier)
      call RPN_COMM_bcast(C_cploasis_L, 1,"MPI_LOGICAL", 0, "grid", ier)
C
      ENDIF
*
*     ---------------------------------------------------------------
*
      return
      END SUBROUTINE itf_cpl_set_coupling
