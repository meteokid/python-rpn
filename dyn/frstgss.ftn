!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r frstgss - Copy data from time level t1 that will be used as a
*                first guess at time level t0
*
#include "model_macros_f.h"
*
      subroutine frstgss ()
*
      implicit none
*
*author 
*     Michel Roch - rpn - nov 1993
*
*revision
* v2_00 - Desgagne M.       - initial MPI version
* v2_30 - Edouard  S.       - replace Schm_elast_L by Schm_cptop_L
*                             end remove pi' at the top 
* v3_21 - Tanguay M.        - Revision Openmp
*
*object
*    See above id
*	
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cori.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer pnerr, pnlkey1(10),pnlod
      integer i, j, k
**
*     ---------------------------------------------------------------
*
      if (Lun_debug_L) write (Lun_out,1000)
*
      pnlkey1(1) = VMM_KEY(qt0)
      pnlkey1(2) = VMM_KEY(tpt0)
      pnlkey1(3) = VMM_KEY(pipt0)
      pnlkey1(4) = VMM_KEY(tplt0)
      pnlkey1(5) = VMM_KEY(st0)
      pnlkey1(6) = VMM_KEY(qt1)
      pnlkey1(7) = VMM_KEY(tpt1)
      pnlkey1(8) = VMM_KEY(pipt1)
      pnlkey1(9) = VMM_KEY(tplt1)
      pnlkey1(10) = VMM_KEY(st1)
*
      pnlod=10
      pnerr = vmmlod(pnlkey1,pnlod)

      pnerr = VMM_GET_VAR(qt0)
      pnerr = VMM_GET_VAR(tpt0)
      pnerr = VMM_GET_VAR(pipt0)
      pnerr = VMM_GET_VAR(tplt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(qt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(st1)

!$omp parallel 
*
!$omp do 
      do k=1,l_nk
      do j= 1, l_nj
      do i= 1, l_ni
         qt0(i,j,k)  =  qt1(i,j,k)
         tpt0(i,j,k) =  tpt1(i,j,k)
         pipt0(i,j,k) =  pipt1(i,j,k)
         tplt0(i,j,k) =  tplt1(i,j,k)
      end do
      end do
      end do
!$omp end do

!$omp do
      do j= 1 , l_nj
      do i= 1 , l_ni
         st0(i,j)   =  st1(i,j)
      end do
      end do
!$omp end do
*
!$omp end parallel 

      pnerr = vmmuld(-1,0)
*
      pnlod=0
      if ( Cori_cornl_L ) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0)
         pnlkey1(pnlod+2) = VMM_KEY(vt0)
         pnlkey1(pnlod+3) = VMM_KEY(ut1)
         pnlkey1(pnlod+4) = VMM_KEY(vt1)
         pnlod=pnlod+4
      endif
      if ( .not. Schm_cptop_L .or. .not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(fipt0)
         pnlkey1(pnlod+2) = VMM_KEY(fipt1)
         pnlod = pnlod+2
      endif
      if ( .not. Schm_hydro_L ) then
         pnlkey1(pnlod+1) = VMM_KEY(mut0)
         pnlkey1(pnlod+2) = VMM_KEY(mut1)
         pnlod = pnlod+2
      endif
      pnerr = vmmlod(pnlkey1,pnlod)

      if ( Cori_cornl_L ) then
         pnerr = VMM_GET_VAR(ut0)
         pnerr = VMM_GET_VAR(ut1)
         pnerr = VMM_GET_VAR(vt0)
         pnerr = VMM_GET_VAR(vt1)
!$omp parallel do 
         do k=1,l_nk
         do j= 1 , l_nj
         do i= 1 , l_ni
            ut0(i,j,k)  =  ut1(i,j,k)
            vt0(i,j,k)  =  vt1(i,j,k)
         end do
         end do
         end do
!$omp end parallel do 
      endif
*
      if ( .not. Schm_cptop_L .or. .not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(fipt0)
         pnerr = VMM_GET_VAR(fipt1)
!$omp parallel do 
         do k=1,l_nk
         do j= 1 , l_nj
         do i= 1 , l_ni
            fipt0(i,j,k) = fipt1(i,j,k)
         end do
         end do
         end do
!$omp end parallel do 
      endif
*
      if ( .not. Schm_hydro_L ) then
         pnerr = VMM_GET_VAR(mut0)
         pnerr = VMM_GET_VAR(mut1)
!$omp parallel do 
         do k=1,l_nk
         do j= 1 , l_nj
         do i= 1 , l_ni
            mut0(i,j,k) =  mut1(i,j,k)
         end do
         end do
         end do
!$omp end parallel do 
      endif
*
c     if (Acid_test_L) tplt0
c    $call glbstat (tpt0,'tpt0',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
c    $                                          8+acid_j0,G_nj-8-acid_jn,1,G_nk)
      pnerr = vmmuld(-1,0)

1000  format(3X,'FIRST GUESS: (S/R FRSTGSS)')

      return
      end


