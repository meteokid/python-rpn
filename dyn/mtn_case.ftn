! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r mtn_case - generates initial condition for mountain wave
*                 experiment (Schar et al. 2002 or Pinty et al. 1995)
*
#include "model_macros_f.h"
*
      subroutine mtn_case
      implicit none
*
*author 
*     Sylvie Gravel  - rpn - Aug 2003
*
*revision
* v3_20 - Gravel S.        - initial version 
* v3_20 - Plante A.        - Modifs ...
*
*object
*	
*arguments
*	none
*
*interfaces
c     INTERFACE
c        subroutine acqui
CCC#include "acq_int.cdk"
c         end subroutine acqui
c      END INTERFACE
*
*implicits
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
#include "cstv.cdk" 
#include "geomg.cdk"
#include "grd.cdk"
#include "out3.cdk"
#include "tr3d.cdk"
#include "vt1.cdk"
#include "ind.cdk"
ccc#include "acq.cdk"
#include "theo.cdk"
#include "vtopo.cdk"
#include "mtn.cdk"
#include "zblen.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "schm.cdk"
*
      integer i,j,k,l,i00,err
      real a00, a01, a02, xcntr, zdi, zfac, zfac1, capc1
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
      integer key0, key(Tr3d_ntr), longueur
      real, allocatable, dimension(:,:)   :: psurf
      real tr,hauteur, tempo
      real*8 pdsc1
      pointer (patr, tr(LDIST_SHAPE,*))
**
*     ---------------------------------------------------------------
*
*
*
      call flush(6)
*
      allocate(psurf (LDIST_SHAPE))

*---------------------------------------------------------------------
*     Initialize orography
*---------------------------------------------------------------------

      xcntr = int(float(Grd_ni-1)*0.5)+1
      do j=1,l_nj
      do i=1,l_ni
         i00 = i + l_i0 - 1
         zdi  = float(i00)-xcntr
         zfac = (zdi/mtn_hwx)**2
         if ( Theo_case_S .eq. 'MTN_SCHAR'
     $       .or.  Theo_case_S .eq. 'MTN_SCHAR2' ) then
            zfac1= Dcst_pi_8 * zdi / mtn_hwx1
            Ind_topo(i,j) = mtn_hght* exp(-zfac) * cos(zfac1)**2
         else
            Ind_topo(i,j) = mtn_hght/(zfac + 1.)
         endif
      enddo
      enddo

*---------------------------------------------------------------------
*     If time-dependant topography
*---------------------------------------------------------------------
      if(Vtopo_L) then
         do j=1,l_nj
         do i=1,l_ni
            Ind_dtopo(i,j) = Dcst_grav_8*Ind_topo(i,j)
            Ind_topo(i,j)  = 0.
         enddo
         enddo
       endif

      if ( Theo_case_S .eq. 'MTN_SCHAR' 
     $     .or. Theo_case_S .eq. 'MTN_SCHAR2'
     $     .or. Theo_case_S .eq. 'MTN_PINTYNL') then

*---------------------------------------------------------------------
*     Generate surface pressure field and its logarithm (s)
*     Set wind imags (u,v)
*     Transform orography from geometric to geopotential height
*     Set non-hydrostatic perturbation pressure (q)
*---------------------------------------------------------------------
*
      a00 = mtn_nstar**2/Dcst_grav_8
      a01 = (Dcst_cpd_8*mtn_tzero*a00)/Dcst_grav_8
      capc1 = Dcst_grav_8**2/(mtn_nstar**2*Dcst_cpd_8*mtn_tzero)
*
      do j=1,l_nj
      pdsc1 = geomg_cy_8(j) / Dcst_rayt_8
      do i=1,l_ni
         psurf(i,j)=Cstv_pref_8*(1.-capc1
     $         +capc1*exp(-a00*Ind_topo(i,j)))**(1./Dcst_cappa_8)
         Ind_s   (i,j)   = log(psurf(i,j)/Cstv_pref_8)
         Ind_u   (i,j,1) = mtn_flo * pdsc1
      enddo
      enddo
*
      do k=1,g_nk+1
      do j=1,l_nj
      do i=1,l_ni
         Ind_u   (i,j,k) = Ind_u (i,j,1)
         Ind_v   (i,j,k) = 0.
      enddo
      enddo
      enddo
*
*---------------------------------------------------------------------
*     Initialize temperature field
*---------------------------------------------------------------------
*
       do k=1,g_nk+1
         do j=1,l_nj
            do i=1,l_ni
               tempo = exp(Ver_a_8%t(k)+Ver_b_8%t(k)*Ind_s(i,j))
               a02 = (tempo/Cstv_pref_8)**Dcst_cappa_8
               hauteur=-log((capc1-1.+a02)/capc1)/a00
               Ind_t(i,j,k)=mtn_tzero*((1.-capc1)*exp(a00*hauteur)+capc1)
            enddo
         enddo
      enddo        

      else   ! MTN_PINTY or MTN_PINTY2
*-----------------------------------------------------------------------
*     Generate pressure from Cstv_ptop_8, Cstv_pref_8, and coordinate
*     Generate corresponding geopotential for isothermal atmosphere
*     Set wind images and temperature
*-----------------------------------------------------------------------

      do k=1,g_nk+1
      do j=1,l_nj
      do i=1,l_ni
         Ind_t (i,j,k) = Cstv_tstr_8
         Ind_w (i,j,k) = 0.0
      enddo
      enddo
      enddo

      do k=1,g_nk
      do j=1,l_nj
      pdsc1 = geomg_cy_8(j) / Dcst_rayt_8
      do i=1,l_ni
         Ind_u (i,j,k) = mtn_flo * pdsc1
         Ind_v (i,j,k) = 0.
      enddo
      enddo
      enddo

      do j=1,l_nj
      do i=1,l_ni
         psurf(i,j) = Cstv_pref_8 * 
     $                exp( -Dcst_grav_8 * Ind_topo(i,j)/
     $                     (Dcst_cpd_8 * Cstv_tstr_8) )	
         Ind_s(i,j) = log(psurf(i,j)/Cstv_pref_8)
      enddo
      enddo         

      endif
*
*-----------------------------------------------------------------------
*     Transform orography from geometric to geopotential height
*-----------------------------------------------------------------------
      do j=1,l_nj
      do i=1,l_ni
         Ind_topo(i,j)   = Dcst_grav_8 * Ind_topo(i,j)
      end do
      end do
*
*-----------------------------------------------------------------------
*     if non-hydrostatic, initialize pres. perturb. and vert. motion
*-----------------------------------------------------------------------
*
      if(.not.Schm_hydro_L) then
         do k=0,g_nk+1
         do j=1,l_nj
         do i=1,l_ni
            Ind_q(i,j,k) = 0.
         enddo
         enddo
         enddo
      endif
*
      call rpn_comm_xch_halo ( Ind_topo, LDIST_DIM,l_ni,l_nj,1,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

*-----------------------------------------------------------------------
*     create tracers (humidity and MTN)
*-----------------------------------------------------------------------
      key0 = VMM_KEY (trt1)
      do k=1,Tr3d_ntr
         key(k) = key0 + k
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key,Tr3d_ntr)
         do k=1,Tr3d_ntr
            err = vmmget(key(k),patr,tr)
            if (Tr3d_name_S(k).eq.'HU') then
               do l=1,G_nk+1
               do j=1,l_nj
               do i=1,l_ni
                  tr(i,j,l) = 0.
               end do
               end do
               end do
            elseif (Tr3d_name_S(k).eq.'MTN') then
               do l=1,G_nk+1
               do j=1,l_nj
               do i=1,l_ni
                  tr(i,j,l) = Ind_t(i,j,l)
               end do
               end do
               end do
            endif
         end do
         err = vmmuld(key,Tr3d_ntr)
      endif

 9000 format(/,'CREATING INPUT DATA FOR MOUNTAIN WAVE THEORETICAL CASE'
     +      /,'======================================================')
*
*     -----------------------------------------------------------------
*
      return
      end
