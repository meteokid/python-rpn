! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r adw_main_3_int - Interpolation of rhs
*
#include "model_macros_f.h"
*
      subroutine adw_main_3_int ( F_u, F_v, F_w )
*
      implicit none
      real F_u(*), F_v(*), F_w(*)
*
*author
*     alain patoine
*
*revision
* v2_31 - Desgagne & Tanguay  - removed stkmemw, introduce tracers
* v2_31                       - tracers not monotone if V4dg_conf.ne.0
* v2_31 - R.Moffet            - do precalc (zz1) for ZZ in blomega
* v3_00 - Desgagne & Lee      - Lam configuration
* v3_02 - Tanguay             - Restore tracers monotone if V4dg_conf.ne.0 
* v3_02 - Lee V.              - revert adw_exch_1 for GLB only, 
* v3_02                         added adw_ckbd_lam,adw_cfl_lam for LAM only
* v3_03 - Tanguay M.          - stop if adw_exch_1 is activated when 4D-Var
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Gravel S.           - introduce key Adw_mono_L 
* v3_20 - Gravel & Valin & Tanguay - Lagrange 3D
* v3_20 - Tanguay M.          - Improve alarm when points outside advection grid
* v3_20 - Dugas B.            - correct calculation for LAM when Glb_pil gt 7
* v3_21 - Desgagne M.         - if  Lagrange 3D, call adw_main_3_intlag
* v3_30 - McTaggart-Cowan R.  - replace lag3d_L by Adw_interp_type_S
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*        |                                                       |     |
* NAME   | DESCRIPTION                                           | I/O |
*--------|-------------------------------------------------------|-----|
*        |                                                       |     |
*        |                                                       |     |
* F_u,F_v| 3 components of upstream positions at t1 at input     |  iw |
* F_w    | used as work field afterward                          |     |
*________|_______________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "ptopo.cdk"
#include "geomg.cdk"
#include "orh.cdk"
#include "lctl.cdk"
#include "step.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "offc.cdk"
#include "cstv.cdk"
#include "rhsc.cdk"
#include "v4dg.cdk"
#include "type.cdk"
#include "adw.cdk"
#include "tr3d.cdk"
#include "vt1.cdk"
#include "vt0.cdk"
#include "vtx.cdk"
#include "ver.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld,longueur
      external vmmlod, vmmget, vmmuld
************************************************************************
      integer i0,in,j0,jn
      integer pnerr, pnlkey1(30), key1(Tr3d_ntr), key0(Tr3d_ntr), 
     $        key1_, key0_, pnlod, err, dim
*
      integer outside,sum_outside,ier
*
      integer n, nij, nijkt, nijkm, nijkad, cnt, unf
      integer i,j,k, n1,n2,np 
      integer DIST_DIM
*
      real*8 aaa
      real tr,tr0,buf(l_ni,G_nk+1), half
      parameter( half = 0.5 )
      pointer (patr, tr(LDIST_SHAPE,*)),(patr0, tr0(LDIST_SHAPE,*))
      real, allocatable, dimension(:,:,:,:) :: tr2
      real, allocatable, dimension(:) :: pos_x, pos_y, pos_z
*
      if ( Adw_interp_type_S(1:5).eq.'LAG3D' ) then
         call adw_main_3_intlag ( F_u, F_v, F_w )
         return
      endif
      call gem_stop('adw_main_3_int : review merge 3.2.5 3.3.0',-1)


*
      if (Lun_debug_L) write (Lun_out,1000)
      nij    = l_ni   *l_nj
      nijkt  = l_ni   *l_nj   *(l_nk+1)
      nijkm  = l_ni   *l_nj   * l_nk
      nijkad = Adw_nit*Adw_njt*(l_nk+1)
      call hpalloc(Adw_capx1_   ,nijkt,      err,1)
      call hpalloc(Adw_capy1_   ,nijkt,      err,1)
      call hpalloc(Adw_capz1_   ,nijkt,      err,1)
      call hpalloc(Adw_n1_      ,nijkt,      err,1)
      call hpalloc(Adw_xdd1_    ,nijkt,      err,1)
      call hpalloc(Adw_xgg1_    ,nijkt,      err,1)
      call hpalloc(Adw_ydd1_    ,nijkt,      err,1)
      call hpalloc(Adw_ygg1_    ,nijkt,      err,1)
      call hpalloc(Adw_cz1_     ,nijkt,      err,1)
      call hpalloc(Adw_c1_      ,nijkt,      err,1)
      call hpalloc(Adw_wrkb_    ,nijkt,      err,1)
      call hpalloc(Adw_wrkc_    ,nijkt,      err,1)
*
      allocate ( pos_x(nijkad) )
      allocate ( pos_y(nijkad) )
      allocate ( pos_z(nijkad) )
*
************************************************************************
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west)  i0=4       + (Glb_pil_w - 7)
          if (l_east)  in=l_niu-2 - (Glb_pil_e - 7)
          if (l_south) j0=4       + (Glb_pil_s - 7)
          if (l_north) jn=l_njv-2 - (Glb_pil_n - 7)
      endif

***********************************************************************
* Prepare for advection on momentum levels
***********************************************************************
!
!$omp parallel do private(n)
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
         n = (k-1)*nij + ((j-1)*l_ni) + i
         pos_x(n) =  F_u(n)
         pos_y(n) =  F_v(n)
         pos_z(n) =  F_w(n)
      enddo
      enddo
      enddo
!$omp end parallel do

      if (G_lam) then
          if ( ((.not.Orh_crank_L).or.(Orh_icn.eq.Schm_itcn)) .and.
     $         (mod(Lctl_step,Step_gstat).eq.0) )
     $         call adw_cfl_lam ( pos_x, pos_y, pos_z, 
     $                            i0, in, j0, jn, l_nk,'m' )
          call adw_ckbd_lam( pos_x, pos_y, pos_z, i0, in, j0, jn, l_nk )
      endif
*
      if (.not.G_lam) then
      call adw_exch_1 ( Adw_n1, Adw_xgg1, Adw_xdd1, Adw_c1,
     $                  pos_x, pos_y, pos_z, l_nk )
*
          if ( V4dg_conf.ne.0.0 ) then
*
               outside = 0
*
               if ( Adw_fro_a .gt. 0 ) outside = 1
*
               sum_outside = 0
               call rpn_comm_Allreduce(outside,sum_outside,1,"MPI_INTEGER",
     $                                 "MPI_SUM","grid",ier)
*
               if(sum_outside.ne.0) call gem_stop ('ADW_MAIN_3_INT: TLM-ADJ NOT done: INCREASE HALO',-1)
*
          endif
*
      dim = max(1,Adw_fro_a)
      call hpalloc(Adw_capx2_   ,dim,      err,1)
      call hpalloc(Adw_capy2_   ,dim,      err,1)
      call hpalloc(Adw_capz2_   ,dim,      err,1)
      call hpalloc(Adw_n2_      ,dim,      err,1)
      call hpalloc(Adw_xdd2_    ,dim,      err,1)
      call hpalloc(Adw_xgg2_    ,dim,      err,1)
      call hpalloc(Adw_ydd2_    ,dim,      err,1)
      call hpalloc(Adw_ygg2_    ,dim,      err,1)
      call hpalloc(Adw_cz2_     ,dim,      err,1)
      call hpalloc(Adw_wrka_    ,dim,      err,1)
*
      call adw_exch_2 ( Adw_capx2, Adw_capy2, Adw_capz2,
     %                  Adw_n1, Adw_xgg1, Adw_xdd1,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a,
     %                  Adw_for_n, Adw_for_s, Adw_for_a, 3 )
*
      endif
*
      call adw_setint ( Adw_n1,Adw_capx1,Adw_xgg1,Adw_xdd1,Adw_capy1,Adw_ygg1,
     %                  Adw_ydd1,Adw_capz1,Adw_cz1,pos_x,pos_y,pos_z,
     %                  .true., .true., .false., nijkm,i0,in,j0,jn,l_nk,'m')
*
      if ( Adw_fro_a .gt. 0 .and. .not. G_lam) then
*
         if ( Adw_ckbd_L ) call adw_ckbd ( Adw_capy2 )
*
         call adw_setint(Adw_n2,Adw_capx2,Adw_xgg2,Adw_xdd2,Adw_capy2,Adw_ygg2,
     %                 Adw_ydd2,Adw_capz2,Adw_cz2,Adw_capx2,Adw_capy2,Adw_capz2,
     %                 .true., .true., .false., Adw_fro_a,1,Adw_fro_a,1,1,1,'m')
*
      endif
*
***********************************************************************
* Perform interpolation
***********************************************************************
      pnlkey1(1) = VMM_KEY(ruw1)
      pnlkey1(2) = VMM_KEY(rvw1)
      pnlkey1(3) = VMM_KEY(ruw2)
      pnlkey1(4) = VMM_KEY(rvw2)
      pnlkey1(5) = VMM_KEY(rhsc)
      pnlkey1(6) = VMM_KEY(fiptx)
      pnlkey1(7) = VMM_KEY(zz1)
      pnlkey1(8) = VMM_KEY(piup)
      pnlkey1(9) = VMM_KEY(st1)
      pnlkey1(10)= VMM_KEY(orhsc)
      pnlod = 10
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr =  VMM_GET_VAR(ruw1)
      pnerr =  VMM_GET_VAR(rvw1)
      pnerr =  VMM_GET_VAR(ruw2)
      pnerr =  VMM_GET_VAR(rvw2)
      pnerr =  VMM_GET_VAR(rhsc)
      pnerr =  VMM_GET_VAR(fiptx)
      pnerr =  VMM_GET_VAR(zz1)
      pnerr =  VMM_GET_VAR(piup)
      pnerr =  VMM_GET_VAR(st1)
      pnerr =  VMM_GET_VAR(orhsc)
*
c     if (Acid_test_L)then
c        if (Lun_debug_L) write (Lun_out,*)'Before adw_interp'
c     call glbstat (ruw1,'RUW1',LDIST_DIM,G_nk,4+acid_i0,G_ni-3-acid_in,
c    %                                         4+acid_j0,G_nj-3-acid_jn,1,G_nk)
c     endif rvw1,rc,rt
*
      call adw_interp (ruw2, ruw1, pos_x, pos_y,
     %                .true., .false., LDIST_DIM, l_nk,i0,in,j0,jn,'m')
*
      call adw_interp (rvw2, rvw1, pos_x, pos_y,
     %                .true., .false., LDIST_DIM, l_nk,i0,in,j0,jn,'m')
c     if (Acid_test_L)then
c        if (Lun_debug_L) write (Lun_out,*)'After adw_interp'
c     call glbstat (ruw2,'RUW2',LDIST_DIM,G_nk,6+acid_i0,G_ni-5-acid_in,
c    %                                         5+acid_j0,G_nj-4-acid_jn,1,G_nk)
c     call glbstat (rvw2,'RVW2',LDIST_DIM,G_nk,5+acid_i0,G_ni-4-acid_in,
c    %                                         6+acid_j0,G_nj-5-acid_jn,1,G_nk)
c     endif
      call adw_interp (rhsc , orhsc , pos_x, pos_y,
     %                .false.,.false., LDIST_DIM, l_nk,i0,in,j0,jn,'m')
*
      pnerr = vmmuld(pnlkey1,pnlod)

      if (.not.G_lam) then
      call hpdeallc(Adw_capx2_   ,err)
      call hpdeallc(Adw_capy2_   ,err)
      call hpdeallc(Adw_capz2_   ,err)
      call hpdeallc(Adw_n2_      ,err)
      call hpdeallc(Adw_xdd2_    ,err)
      call hpdeallc(Adw_xgg2_    ,err)
      call hpdeallc(Adw_ydd2_    ,err)
      call hpdeallc(Adw_ygg2_    ,err)
      call hpdeallc(Adw_cz2_     ,err)
      call hpdeallc(Adw_wrka_    ,err)
      endif
*
***********************************************************************
* Prepare for advection on thermodynamic levels
***********************************************************************
!     from upstream position for momentum levels to upstream
!     position for thermodynamic levels
!
      call adw_meanpos (pos_x, pos_y, pos_z, F_u, F_v, F_w, i0, in,
     %                  j0, jn)

      if (G_lam) then
          if ( ((.not.Orh_crank_L).or.(Orh_icn.eq.Schm_itcn)) .and.
     $         (mod(Lctl_step,Step_gstat).eq.0) )
     $         call adw_cfl_lam ( pos_x, pos_y, pos_z, 
     $                            i0, in, j0, jn, l_nk+1, 't')
          call adw_ckbd_lam( pos_x, pos_y, pos_z, i0, in, j0, jn, l_nk+1 )
      endif
*
      if (.not.G_lam) then
      call adw_exch_1 ( Adw_n1, Adw_xgg1, Adw_xdd1, Adw_c1,
     $                  pos_x, pos_y, pos_z, l_nk+1 )
*
          if ( V4dg_conf.ne.0.0 ) then
*
               outside = 0
*
               if ( Adw_fro_a .gt. 0 ) outside = 1
*
               sum_outside = 0
               call rpn_comm_Allreduce(outside,sum_outside,1,"MPI_INTEGER",
     $                                 "MPI_SUM","grid",ier)
*
               if(sum_outside.ne.0) call gem_stop ('ADW_MAIN_3_INT: TLM-ADJ NOT done: INCREASE HALO',-1)
*
          endif
*
      dim = max(1,Adw_fro_a)
      call hpalloc(Adw_capx2_   ,dim,      err,1)
      call hpalloc(Adw_capy2_   ,dim,      err,1)
      call hpalloc(Adw_capz2_   ,dim,      err,1)
      call hpalloc(Adw_n2_      ,dim,      err,1)
      call hpalloc(Adw_xdd2_    ,dim,      err,1)
      call hpalloc(Adw_xgg2_    ,dim,      err,1)
      call hpalloc(Adw_ydd2_    ,dim,      err,1)
      call hpalloc(Adw_ygg2_    ,dim,      err,1)
      call hpalloc(Adw_cz2_     ,dim,      err,1)
      call hpalloc(Adw_wrka_    ,dim,      err,1)
*
      call adw_exch_2 ( Adw_capx2, Adw_capy2, Adw_capz2,
     %                  Adw_n1, Adw_xgg1, Adw_xdd1,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a,
     %                  Adw_for_n, Adw_for_s, Adw_for_a, 3 )
*
      endif
*

      call adw_setint ( Adw_n1,Adw_capx1,Adw_xgg1,Adw_xdd1,Adw_capy1,Adw_ygg1,
     %                  Adw_ydd1,Adw_capz1,Adw_cz1,pos_x,pos_y,pos_z,
     %                  .true., .true., .false., nijkt,i0,in,j0,jn,l_nk+1,'t')
*
      if ( Adw_fro_a .gt. 0 .and. .not. G_lam) then
*
         if ( Adw_ckbd_L ) call adw_ckbd ( Adw_capy2 )
*
         call adw_setint(Adw_n2,Adw_capx2,Adw_xgg2,Adw_xdd2,Adw_capy2,Adw_ygg2,
     %                 Adw_ydd2,Adw_capz2,Adw_cz2,Adw_capx2,Adw_capy2,Adw_capz2,
     %                 .true., .true., .false., Adw_fro_a,1,Adw_fro_a,1,1,1,'t')
*
      endif
*
***********************************************************************
* Perform interpolation for equations on thermodynamic levels
***********************************************************************
      pnlkey1(1) = VMM_KEY(rhst)
      pnlkey1(2) = VMM_KEY(rhsf)
      pnlkey1(3) = VMM_KEY(orhst)
      pnlkey1(4) = VMM_KEY(orhsf)
      pnlod = 4
*
      if (.not. Schm_hydro_L) then
         pnlkey1(5) = VMM_KEY(rhsw)
         pnlkey1(6) = VMM_KEY(orhsw)
         pnlod = 6 
      endif
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr =  VMM_GET_VAR(rhst)
      pnerr = VMM_GET_VAR(rhsf)
      pnerr =  VMM_GET_VAR(orhst)
      pnerr = VMM_GET_VAR(orhsf)
*
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(rhsw)
         pnerr = VMM_GET_VAR(orhsw)
      endif
*
      call adw_interp (rhst, orhst, pos_x, pos_y, 
     %                .false., .false., LDIST_DIM, l_nk+1,i0,in,j0,jn,'t')

*
      call adw_interp (rhsf, orhsf, pos_x, pos_y, 
     %                .false., .false., LDIST_DIM, l_nk+1,i0,in,j0,jn,'t')
      if (.not. Schm_hydro_L) then
         call adw_interp (rhsw, orhsw, pos_x, pos_y, 
     %                .false., .false., LDIST_DIM, l_nk+1,i0,in,j0,jn,'t')
       else
         if(Orh_icn.eq.Schm_itcn)then
*
!$omp parallel do
            do k=1,l_nk+1
               do j=j0,jn
               do i=i0,in
                  zz1(i,j,k)=0.5d0*(fiptx(i,j,k)+fiptx(i,j,k-1))
     $                 +Ver_fistr_8%t(k)
                  piup(i,j,k)=exp(Ver_z_8%t(k) + Ver_b_8%t(k)*st1(i,j))
               enddo
               enddo
            enddo
!$omp end parallel do
          
            call adw_interp (zz1, zz1, pos_x, pos_y, 
     %           .false., .false., LDIST_DIM, l_nk+1,i0,in,j0,jn,'t')
            call adw_interp (piup,piup, pos_x, pos_y, 
     %           .false., .false., LDIST_DIM, l_nk+1,i0,in,j0,jn,'t')

       endif

      endif
*
      if ( Orh_icn .eq. Schm_itcn ) then
*
* tr3d advection
*
      aaa = - 1.d0 / Cstv_tau_8 
*
      key1_ = VMM_KEY (trt1)
      key0_ = VMM_KEY (trt0)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
         key0(n) = key0_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)  
         err = vmmlod(key0,Tr3d_ntr)  
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),patr,tr)
            err = vmmget(key0(n),patr0,tr0)
            do k=1,l_nk+1
            do j=1,l_nj
            do i=1,l_ni
               tr0(i,j,k) = - aaa*tr(i,j,k)
            end do
            end do
            end do
            call adw_interp ( tr0, tr0, pos_x, pos_y,
     %               .false. , Adw_mono_L, LDIST_DIM, l_nk+1,i0,in,j0,jn,'t')
            do k=1,l_nk+1
            do j=1,l_nj
            do i=1,l_ni
               tr0(i,j,k) = Cstv_tau_8*tr0(i,j,k)
            end do
            end do
            end do
         end do
         err = vmmuld(key1,Tr3d_ntr)
         err = vmmuld(key0,Tr3d_ntr)
      endif
*
*
      endif

***********************************************************************
* Deallocate
***********************************************************************
      call hpdeallc(Adw_capx1_   ,err,1)
      call hpdeallc(Adw_capy1_   ,err,1)
      call hpdeallc(Adw_capz1_   ,err,1)
      call hpdeallc(Adw_n1_      ,err,1)
      call hpdeallc(Adw_xdd1_    ,err,1)
      call hpdeallc(Adw_xgg1_    ,err,1)
      call hpdeallc(Adw_ydd1_    ,err,1)
      call hpdeallc(Adw_ygg1_    ,err,1)
      call hpdeallc(Adw_cz1_     ,err,1)
      call hpdeallc(Adw_c1_      ,err,1)
      call hpdeallc(Adw_wrkb_    ,err,1)
      call hpdeallc(Adw_wrkc_    ,err,1)
      if (.not.G_lam) then
      call hpdeallc(Adw_capx2_   ,err,1)
      call hpdeallc(Adw_capy2_   ,err,1)
      call hpdeallc(Adw_capz2_   ,err,1)
      call hpdeallc(Adw_n2_      ,err,1)
      call hpdeallc(Adw_xdd2_    ,err,1)
      call hpdeallc(Adw_xgg2_    ,err,1)
      call hpdeallc(Adw_ydd2_    ,err,1)
      call hpdeallc(Adw_ygg2_    ,err,1)
      call hpdeallc(Adw_cz2_     ,err,1)
      call hpdeallc(Adw_wrka_    ,err,1)
      endif
*
      deallocate (pos_x,pos_y,pos_z)
*
      pnerr = vmmuld(-1,0)
*
 1000  format(3X,'ADVECT THE RIGHT-HAND-SIDES: (S/R ADW_MAIN_3_INT)')
*
      return
      end
