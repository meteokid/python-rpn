***s/r adw_exch_3 - fetch back interpolated values after being 
*                   obtained from neighbor processors for 1 or 2 fields
*
#include "model_macros_f.h"
*
      subroutine adw_exch_3 ( F_1_out, F_2_out,
     %                        F_1_in,  F_2_in,  F_c_in, F_n_treat )
*
#include "impnone.cdk"
*
      integer F_n_treat, F_c_in (*)
*
      real F_1_out (*), F_2_out (*),
     %     F_1_in  (*), F_2_in  (*)
*
*author
*     alain patoine
*
*revision
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_1_out      | \ interpolated fields for which some values     |  io |
* F_2_out      | / obtained from neighbors have to be fetched    |  io |
*              |   back in the appropriate positions             |     |
*              |                                                 |     |
* F_1_in       | \ interpolated values obtained from neighbors   |  i  |
* F_2_in       | /                                               |  i  |
*              |                                                 |     |
* F_c_in       | 3D coordinates of points for which upstream     |  i  |
*              | positions were outside advection source grid and|     |
*              | interpolated values were obtained from neighbors|  i  |
*              |                                                 |     |
* F_n_treat    | number of vectors to treat                      |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "adw.cdk"
***********************************************************************
      integer n
***********************************************************************
      if ( F_n_treat .eq. 1 ) then
*
         do n = 1, Adw_for_a
         F_1_out(F_c_in(n)) = F_1_in(n)
         enddo
*
      elseif ( F_n_treat .eq. 2 ) then
*
         do n = 1, Adw_for_a
         F_1_out(F_c_in(n)) = F_1_in(n)
         F_2_out(F_c_in(n)) = F_2_in(n)
         enddo
      endif
*
      return
      end
