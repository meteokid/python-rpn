!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r nav_3df
!
#include "model_macros_f.h"
!
      integer function nav_3df (unf,ext,mf)
      implicit none
!
      integer unf
      real ext
      real*8 mf
!
!author 
!     Michel Desgagne   - Summer 2006
!
!revision
! v3_30 - Desgagne M.     - initial version
!
!
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "grd.cdk"
#include "ptopo.cdk"
#include "ifd.cdk"
!
      logical needitx,needity,wb,eb,sb,nb
      integer i,j,nia,nja,i0,j0,npx,npy
      real xpos_debut,ypos_debut,xpos_fin,ypos_fin
      real xda,xfa,yda,yfa
      real*8 xi,xf,yi,yf,xri,xrf,yri,yrf,deg2rad_8,resax,resay
!-----------------------------------------------------------------------
!
! Considering data coverage of individual input files, determine
! which files are needed for local target data coverage of Ptopo_myproc 
! and verify that input data coverage is sufficient.
!
      ifd_nf     =  1
      ifd_niad   =  200000 
      ifd_njad   =  200000
      ifd_niaf   = -200000  
      ifd_njaf   = -200000
      ifd_needit = .false.
      wb = .false.
      eb = .false.
      sb = .false.
      nb = .false.
!
! Determine input data resolution resax, resay
! (Best if this comes directly from the driving model)
!
      deg2rad_8  = Dcst_pi_8/180.d0
      npx        =      0
      npy        =      0
      xpos_debut =  1.e20
      ypos_debut =  1.e20
      xpos_fin   = -1.e20
      ypos_fin   = -1.e20
 10   read (unf,304,end=20) i0, j0, xda, xfa, yda, yfa, nia, nja
      npx = max (npx, i0 + nia - 1)
      npy = max (npy, j0 + nja - 1)
      xpos_debut = min(xpos_debut,xda)
      ypos_debut = min(ypos_debut,yda)
      xpos_fin   = max(xpos_fin  ,xfa)
      ypos_fin   = max(ypos_fin  ,yfa)
      goto 10

 20   resax = 1.01*Grd_dx*deg2rad_8 + (xpos_fin-xpos_debut)/npx * 2.
      resay = 1.01*Grd_dy*deg2rad_8 + (ypos_fin-ypos_debut)/npy * 2.
!
! Limits of data coverage that must be satisfied for local grid
!
      xi  = G_xg_8(l_i0)            - resax
      yi  = G_yg_8(l_j0)            - resay
      xf  = G_xg_8(l_i0 + l_ni - 1) + resax
      yf  = G_yg_8(l_j0 + l_nj - 1) + resay

      resax = Grd_dx*deg2rad_8/1000.
      resay = Grd_dy*deg2rad_8/1000.
      xri   = G_xg_8(l_i0) + resax
      yri   = G_yg_8(l_j0) + resay
      xrf   = G_xg_8(l_i0 + l_ni - 1) - resax
      yrf   = G_yg_8(l_j0 + l_nj - 1) - resax

!      write (6,33) G_xg_8(l_i0),G_xg_8(l_i0 + l_ni - 1),G_yg_8(l_j0),G_yg_8(l_j0 + l_nj - 1),l_ni,l_nj
! 33   format ('MyCov    : ',4f15.8,2i5)
!      write (6,34) xi,xf,yi,yf
! 34   format ('MyCov_EXT: ',4f15.8)
!
! Read the file again and compare data coverage
!
      rewind (unf)
 1    read (unf,304,end=2) i0, j0, xda, xfa, yda, yfa, nia, nja

      xda=xda*mf
      xfa=xfa*mf
      yda=yda*mf
      yfa=yfa*mf

!      write (6,44) ifd_nf, i0,j0, nia,nja, xda, xfa, yda, yfa
! 44   format ('FiCov: ',5i5,4f15.8)

      needitx = .false.
      needity = .false.
      if (xda.lt.xi) then
         if (xfa.ge.xi) needitx=.true.
      else
         if (xda.le.xf) needitx=.true.
      endif
      if (yda.lt.yi) then
         if (yfa.ge.yi) needity=.true.
      else
         if (yda.le.yf) needity=.true.
      endif
!
      ifd_needit(ifd_nf) = .false.
      if (needitx.and.needity) then
         ifd_needit(ifd_nf) = .true.
	 ifd_minx(ifd_nf) = i0
         ifd_miny(ifd_nf) = j0
         ifd_maxx(ifd_nf) = i0 + nia - 1
         ifd_maxy(ifd_nf) = j0 + nja - 1
         ifd_xia (ifd_nf) = xda
         ifd_yia (ifd_nf) = yda
         ifd_xfa (ifd_nf) = xfa
         ifd_yfa (ifd_nf) = yfa
         ifd_niad = min(ifd_niad,ifd_minx(ifd_nf))
         ifd_njad = min(ifd_njad,ifd_miny(ifd_nf))
         ifd_niaf = max(ifd_niaf,ifd_maxx(ifd_nf))
         ifd_njaf = max(ifd_njaf,ifd_maxy(ifd_nf))
         write (ifd_fnext(ifd_nf),'((i7.7),a1,(i7.7))') i0,'-',j0
         wb = wb .or. (ifd_xia(ifd_nf).le.xri)
         eb = eb .or. (ifd_xfa(ifd_nf).ge.xrf)
         sb = sb .or. (ifd_yia(ifd_nf).le.yri)
         nb = nb .or. (ifd_yfa(ifd_nf).ge.yrf)
      endif

      ifd_nf = ifd_nf + 1
      goto 1
 2    ifd_nf = ifd_nf - 1
      close (unf)
!
!	do i=1,ifd_nf
!        if (ifd_needit(i)) then
! 	write (6,55) ifd_minx(i),ifd_maxx(i),ifd_miny(i),
!     $               ifd_maxy(i),ifd_niad,ifd_njad,ifd_niaf,ifd_njaf,i
!        endif
!	end do
! 55   format ('h1n2: ',9i6)

      nav_3df = 0
      if (.not.((wb).and.(eb).and.(sb).and.(nb))) then
         write (6,202) wb,eb,sb,nb,Ptopo_myproc
         nav_3df = -1
      endif
!
 202  format (/' INSUFFICIENT INPUT DATA COVERAGE - wb,eb,sb,nb:',4L4, &
               ', PROC#:',i4,' --ABORT--'/)
 304  format (2i8,4e15.7,2i10)
!-----------------------------------------------------------------------
      return
      end
