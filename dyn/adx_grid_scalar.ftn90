!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "stop_mpi.h"
#include "msg.h"

!/**
subroutine adx_grid_scalar (F_fld_adw, F_fld_model,          &
                            F_aminx,F_amaxx,F_aminy,F_amaxy, &
                            F_minx,F_maxx,F_miny,F_maxy,F_nk,F_pol0_L,F_extend_L)
   implicit none
!
   !@objective Extend the grid from model to adw with filled halos
!
   !@arguments
   logical :: F_extend_L  !I, Extend field beyond poles
   logical :: F_pol0_L    !I, Set values=0 around poles (e.g. 4 winds)
   integer :: F_aminx,F_amaxx,F_aminy,F_amaxy !I, adw local array bounds
   integer :: F_minx,F_maxx,F_miny,F_maxy     !I, model's local array bounds
   integer :: F_nk        !I, number of levels
   real, dimension(F_minx:F_maxx,F_miny:F_maxy,F_nk) :: &
        F_fld_model       !I, fld on model-grid
   real, dimension(F_aminx:F_amaxx,F_aminy:F_amaxy,F_nk) :: &
        F_fld_adw         !O, fld on adw-grid
!**/

#include "adx_dims.cdk"

   integer :: nrow
   logical :: is_south_L

   !---------------------------------------------------------------------

   call msg(MSG_DEBUG,'adx_model2adx_grid_scalar')

   nrow = 999
   if (adx_lam_L) nrow = 0
   call rpn_comm_xch_halox( &
        F_fld_model, F_minx,F_maxx,F_miny,F_maxy, &
        adx_mlni, adx_mlnj, F_nk, adx_halox, adx_haloy, &
        adx_is_period_x, adx_is_period_y, &
        F_fld_adw, F_aminx,F_amaxx,F_aminy,F_amaxy, adx_lni, nrow)

   IF_LAM: if (.not.adx_lam_L) then
      if (adx_is_south) then
         is_south_L = .true.
         call adx_pole0s2(F_fld_adw, F_fld_model, &
              F_aminx,F_amaxx,F_aminy,F_amaxy,F_minx,F_maxx,F_miny,F_maxy,&
              F_nk, F_pol0_L, F_extend_L, is_south_L)
      endif

      if (adx_is_north) then
         is_south_L = .false.
         call adx_pole0s2(F_fld_adw, F_fld_model, &
              F_aminx,F_amaxx,F_aminy,F_amaxy,F_minx,F_maxx,F_miny,F_maxy,&
              F_nk, F_pol0_L, F_extend_L, is_south_L)
      endif
   endif IF_LAM

   call msg(MSG_DEBUG,'adx_model2adx_grid_scalar [end]')

   !---------------------------------------------------------------------

   return
end subroutine adx_grid_scalar
