!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r pospers - initialise upstream positions at time th as grid point positions
!
#include "model_macros_f.h"
!
      subroutine pospers
!
      implicit none
!
!author
!     Alain Patoine
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! V4_10 - Plante A.         - Thermo upstream positions
!
!object
!	
!arguments
!     none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "vth.cdk"
#include "type.cdk"
#include "ver.cdk"
!
      integer i, j, k, ijk, nij
      real pr1
!*
!
!     ---------------------------------------------------------------
!
      nij = l_ni * l_nj
!
      gmmstat = gmm_get(gmmk_xth_s,xth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(xth)'
      gmmstat = gmm_get(gmmk_yth_s,yth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(yth)'
      gmmstat = gmm_get(gmmk_zth_s,zth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(zth)'
!
      gmmstat = gmm_get(gmmk_xcth_s,xcth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(xcth)'
      gmmstat = gmm_get(gmmk_ycth_s,ycth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(ycth)'
      gmmstat = gmm_get(gmmk_zcth_s,zcth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(zcth)'
!
      gmmstat = gmm_get(gmmk_xth_thermo_s,xth_thermo,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(xth_thermo)'
      gmmstat = gmm_get(gmmk_yth_thermo_s,yth_thermo,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(yth_thermo)'
      gmmstat = gmm_get(gmmk_zth_thermo_s,zth_thermo,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(zth_thermo)'
!
      gmmstat = gmm_get(gmmk_xcth_thermo_s,xcth_thermo,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(xcth_thermo)'
      gmmstat = gmm_get(gmmk_ycth_thermo_s,ycth_thermo,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(ycth_thermo)'
      gmmstat = gmm_get(gmmk_zcth_thermo_s,zcth_thermo,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adx_main_2_pos ERROR at gmm_get(zcth_thermo)'
!
      do k = 1, l_nk
      do j = 1, l_nj 
      do i = 1, l_ni
         ijk=(k-1)*nij+(j-1)*l_ni+i
         xth(ijk)  = Geomg_x_8(i)
         yth(ijk)  = Geomg_y_8(j)
         zth(ijk)  = Ver_z_8%m(k)
!
         pr1         = cos(yth(ijk))
!
         zcth(ijk) = sin(yth(ijk))
         xcth(ijk) = cos(xth(ijk)) * pr1
         ycth(ijk) = sin(xth(ijk)) * pr1
      enddo
      enddo
      enddo
!
      do k = 1, l_nk+1
      do j = 1, l_nj 
      do i = 1, l_ni
         ijk=(k-1)*nij+(j-1)*l_ni+i
         xth_thermo(ijk)  = Geomg_x_8(i)
         yth_thermo(ijk)  = Geomg_y_8(j)
         zth_thermo(ijk)  = Ver_z_8%t(k)
         if(k.eq.1)zth_thermo(ijk)  = Ver_z_8%m(1)
         if(k.eq.l_nk+1)zth_thermo(ijk)  = Ver_z_8%m(l_nk)
!
         pr1         = cos(yth_thermo(ijk))
!
         zcth_thermo(ijk) = sin(yth_thermo(ijk))
         xcth_thermo(ijk) = cos(xth_thermo(ijk)) * pr1
         ycth_thermo(ijk) = sin(xth_thermo(ijk)) * pr1
      enddo
      enddo
      enddo
!
!     ---------------------------------------------------------------
!
      return
      end
