***s/r v4d_varconv_ad - ADJ of conversion control variables GEM <--> 3D-Var
*
#include <model_macros_f.h>
*
      subroutine v4d_varconv_ad( C_ut1, C_vt1, C_tt1, C_hut1, C_st1,
     $                           C_tt1m, C_hut1m, C_st1m, DIST_DIM, Nk, inverse_L )
*
      implicit none
*
      integer DIST_DIM,Nk
      real C_ut1 (DIST_SHAPE,Nk), C_vt1  (DIST_SHAPE,Nk),
     %     C_tt1 (DIST_SHAPE,Nk), C_hut1 (DIST_SHAPE,Nk),
     %     C_st1 (DIST_SHAPE),
     %     C_tt1m(DIST_SHAPE,Nk), C_hut1m(DIST_SHAPE,Nk),
     %     C_st1m(DIST_SHAPE)
      logical inverse_L
*
*author
*     Stephane Laroche 
*
*revision
* v3_00 - Laroche S.       - initial MPI version
* v3_00 - Gauthier P.      - ln q to q
* v3_00 - Tanguay M.       - verify zeroing of hut1m
* v3_02 - Laroche S.       - conversion to hybrid coordinate
* v3_02 - Buehner M.       - temporarilly set humidity to zero for SV job
* v3_11 - Tanguay M.       - Add option for profiles done on U-V grids for winds 
*                          - Add option for staggering already done by 3D-Var 
*
*object
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* C_ut1
* C_vt1
* C_tt1
* C_hut1
* C_st1
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "v4dg.cdk"
*
*modules
*
      integer i, j, k
      real*8 pri2c_8
      real wu(LDIST_SHAPE,l_nk),wv(LDIST_SHAPE,l_nk)

      if(.not.inverse_L) then
C     
C     Conversion GEM --> 4D-Var
C     =========================
C     
*
*     Humidity: Delta(log q) = Delta q / q(ref)
*
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 
                  if(C_hut1m(i,j,k).eq.0.0) then
                     C_hut1(i,j,k) = 0.0
                  else
                     C_hut1(i,j,k) = C_hut1(i,j,k)/C_hut1m(i,j,k)
                  endif
               end do
            end do
         end do
C     
C     Winds
C     -----
C     
         if (.not.V4dg_pruv_L) then
*
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               pri2c_8 = (1.0/Geomg_cy_8(j))*Dcst_rayt_8
               do i= 1+pil_w, l_ni-pil_e 
                  C_ut1(i,j,k) = C_ut1(i,j,k)*pri2c_8
                  C_vt1(i,j,k) = C_vt1(i,j,k)*pri2c_8
               end do
            end do
         end do

         call p_uvgridscal_ad ( C_ut1, C_vt1, LDIST_DIM, Nk, .true. )
*
         else
*
         do k=1,Nk
            do j= 1+pil_s, l_njv-pil_n
               pri2c_8 = (1.0/Geomg_cyv_8(j))*Dcst_rayt_8
               do i= 1+pil_w, l_ni-pil_e
                  C_vt1(i,j,k) = C_vt1(i,j,k)*pri2c_8
               end do
            end do
         end do
*
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n
               pri2c_8 = (1.0/Geomg_cy_8(j))*Dcst_rayt_8
               do i= 1+pil_w, l_niu-pil_e
                  C_ut1(i,j,k) = C_ut1(i,j,k)*pri2c_8
               end do
            end do
         end do
*
         endif
C     
C     Temperature
C     -----------
C     
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 

                  C_hut1(i,j,k) = C_hut1(i,j,k) 
     $                 - (C_tt1(i,j,k)*Dcst_delta_8/(1.0 + Dcst_delta_8*C_hut1m(i,j,k)))
     $                 *((C_tt1m(i,j,k) + Cstv_tstr_8)/(1.0 + Dcst_delta_8*C_hut1m(i,j,k)))

                  C_tt1(i,j,k) = (C_tt1(i,j,k)/(C_tt1m(i,j,k) + Cstv_tstr_8))
     $                 *((C_tt1m(i,j,k) + Cstv_tstr_8)/(1.0 + Dcst_delta_8*C_hut1m(i,j,k)))

               end do
            end do
         end do

C     
C     Surface pressure
C     ----------------
C     
         do j= 1+pil_s, l_nj-pil_n 
            do i= 1+pil_w, l_ni-pil_e 

            C_st1(i,j) =  Geomg_z_8(Nk) * exp(C_st1m(i,j)) * C_st1(i,j)

            end do
         end do
*     
      else
*     
C     
C     Conversion 4D-Var --> GEM
C     =========================
C     
*     
C     
C     Winds
C     -----
*
*      Zero adjoint variables
*      ----------------------
       do k=1,Nk
       do j=l_miny,l_maxy
       do i=l_minx,l_maxx
          wu(i,j,k) = 0.0
          wv(i,j,k) = 0.0
       enddo
       enddo
       enddo
*
       if(V4dg_vstag_L) then
         do k=1,Nk
           do j= 1+pil_s, l_njv-pil_n
           pri2c_8 = (1.0/Geomg_cyv_8(j))*Dcst_rayt_8
             do i= 1+pil_w, l_ni-pil_e
                C_vt1(i,j,k) = C_vt1(i,j,k)/pri2c_8
             end do
           end do
         end do
       endif
*
       if(V4dg_ustag_L) then
         do k=1,Nk
           do j= 1+pil_s, l_nj-pil_n
           pri2c_8 = (1.0/Geomg_cy_8(j))*Dcst_rayt_8
             do i= 1+pil_w, l_niu-pil_e
                C_ut1(i,j,k) = C_ut1(i,j,k)/pri2c_8
             end do
           end do
         end do
       endif
*
       if(.not.V4dg_ustag_L.and..not.V4dg_vstag_L) then
          call p_uvgridscal_ad ( C_ut1, C_vt1, LDIST_DIM, Nk, .false. )
*
       elseif(V4dg_ustag_L.and..not.V4dg_vstag_L) then
          call p_uvgridscal_ad (    wu, C_vt1, LDIST_DIM, Nk, .false. )
*
       elseif(.not.V4dg_ustag_L.and.V4dg_vstag_L) then
          call p_uvgridscal_ad ( C_ut1,    wv, LDIST_DIM, Nk, .false. )
       endif
*
       if(.not.V4dg_vstag_L) then
         do k=1,Nk
           do j= 1+pil_s, l_nj-pil_n
           pri2c_8 = (1.0/Geomg_cy_8(j))*Dcst_rayt_8
             do i= 1+pil_w, l_ni-pil_e
                C_vt1(i,j,k) = C_vt1(i,j,k)/pri2c_8
             end do
           end do
         end do
       endif
*
       if(.not.V4dg_ustag_L) then
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n
            pri2c_8 = (1.0/Geomg_cy_8(j))*Dcst_rayt_8
               do i= 1+pil_w, l_ni-pil_e
                  C_ut1(i,j,k) = C_ut1(i,j,k)/pri2c_8
               end do
            end do
         end do
       endif
*
       do k=1,Nk
       do j=l_miny,l_maxy
       do i=l_minx,l_maxx
          wu(i,j,k) = 0.0
          wv(i,j,k) = 0.0
       enddo
       enddo
       enddo
C     
C     Temperature
C     -----------
C     
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 

                  C_hut1(i,j,k) = C_hut1(i,j,k) + C_tt1(i,j,k)*Dcst_delta_8
     $                 *(C_tt1m(i,j,k) + Cstv_tstr_8)/(1.0 + Dcst_delta_8*C_hut1m(i,j,k))

                  C_tt1(i,j,k) = C_tt1(i,j,k)*(1.0 + Dcst_delta_8*C_hut1m(i,j,k))

               end do
            end do
         end do

C     
C     Surface pressure
C     ----------------
C     
         do j= 1+pil_s, l_nj-pil_n 
            do i= 1+pil_w, l_ni-pil_e 

               C_st1(i,j) = C_st1(i,j)/(Geomg_z_8(Nk) * exp(C_st1m(i,j)))

            end do
         end do
C
C     Humidity: Delta q = q(ref) * Delta( log q)
C     
         do k=1,Nk
            do j= 1+pil_s, l_nj-pil_n 
               do i= 1+pil_w, l_ni-pil_e 
                  C_hut1(i,j,k) = C_hut1(i,j,k)*C_hut1m(i,j,k)
               end do
            end do
         end do
*
      endif
*
* TEMPORARY: Set humidity field to zero for SV job
      if(V4dg_sgvc_L) C_hut1(:,:,:)=0.0
*
      return
      end

