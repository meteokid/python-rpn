!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r nest_indata - Read and process nesting data during LAM 
!                    integration for LBC.
!
#include "model_macros_f.h"
!
      subroutine nest_indata (F_datev_S)
      implicit none
!
      character*(*) F_datev_S
!author 
!     Michel Desgagne   - Spring 2002
!
!revision
! v3_01 - Desgagne M.     - initial version
! v3_03 - Tanguay M.      - Adjoint Lam configuration
! v3_30 - Lee V.          - Hollow cubes and acid test for LAM
! v4_03 - Lee/Desgagne    - ISST
! v4_05 - Plante A.       - Top nesting
! v4_05 - Lepine M.       - VMM replacement with GMM
! v4_10 - Lee V.          - Remove TRNES on tracers,zd,w 
!
!object
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "vtx.cdk"
#include "lam.cdk"
#include "nest.cdk"
#include "bcsgrds.cdk"
#include "p_geof.cdk"
#include "tr3d.cdk"
#include "ifd.cdk"
#include "bmf.cdk"
#include "ptopo.cdk"
#include "bcsmem.cdk"
#include "bcsdim.cdk"
#include "type.cdk"
#include "lun.cdk"
#include "acid.cdk"
#include "path.cdk"
#include "glb_pil.cdk"
#include "vtopo.cdk"
!
      integer  bcs_ftype,casc_bcs,casc_bcsh,newdate
      external bcs_ftype,casc_bcs,casc_bcsh,newdate
!
      integer err,errbcs1,errbcs2,n,id,k,unf,errft(3),dat
      logical nav_L
      real, pointer, dimension(:,:,:) :: tr1
!*
!     ---------------------------------------------------------------
!
      if (Lun_debug_L) write (Lun_out,1000)

      gmmstat = gmm_get(gmmk_nest_u_fin_s ,nest_u_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_u_fin)'
      gmmstat = gmm_get(gmmk_nest_v_fin_s ,nest_v_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_v_fin)'
      gmmstat = gmm_get(gmmk_nest_w_fin_s,nest_w_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_w_fin)'
      gmmstat = gmm_get(gmmk_nest_t_fin_s,nest_t_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_t_fin)'
      gmmstat = gmm_get(gmmk_nest_zd_fin_s,nest_zd_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_zd_fin)'
      gmmstat = gmm_get(gmmk_nest_s_fin_s,nest_s_fin,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_s_fin)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(fiptx)'
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_nest_q_fin_s ,nest_q_fin,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_q_fin)'
      else
         nullify (nest_q_fin)
      endif

      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(topo)'
!
      if ( Vtopo_L) then
         gmmstat = gmm_get(gmmk_dtopo_s,dtopo,meta2d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(dtopo)'
      else
         nullify (dtopo)
      endif
!
      Path_ind_S=trim(Path_input_S)//'/BCDS_3D'
!
      errft = 0
      unf   = 76
      nav_L = .false.
      err   = bcs_ftype (ifd_ftype,errft,F_datev_S, nav_L, unf)
      if ((ifd_ftype.eq.'BCS').or.(ifd_ftype.eq.'3DF')) then
!
         err = 0
         if ( ((north+south+east+west).eq.0) .and. Lam_wgt0 ) err = -1
         call handle_error(err,'nest_indata', &
         'Piloting/blending NOT allowed for this partition when using BCS/3DF files')
!
         ifd_bcsphy_L = .true.
         if (ifd_ftype.eq.'3DF') then
             errbcs1 = casc_bcs (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin, &
                                 nest_zd_fin,nest_s_fin,topo,nest_q_fin, &
                                 l_minx,l_maxx,l_miny,l_maxy,F_datev_S,unf,1,0)
             errbcs2 = casc_bcs (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin, &
                                 nest_zd_fin,nest_s_fin,topo,nest_q_fin, &
                                 l_minx,l_maxx,l_miny,l_maxy,F_datev_S,unf,2,errbcs1)
             errbcs1 = min(0,errbcs1+errbcs2+1)
             if(errbcs1.lt.0) write(6,205) F_datev_S,Ptopo_myproc
             call handle_error(errbcs1,'nest_indata','')
         else if (ifd_ftype.eq.'BCS') then
             errbcs1 = casc_bcsh (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin, &
                                  nest_zd_fin,nest_s_fin,topo,nest_q_fin, &
                                  l_minx,l_maxx,l_miny,l_maxy,F_datev_S,unf,1,0)
             errbcs2 = casc_bcsh (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin, &
                                  nest_zd_fin,nest_s_fin,topo,nest_q_fin, &
                                  l_minx,l_maxx,l_miny,l_maxy,F_datev_S,unf,2,errbcs1)
             errbcs1 = min(0,errbcs1+errbcs2+1)
             if(errbcs1.lt.0) write(6,205) F_datev_S,Ptopo_myproc
             call handle_error(errbcs1,'nest_indata','')
         else
             write (6,1001)
             call handle_error(-1,'nest_indata','')
         endif

      else
!
         ifd_bcsphy_L = .false.
         call datp2f   ( dat, F_datev_S )
         err = newdate ( dat, bmf_time1,bmf_time2,-3 )
         call readdyn2 (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin,nest_zd_fin, &
                        nest_s_fin,fiptx,topo,nest_q_fin,dtopo, &
                        'NEST/',':F',l_minx,l_maxx,l_miny,l_maxy)
      endif
!
      if ((F_datev_S.eq.Lam_runstrt_S).and.(.not.Ana_zd_L)) &
         call uvs2psd2 (nest_zd_fin,nest_u_fin,nest_v_fin,nest_t_fin,nest_s_fin, &
                                                                 LDIST_DIM,l_nk)
!
!     ---------------------------------------------------------------
!
 205  format (/' PROBLEM WITH LBCS AT: ',a,', PROC#:',i4,' --ABORT--'/)
 1000 format(3X,'GETTING DATA FROM NEST TO BCS: (S/R NEST_INDATA)')
 1001 format (/' WRONG ifd_ftype in nest_indata: --- ABORT ---'/)
      return
      end

