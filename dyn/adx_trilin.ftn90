!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "msg.h"
#include "stop_mpi.h"

!/**
subroutine adx_trilin1(F_out, F_in, F_dt, F_n, &
     F_capx, F_capy, F_capz, F_num,i0,in,j0,jn,kn)
   implicit none
   !@objective tri-linear interpolation
   !@arguments
   integer :: F_num, F_n(F_num),i0,in,j0,jn,kn
   real :: F_dt, F_in(*)
   real :: F_out(F_num), F_capx(F_num), F_capy(F_num), F_capz(F_num)
   !______________________________________________________________________
   !              |                                                 |     |
   ! NAME         | DESCRIPTION                                     | I/O |
   !--------------|-------------------------------------------------|-----|
   !              |                                                 |     |
   ! F_out        | F_dt * result of interpolation                  |  o  |
   ! F_in         | field to interpolate                            |  i  |
   !              |                                                 |     |
   ! F_dt         | multiplicative constant (1.0 or timestep lenght)|  i  |
   !              |                                                 |     |
   ! F_n          | positions in the 3D volume of interpolation     |  i  |
   !              | boxes                                           |     |
   !              |                                                 |     |
   ! F_capx       | \                                               |  i  |
   ! F_capy       |   precomputed displacements                     |  i  |
   ! F_capz       | / along the x,y,z directions                    |  i  |
   !              |                                                 |     |
   ! F_num        | number of points to interpolate                 |  i  |
   !______________|_________________________________________________|_____|
   !
   !@author  alain patoine
   !@revisions
   ! v3_00 - Desgagne & Lee    - Lam configuration
   ! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
   !**/
#include "adx_dims.cdk"
   integer :: n, o1, o2, i, j, k
   real*8  :: prf1, prf2, prf3, prf4
   !---------------------------------------------------------------------
!$omp parallel do private(n,o1,o2,prf1,prf2,prf3,prf4)
   do k=1,kn
      do j=j0,jn
         do i=i0,in

            n = (k-1)*adx_mlnij + ((j-1)*adx_mlni) + i
            o1 = F_n(n)
            o2 = o1 + adx_nit

            !- x interpolation
            prf1 = (1.0 - F_capx(n)) * F_in(o1) + F_capx(n) * F_in(o1+1)
            prf2 = (1.0 - F_capx(n)) * F_in(o2) + F_capx(n) * F_in(o2+1)

            o1 = o1 + adx_nijag
            o2 = o2 + adx_nijag

            prf3 = (1.0 - F_capx(n)) * F_in(o1) + F_capx(n) * F_in(o1+1)
            prf4 = (1.0 - F_capx(n)) * F_in(o2) + F_capx(n) * F_in(o2+1)

            !- y interpolation
            prf1 = (1.0 - F_capy(n)) * prf1 + F_capy(n)  * prf2
            prf2 = (1.0 - F_capy(n)) * prf3 + F_capy(n)  * prf4

            !- z interpolation
            F_out(n) = ( (1.0 - F_capz(n)) * prf1 + F_capz(n)  * prf2 ) * F_dt

         enddo
      enddo
   enddo
!$omp end parallel do
   !---------------------------------------------------------------------
   return
end subroutine adx_trilin1




subroutine adx_trilin2()
   call stop_mpi(STOP_ERROR,'adx_trilin2','called a stub')
   return
end subroutine adx_trilin2

!/**
subroutine adx_trilin3(F_out, F_in, F_dt, F_n, &
     F_capx, F_capy, F_capz, i0,in,j0,jn, &
     F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,F_nk, F_nk_super)
   !@objective tri-linear interpolation
   implicit none
   !@arguments
   integer :: F_nk, F_nk_super  !I, number of vertical levels
   integer :: F_aminx, F_amaxx, F_aminy, F_amaxy !I, input field array bounds
   integer :: F_ni, F_nj        !I, dims of output field
   integer :: i0, in, j0, jn    !I, scope ofthe operator
   real,dimension(F_ni,F_nj,F_nk) :: &
        F_capx, F_capy, F_capz  !I, precomputed displacements along x,y,z
   integer,dimension(F_ni,F_nj,F_nk) :: &
        F_n                     !I, pos in the 3D volume of interpolation boxes
   real    :: F_dt              !I, multiplicative constant (1. or timestep)
   real,dimension(F_aminx:F_amaxx,F_aminy:F_amaxy,F_nk_super)::&
        F_in                    !I, field to interpolate
   real,dimension(F_ni,F_nj,F_nk) :: &
        F_out                   !O, F_dt * result of interpolation
   !@author  alain patoine
   !@revisions
   ! v3_00 - Desgagne & Lee    - Lam configuration
   ! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
!**/
#include "adx_dims.cdk"
   integer, save :: mycnt = 0
   integer :: i, j, k, nit, njt, i2,j2,k2,ij2

#define INT_LIN_I48(F3D4,AA8,II,JJ,KK) ((1.D0-AA8)*dble(F3D4(II,JJ,KK)) + AA8*dble(F3D4(II+1,JJ,KK)))
#define INT_LIN_IJ48(F3D4,AX8,AY8,II,JJ,KK) ((1.D0-AY8)*INT_LIN_I48(F3D4,AX8,II,JJ,KK) + AY8*INT_LIN_I48(F3D4,AX8,II,JJ+1,KK))
#define INT_LIN_IJK48(F3D4,AX8,AY8,AZ8,II,JJ,KK) ((1.D0-AZ8)*INT_LIN_IJ48(F3D4,AX8,AY8,II,JJ,KK) + AZ8*INT_LIN_IJ48(F3D4,AX8,AY8,II,JJ,KK+1))

   !---------------------------------------------------------------------
   call stop_mpi(STOP_ERROR,'adx_trilin3','called a stub')
   return
!!$   mycnt = mycnt + 1
!!$   print *,'adx_trilin',mycnt
!!$
!!$   call msg(MSG_DEBUG,'adx_trilin')
!!$   nit = adx_lmaxx - adx_lminx + 1
!!$   njt = adx_lmaxy - adx_lminy + 1
!!$
!!$!$omp parallel do private(i2,j2,k2,ij2)
!!$   do k=1,F_nk
!!$      do j=j0,jn
!!$         do i=i0,in
!!$            k2  = 1 + F_n(i,j,k)/(nit*njt)
!!$            ij2 = F_n(i,j,k) - (k2-1)*nit*njt
!!$            !- lmin shift needed since indexes are computed with array starting at 1
!!$            j2  = 1   + ij2/nit
!!$            i2  = ij2 - (j2-1)*nit + (adx_lminx-1)
!!$            j2  = j2 + (adx_lminy-1)
!!$
!!$            F_out(i,j,k) = F_dt * &
!!$                  INT_LIN_IJK48(F_in,dble(F_capx(i,j,k)),dble(F_capy(i,j,k)),dble(F_capz(i,j,k)),i2,j2,k2)
!!$         enddo
!!$      enddo
!!$   enddo
!!$!$omp end parallel do
!!$   call msg(MSG_DEBUG,'adx_trilin [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_trilin3
