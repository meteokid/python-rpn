!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
c  s/r set_zeta    - Generates A and B of the hybrid coordinate
c                    Also sets Z and other related vertical parameters.
c
#include "model_macros_f.h"
c
      subroutine set_zeta ( F_hybuser )
      implicit none
*
      real F_hybuser(*)
c
c authors
c      A. Plante & C. Girard - CMC - janvier 2008
c
c revision
c
* v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
*
c object
c    To return A, B parameters for momentum and thermodynamic levels
c    These levels are used for DYNAMICAL CALCULATIONS in the models
c    Some are VIRTUAL levels
c
c    Also to return other parameters related to the vertical discretization
c
c         Z, dZ, 1/dZ, dBdZ, etc
c
c Virtual level vvvvvvvvvvvvvvvvv Ver_z_8%m(0)
c
c         Ztop  ================= Ver_z_8%t(1)
c
c               - - - - - - - - - Ver_z_8%m(1)
c
c               ================= Ver_z_8%t(2) = ( Ver_z_8%m(2) + Ver_z_8%m(1) ) / 2
c
c               - - - - - - - - - Ver_z_8%m(2)
c
c                      ...
c
c               - - - - - - - - - Ver_z_8%m(G_nk-1)
c
c               ================= Ver_z_8%t(G_nk) = ( Ver_z_8%m(nk) + Ver_z_8%m(nk-1) ) / 2
c
c               - - - - - - - - - Ver_z_8%m(G_nk)
c
c         Zsrf  ================= Ver_z_8%t(G_nk+1)
c
c Virtual level vvvvvvvvvvvvvvvvv Ver_z_8%m(G_nk+1)
c
c arguments
c none
c
#include "glb_ld.cdk"
#include "lun.cdk"
#include "dcst.cdk"
#include "pres.cdk"
#include "cstv.cdk"
#include "grd.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "schm.cdk"
#include "dimout.cdk"
#include "level.cdk"
c
      integer k,istat,err
      real hybm(0:G_nk+1), hybt(0:G_nk+2)
      real*8 zero, half, one, two
      parameter(zero=0.d0,half=0.5d0,one=1.d0,two=2.d0)
      character*8 dumc
c     __________________________________________________________________
c
      allocate(   Ver_hyb%m  (G_nk+1),     Ver_hyb%t(G_nk+2),
     $            Ver_ip1%m(  G_nk+1),     Ver_ip1%t(G_nk+2),
     $            Ver_a_8%m(  G_nk+1),     Ver_a_8%t(G_nk+2),
     $            Ver_b_8%m(  G_nk+1),     Ver_b_8%t(G_nk+2),
     $            Ver_z_8%m(0:G_nk+1),     Ver_z_8%t(G_nk+1),
     $           Ver_dz_8%m(  G_nk  ),    Ver_dz_8%t(G_nk+1),
     $          Ver_idz_8%m(  G_nk  ),   Ver_idz_8%t(G_nk+1),
     $         Ver_dbdz_8%m(  G_nk  ),  Ver_dbdz_8%t(G_nk+1),
     $        Ver_fistr_8%m(0:G_nk  ), Ver_fistr_8%t(G_nk+1),
     $           Ver_wp_8%m ( G_nk  ),    Ver_wm_8%m(G_nk  ),
     $           Ver_wp_8%t ( G_nk+1),    Ver_wm_8%t(G_nk+1),
     $                                            stat=istat)
      call check_alloc(istat,'set_zeta',1)
c
      Cstv_RTstr_8= Dcst_rgasd_8*Cstv_Tstr_8
      Cstv_pref_8 = 100000.d0

      if(Cstv_pref_8.ne.100000.d0)
     $call handle_error0 ('set_zeta','set_zeta : Cstv_pref_8 must equal 100000.d0',-1)
c
      Cstv_Zsrf_8 = log(Cstv_pref_8)
      Cstv_Ztop_8 = log(Cstv_ptop_8)
c
c
c     ----------------------------------------------------------
c    |                                                          |
c    |   Set A, B and Z for momentum and thermodynamic levels   |
c    |                                                          |
c    |   according to the formulae:                             |
c    |                                                          |
c    |                Z = Zsrf + log(hyb)                       |
c    |                                                          |
c    |                A = Z                                     |
c    |                                                          |
c    |                B = (Z - Ztop)/(Zsrf-Ztop)**R             |
c    |                                                          |
c    |                Z = A(Z) + B(Z) * Zsrf                    |
c    |                                                          |
c    |                R = Rmax-(Rmax-Rmin)*(Z-Ztop)/(Zsrf-Ztop) |
c    |                                                          |
c    |   Ver_code=6 is assigned to this formula                 |
c     ----------------------------------------------------------
c
      Ver_code=6
*
      call vgrid_genab (Ver_a_8%m, Ver_b_8%m, hybm   ,
     %                  Ver_a_8%t, Ver_b_8%t, hybt   ,
     %                  F_hybuser, Ver_code , Lun_out,
     %                  Cstv_ptop_8, Cstv_pref_8, Grd_rcoef, G_nk, err)
*
      call gem_stop ('set_zeta',err)

      Ver_hyb%m(1:G_nk+1) = hybm(1:G_nk+1)
      Ver_hyb%t(1:G_nk+2) = hybt(1:G_nk+2)
      Ver_hyb_top = hybm(0)
      if (Schm_autobar_L) Ver_hyb%t(1) = hybt(0)
c
c     -------------
c     Now define Z:
c     -------------
c
      Ver_z_8%m(0) = Cstv_Ztop_8
      do k = 1, G_nk+1
         Ver_z_8%m(k) = Ver_a_8%m(k)
      enddo
c
      do k = 1, G_nk+1
         Ver_z_8%t(k) = Ver_a_8%t(k)
      enddo
c
c     --------------
c     Compute fistar
c     --------------
c     
      do k = 1, G_nk+1
         Ver_fistr_8%m(k-1)=-Cstv_RTstr_8*(Ver_z_8%m(k-1)-Cstv_Zsrf_8)
         Ver_fistr_8%t(k  )=-Cstv_RTstr_8*(Ver_z_8%t(k  )-Cstv_Zsrf_8)
      enddo
c
c     ----------------------
c     Compute dZ, 1/dZ, dBdZ
c     ----------------------
c
      Ver_dz_8%m(1)      = Ver_z_8%t(2)     - Ver_z_8%m(0)
      do k=2,G_nk-1
         Ver_dz_8%m(k)   = Ver_z_8%t(k+1)   - Ver_z_8%t(k)
      enddo      
      Ver_dz_8%m(G_nk)   = Ver_z_8%m(G_nk+1)- Ver_z_8%t(G_nk)
c
      do k=1,G_nk
         Ver_idz_8%m(k)  =  one/Ver_dz_8%m(k)
      enddo      
c     
      do k=1,G_nk+1
           Ver_dz_8%t(k) = Ver_z_8%m(k) - Ver_z_8%m(k-1)
          Ver_idz_8%t(k) = one/Ver_dz_8%t(k)
      enddo
c

         Ver_dbdz_8%t(1) = (Ver_b_8%m(1)-0.d0)*Ver_idz_8%t(1)
      do k=2,G_nk+1
         Ver_dbdz_8%t(k) = (Ver_b_8%m(k)-Ver_b_8%m(k-1))*Ver_idz_8%t(k)
      enddo
c
c     -------------------------------------------------------
c     Compute AVERGING WEIGHTS FROM THERMO TO MOMENTUM LEVELS 
c     -------------------------------------------------------
c
      do k=1,G_nk
         if(k.eq.G_nk) then
            Ver_wp_8%m(k) = Ver_dz_8%t(k+1)*Ver_idz_8%m(k)
         else
            Ver_wp_8%m(k) = Ver_dz_8%t(k+1)*half*Ver_idz_8%m(k)
         endif

            Ver_wm_8%m(k) = one-Ver_wp_8%m(k)
c
          Ver_dbdz_8%m(k) = Ver_wp_8%m(k) * Ver_dbdz_8%t(k+1) 
     %                    + Ver_wm_8%m(k) * Ver_dbdz_8%t(k)
      enddo
c
c     -------------------------------------------------------
c     Compute AVERGING WEIGHTS FROM MOMENTUM TO THERMO LEVELS 
c     -------------------------------------------------------
c
      Ver_wp_8%t(1) = 0.d0
      Ver_wm_8%t(1) = 1.d0
      do k=2,G_nk
         Ver_wp_8%t(k) = half
         Ver_wm_8%t(k) = half
      enddo
      Ver_wp_8%t(G_nk+1) = 1.d0
      Ver_wm_8%t(G_nk+1) = 0.d0
c
c     Encode Ver_ip1 for OUTPUT
c
      do k=1,G_nk+1
         call convip(Ver_ip1%m(k),Ver_hyb%m(k),level_kind_ip1,level_mode_ip1,dumc,.false.)   
         call convip(Ver_ip1%t(k),Ver_hyb%t(k),level_kind_ip1,level_mode_ip1,dumc,.false.)  
      enddo
      Ver_ip1%t(G_nk+2)=Ver_ip1%m(G_nk+1)
c
c     __________________________________________________________________
c
      return
      end
