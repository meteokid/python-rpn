!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
**s/r prever - prepares projection matrix for the vertical
*       exclusively for staggered model symmetric and  nonsymmetric_ln(Z) version.
*       no special treatement for singularity. Matrices are
*        non-singulars by construction.   
*
#include "model_macros_f.h"
*
      subroutine preverln(F_eval_8,F_levec_8,F_evec_8,F_wk1_8,F_nk,KDIM)
#include "impnone.cdk"
*
      integer F_nk, KDIM
      real*8 F_eval_8(*), F_evec_8(KDIM,*), F_wk1_8(KDIM,*)
      real*8 F_levec_8(KDIM,F_nk),work(8*F_nk),B1(KDIM,F_nk),F_index(F_nk)
      integer index(F_nk)
*
*author  Abdessamad Qaddouri - 2007
*
*revision
*
* v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_eval_8     O    - eigenvalues
* F_evec_8     O    - Right eigenvector matrix
*F_levec_8     O    - left eigenvector matrix
* F_wk1_8           - work field
* F_nk         I    - number of vertical levels
*
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "opr.cdk"
#include "schm.cdk"
*
      integer i, j,k
      real*8 pdordr, zero, one, xxx, yyy
      parameter(zero=.0d0, one=1.d0)
*
      if(F_nk.ne.G_nk)call gem_stop('preverln',-1)
*     
      pdordr = -1.0
*
      do i=1,F_nk
         do j=1,F_nk
            F_evec_8 (i,j)=zero
            F_wk1_8  (i,j)=zero
            B1       (i,j)=zero
            F_levec_8(i,j)=zero
         enddo
      enddo
*      
      xxx = - Ver_epsilon_8*(one-Dcst_cappa_8) + Cstv_hco1_8
      yyy = - Cstv_hco1_8
*
      if(Schm_autobar_L) xxx = zero
*
      do j=1,F_nk
*
         i = j - 1
         if ( i.gt.0 ) then
*           A wing
          F_evec_8(i,j) =     Opr_opszp2_8(2*G_nk+i)
     $                  +     Opr_opszpl_8(2*G_nk+i)
     $                  + xxx*Opr_opszpm_8(2*G_nk+i)
         endif
*     
         i = j
*        B: positive definit
         F_wk1_8(i,j) = Opr_opszp0_8(G_nk+i)
*        A diag
         F_evec_8(i,j) =     Opr_opszp2_8(G_nk+i)
     $                 +     Opr_opszpl_8(G_nk+i)
     $                 + xxx*Opr_opszpm_8(G_nk+i)
     $                 + yyy*Opr_opszp0_8(G_nk+i)
        i=j+1
        if(i.lt.(F_nk+1)) then
         F_evec_8(i,j) =     Opr_opszp2_8(i)
     $                 +     Opr_opszpl_8(i)
     $                 + xxx*Opr_opszpm_8(i)
        endif
       enddo
* note:  B1 is modified by nsyeigl    
       do j=1,F_nk
        do  i=1,F_nk
           F_levec_8(i,j)= F_evec_8(i,j)
           B1(i,j)= F_wk1_8(i,j) 
        enddo
       enddo 
*
       call  nsyeigl( F_eval_8,F_levec_8,F_evec_8 ,B1, work,
     $                                   F_nk, KDIM, 8*F_nk )
*     
      return
      end
