#if defined (DOC)
*
***comdeck p_pbl.cdk
*
*revision
* v2_20 - Pellerin P.            - adaptation to physics 3.6.6
*______________________________________________________________________
*                                                                      |
*  VARIABLES ASSOCIATED WITH PLANETARY BOUNDARY LAYER                  |
*______________________________________________________________________|
*                    |                                                 |
* NAME               | DESCRIPTION                                     |
*--------------------|-------------------------------------------------|
* CNMAXAD            | maximum number of coefficients in P_pbl_spng    |
* P_pbl_bndlr_S      | FLUVERT: name of boundary layer processes       |
* P_pbl_schsl_S      | SCHMSOL: name of land surface processes         |
* P_pbl_mix_S        | name of the mixing lenght formulation           |
*      The following switches are activated if TRUE                    |
* P_pbl_drag_L       | DRAG: surface friction  (simplified Physics)    |
* P_pbl_ocean_L      | CHAUF:surface heat flux from oceans(simp.Physics|
* P_pbl_evap_L       | EVAP: surface evaporation                       |
* P_pbl_dbgvv_L      | DBGMEM: debug physics memory                    |
* P_pbl_truew_L      | true: the physic interface will receive geograph|
*                    |      -ical wind components (meridionnal and     |
*                    |       zonal components) from the model. The     |
*                    |       returned tendencies will be rotated back  |
*                    |       into the model's frame of reference.      |
* Other switches:    |                                                 |
* P_pbl_albkg_L      | .true. to use background albedo (no snow)       |
*                    | .false. to compute albedo considering snow, ice,|
*                    |         and vegetation                          |
*  The following 6 variables are thermal parameters for the ground     |
* P_pbl_cst          | heat capacity of soil                           |
* P_pbl_csn          | heat capacity of snow                           |
* P_pbl_csg          | heat capacity of ice                            |
* P_pbl_kst          | heat diffusivity of soil                        |
* P_pbl_ksn          | heat diffusivity of snow                        |
* P_pbl_ksg          | heat diffusivity of ice                         |
* P_pbl_prsol        | stores the above 6 values for the call to       |
*                    | configure the physics package:                  |
*                    | P_pbl_prsol(1)=P_pbl_cst                        |
*                    | P_pbl_prsol(2)=P_pbl_csn                        |
*                    | P_pbl_prsol(3)=P_pbl_csg                        |
*                    | P_pbl_prsol(4)=P_pbl_kst                        |
*                    | P_pbl_prsol(5)=P_pbl_ksn                        |
*                    | P_pbl_prsol(6)=P_pbl_ksg                        |
* P_pbl_spng         | EPONGE:coefficients that multiply KM to simulate|
*                    |        sponge layer near the top of the model   |
* The following variables are to help compute latitudinal modulation of|
*  vertical diffusion coefficient on momentum by fitting a cubic btwn  |
*  values P_pbl_valml_8 and P_pbl_valeq_8 at latitudes P_pbl_mllat_8   |
*                                                  and P_pbl_eqlat_8   |
* P_pbl_valml_8      | background value of multiplication factor of    |
*                    | P_pbl_spng out of equator                       |
* P_pbl_mllat_8      | latitude at which the multiplication factor     |
*                    | becomes P_pbl_valml_8 out of equator            |
* P_pbl_valeq_8      | equatorial value of multiplication factor of    |
*                    | P_pbl_spng                                      |
* P_pbl_eqlat_8      | equatorial latitude at which the multiplication |
*                    | factor becomes P_pbl_valml_8                    |
* P_pbl_snoalb_L     | .true.  when SNOALEN analysis is used           |
*                    | .false. when SNOALEN is derived in physics      |
*----------------------------------------------------------------------
*
*
#endif
      integer CNMAXAD
      parameter (CNMAXAD = 55)
*
      character*8 P_pbl_bndlr_S, P_pbl_schsl_S, P_pbl_mix_S
      logical P_pbl_drag_L   ,P_pbl_ocean_L  ,
     $        P_pbl_evap_L   ,P_pbl_dbgvv_L  ,P_pbl_truew_L  ,
     $        P_pbl_snwmlt_L ,P_pbl_stomat_L ,P_pbl_typsol_L ,
     $        P_pbl_albkg_L  ,P_pbl_cortm_L  ,P_pbl_corts_L  ,
     $        P_pbl_drylp_L  ,P_pbl_monta_L  ,P_pbl_iceme_L  ,
     $        P_pbl_agreg_L  ,P_pbl_snoalb_L ,P_pbl_z0tcst_L
      integer P_pbl_nslof
      real                 P_pbl_cst        ,P_pbl_csn      ,
     $     P_pbl_csg      ,P_pbl_kst        ,P_pbl_ksn      ,
     $     P_pbl_ksg      ,P_pbl_prsol(6)   ,P_pbl_spng(CNMAXAD)
      real*8
     $     P_pbl_valml_8  ,P_pbl_mllat_8  ,
     $     P_pbl_valeq_8  ,P_pbl_eqlat_8  
*
      MARK_COMMON_BEG (ppbl_c)
      common /ppbl_c/ P_pbl_bndlr_S, P_pbl_schsl_S, P_pbl_mix_S
      MARK_COMMON_END (ppbl_c)

      MARK_COMMON_BEG (ppbl_l)
      common /ppbl_l/
     $     P_pbl_drag_L   ,P_pbl_ocean_L  ,
     $     P_pbl_evap_L   ,P_pbl_dbgvv_L  ,P_pbl_truew_L  ,
     $     P_pbl_snwmlt_L ,P_pbl_stomat_L ,P_pbl_typsol_L ,
     $     P_pbl_albkg_L  ,P_pbl_cortm_L  ,P_pbl_corts_L  ,
     $     P_pbl_drylp_L  ,P_pbl_monta_L  ,P_pbl_iceme_L  ,
     $     P_pbl_agreg_L  ,P_pbl_snoalb_L ,P_pbl_z0tcst_L
      MARK_COMMON_END (ppbl_l)

      MARK_COMMON_BEG (ppbl_i)
      common /ppbl_i/ P_pbl_nslof
      MARK_COMMON_END (ppbl_i)

      MARK_COMMON_BEG (ppbl_r)
      common /ppbl_r/               P_pbl_cst   ,P_pbl_csn,
     $                P_pbl_csg    ,P_pbl_kst   ,P_pbl_ksn,     
     $                P_pbl_ksg    ,P_pbl_prsol ,P_pbl_spng         
      MARK_COMMON_END (ppbl_r)
*
      MARK_COMMON_BEG (ppbl_r8)
      common /ppbl_r8/ P_pbl_valml_8  ,P_pbl_mllat_8  ,
     $                 P_pbl_valeq_8  ,P_pbl_eqlat_8  
      MARK_COMMON_END (ppbl_r8)
*
      DCL_DYNVAR(P_pbl, vlsp ,  real, (l_ni,l_nj))


