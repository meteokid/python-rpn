***s/r adw_main_2_pos - calculate upstream positions at th and t1
*
#include <model_macros_f.h>
*
      subroutine adw_main_2_pos ( F_it, F_u, F_v, F_w )
*
#include "impnone.cdk"
*
      integer F_it
      real F_u(*),F_v(*),F_w(*)
*
*author
*     alain patoine
*
*revision
* v2_31 - Desgagne M.    - removed stkmemw
* v2_31 - Tanguay M.     - gem_stop if Adw_fro_a.gt.0.and.V4dg_conf.ne.0
* v3_00 - Desgagne & Lee - Lam configuration
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*        |                                                       |     |
* NAME   | DESCRIPTION                                           | I/O |
*--------|-------------------------------------------------------|-----|
* F_it   | total number of iterations for trajectory             |  i  |
*        |                                                       |     |
* F_u,F_v| input:  3 components of wind on advection grid        |  io |
* F_w    | output: 3 components of upstream positions at t1      |     |
*________|_______________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "geomg.cdk"
#include "adw.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "v4dg.cdk"
#include "lctl.cdk"
#include "ptopo.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
************************************************************************
      logical doh
*
      integer pnerr, pnlkey1(30), pnlod
*
      integer i, j, k, n, ij, ijk, nij, nijk, it
      integer i1,j1,k1,nn
*
      integer, dimension(l_ni*l_nj*l_nk) :: n1
      real,    dimension(l_ni*l_nj*l_nk) :: xctg,yctg,zctg
      real,    dimension(l_ni*l_nj*l_nk) :: capx1,capy1,capz1
      real,    dimension(l_ni*l_nj*l_nk) :: wrkx1,wrky1,wrkz1,wrkc1,wrk_yth
      integer, dimension(:), allocatable :: n2
      real,    dimension(:), allocatable :: capx2,capy2,capz2
      real,    dimension(:), allocatable :: xpos2,ypos2,zpos2
*
*
      real dummy, dth
      real*8 r2pi_8,two
      parameter (two = 2.0)

      integer i0,in,j0,jn
*
      if (Lun_debug_L) write (Lun_out,1000)
      nij    = l_ni   *l_nj
      nijk   = l_ni   *l_nj   *l_nk
*
      r2pi_8 = two * Dcst_pi_8
      dth    = Cstv_dt_8/2.
************************************************************************
*
      pnlkey1(1) = VMM_KEY(xth)
      pnlkey1(2) = VMM_KEY(yth)
      pnlkey1(3) = VMM_KEY(zth)
      pnlkey1(4) = VMM_KEY(xcth)
      pnlkey1(5) = VMM_KEY(ycth)
      pnlkey1(6) = VMM_KEY(zcth)
      pnlkey1(7) = VMM_KEY(xct1)
      pnlkey1(8) = VMM_KEY(yct1)
      pnlkey1(9) = VMM_KEY(zct1)
*
      pnerr = vmmlod(pnlkey1,9)
*
      pnerr = VMM_GET_VAR(xth)
      pnerr = VMM_GET_VAR(yth)
      pnerr = VMM_GET_VAR(zth)
      pnerr = VMM_GET_VAR(xcth)
      pnerr = VMM_GET_VAR(ycth)
      pnerr = VMM_GET_VAR(zcth)
      pnerr = VMM_GET_VAR(xct1)
      pnerr = VMM_GET_VAR(yct1)
      pnerr = VMM_GET_VAR(zct1)

************************************************************************
      do it=1,F_it
************************************************************************
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west) i0=3
          if (l_east) in=l_niu-1
          if (l_south) j0=3
          if (l_north) jn=l_njv-1
      endif
                     doh = .false.
      if (it .eq. 1) doh = .true.
*
      do n = 1,nijk
      wrk_yth(n) = yth(n)
      enddo
*
      call adw_exch_1 ( wrkx1, wrky1, wrkz1, wrkc1, xth, wrk_yth, zth,
     %                  i0, in, j0, jn )
*
      if ( Adw_fro_a .gt. 0 .and. V4dg_conf.ne.0.0 )
     %        call gem_stop('adw_main_2_pos',-1) 
*
      if (.not.G_lam) then
      allocate(capx2(max(1,Adw_fro_a)),
     %         capy2(max(1,Adw_fro_a)),
     %         capz2(max(1,Adw_fro_a)),
     %         xpos2 (max(1,Adw_fro_a)),
     %         ypos2 (max(1,Adw_fro_a)),
     %         zpos2 (max(1,Adw_fro_a)),
     %         n2 (max(1,Adw_fro_a)) )
*
      call adw_exch_2 ( xpos2, ypos2, zpos2,
     %                  wrkx1, wrky1, wrkz1,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a,
     %                  Adw_for_n, Adw_for_s, Adw_for_a, 3 )
*
      endif
      call adw_setint ( n1, capx1, dummy, dummy, capy1, dummy,
     %                  dummy, capz1, dummy, xth,   wrk_yth, zth,
     %                  doh, .true., .true.,nijk,i0,in,j0,jn,l_nk)
*
      call adw_trilin (wrkx1,F_u,1.0,n1,capx1,capy1,capz1,nijk,i0,in,j0,jn,l_nk)
      call adw_trilin (wrky1,F_v,1.0,n1,capx1,capy1,capz1,nijk,i0,in,j0,jn,l_nk)
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west) i0=4
          if (l_east) in=l_niu-2
          if (l_south) j0=4
          if (l_north) jn=l_njv-2
      endif
*
      if (.not.G_lam) then
      if ( Adw_fro_a .gt. 0 ) then
*
*
         if ( Adw_ckbd_L ) call adw_ckbd ( ypos2 )
*
         call adw_setint ( n2, capx2, dummy, dummy, capy2, dummy,
     %                     dummy, capz2, dummy, xpos2, ypos2, zpos2,
     %                    .true., .true., .true., Adw_fro_a,1,Adw_fro_a,1,1,1)
*
         call adw_trilin ( xpos2, F_u, 1.0, n2, capx2, capy2, capz2,
     %                     Adw_fro_a,1,Adw_fro_a,1,1,1)
         call adw_trilin ( ypos2, F_v, 1.0, n2, capx2, capy2, capz2,
     %                     Adw_fro_a,1,Adw_fro_a,1,1,1)
      endif
*
      call adw_exch_2 ( wrkz1, wrk_yth, dummy,
     %                  xpos2, ypos2, dummy,
     %                  Adw_for_n, Adw_for_s, Adw_for_a,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a, 2)
*
      if ( Adw_for_a .gt. 0 )
     %   call adw_exch_3 ( wrkx1, wrky1, wrkz1, wrk_yth, wrkc1, 2 )
*
      deallocate(capx2,capy2,capz2,xpos2,ypos2,zpos2,n2)
      endif
************************************************************************
      call adw_trajsp ( xth, yth, xcth, ycth, zcth, wrkx1, wrky1, dth,
     %                  i0,in,j0,jn)
************************************************************************
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west) i0=4
          if (l_east) in=l_niu-1
          if (l_south) j0=4
          if (l_north) jn=l_njv-1
      endif
      do n = 1,nijk
      wrk_yth(n) = yth(n)
      enddo
*
      call adw_exch_1 ( wrkx1, wrky1, wrkz1, wrkc1, xth, wrk_yth, zth,
     %                  i0,in,j0,jn)
      allocate(capx2(max(1,Adw_fro_a)),
     %         capy2(max(1,Adw_fro_a)),
     %         capz2(max(1,Adw_fro_a)),
     %         xpos2 (max(1,Adw_fro_a)),
     %         ypos2 (max(1,Adw_fro_a)),
     %         zpos2 (max(1,Adw_fro_a)),
     %         n2 (max(1,Adw_fro_a)) )
*
*
      if (.not.G_lam) then
      call adw_exch_2 ( xpos2, ypos2, zpos2,
     %                  wrkx1, wrky1, wrkz1,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a,
     %                  Adw_for_n, Adw_for_s, Adw_for_a, 3 )
*
      endif

      call adw_setint ( n1, capx1, dummy, dummy, capy1, dummy,
     %                  dummy, capz1, dummy, xth,   wrk_yth, zth,
     %                 .true., .false., .true., nijk,i0,in,j0,jn,l_nk)
*
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
          if (l_west) i0=4
          if (l_east) in=l_niu-2
          if (l_south) j0=4
          if (l_north) jn=l_njv-2
      endif
      call adw_trilin (wrkx1,F_w,-dth,n1,capx1,capy1,capz1,nijk,i0,in,j0,jn,l_nk)
*
      if (.not.G_lam) then
      if ( Adw_fro_a .gt. 0 ) then
*
         if ( Adw_ckbd_L ) call adw_ckbd ( ypos2 )
*
         call adw_setint ( n2, capx2, dummy, dummy, capy2, dummy,
     %                     dummy, capz2, dummy, xpos2, ypos2, zpos2,
     %                    .true., .true., .true., Adw_fro_a,1,Adw_fro_a,1,1,1)
*
         call adw_trilin ( xpos2, F_w, -dth, n2, capx2,capy2,capz2,
     %                     Adw_fro_a,1,Adw_fro_a,1,1,1)
      endif
*
      call adw_exch_2 ( wrkz1, dummy, dummy,
     %                  xpos2, dummy, dummy,
     %                  Adw_for_n, Adw_for_s, Adw_for_a,
     %                  Adw_fro_n, Adw_fro_s, Adw_fro_a, 1)
*
      if ( Adw_for_a .gt. 0 )
     %   call adw_exch_3 ( wrkx1, dummy, wrkz1, dummy, wrkc1, 1 )
*
      deallocate(capx2,capy2,capz2,xpos2,ypos2,zpos2,n2)
      endif
************************************************************************
      do k = 2,l_nk-1
      do j = j0,jn
      do i = i0,in
         n = (k-1)*nij + ((j-1)*l_ni) + i
         zth(n) = Geomg_z_8(k) + wrkx1(n)
         zth(n) = min( Geomg_z_8(l_nk), max( zth(n), Geomg_z_8(1) ) )
         if ( zth(n).eq.Geomg_z_8(1) .or. zth(n).eq.Geomg_z_8(l_nk)) then
           zth(n) = (zth(n) + Geomg_z_8(k)) * 0.5
         endif
      enddo
      enddo
      enddo
************************************************************************
      enddo ! end of iterations loop
************************************************************************
      call adw_trajex (F_u, F_v, xct1, yct1, zct1, xcth, ycth, zcth,
     %                  i0,in,j0,jn)
*
      do j = j0,jn
      do i = i0,in
         n = ((j-1)*l_ni) + i   !for k=1
         F_w(n) = Geomg_z_8(1)
         n = (l_nk-1)*nij+((j-1)*l_ni) + i !for k=l_nk
         F_w(n) = Geomg_z_8(l_nk)
      enddo
      enddo
      do k = 2,l_nk-1
         do j = j0,jn
         do i = i0,in
            n=(k-1)*nij+((j-1)*l_ni) + i
            F_w(n) = zth(n) - Geomg_z_8(k)
            F_w(n) = Geomg_z_8(k) + 2.0 * F_w(n)
            F_w(n) = min( Geomg_z_8(l_nk), max( F_w(n), Geomg_z_8(1) ))
         enddo
         enddo
      enddo
*
      pnerr = vmmuld(-1,0)
*
 1000  format(3X,'CALC UPSTREAM POSITIONS: (S/R ADW_MAIN_2_POS)')
      return
      end
