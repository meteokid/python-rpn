***s/r initw2 -- initialize vertical wind "wt1" for nonhydrostatic models
*
#include <model_macros_f.h>
*
      subroutine initw2 ( F_wt1, F_uu, F_vv, F_psd, F_fi, F_tt, 
     $                     F_ss, F_w1, F_w2, F_w3 , F_w4, F_tr1, 
     $                     DIST_DIM, Nk )
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
      real  F_wt1(DIST_SHAPE,Nk), F_ss (DIST_SHAPE)
      real  F_uu (DIST_SHAPE,Nk), F_vv (DIST_SHAPE,Nk)
      real  F_psd(DIST_SHAPE,Nk)
      real  F_fi (DIST_SHAPE,Nk), F_tt (DIST_SHAPE,Nk)
      real  F_w1 (DIST_SHAPE,Nk), F_w2 (DIST_SHAPE,Nk)
      real  F_w3 (DIST_SHAPE,Nk), F_w4 (DIST_SHAPE,Nk)
      real  F_tr1(DIST_SHAPE)
*
*author 
*     S. Edouard - november 2001 - hybrid version
*
*revisions
* v2_31 - Edouard S.        - initial version
*
*object 
*     compute the vertical wind diagonostically in the hybrid coordinate 
*
*****************************************************************************************
*                                                                                       *
* Assume hydrostatic & adiabatic, the vertical wind "wt1" (DZ/Dt)                       *
* can be approximated with the equation                                                 *
*                                                                                       *
*                  /  pi*                                                             \ *
*                  |/   gnk                                                            |*
*                  ||                                                                  |*
*                  ||       /   /                  \ \             /                  \|*
* DZ     __    R T || b  __ |   | /\A + /\b exp(s) | |    *    . * | /\A + /\b exp(s) ||*
* -- = V.\/Z + --- ||--  \/.| V | ---------------- | | d pi  - pi  | ---------------- ||*
* Dt           g pi|| z     |   |    /\A + /\b     | |             |    /\A + /\b     ||*
*                  ||  gnk  \   \                  / /             \                  /|*
*       (TERM1)    ||                                                                  |*
*                  |/ pi*                        (TERM2)                               |*
*                  \    1                                                             / *
*                                                                                       *
* where                                                                                 *
*                                                                                       *
*      D( )/Dt is the total derivative: pronounced as "d-( ) over d-t"                  *
*                                                                                       *
*      /\A = 1 - db/dz                                                                  *
*                                                                                       *
*      /\A + /\b exp(s)                                                                 *
*      ---------------- = 1 + db/dz (exp(s) -1)                                         *
*         /\A + /\b                                                                     *
*****************************************************************************************
*
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  F_wt1       O          vertical velocity ( DZ/Dt )
*  F_uu        I          x component of hor. velocity 
*  F_vv        I          y component of hor. velocity
*  F_psd       I          vertical velocity ( pi star dot )
*  F_fi        I          geopotential
*  F_tt        I          virtual temperature
*  F_ss        I          ln (pi / z )
*                               s   s
*  F_w(1-4)               work vector
*  F_tr1                  work vector
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "schm.cdk"
*
*modules
      integer i, j, k, i0, j0, in, jn 
      real*8  xxx, yyy 
**
*     __________________________________________________________________
*
****************************************************
* TERM1: HORIZONTAL ADVECTION OF GEOGRAPHIC HEIGHT *
****************************************************

*     Gradient of geopotential 
*     ~~~~~~~~~~~~~~~~~~~~~~~~
      call rpn_comm_xch_halo ( F_fi, LDIST_DIM, l_ni, l_nj, G_nk, 
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      i0 = 1
      in = l_niu
      j0 = 1
      jn = l_nj
      do k=1,G_nk 
      do j = j0, jn
      do i = i0, in
         F_w1(i,j,k) = ( F_fi(i+1,j,k) - F_fi(i,j,k) ) / geomg_hx_8(i)
     $                 * F_uu(i,j,k) / Dcst_grav_8
      end do
      end do
      end do
      in = l_ni
      jn = l_njv
      do k=1,G_nk 
      do j = j0, jn
      do i = i0, in
         F_w2(i,j,k) = ( F_fi(i,j+1,k) - F_fi(i,j,k) ) * 
     %                   geomg_cyv2_8(j) / geomg_hsy_8(j)
     $                  * F_vv(i,j,k) / Dcst_grav_8
      end do
      end do
      end do

*     Interpolate from staggered grids to basic grid

      call rpn_comm_xch_halo ( F_w1, LDIST_DIM, l_niu,l_nj,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo ( F_w2, LDIST_DIM, l_ni,l_njv,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      in = l_niu
      jn = l_nj      
      do k=1,G_nk
         do j = j0, jn
         do i = i0, in
            F_w3(i,j,k) =  inuvl_wxux3_8(i,1) * F_w1(i-2,j,k)
     $                   + inuvl_wxux3_8(i,2) * F_w1(i-1,j,k)
     $                   + inuvl_wxux3_8(i,3) * F_w1(i  ,j,k)
     $                   + inuvl_wxux3_8(i,4) * F_w1(i+1,j,k)
         end do
         end do
      end do

      in = l_ni
      jn = l_njv
      if (l_south) j0 = 3
      if (l_north) jn = l_njv - 1
      
      do k=1,G_nk
         do j = j0, jn
         do i = i0, in
            F_w1(i,j,k) =  inuvl_wyvy3_8(j,1) * F_w2(i,j-2,k)
     %                   + inuvl_wyvy3_8(j,2) * F_w2(i,j-1,k)
     %                   + inuvl_wyvy3_8(j,3) * F_w2(i,j  ,k)
     %                   + inuvl_wyvy3_8(j,4) * F_w2(i,j+1,k)         
         end do
         end do
         if (l_south) then
            do i = i0, in
            F_w1(i,j0-2,k) =  inuvl_wyvy3_8(j0-2,3) * F_w2(i,j0-2,k)
     %                      + inuvl_wyvy3_8(j0-2,4) * F_w2(i,j0-1,k)
            F_w1(i,j0-1,k) =  inuvl_wyvy3_8(j0-1,2) * F_w2(i,j0-2,k)
     %                      + inuvl_wyvy3_8(j0-1,3) * F_w2(i,j0-1,k)
     %                      + inuvl_wyvy3_8(j0-1,4) * F_w2(i,j0,k  )
            end do
         endif
         if (l_north) then
            do i = i0, in
            F_w1(i,jn+2,k) =  inuvl_wyvy3_8(jn+2,1) * F_w2(i,jn  ,k)
     %                      + inuvl_wyvy3_8(jn+2,2) * F_w2(i,jn+1,k)
            F_w1(i,jn+1,k) =  inuvl_wyvy3_8(jn+1,1) * F_w2(i,jn-1,k)
     %                      + inuvl_wyvy3_8(jn+1,2) * F_w2(i,jn  ,k)
     %                      + inuvl_wyvy3_8(jn+1,3) * F_w2(i,jn+1,k)
            end do
            endif
      end do

*     Metric adjustment for physical advection 

      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
*
      do k=1,G_nk
      do j= j0, jn
      do i= i0, in
         F_wt1(i,j,k) = ( F_w3(i,j,k) + F_w1(i,j,k) ) / geomg_cy2_8(j) 
      end do
      end do
      end do
 
*********
* TERM2 *
*********

*     Prepare key factors of TERM2 

      do k=1,G_nk
       do j= j0, jn
       do i= i0, in
          F_w1(i,j,k) = 1 + geomg_dpib(k) * (exp(F_ss(i,j)) - 1.0)
       end do
       end do
      end do

      call rpn_comm_xch_halo ( F_w1, LDIST_DIM,l_ni,l_nj,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
      do k=1,G_nk
         do j = j0, jn
         do i = i0, in
            F_w3(i,j,k) = ((1.-intuv_c0xxu_8(i))*F_w1(i  ,j,k)
     %             +     intuv_c0xxu_8(i) *F_w1(i+1,j,k))*F_uu(i,j,k)
         end do
         end do
      end do

      jn = l_njv

      do k=1,G_nk
         do j = j0, jn
         do i = i0, in
            F_w4(i,j,k) = ((1.-intuv_c0yyv_8(j))*F_w1(i,j  ,k)
     %             +        intuv_c0yyv_8(j)*F_w1(i,j+1,k))*F_vv(i,j,k)
         end do
         end do
      end do

      call rpn_comm_xch_halo ( F_w3, LDIST_DIM, l_niu,l_nj,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo ( F_w4, LDIST_DIM, l_ni,l_njv,G_nk,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      call caldiv_2 ( F_w2, F_w3, F_w4, LDIST_DIM, G_nk )

*     Vertical integration over pi*

      jn = l_nj

      call hatoprg ( F_w2, F_w2, F_w3, 1.0, geomg_hz_8, LDIST_DIM,G_nk )

      do k= 1,G_nk
       do j= j0, jn
       do i= i0, in
          F_w2(i,j,k) = F_w2(i,j,k) * geomg_pib(k)/Cstv_pisrf_8
       end do
       end do
      end do

      do k=1,G_nk
         do j= j0, jn
         do i= i0, in
            xxx = Dcst_rgasd_8*F_tt(i,j,k)/Dcst_grav_8
            xxx = xxx / (geomg_pia(k) + geomg_pib(k)*exp(F_ss(i,j)))
        F_w1(i,j,k) = xxx * (  F_w2(i,j,k) -  F_psd(i,j,k)*F_w1(i,j,k))
            F_wt1(i,j,k) = F_wt1(i,j,k) + F_w1(i,j,k)
         end do
         end do
      end do

*
*     __________________________________________________________________
*
      return 
      end
