!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r hzd_ho_parite  - applies horizontal diffusion on a given 
*                       set of fields
*
#include "model_macros_f.h"
*
      subroutine hzd_ho_parite ( F_u, F_v, F_zd, F_w, F_t, F_s, DIST_DIM, Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
*
      real     F_u(DIST_SHAPE,Nk  ) , F_v(DIST_SHAPE,Nk),
     %         F_zd(DIST_SHAPE,Nk+1), F_w(DIST_SHAPE,Nk+1),
     %         F_t(DIST_SHAPE,Nk+1) , F_s(DIST_SHAPE)
*
*author
*     Abdessamad Qaddouri
*
*revision
* v3_01 - Qaddouri & Toviessi   - initial version
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Corbeil L.        - new RPNCOMM transpose
* v4    - Gravel-Girard-Plante - staggered version
* v4_04 - Girard-Plante     - Diffuse only real winds and zdot.
* v4_05 - Plante A.         - Diffuse w.
**
*object
* The diffusion includes: second order(Hzd_pwr=1), 
* fourth order(Hzd_pwr=2), sixth (Hzd_pwr=3) and 
* eightth order (Hzd_pwr=4) diffusion
*
*arguments
*  Name        I/O        Description
*----------------------------------------------------------------
*  F_u         I/0        see subroutine  
*  F_v         I/0            " 
*  F_t         I/0            "
*  F_w         I/0            "
*----------------------------------------------------------------
* 
*implicits
#include "glb_ld.cdk"
#include "ldnh.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
*
      integer dpwr
      real*8 wk1_8
      integer NSTOR,nev,nev1
**
*     __________________________________________________________________
*
      dpwr = Hzd_pwr / 2

      nev= (G_ni+2)/2
      NSTOR = nev + ( 1 - mod(nev,2) )
      if (Lun_debug_L) write(Lun_out,1000) Hzd_pwr
*
      if ( Hzd_cdiff .le. 0.0 ) then
           if (Lun_debug_L) write(Lun_out,1001) Hzd_cdiff
           return
      endif
*
*
*     Momentum
*     ~~~~~~~~
      nev1= (G_ni+1)/2
      call hzd_solparite_U(F_u, wk1_8, Hzd_evvec_8, Hzd_odvec_8,
     %     Hzd_au_8,Hzd_cu_8,Hzd_deltau_8,
     %     trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %     trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %     l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %     trp_12dn, Hzd_xp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %     Ptopo_npex,Ptopo_npey,NSTOR,nev1)
*     
      call hzd_solparite_2(F_v, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %     Hzd_av_8,Hzd_cv_8, Hzd_deltav_8,
     %     trp_12dmin,trp_12dmax,trp_22min,trp_22max,
     %     trp_12dn,trp_22n,G_nj, dpwr,l_minx,
     %     l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj,
     %     trp_12dn,Opr_opsxp0_8,Hzd_yp0_8, Hzd_cdiff,
     %     Ptopo_npex,Ptopo_npey,NSTOR,nev)
*     
*        Vertical motion
*        ~~~~~~~~~~~~~~~
*********not physical, done nevertheless*******
      call hzd_solparite_2(F_zd, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %     Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %     trp_p12dmin,trp_p12dmax,trp_22min,trp_22max,
     %     trp_p12dn,trp_22n,G_nj, dpwr,l_minx,
     %     l_maxx, l_miny, l_maxy,Nk+1,G_ni,l_ni,l_nj,
     %     trp_p12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %     Ptopo_npex,Ptopo_npey,NSTOR,nev)
      call hzd_solparite_2(F_w, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %     Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %     trp_p12dmin,trp_p12dmax,trp_22min,trp_22max,
     %     trp_p12dn,trp_22n,G_nj, dpwr,l_minx,
     %     l_maxx, l_miny, l_maxy,Nk+1,G_ni,l_ni,l_nj,
     %     trp_p12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %     Ptopo_npex,Ptopo_npey,NSTOR,nev)
*     
      if(.false.)then
*
         call gem_stop('hzd_ho_parite : to do, theta',-1)
*
*        Theta
*        ~~~~~
         call hzd_solparite_2(F_t, wk1_8, Opr_evvec_8 ,Opr_odvec_8,
     %                    Hzd_as_8,Hzd_cs_8,Hzd_deltas_8,
     %                    trp_p12dmin,trp_p12dmax,trp_22min,trp_22max,
     %                    trp_p12dn,trp_22n,G_nj, dpwr,l_minx,
     %                    l_maxx, l_miny, l_maxy,Nk+1,G_ni,l_ni,l_nj,
     %                    trp_p12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff,
     %                    Ptopo_npex,Ptopo_npey,NSTOR,nev)
*
      endif
*
 1000 format(/,
     $     3X,'PERFORM DEL-',i1,' HORIZONTAL DIFFUSION: (S/R hzd_ho_parite)')
 1001 format(/,
     $     3X,'HZD_CDIFF=',F20.8,' NO HORIZONTAL DIFFUSION: (S/R hzd_ho_parite)')
*     __________________________________________________________________
*
      return
      end
