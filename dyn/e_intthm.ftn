***s/r e_intthm  - Interpolate GZ,VT,HU on model grid.
*
#include "model_macros_f.h"
*
      subroutine e_intthm
*
      implicit none
*
*AUTHOR  M. ROCH - july 95 - from intscal
*
*revision
* v2_31 - M. Desgagne
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_02 - Lee V.            - added one more argument to e_bmfrd
* v3_02 -                   - correction to search for GZ at 1.0 eta/sg
* v3_20 - Pellerin Pierre   - To run off-line (surface)
* v3_22 - Lee V.            - removed Trvs tracers
*
*object
*    Computes  the ln of surface and top pressure given the topo 
*    (topography calculated on the model grid, phi,U or V), then
*    project the geopotential, virtual temperature,
*    specific humidity onto that grid
*
*arguments
*______________________________________________________________________
*                    |                                                 |
* NAME               | DESCRIPTION                                     |
*--------------------|-------------------------------------------------|
* Input only         |                                                 |
* lat                | vector of latitudes                             |
* lon                | vector of longitudes                            |
*----------------------------------------------------------------------
*
*IMPLICITES
#include "e_fu.cdk"
#include "e_grids.cdk"
#include "e_anal.cdk"
#include "e_option.cdk"
#include "dcst.cdk"
#include "e_tr.cdk"
#include "e_schm.cdk"
#include "hgc.cdk"
*
      integer  e_rdhint3,e_bmfrd
      external e_rdhint3,e_bmfrd
*
      character*4 vtt,vhh
      character*8 desc
      character*6 inter
      logical anyip_L,arret_L
      integer i, k, ng, err, ip3
      real c1, c2, hu(nifi*njfi), tt(nifi*njfi), mul, p0(nifi*njfi)
*
*---------------------------------------------------------------------
*
      c1 = Dcst_tcdk_8
      c2 = 10. * Dcst_grav_8
      vtt=vt//'  '
      vhh=vh//'  '
      ng = nifi*njfi
*
      write(6,1001)
      if (e_schm_offline_l) then
         write (6,130)
         write (6,110)
         write (6,130)
      endif
*
*     For searching the GZ,HU,TT,VT records, correct IP1 targets must be found
      anyip_L = .false.
      arret_L = .true.
      if ( gletaanl .or. glsiganl .or. glhybanl ) then
         write(6,*)
     $      'ANALYSIS IS IN SIGMA OR ETA OR HYBRID COORDINATES'
*
         do k=1,lv
            if (e_rdhint3 (hu,dstf_gid,nifi,njfi,'HU  ',na(k),ip2a,
     $          ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0) 
     $          goto 55
*
            if (e_schm_offline_l) 
     $          write (6,120) 'HUMIDITY','HU',0,0,1,'A',' CUBIC '
*
            anal_hav(1) = e_rdhint3 (tt,dstf_gid,nifi,njfi,vtt,na(k),
     $             ip2a,ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (anal_hav(1).lt.0) goto 55 
*
            if (e_schm_offline_l) 
     $         write (6,120) 'TEMPE   ',vtt,0,0,1,'A',' CUBIC '
*
            do i=1,ng
               tt(i) = tt(i) + c1
            enddo
            if (vt.eq.'TT') call mfotvt (tt,tt,hu,ng,1,ng)
            call e_bmfsplitxy2 (hu,nifi,njfi,'HU  ',k,lv,pni,0,0,0)
            call e_bmfsplitxy2 (tt,nifi,njfi,'VT  ',k,lv,pni,0,0,0)
         end do
*
         err = e_bmfrd (dstf_gid, nifi, njfi, 'P0  ', 0., 100., -1, 
     $                                   1, anyip_L,arret_L,'CUBIC')
*
            if (e_schm_offline_l) 
     $         write (6,120) 'SRFPRES ','P0',0,0,1,'A',' CUBIC '
*
         if (.not.e_schm_offline_l) then
         if (anal_hav(1).eq.0) then
            err = e_bmfrd (dstf_gid, nifi, njfi, 'GZ  ', 0., c2,na,
     $                                 lv, anyip_L,arret_L,'CUBIC' )
         else
            err = e_bmfrd (dstf_gid, nifi, njfi, 'GZ  ', 0., c2,na(lv), 
     $                                      1, anyip_L,arret_L,'CUBIC' )
         endif
         endif
*     
      elseif ( glecmanl ) then
         write(6,*)
     $      'ANALYSIS IS ECMWF COORDINATES'
*
         anal_hav(1)=1
*
         do k=1,lv

            ip3 = int(rna(k))
            if (e_rdhint3 (hu,dstf_gid,nifi,njfi,'HU  ',na(k),-1,
     $          ip3,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $          goto 55
            if (e_rdhint3 (tt,dstf_gid,nifi,njfi,vtt,na(k),-1,
     $          ip3,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $          goto 55
            do i=1,ng
               tt(i) = tt(i) + c1
            enddo
            if (vt.eq.'TT') call mfotvt (tt,tt,hu,ng,1,ng)
            call e_bmfsplitxy2 (hu,nifi,njfi,'HU  ',k,lv,pni,0,0,0)
            call e_bmfsplitxy2 (tt,nifi,njfi,'VT  ',k,lv,pni,0,0,0)
         end do
*
*        For ECMWF analyses, the log of pressure (in pa) is stored in
*        the variable 2P
*
         if (e_rdhint3 (p0,dstf_gid,nifi,njfi,'2P  ',-1,
     $       -1,-1,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $       goto 55
         do i=1,ng
            p0(i) = exp(p0(i))
         enddo
         call e_bmfsplitxy2 (p0,nifi,njfi,'P0  ',1,1,pni,0,0,0)
         err = e_bmfrd (dstf_gid, nifi, njfi, 'GZ  ', 0., c2, -1,
     $                                                 1, .true.,arret_L )
*
*        read temperature and dew point temperature at the surface,
*        transform into virtual
*        temperature and specific humidity, store in TS, and HE
*
         if (e_rdhint3 (tt,dstf_gid,nifi,njfi,'TS  ',-1,
     $       -1,-1,' ',' ',.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $       goto 55
         if (e_rdhint3 (hu,dstf_gid,nifi,njfi,'TD  ',-1,
     $       -1,-1,' ',' ',.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $       goto 55
         do i=1,ng
            hu(i) = tt(i) - hu(i)  ! dew point depression
            tt(i) = tt(i) + c1
         enddo
         call mesahu(hu, hu, tt, 1, p0, 3, .true., .false., ng, 1, ng)
         call mfotvt(tt, tt, hu, ng, 1, ng)
         call e_bmfsplitxy2 (hu,nifi,njfi,'HE  ',1,1,pni,0,0,0)
         call e_bmfsplitxy2 (tt,nifi,njfi,'TE  ',1,1,pni,0,0,0)
*
      else
*
         write(6,*)'ANALYSIS IS IN PRESSURE COORDINATES' 
         anal_hav(1) = e_bmfrd ( dstf_gid, nifi, njfi, 'GZ  ', 0., 10.,
     $                                  na,lv, anyip_L,arret_L,'CUBIC' )
         if (vh.eq.'HU') then
            err = e_bmfrd ( dstf_gid, nifi, njfi, vhh   , 0., 1. ,
     $                                  na,lv, anyip_L,arret_L,'CUBIC' )
         else
            do k=1,lv
               if (e_rdhint3 (hu,dstf_gid,nifi,njfi,vhh,na(k),ip2a,
     $            ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55               
               if (e_rdhint3 (tt,dstf_gid,nifi,njfi,vtt,na(k),ip2a,
     $            ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
               do i=1,ng
                  tt(i) = tt(i) + c1
               enddo
               rna(k)=rna(k)*100.
               do i=1,nifi*njfi
                  hu(i) = max(0., hu(i))
               enddo
               call mesahu (hu, hu, tt, rna(k), 1, 0,
     $                      vt.eq.'TT' , .false., ng, 1, ng)
               call e_bmfsplitxy2 (hu,nifi,njfi,'HU  ',k,lv,pni,0,0,0)
            end do
         endif
*
      endif
*
*     For tracer variables, search does not have to be successful
      anyip_L = .true.
      arret_L = .false.
      do i=1,E_tr3d_ntr
c         print*, E_tr3d_name_S(i),i
         if (.not.E_Schm_offline_L) then
         err = e_bmfrd ( dstf_gid, nifi, njfi, E_tr3d_name_S(i), 
     $                           0., 1., na, lv, anyip_L,arret_L,'CUBIC' )
         else
            mul=1.
            if      (E_tr3d_name_S(i).eq.'FI') then
               desc='IR FLUX '
               inter='LINEAR'
               mul=1.
            else if (E_tr3d_name_S(i).eq.'FB') then
               desc='SOLAR FL'
               inter='LINEAR'
               mul=1.
	    else if ((E_tr3d_name_S(i).eq.'PR').or.(E_tr3d_name_S(i).eq.'PR0')) then
               desc='PRECIP T'
               inter='LINEAR'
               mul=1. 
            else if (E_tr3d_name_S(i).eq.'RT') then
               desc='PCP RATE'
               inter='LINEAR'
               mul=1.
            else if ((E_tr3d_name_S(i).eq.'N4').or.(E_tr3d_name_S(i).eq.'N40')) then
               desc='AC SOL F'
               inter='LINEAR'
               mul=1.
            else if ((E_tr3d_name_S(i).eq.'AD').or.(E_tr3d_name_S(i).eq.'AD0')) then
               desc='ACC IR F'
               inter='LINEAR'
               mul=1.
            else if (E_tr3d_name_S(i).eq.'PC') then
               desc='PRECIP C'
               inter='LINEAR'
               mul=1.
            else if (E_tr3d_name_S(i).eq.'P0') then
               desc='SRFPRES '
               inter='LINEAR'
               mul=100.
            else if (E_tr3d_name_S(i).eq.'M4') then
               desc='COS_ZANG'
               inter='LINEAR'
               mul=1.
            endif
*
             err = e_bmfrd    (dstf_gid, nifi, njfi,E_tr3d_name_S(i), 
     $                         0., mul, na, lv, anyip_L,arret_L,inter)
            write (6,120) desc,E_tr3d_name_S(i),0,0,int(mul),'A',inter
         endif
      end do
*
*     
 1001 format(/,'COMPUTE TT, HU and GZ (S/R E_INTTHM)',/,25('+'))
*
 101  format ('|',2x,'   ATMOSPHERIC FIELDS.    VALID FOR:',1x,a16,1x,'|')

 110  format ('|',2x,'Names',2x,'|',' STD ',
     $        '|  Start | Length | Mul | SEQ | H.INTRP  |')
 120  format ('|',1x,a8,'|',1x,a4,'|',2(i7,' |'),i3,'  |',1x,a3,
     $        ' |',1x,a7,'  |',1x,a16,'|')
 130  format ('|',9('-'),'+',5('-'),'+',8('-'),'+',8('-'),'+',5('-'),
     $        '+',5('-'),'+',10('-'),'|')
*
      return
 55   call e_arret( 'e_intthm' )
*------------------------------------------------------------------
*
      end
