! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r e_intthm  - Interpolate GZ,VT,HU on model grid.
*
#include "model_macros_f.h"
*
      subroutine e_intthm
*
      implicit none
*
*AUTHOR  M. ROCH - july 95 - from intscal
*
*revision
* v2_31 - M. Desgagne
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_02 - Lee V.            - added one more argument to e_bmfrd
* v3_02 -                   - correction to search for GZ at 1.0 eta/sg
* v3_12 - Winger K.         - Use Anal_cond_L_L
* v3_12 - Winger & Dugas    - Output TD for pressure level moisture
* v3_20 - Pellerin Pierre   - To run off-line (surface)
* v3_21 - Dugas B.          - replace TD by ES in pressure mode
* v3_22 - Lee V.            - removed Trvs tracers
* v3_30 - Lee/Desgagne      - new LAM IO, read from analysis files to
*                             produce BCS or 3DF files
* v4_00 - A. Plante         - Adapt for staggering
*                             NOTE : un-staggered input data only
*
*object
*    Computes  the ln of surface and top pressure given the topo 
*    (topography calculated on the model grid, phi,U or V), then
*    project the geopotential, virtual temperature,
*    specific humidity onto that grid
*
*arguments
*______________________________________________________________________
*                    |                                                 |
* NAME               | DESCRIPTION                                     |
*--------------------|-------------------------------------------------|
* Input only         |                                                 |
* lat                | vector of latitudes                             |
* lon                | vector of longitudes                            |
*----------------------------------------------------------------------
*
*IMPLICITES
#include "e_fu.cdk"
#include "e_grids.cdk"
#include "e_anal.cdk"
#include "e_cdate.cdk"
#include "dcst.cdk"
#include "pilot.cdk"
#include "e_tr.cdk"
#include "e_schm.cdk"
#include "e_grdc.cdk"
#include "hgc.cdk"
*
      integer  e_rdhint3,e_bmfrd,fstprm,fstinl
      external e_rdhint3,e_bmfrd,fstprm,fstinl
*
      character*1 typ,grd,blk_S
      character*4 vtt,vhh,var
      character*8 desc
      character*6 inter
      logical anyip_L,arret_L
      integer i, j,k, ng, ip3,nis,njs,l,m,n,list(2000)
      integer is,js,jn,iw,ie,jw,njw,niw,nisc,njsc
      real pr1,pr2, dummy
      real c1, c2, mul
      real      x1,lev,difsig,dx,dy
      integer  dte, det, ipas, p1, p2, p3, g1, g2, g3, g4, bit,
     $         dty, swa, lng, dlf, ubc, ex1, ex2, ex3, kind, err,ip1mode
      real, dimension (:), allocatable:: tt,td,es,hu,p0,wk2,hr
      real, dimension (:,:), allocatable :: ttn,hun,gzn
      integer key,ni1,nj1,nk1,nka,yy,mo,dd,hh,mm,ss,dum,nvar
*
*---------------------------------------------------------------------
*
      write(6,1001)
      c1 = Dcst_tcdk_8
      c2 = 10. * Dcst_grav_8
      vtt=vt//'  '
      vhh=vh//'  '
*
*
      if(e_schm_offline_l.and.(.not.Pil_bmf_L))
     $     call gem_stop("e_intthm : bmf file only in offline mode",-1)
*

      if (Pil_bmf_L) then
          nis=nifi
          njs=njfi
      else
          nis=e_Grdc_ni
          njs=e_Grdc_nj
      endif
      ng = nis*njs
*
      allocate(tt(ng),td(ng),es(ng),hr(ng),hu(ng),p0(ng),wk2(ng))
*
*     For searching the GZ(at surface),HU,TT,VT,P0 records, 
*     correct IP1 targets must be found
*
      anyip_L = .false.
      arret_L = .true.
      if (.not.Pil_bmf_L)  allocate(ttn(ng,lv_t),hun(ng,lv_t),gzn(ng,lv_t))

      if ( Anal_eta_L .or. Anal_sigma_L .or. Anal_hyb_L ) then
         write(6,*)
     $      'ANALYSIS IS IN SIGMA OR ETA OR HYBRID COORDINATES'
*
         do k=1,lv_t
            if (e_rdhint3 (hu,dstf_gid,nis,njs,'HU  ',na_t(k),ip2a,
     $          ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0) 
     $          goto 55
*
            anal_hav(1) = e_rdhint3 (tt,dstf_gid,nis,njs,vtt,na_t(k),
     $             ip2a,ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (anal_hav(1).lt.0) goto 55 
*
            tt(:) = tt(:) + c1
*            
            if (vt.eq.'TT') call mfotvt (tt,tt,hu,ng,1,ng)
            if (Pil_bmf_L) then               
                call e_bmfsplitxy2 (hu,nis,njs,'HU  ',k,lv_t,pni,0,0,0)
                call e_bmfsplitxy2 (tt,nis,njs,'VT  ',k,lv_t,pni,0,0,0)
            else
                call e_fill_3df ( tt,ttn,nis,njs,lv_t,k,1.0,0.0) 
                call e_fill_3df ( hu,hun,nis,njs,lv_t,k,1.0,0.0) 
            endif
         end do
*
         if (.not.e_schm_offline_l) then
            if (.not.Pil_bmf_L) then
*              Read and interpolate surface GZ.
               err = e_rdhint3 (wk2,dstf_gid,nis,njs,'GZ  ',na_t(lv_t),
     $              ip2a,ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
               if (err.lt.0) goto 55
*              Scale
               wk2(:)=wk2(:)*c2
*              Surface GZ is written below.
            else if (anal_hav(1).eq.0) then
*              No interpolation : read, scale and write surface GZ.
               err = e_bmfrd (dstf_gid,nis,njs,'GZ  ',0.,c2,na_t(lv_t),
     $              1,.false.,.true.,'CUBIC')
            else
*              Read, interpolate, scale and write surface GZ.
               err = e_bmfrd (dstf_gid, nis, njs, 'GZ  ',   0., c2,na_t(lv_t),
     $              1, anyip_L,arret_L,'CUBIC')               
            endif               
         endif
*
         if (.not.Pil_bmf_L) then

             if (Pil_bcs_hollow_L) then
*
                call e_write_bcs (ttn,nis,njs,
     $            e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $            e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $            lv_t, 'TT  ',unf_casc)
                call e_write_bcs (wk2,nis,njs,
     $            e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $            e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $            1 , 'GZ  ',unf_casc)
                call e_write_bcs (hun,nis,njs,
     $            e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $            e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $            lv_t, 'HU  ',unf_casc)
*
             else
*
                call e_write_3df ( ttn,nis,njs,lv_t,'TT  ',unf_casc)
                call e_write_3df ( wk2,nis,njs,1 ,'GZ  ',unf_casc)
                call e_write_3df ( hun,nis,njs,lv_t,'HU  ',unf_casc)
*
             endif
         endif
*     
      elseif ( Anal_ecmwf_L ) then
         write(6,*) 'ANALYSIS IS ECMWF COORDINATES'
         print*,'e_intthm : never tested for ECMWF ANAL'
         stop
*
         anal_hav(1)=1
*
         do k=1,lv_t

            ip3 = int(rna_t(k))
            if (e_rdhint3 (hu,dstf_gid,nis,njs,'HU  ',na_t(k),-1,
     $          ip3,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $          goto 55
            if (e_rdhint3 (tt,dstf_gid,nis,njs,vtt,na_t(k),-1,
     $          ip3,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $          goto 55
            do i=1,ng
               tt(i) = tt(i) + c1
            enddo
            if (vt.eq.'TT') call mfotvt (tt,tt,hu,ng,1,ng)
            call e_bmfsplitxy2 (hu,nis,njs,'HU  ',k,lv_t,pni,0,0,0)
            call e_bmfsplitxy2 (tt,nis,njs,'VT  ',k,lv_t,pni,0,0,0)
         end do
*
*        For ECMWF analyses, the log of pressure (in pa) is stored in
*        the variable 2P
*
         if (e_rdhint3 (p0,dstf_gid,nis,njs,'2P  ',-1,
     $       -1,-1,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $       goto 55
         do i=1,ng
            p0(i) = exp(p0(i))
         enddo
         call e_bmfsplitxy2 (p0,nis,njs,'P0  ',1,1,pni,0,0,0)
         err = e_bmfrd (dstf_gid, nis, njs, 'GZ  ', 0., c2, -1,
     $                                                 1, .true.,arret_L )
*
*        read temperature and dew point temperature at the surface,
*        transform into virtual
*        temperature and specific humidity, store in TS, and HE
*
         if (e_rdhint3 (tt,dstf_gid,nis,njs,'TS  ',-1,
     $       -1,-1,' ',' ',.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $       goto 55
         if (e_rdhint3 (hu,dstf_gid,nis,njs,'TD  ',-1,
     $       -1,-1,' ',' ',.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $       goto 55
         do i=1,ng
            hu(i) = tt(i) - hu(i)  ! dew point depression
            tt(i) = tt(i) + c1
         enddo
         call mesahu(hu, hu, tt, 1, p0, 3, .true., Anal_cond_L, ng, 1, ng)
         call mfotvt(tt, tt, hu, ng, 1, ng)
         call e_bmfsplitxy2 (hu,nis,njs,'HE  ',1,1,pni,0,0,0)
         call e_bmfsplitxy2 (tt,nis,njs,'TE  ',1,1,pni,0,0,0)
*
      else
*
         write(6,*)'ANALYSIS IS IN PRESSURE COORDINATES' 
         anal_hav(1)=1
         do 100 k=1,lv_t
*              Read and interpolate surface GZ.
*              Surface GZ is written below.
               if (e_rdhint3 (wk2,dstf_gid,nis,njs,'GZ  ',na_t(k),ip2a,
     $              ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
*              Scale
               wk2(:)=wk2(:)*10.0
               if (e_rdhint3 (tt,dstf_gid,nis,njs,vtt,na_t(k),ip2a,
     $             ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
               if (vh.eq.'HU') then
                  if (e_rdhint3 (hu,dstf_gid,nis,njs,vhh,na_t(k),ip2a,
     $            ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
               elseif (vh.eq.'HR') then
                  if (e_rdhint3 (hr,dstf_gid,nis,njs,vhh,na_t(k),ip2a,
     $            ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
               elseif (vh.eq.'ES') then
                  if (e_rdhint3 (es,dstf_gid,nis,njs,vhh,na_t(k),ip2a,
     $            ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
               elseif (vh.eq.'TD') then
                  if (e_rdhint3 (td,dstf_gid,nis,njs,vhh,na_t(k),ip2a,
     $            ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6).lt.0)
     $              goto 55
               endif
*
               do i=1,ng
                  tt(i) = tt(i) + c1
               enddo
*
*              RNA_T is in millibars!
               if (vh.eq.'HR') then
                  call mhrahu( hu, hr, tt, rna_t(k)*100., dummy, 0,
     $                         vt.eq.'TT' , Anal_cond_L, ng, 1, ng )
               elseif (vh.eq.'ES') then
                  call mesahu( hu, es, tt, rna_t(k)*100., dummy, 0,
     $                         vt.eq.'TT' , Anal_cond_L, ng, 1, ng )
               elseif (vh.eq.'TD') then
                  do i=1,ng
                     es(i) = max( tt(i)-td(i),0.0 )
                  enddo
                  call mesahu( hu, es, tt, rna_t(k)*100., dummy, 0,
     $                         vt.eq.'TT' , Anal_cond_L, ng, 1, ng )
               endif
*
               if (Pil_bmf_L) then
                   call e_bmfsplitxy2 (wk2,nis,njs,'GZ  ',k,lv_t,pni,0,0,0)
                   call e_bmfsplitxy2 (hu,nis,njs,'HU  ',k,lv_t,pni,0,0,0)
                   if (vt.eq.'TT') call mfotvt (tt,tt,hu,ng,1,ng)
                   call e_bmfsplitxy2 (tt,nis,njs,'VT  ',k,lv_t,pni,0,0,0)
               else
                   call e_fill_3df (wk2,gzn,nis,njs,lv_t,k,1.0,0.0)
                   call e_fill_3df ( tt,ttn,nis,njs,lv_t,k,1.0,0.0) 
                   call e_fill_3df ( hu,hun,nis,njs,lv_t,k,1.0,0.0) 
               endif
  100    continue
         if (.not.Pil_bmf_L) then
             if (Pil_bcs_hollow_L) then
                call e_write_bcs (ttn,nis,njs,
     $            e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $            e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $            lv_t, 'TT  ',unf_casc)
                call e_write_bcs (gzn,nis,njs,
     $            e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $            e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $            lv_t, 'GZ  ',unf_casc)
                call e_write_bcs (hun,nis,njs,
     $            e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $            e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $            lv_t, 'HU  ',unf_casc)
             else
                call e_write_3df ( ttn,nis,njs,lv_t,'TT  ',unf_casc)
                call e_write_3df ( gzn,nis,njs,lv_t,'GZ  ',unf_casc)
                call e_write_3df ( hun,nis,njs,lv_t,'HU  ',unf_casc)
             endif
         endif
*
      endif
*
*     For tracer variables, search does not have to be successful
*     They can be assigned a constant value.
      anyip_L = .true.
      arret_L = .false.
      do i=1,E_tr3d_ntr
         E_trname_S(i)=E_tr3d_name_S(i)
         if ( E_tr3d_name_S(i)(3:4).eq.'T1'.or.
     %        E_tr3d_name_S(i)(3:4).eq.'T0'    )
     %        E_trname_S(i) = E_Tr3d_name_S(i)(1:2)//'  '
      enddo
*
      if (E_Schm_offline_L) then
          do 200 i=1,E_tr3d_ntr
            mul=1.
            if      (E_tr3d_name_S(i).eq.'FI') then
               desc='IR FLUX '
               inter='LINEAR'
               mul=1.
            else if (E_tr3d_name_S(i).eq.'FB') then
               desc='SOLAR FL'
               inter='LINEAR'
               mul=1.
	    else if ((E_tr3d_name_S(i).eq.'PR').or.(E_tr3d_name_S(i).eq.'PR0')) then
               desc='PRECIP T'
               inter='LINEAR'
               mul=1. 
            else if (E_tr3d_name_S(i).eq.'RT') then
               desc='PCP RATE'
               inter='LINEAR'
               mul=1.
            else if ((E_tr3d_name_S(i).eq.'N4').or.(E_tr3d_name_S(i).eq.'N40')) then
               desc='AC SOL F'
               inter='LINEAR'
               mul=1.
            else if ((E_tr3d_name_S(i).eq.'AD').or.(E_tr3d_name_S(i).eq.'AD0')) then
               desc='ACC IR F'
               inter='LINEAR'
               mul=1.
            else if (E_tr3d_name_S(i).eq.'PC') then
               desc='PRECIP C'
               inter='LINEAR'
               mul=1.
            else if (E_tr3d_name_S(i).eq.'P0') then
               desc='SRFPRES '
               inter='LINEAR'
               mul=100.
            else if (E_tr3d_name_S(i).eq.'M4') then
               desc='COS_ZANG'
               inter='LINEAR'
               mul=1.
            endif
*
            err = e_bmfrd    (dstf_gid, nis, njs,E_tr3d_name_S(i), 
     $                         0., mul, na_t, lv_t, anyip_L,arret_L,inter)
 200      continue
          return
      endif

      do i=1,E_tr3d_ntr
         do k=1,lv_t
            if (e_rdhint3 (wk2,dstf_gid,nis,njs, E_tr3d_name_S(i),
     $                     na_t(k),ip2a,ip3a,' ',tva, .true.,.false.,
     $                     'CUBIC',e_fu_anal,6).lt.0) wk2(:)=E_tr3d_sval(i)
             if (Pil_bmf_L) then
                 call e_bmfsplitxy2 (wk2,nis,njs,E_trname_S(i),k,lv_t,pni,0,0,0)
             else
                 call e_fill_3df ( wk2,hun,nis,njs,lv_t,k,1.0,0.0)
             endif
         enddo
      end do
      if (.not.Pil_bmf_L) then
         do i=1,E_tr3d_ntr
            if (Pil_bcs_hollow_L) then
                call e_write_bcs (hun,nis,njs,
     $                    e_grdc_is,e_grdc_nis,e_grdc_js,e_grdc_jn,e_grdc_njs,
     $                    e_grdc_iw,e_grdc_ie,e_grdc_niw,e_grdc_jw,e_grdc_njw,
     $                    lv_t, E_trname_S(i),unf_casc)
            else
                call e_write_3df ( hun,nis,njs,lv_t,E_trname_S(i),unf_casc)
            endif
         end do
      endif 
*
      deallocate(tt,td,es,hu,wk2,p0)
      if (.not.Pil_bmf_L) deallocate(ttn,hun,gzn)
*     
 1001 format(/,'COMPUTE TT, HU and GZ (S/R E_INTTHM)',/,25('+'))
*
 101  format ('|',2x,'   ATMOSPHERIC FIELDS.    VALID FOR:',1x,a16,1x,'|')
 102  format ('|',2x,'   Off-line Mode: Only One Level Used:',1x,I5,10x,'|')
 110  format ('|',2x,'Names',2x,'|',' STD ',
     $        '|  Start | Length | Mul | SEQ | H.INTRP  |')
 130  format ('|',9('-'),'+',5('-'),'+',8('-'),'+',8('-'),'+',5('-'),
     $        '+',5('-'),'+',10('-'),'|')
 201  format ('|',2x,'   Search First Infos on Variable:',1x,A3,16x,'|')

 801  format (' LEVEL anal = ',d15.8,2X,' k = ',i4,' IP1= ',I8) 
*
      return
 55   call e_arret( 'e_intthm' )
*------------------------------------------------------------------
*
      end
