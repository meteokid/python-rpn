***s/r  bac_ad - ADJ of bac_tl
*
#include <model_macros_f.h>
*
      subroutine bac_ad( Itr, Itnlh )
*
#include "impnone.cdk"
*
      integer Itr, Itnlh
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_30 - Edouard S.        - remove pi' at the top (pptt0) - hybrid version
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - adapt for tracers in tr3d  
* 
*object
*     see id section
*     -----------------------------------------
*     REMARK:INPUT TRAJ:F_gptxm, F_rthm, F_nthm
*     -----------------------------------------
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  Itr          I           current nonlinear iteration number
*  Itnlh        I           total number of nonlinear iterations
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "vt0.cdk"
#include "vtx.cdk"
#include "ptopo.cdk"
#include "rhscm.cdk"
#include "nlm.cdk"
#include "vtxm.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld 
*
      integer pnerr, pnlod, pnlkey1(26), i, j, k 
*
      real*8  ZERO_8 
      parameter( ZERO_8=0.0 )
*
      real wijk0 (LDIST_SHAPE,l_nk),wijk1 (LDIST_SHAPE,l_nk)
      real wijk0m(LDIST_SHAPE,l_nk),wijk1m(LDIST_SHAPE,l_nk)
*
      real w_pipt0m(LDIST_SHAPE,l_nk),w_qt0m (LDIST_SHAPE,l_nk)
      real w_tplt0m(LDIST_SHAPE,l_nk),w_gxtxm(LDIST_SHAPE,l_nk)
      real w_fipt0m(LDIST_SHAPE,l_nk),w_st0m (LDIST_SHAPE)
*     ______________________________________________________
*
      if(.not. Schm_hydro_L) call gefstop('bac_ad')
*     ______________________________________________________
*
      if (Lun_debug_L) write(Lun_out,1000)
*
*
      pnlkey1(1) = VMM_KEY(st0)
      pnlkey1(2) = VMM_KEY(pipt0)
      pnlkey1(3) = VMM_KEY(qt0)
      pnlkey1(4) = VMM_KEY(fit0)
      pnlkey1(5) = VMM_KEY(fipt0)
      pnlkey1(6) = VMM_KEY(topo)
      pnlkey1(7) = VMM_KEY(tt0)
      pnlkey1(8) = VMM_KEY(tpt0)
      pnlkey1(9) = VMM_KEY(tplt0)
      pnlkey1(10)= VMM_KEY(ut0)
      pnlkey1(11)= VMM_KEY(vt0)
      pnlkey1(12)= VMM_KEY(psdt0)
      pnlkey1(13)= VMM_KEY(tdt0)
      pnlkey1(14)= VMM_KEY(gptx)
      pnlkey1(15)= VMM_KEY(gxtx)
      pnlkey1(16)= VMM_KEY(ru)
      pnlkey1(17)= VMM_KEY(rv)
      pnlkey1(18)= VMM_KEY(rcn)
      pnlkey1(19)= VMM_KEY(rth)
      pnlod = 19 
*
      pnlkey1(pnlod + 1) = VMM_KEY(gptxm)
      pnlkey1(pnlod + 2) = VMM_KEY(rthm)
      pnlod = pnlod + 2 
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(pipt0)
      pnerr = VMM_GET_VAR(qt0)
      pnerr = VMM_GET_VAR(fit0)
      pnerr = VMM_GET_VAR(fipt0)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(tt0)
      pnerr = VMM_GET_VAR(tpt0)
      pnerr = VMM_GET_VAR(tplt0)
      pnerr = VMM_GET_VAR(ut0)
      pnerr = VMM_GET_VAR(vt0)
      pnerr = VMM_GET_VAR(psdt0)
      pnerr = VMM_GET_VAR(tdt0)
      pnerr = VMM_GET_VAR(gptx)
      pnerr = VMM_GET_VAR(gxtx)
      pnerr = VMM_GET_VAR(ru)
      pnerr = VMM_GET_VAR(rv)
      pnerr = VMM_GET_VAR(rcn)
      pnerr = VMM_GET_VAR(rth)
*
      pnerr = VMM_GET_VAR(gptxm)
      pnerr = VMM_GET_VAR(rthm)
*
      qpt0_ = 0
      wt0_  = 0
      mut0_ = 0
      multx_= 0
      rvv_  = 0
      r3_   = 0
      r3p_  = 0
*
*     Zero adjoint variables
*     ----------------------
      do k=1,l_nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
      wijk0(i,j,k) = ZERO_8 
      wijk1(i,j,k) = ZERO_8 
      enddo
      enddo
      enddo
*
*PDIR RESERVE=Ptopo_npeOpenMP
*
      call  bacp_2_ad
     %             (   Itr, Itnlh,   st0, pipt0,   qt0,
     %                fit0, fipt0,  topo,   tt0,  tpt0, tplt0,
     %                 ut0,   vt0, psdt0,  tdt0,  
     %                qpt0,   wt0,  mut0, multx,  gptx,  gxtx,
     %                 ru, rv, rth,  r3, r3p, rvv,  rcn,
     %                 nl_nu, nl_nv, nl_nth,  nl_n3, nl_n3p,
     $                 nl_ncn,wijk0,wijk1,
*
     %                            w_st0m,w_pipt0m,w_qt0m,
     %                       w_fipt0m,                  w_tplt0m,
     %                                            gptxm, w_gxtxm,
     %                         rthm,
     %                               nlm_nthm,
     $                 wijk0m,wijk1m,
*
     $                             LDIST_DIM, l_nk )
*
*PDIR RELEASE
*
      pnerr = vmmuld(-1,0)

1000  format (5X,' ADJ of BACK SUBSTITUTION: (S/R BAC_AD)')

      return
      end
