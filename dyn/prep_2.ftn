***s/r prep_2 - Add metric corrections to r.h.s. of momentum equations.
*               Compute advective contributions on geopotential grid.
*               Interpolate advection contribution from geopotential 
*               grid to wind grids. Update r.h.s with advective 
*               contributions. Add contribution of topography to rhs 
*               of momentum equations.
*               compute rhs of divergence equation
*               compute rhs of combined horizontal equations
*               compute the linear rhs of Helmholtz equation
*               ( computation and microtasking )
*
#include "model_macros_f.h"
*
      subroutine prep_2 ( F_ru  ,F_rv  ,F_ruw1 ,F_ruw2 ,F_rvw1 ,F_rvw2, 
     $                    F_xct1,F_yct1,F_zct1 ,F_fis  ,F_rcn  ,F_rth ,
     $                    F_rw  , F_rvv,F_rhell,
     $                    DIST_DIM, ni, nj, Nk )
*
      implicit none
*
      integer DIST_DIM, ni, nj, Nk
      real F_ru    (DIST_SHAPE,Nk)  ,F_rv    (DIST_SHAPE,Nk)  ,
     $     F_ruw1  (DIST_SHAPE,Nk)  ,F_ruw2  (DIST_SHAPE,Nk)  ,
     $     F_rvw1  (DIST_SHAPE,Nk)  ,F_rvw2  (DIST_SHAPE,Nk)  ,
     $     F_xct1  (ni,nj,Nk)       ,F_yct1  (ni,nj,Nk)       ,
     $     F_zct1  (ni,nj,Nk)       ,F_fis   (DIST_SHAPE)     ,
     $     F_rcn   (DIST_SHAPE,Nk)  ,F_rth   (DIST_SHAPE,Nk+1),
     $     F_rw    (DIST_SHAPE,Nk+1),F_rvv   (DIST_SHAPE,Nk+1),
     $     F_rhell (DIST_SHAPE,Nk)
*
*author
*     Alain Patoine 
*
*revision
* v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
* v2_21 - Lee V.            - modification for LAM version
* v2_31 - Desgagne M.       - remove stkmemw and switch to adw_*
* v3_00 - Desgagne & Lee    - Lam configuration
* v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
* v3_11 - Gravel S.         - modify for theoretical cases
* v_stg - Plante A.         - Staggered version
*
*object
*
*arguments
*     see appropriate comdeck documentation
*
*implicits
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "grd.cdk"
#include "geomg.cdk"
#include "offc.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "type.cdk"
#include "adw.cdk"
#include "cori.cdk"
#include "ver.cdk"
#include "ptopo.cdk"
#include "matlab.cdk"
*
*modules
      integer i, j, k, i0, j0, in, jn, i00, inn, j00, jnn, longueur
      real*8  x, y, z, cx, cy, cz, rx, ry, rz, b1ob0, mumu, tot,
     $        a1, a2, a3, b1, b2, b3, zero, half, one, four
      real    rdiv(DIST_SHAPE), w_rth(DIST_SHAPE)
*
      parameter( zero=0.d0, half=.5d0, one=1.d0, four=4.d0 )
**
      if(matlab_write_L.and.Ptopo_myproc.eq.0)then
         open(unit=62,file=
     $        matlab_dir_S(1:longueur(matlab_dir_S))//'from_fortran_prep_2.bin',
     $        status='replace',form='unformatted')
         write(62)G_ni-lam_pil_w-lam_pil_e
         write(62)G_nk
      endif
*     __________________________________________________________________
*
******************************************************************
* Metric corrections to the RHS of horizontal momentum equations *
******************************************************************
      tot = - four*Dcst_omega_8/Cstv_dt_8
*
*     Coriolis term is zero for theoretical cases
*
      if( Schm_theoc_L ) tot = zero
      b1ob0 = Offc_b1_8/Offc_b0_8
*
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west)  i0= 1+pil_w -2
         if (l_east)  in= l_ni-pil_e +2
         if (l_south) j0= 1+pil_s -2
         if (l_north) jn= l_nj-pil_n +2
      endif

!$omp parallel private(x,y,z,rz,ry,rx,cx,cy,cz,mumu,rdiv)
!$omp do
      do 100 k=1,l_nk
      do 100 j= j0, jn
      do 100 i= i0, in

*     Compute components of r(t0) and put in x, y, z
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         y = adw_cy_8(j)
         if (G_lam) then
         x = adw_cx_8(i) * y
         y = adw_sx_8(i) * y
         else
         x = adw_cx_8(l_i0 - 1 + i) * y
         y = adw_sx_8(l_i0 - 1 + i) * y
         endif
         z = adw_sy_8(j)

*     Compute (Rx, Ry, Rz) = (rx, ry, rz)
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         mumu = ( one + F_zct1(i,j,k) )*( one - F_zct1(i,j,k) )
         if (mumu .GT. zero) mumu = one / mumu

         rz = F_rvw2(i,j,k)
         ry =  mumu * (F_xct1(i,j,k)*F_ruw2(i,j,k)-
     $                 F_yct1(i,j,k)*F_zct1(i,j,k)*rz)
         rx = -mumu * (F_yct1(i,j,k)*F_ruw2(i,j,k)+
     $                 F_xct1(i,j,k)*F_zct1(i,j,k)*rz)

*     Compute components of (r - r~) and put in cx, cy, cz
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         cx = x - F_xct1(i,j,k)
         cy = y - F_yct1(i,j,k)
         cz = z - F_zct1(i,j,k)

*     Find components of Coriolis vector  2 * omg/tau * [k' ^ (r - r~)]
*     where geographic unit north vector  k' = r_13 I + r_23 J + r_33 K
*     Then substract them from (rx, ry, rz)
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if (.not.Cori_cornl_L) then
         rx = rx + ( Grd_rot_8(2,3)*cz - Grd_rot_8(3,3)*cy )*tot
         ry = ry + ( Grd_rot_8(3,3)*cx - Grd_rot_8(1,3)*cz )*tot
         rz = rz + ( Grd_rot_8(1,3)*cy - Grd_rot_8(2,3)*cx )*tot
         endif

*     Compute components of c and put in cx, cy, cz 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         cx = x + b1ob0*F_xct1(i,j,k)
         cy = y + b1ob0*F_yct1(i,j,k)
         cz = z + b1ob0*F_zct1(i,j,k)

*     Compute mu and modify (Rx,Ry,Rz)
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         mumu = - ( x*rx + y*ry + z*rz )/( x*cx + y*cy + z*cz )
         rx = rx + mumu*cx
         ry = ry + mumu*cy
         rz = rz + mumu*cz

*     Compute advective contributions on G-grid 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         F_ruw2(i,j,k) = x*ry - y*rx - F_ruw1(i,j,k)
         F_rvw2(i,j,k) = rz - F_rvw1(i,j,k)
         
100   continue 
!$omp enddo
*
**********************************************************
* Final form of the RHS of horizontal momentum equations *
**********************************************************
*     Prepare the gradient of topography 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!$omp single
      call rpn_comm_xch_halo( F_fis , LDIST_DIM, l_ni,l_nj,  1 ,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_ruw2, LDIST_DIM, l_ni,l_nj,G_nk,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_rvw2, LDIST_DIM, l_ni, l_nj,G_nk,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
*
      i0 = 1
      in = l_niu
      j0 = 1+pil_s
      jn = l_nj-pil_n
      if (G_lam) then
         if (l_west)  i0=1+pil_w
         if (l_east)  in=l_niu-pil_e
      endif
      j00 = 1
      jnn = l_njv
      i00 = 1+pil_w
      inn = l_ni-pil_e
      if (G_lam) then
         if (l_south) j00 = 1+pil_s
         if (l_north) jnn = l_njv-pil_n
      else
         if (l_south) j00 = 2
         if (l_north) jnn = l_njv-1
      endif
!$omp end single
*
!$omp do
      do k=1,l_nk 

*     Add advective contributions to Ru & Rv
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0, in
            F_ru(i,j,k) =  F_ru(i,j,k) + 
     $                   inuvl_wxxu3_8(i,1)*F_ruw2(i-1,j,k)
     $                 + inuvl_wxxu3_8(i,2)*F_ruw2(i  ,j,k)
     $                 + inuvl_wxxu3_8(i,3)*F_ruw2(i+1,j,k)
     $                 + inuvl_wxxu3_8(i,4)*F_ruw2(i+2,j,k)
         end do
         end do
 
*
         do j= j00, jnn
         do i= i00, inn
            F_rv(i,j,k) =  F_rv(i,j,k) +
     $                   inuvl_wyyv3_8(j,1)*F_rvw2(i,j-1,k)
     $                 + inuvl_wyyv3_8(j,2)*F_rvw2(i,j  ,k)
     $                 + inuvl_wyyv3_8(j,3)*F_rvw2(i,j+1,k)
     $                 + inuvl_wyyv3_8(j,4)*F_rvw2(i,j+2,k)
         end do
         end do
         if (.not.G_lam) then
            if (l_south) then
            do i = 1, l_ni
            F_rv(i,1,k) = F_rv(i,1,k) +
     $                  inuvl_wyyv3_8(1,2)*F_rvw2(i,1,k)
     $                + inuvl_wyyv3_8(1,3)*F_rvw2(i,2,k)
     $                + inuvl_wyyv3_8(1,4)*F_rvw2(i,3,k)
            end do
            endif
            if (l_north) then
            do i = 1, l_ni
            F_rv(i,l_njv,k) = F_rv(i,l_njv,k) +
     $                      inuvl_wyyv3_8(l_njv,1)*F_rvw2(i,l_njv-1,k)
     $                    + inuvl_wyyv3_8(l_njv,2)*F_rvw2(i,l_njv  ,k)
     $                    + inuvl_wyyv3_8(l_njv,3)*F_rvw2(i,l_njv+1,k)
            end do
            endif
         endif

      end do
!$omp enddo
*
**************************************
* Combination of governing equations * 
**************************************
*
!$omp single
      a1 = one / ( Dcst_grav_8 * Cstv_tau_8 )
      a2 = Ver_epsilon_8 / ( Dcst_rgasd_8 * Cstv_tstr_8 )
      a3 = one / ( Cstv_tau_8**2 * Dcst_rgasd_8 * Cstv_tstr_8 )
*
      b1 = Ver_gamma_8 / Cstv_tau_8 
      b2 = Ver_gamma_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b3 = Ver_epsilon_8 /Dcst_cappa_8
*
      call rpn_comm_xch_halo( F_ru, LDIST_DIM,l_niu,l_nj,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 ) 
      call rpn_comm_xch_halo( F_rv, LDIST_DIM,l_ni,l_njv,G_nk,
     $             G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!$omp end single
!$omp do
      do k=1,l_nk
*
*        Computing the RHS of divergence equation 
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if (G_lam) then
             do j= 1+pil_s, l_nj-pil_n
             do i= 1+pil_w, l_ni-pil_e
                rdiv(i,j) = ( F_ru(i,j,k) - F_ru(i-1,j,k) )
     $                        / ( geomg_cy2_8(j)*geomg_hxu_8(i-1) )
     $                    + ( F_rv(i,j,k) - F_rv(i,j-1,k) )
     $                        * geomg_invhsyv_8(j-1)
             end do
             end do
         else
             call caldiv_2 ( rdiv, F_ru(minx,miny,k), 
     $                             F_rv(minx,miny,k), LDIST_DIM, 1)
         endif
*
*        Combining divergence & continuity equations 
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            F_rcn(i,j,k) = rdiv(i,j) - F_rcn(i,j,k) / Cstv_tau_8
         end do
         end do
*
      end do
!$omp enddo
*
!$omp do
      do k=1,l_nk+1
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*        Computing RX stored in Rth & RQ(non-hydro) stored in Rvv
*        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            w_rth(i,j)    =      F_rth(i,j,k)
            F_rth (i,j,k) = b2 * F_rth(i,j,k)
*                                At this stage, F_rth=RX (hydro)
         end do
         end do
         if (.not. Schm_hydro_L) then
*           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*           non-hydrostatic contributions
*           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            do j= 1+pil_s, l_nj-pil_n
            do i= 1+pil_w, l_ni-pil_e
               F_rvv(i,j,k) = a1 *   F_rw (i,j,k) +  a2 * F_rvv(i,j,k) 
               F_rth(i,j,k) =        F_rth(i,j,k) +  b2 * F_rvv(i,j,k)
               F_rvv(i,j,k) = b1 * ( F_rvv(i,j,k) -  b3 * w_rth(i,j) )
*                                At this stage, F_rth = RX (non-hydro)
*                                At this stage, F_rvv = RQ
            end do
            end do
         endif 
      enddo
!$omp enddo
*
****************************************
* The linear RHS of Helmholtz equation *
****************************************
!$omp do
      do k=1,l_nk
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            F_rhell(i,j,k) = Ver_hz_8%m(k)   * F_rcn(i,j,k) 
     $                     + Ver_z_8%t (k  ) * F_rth(i,j,k  ) 
     $                     - Ver_z_8%t (k+1) * F_rth(i,j,k+1)
         end do
         end do
         if (.not. Schm_hydro_L) then    
            do j= 1+pil_s, l_nj-pil_n
            do i= 1+pil_w, l_ni-pil_e
               F_rhell(i,j,k) = F_rhell(i,j,k) + half *
     $                          ( Ver_hz_8%t(k  ) * F_rvv(i,j,k  )
     $                          + Ver_hz_8%t(k+1) * F_rvv(i,j,k+1) )
            end do
            end do
         endif
      end do
!$omp enddo
!$omp do
*     Applying boundary conditions.
      do j= 1+pil_s, l_nj-pil_n
      do i= 1+pil_w, l_ni-pil_e
         F_rth  (i,j,l_nk+1) = F_rth  (i,j,l_nk+1) - a3 * F_fis(i,j)
         F_rhell(i,j,1)      = F_rhell(i,j,1)
     $                                - Ver_cstp_8 * F_rth(i,j,1)
         F_rhell(i,j,l_nk)   = F_rhell(i,j,l_nk)
     $                                + Ver_cssp_8 * F_rth(i,j,l_nk+1)
      end do
      end do
!$omp enddo      
!$omp end parallel
      if(matlab_write_L)then      
         call write_matlab_3d(62,F_ruw1)
         call write_matlab_3d(62,F_ruw2)
         call write_matlab_3d(62,F_ru)
         call write_matlab_3d_th(62,F_rth)
         call write_matlab_3d(62,F_rcn)
         if (.not. Schm_hydro_L) then 
            call write_matlab_3d_th(62,F_rvv)
         endif
         call write_matlab_3d(62,F_rhell)
         write(62)Cstv_tau_8
         if(Ptopo_myproc.eq.0)close(62)
      endif
*
*     __________________________________________________________________
*
      return
      end
