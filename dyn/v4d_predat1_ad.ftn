***s/r v4d_predat1_ad - ADJ of v4d_predat1_tl (called when V4dg_part=3) 
*
#include <model_macros_f.h>
*
      subroutine v4d_predat1_ad
*
#include "impnone.cdk"
*
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - remove pi' at the top and replace 
* v2_30                       Schm_cptop_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*
*object
*     see id section
*
*##################################################################
*  REMARK: INPUT TRAJECTORY:  tpt1m,st1m,pipt1m (rebuild from st1m)
*##################################################################
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "v4dg.cdk"
#include "vt1m.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      real    pr1
      integer pnerr, pnlod, pnlkey1(9), i, j, k 
*
      real*8 ZERO_8
      parameter (ZERO_8 = 0.0)
*
      real*8 numm_8, denm_8
      real*8 num_8, den_8, p1_8, p2_8
*
      real wpipt1m(LDIST_SHAPE,l_nk),wqt1m(LDIST_SHAPE,l_nk)
*     ______________________________________________________
*
      if (.not. Schm_cptop_L) call gefstop('v4d_predat1_ad')
      if (.not. Schm_hydro_L) call gefstop('v4d_predat1_ad')
      if (      G_lam       ) call gefstop('v4d_predat1_ad')
*     ______________________________________________________
*
      if (Lun_out.gt.0) write(Lun_out,1000) 
*
*     Get fields in memory
*     --------------------
      pnlkey1(1) = VMM_KEY(tplt1)
      pnlkey1(2) = VMM_KEY(gptx)
      pnlkey1(3) = VMM_KEY(st1)
      pnlkey1(4) = VMM_KEY(fipt1)
      pnlkey1(5) = VMM_KEY(tpt1)
      pnlkey1(6) = VMM_KEY(pipt1)
      pnlod = 6 
*
      pnlkey1(pnlod + 1) = VMM_KEY(st1m )
      pnlkey1(pnlod + 2) = VMM_KEY(tpt1m)
      pnlod = pnlod + 2 
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(gptx)
      pnerr = VMM_GET_VAR(st1)
      pnerr = VMM_GET_VAR(fipt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(pipt1)
*
      pnerr = VMM_GET_VAR(st1m )
      pnerr = VMM_GET_VAR(tpt1m)
*
*     ----------------
*     START TRAJECTORY
*     ----------------
C     if (.not.G_lam) then
*
*     Recover qt1m as in V4D_PREDAT1_TL
*     ---------------------------------
      do k=1,G_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
      wqt1m(i,j,k) = alog( geomg_pia(k) + geomg_pib(k)*exp(st1m(i,j)) )
*
      end do
      end do
      end do
*
C     endif
*
*     Recover pipt1m from exp(qt1m) as in V4D_PREDAT1_TL 
*     --------------------------------------------------
      do k=2,G_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
      wpipt1m(i,j,k) = exp(wqt1m(i,j,k)) - geomg_z_8(k)
*
      end do
      end do
      end do
*
      do j= 1, l_nj
      do i= 1, l_ni
*
      wpipt1m(i,j,1) = 0.
*
      end do
      end do
*
*     --------------
*     END TRAJECTORY
*     --------------
*
*     ADJ of
*     -------------------------------------------
*     Set dependent variables when V4dg_part.eq.3
*     -------------------------------------------
      if(V4dg_part.eq.3) then
*
*     ADJ of
*     Compute P and T'
*                    lin
*     ------------------
      do k=G_nk,1,-1
         pr1 = Cstv_tstr_8*(geomg_pib(k)/geomg_z_8(k) - geomg_dpib(k))
      do j= 1,l_nj
      do i= 1,l_ni
*
*        ADJ 
*        ---
         st1(i,j) = pr1 * tplt1(i,j,k) + st1(i,j)
*
*        ADJ 
*        ---
         pipt1(i,j,k) =
     %                  (-1)*(
     %                  (Cstv_tstr_8+tpt1m(i,j,k) )*
     %               (1.0+geomg_dpib(k)*(exp(st1m(i,j))-1.)          )*
     %      geomg_z_8(k) / (geomg_z_8(k) + wpipt1m(i,j,k))**2
     %                       )*tplt1(i,j,k)                + pipt1(i,j,k)
*
         st1(i,j)     =
     %                  (Cstv_tstr_8+tpt1m(i,j,k) )*
     %               (    geomg_dpib(k)* exp(st1m(i,j))*tplt1(i,j,k) )*
     %      geomg_z_8(k) / (geomg_z_8(k) + wpipt1m(i,j,k)) + st1(i,j)
*
         tpt1(i,j,k)  =
     %                  (            tplt1(i,j,k) )*
     %               (1.0+geomg_dpib(k)*(exp(st1m(i,j))-1.)          )*
     %      geomg_z_8(k) / (geomg_z_8(k) + wpipt1m(i,j,k)) + tpt1(i,j,k)
*
         tplt1(i,j,k) = ZERO_8
*
      end do
      end do
      end do
*
      do k=G_nk,1,-1
         pr1 = Dcst_rgasd_8 * Cstv_tstr_8 * geomg_pib(k) / geomg_z_8(k)
         do j= 1, l_nj
         do i= 1, l_ni
*
*           ADJ 
*           ---
            fipt1(i,j,k) =       gptx(i,j,k) + fipt1(i,j,k)
            st1(i,j)     = pr1 * gptx(i,j,k) + st1(i,j)
            gptx(i,j,k)  = ZERO_8
*
         end do
         end do
      end do
*
      endif
*
      pnerr = vmmuld(-1,0)
*
*     Get fields in memory
*     --------------------
      pnlkey1(1) = VMM_KEY(st1  )
      pnlkey1(2) = VMM_KEY(qt1  )
      pnlkey1(3) = VMM_KEY(pipt1)
      pnlkey1(4) = VMM_KEY(tt1  )
      pnlkey1(5) = VMM_KEY(tpt1 )
      pnlod = 5 
*
      pnlkey1(pnlod+1) = VMM_KEY(st1m )
      pnlod = pnlod+1 
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr = VMM_GET_VAR(st1  )
      pnerr = VMM_GET_VAR(qt1  )
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(tt1  )
      pnerr = VMM_GET_VAR(tpt1 )
*
      pnerr = VMM_GET_VAR(st1m )
*
*     ADJ of
*     -------------------------------------------
*     Set dependent variables when V4dg_part.eq.3
*     -------------------------------------------
      if(V4dg_part.eq.3) then
*
*     ADJ of
*     Compute pi'
*     -----------
*
      do j= 1, l_nj
      do i= 1, l_ni
*
*     ADJ
*     ---
      pipt1(i,j,1) = ZERO_8
*
      end do
      end do
*
      do k=2,G_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
*     ADJ 
*     ---
*
         qt1(i,j,k)   = exp(wqt1m(i,j,k)) * pipt1(i,j,k) + qt1(i,j,k)
         pipt1(i,j,k) = ZERO_8
*
      end do
      end do
      end do
*
      endif
*
*     ADJ of
*     -------------------------------------------
*     Set dependent variables when V4dg_part.eq.3
*     -------------------------------------------
      if(V4dg_part.eq.3) then
*
*     ADJ of
*     Compute q
*     ---------
      if (.not.G_lam) then
      do k=G_nk,1,-1
      do j= 1, l_nj
      do i= 1, l_ni
*
         st1(i,j)   = ( geomg_pib(k)*exp(st1m(i,j))*qt1(i,j,k)     )/
     %                ( geomg_pia(k) + geomg_pib(k)*exp(st1m(i,j)) )
     %                + st1(i,j)
         qt1(i,j,k) = ZERO_8

      end do
      end do
      end do
      endif
*
      endif
*
*     ADJ of
*     -------------------------------------------
*     Set dependent variables when V4dg_part.eq.3
*     -------------------------------------------
      if(V4dg_part.eq.3) then
*
*     ADJ of
*     Compute T from T'
*     -----------------
      do k=1,G_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
*        ADJ 
*        ---
         tpt1(i,j,k) = tt1(i,j,k) + tpt1(i,j,k)
         tt1(i,j,k)  = ZERO_8
*
      end do
      end do
      end do
*
      endif
*
      pnerr = vmmuld(-1,0)
*
*     ADJ of
*     -------------------------------------------
*     Set dependent variables phi',phi from T',s'
*     -------------------------------------------
      if(V4dg_part.eq.3) call v4d_vtap_ad () 
*
1000  format(  'ADJ of PREPROCESSING DATA: (S/R V4D_PREDAT1_AD PART 3)',
     %       /,'======================================================',/)
*
      return
      end
