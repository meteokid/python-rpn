!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
*** s/r uvs2psd - Computes model coordinate vertical velocity "psd"
*                 diagnostically.
*
#include "model_macros_f.h"
*
      subroutine uvs2psd (F_psd, F_uu, F_vv, F_s, DIST_DIM, Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
      real    F_psd(DIST_SHAPE,Nk+1), F_s (DIST_SHAPE),
     $        F_uu (DIST_SHAPE,Nk)  , F_vv(DIST_SHAPE,Nk)
*
*authors
*      Plante A. juin 2006 based on Methot et Patoine - sept 1995 - cmc
*
*revision
* v4_00 - Plante A.         - initial MPI version 
* v4_XX - Tanguay M.        - SETTLS option 
*
*arguments
*______________________________________________________________________
*        |                                             |           |   |
* NAME   |             DESCRIPTION                     | DIMENSION |I/O|
*--------|---------------------------------------------|-----------|---|
* F_psd  | vertical velocity ( pi*-dot )               | 3D (Nk+1) | o |
*--------|---------------------------------------------|-----------|---|
* F_uu   | x component of velocity                     | 3D (Nk)   | i |
* F_vv   | y component of velocity                     | 3D (Nk)   | i |
* F_s    | s log of surface pressure over constant     | 2D (1)    | i |
*________|_____________________________________________|___________|___|
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "intuv.cdk"
#include "type.cdk"
#include "ver.cdk"
*
*modules
*
      integer i, j, k,i0,in,j0,jn
      real pra,prb,prc
      real uv(DIST_SHAPE,Nk,2),dvi(DIST_SHAPE,Nk+1)
      real w2(DIST_SHAPE,Nk)
*
      real dpdn_m(DIST_SHAPE,Nk),dpdn_t(DIST_SHAPE,Nk+1),
     %     wk1(DIST_SHAPE,Nk),wk2(DIST_SHAPE,Nk)
*     ________________________________________________________________
*
      call rpn_comm_xch_halo( F_s, LDIST_DIM, l_ni, l_nj , 1,
     %                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
!$omp parallel private (pra,prb,prc)
*
!$omp do
      do k = 1,Nk
         do j = 1,l_njv+1
         do i = 1,l_niu+1
            wk1   (i,j,k) = exp(Ver_z_8%m(k) + Ver_b_8%m   (k) * F_s(i,j))
            wk2   (i,j,k) =               1. + Ver_dbdz_8%m(k) * F_s(i,j)
            dpdn_m(i,j,k) = wk1(i,j,k)*wk2(i,j,k)
         end do
         end do
      end do
!$omp enddo
*
!$omp do
      do k = 2,Nk
         do j = 1,l_njv+1
         do i = 1,l_niu+1
            wk1   (i,j,k) = exp(Ver_z_8%t(k) + Ver_b_8%t   (k) * F_s(i,j))
            wk2   (i,j,k) =               1. + Ver_dbdz_8%t(k) * F_s(i,j)
            dpdn_t(i,j,k) = wk1(i,j,k)*wk2(i,j,k)
         end do
         end do
      end do
!$omp enddo
*
*     compute  \/ . ( V dpi/dpi )
*
!$omp do
      do k=1,Nk
         do j = 1, l_nj
         do i = 1, l_niu
            uv(i,j,k,1) = F_uu(i,j,k) * (
     $      (1.-intuv_c0xxu_8(i))*dpdn_m(i,  j,k)
     $       +  intuv_c0xxu_8(i) *dpdn_m(i+1,j,k)
     $                                  )
         end do
         end do
         do j = 1, l_njv
         do i = 1, l_ni
            uv(i,j,k,2) = F_vv(i,j,k) * (
     $      (1.-intuv_c0yyv_8(j))*dpdn_m(i,j,  k)
     $       +  intuv_c0yyv_8(j) *dpdn_m(i,j+1,k)
     $                                  )
         end do
         end do
      end do
!$omp enddo
*
!$omp single
      call rpn_comm_xch_halo (uv,                    LDIST_DIM, l_niu,l_nj,
     $                 Nk,G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo (uv(l_minx,l_miny,1,2), LDIST_DIM, l_ni,l_njv,
     $                 Nk,G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!$omp end single
*
!$omp do
      do k=1,Nk
         call caldiv_2 ( w2(l_minx,l_miny,k), uv(l_minx,l_miny,k,1), 
     $                   uv(l_minx,l_miny,k,2), LDIST_DIM, 1 )
      end do
!$omp enddo
*
*                   *
*                 pi
*                /  gnk
*                |   __             *      *
*     compute    |   \/ . ( V dpi/dpi ) dpi
*                |
*                /  *
*                 pi
*                   k
*
!$omp single
*
      i0=1
      in=l_niu      
      j0=1
      jn=l_nj
      if (G_lam)then
         if(l_west)  i0 = 2
         if(l_south) j0 = 2
         if(l_north) jn = l_njv
      endif
      call intm2t (dvi,w2,1.0,Ver_dz_8%m,LDIST_DIM,Nk,i0,in,j0,jn)
*
!$omp end single
*
*                .*
*     compute pi
*                k
*
!$omp do
      do k=1,Nk+1
         if (G_lam)then
c           For glbstat only.
            F_psd(1:l_ni,1:l_nj,k)=0.
         endif
         if(k.eq.1.or.k.eq.Nk+1)then
            F_psd(i0:in,j0:jn,k) = 0.
         else
            do j=j0,jn
            do i=i0,in
               pra = exp(Ver_z_8%t(k)    + Ver_b_8%t(k) * F_s(i,j))
               prb = exp(Ver_z_8%m(Nk+1) + 1.           * F_s(i,j))
               prc = Ver_b_8%t(k)*(pra/prb) - 1. 
               F_psd(i,j,k) = ( prc * dvi(i,j,1) + dvi(i,j,k) )/dpdn_t(i,j,k)  
            end do
            end do
         endif
      end do
!$omp enddo
*
!$omp end parallel
*
*     ________________________________________________________________
*
      return
      end

