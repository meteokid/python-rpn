!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!/**
subroutine adx_trilin4_tl (F_out   , F_in    , &
                           F_capx  , F_capy  , F_capz  , & 
                           F_out_m , F_in_m  , F_dt    , F_n_m, &
                           F_capx_m, F_capy_m, F_capz_m, & 
                           F_num,i0,in,j0,jn,k0,kn)
!
   implicit none
!
   !@objective TLM of adx_trilin 
!
   !@arguments
   integer :: F_num, F_n_m(F_num),i0,in,j0,jn,kn,k0
   real :: F_dt, F_in(*), F_in_m(*)
   real :: F_out  (F_num), F_capx  (F_num), F_capy  (F_num), F_capz  (F_num)
   real :: F_out_m(F_num), F_capx_m(F_num), F_capy_m(F_num), F_capz_m(F_num)
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!**/
#include "adx_dims.cdk"
!
   integer :: n, o1, o2, i, j, k
   real*8  :: prf1_8  , prf2_8  , prf3_8  , prf4_8
   real*8  :: prf1_m_8, prf2_m_8, prf3_m_8, prf4_m_8
   real*8  :: prf1_y_8, prf2_y_8, prf1_y_m_8, prf2_y_m_8

   !---------------------------------------------------------------------

!$omp parallel do private(n,o1,o2,prf1_8,prf2_8,prf3_8,prf4_8,     &
!$omp                     prf1_m_8,prf2_m_8,prf3_m_8,prf4_m_8,     &
!$omp                     prf1_y_8,prf2_y_8,prf1_y_m_8,prf2_y_m_8)
   do k=k0,kn
      do j=j0,jn
         do i=i0,in

            n = (k-1)*adx_mlnij + ((j-1)*adx_mlni) + i
            o1 = F_n_m(n)
            o2 = o1 + adx_nit

            !- ---------------
            !- x interpolation 
            !- ---------------

            !TRAJECTORY
            !----------
            prf1_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
            prf2_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)

            !TLM
            !---
            prf1_8 = (1.0 - F_capx_m(n)) * F_in(o1) + F_capx_m(n) * F_in(o1+1) + &
                     (F_in_m(o1+1) - F_in_m(o1)) * F_capx(n) 
            prf2_8 = (1.0 - F_capx_m(n)) * F_in(o2) + F_capx_m(n) * F_in(o2+1) + &
                     (F_in_m(o2+1) - F_in_m(o2)) * F_capx(n) 

            o1 = o1 + adx_nijag
            o2 = o2 + adx_nijag

            !TRAJECTORY
            !----------
            prf3_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
            prf4_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)
  
            !TLM
            !---
            prf3_8 = (1.0 - F_capx_m(n)) * F_in(o1) + F_capx_m(n) * F_in(o1+1) + &
                     (F_in_m(o1+1) - F_in_m(o1)) * F_capx(n) 
            prf4_8 = (1.0 - F_capx_m(n)) * F_in(o2) + F_capx_m(n) * F_in(o2+1) + &
                     (F_in_m(o2+1) - F_in_m(o2)) * F_capx(n) 
  
            !- ---------------
            !- y interpolation 
            !- ---------------

            !TRAJECTORY/TLM
            !--------------
            prf1_y_m_8 = (1.0 - F_capy_m(n)) * prf1_m_8 + F_capy_m(n) * prf2_m_8
            prf1_y_8   = (1.0 - F_capy_m(n)) * prf1_8   + F_capy_m(n) * prf2_8   + &
                         (prf2_m_8 - prf1_m_8) * F_capy(n) 
  
            prf2_y_m_8 = (1.0 - F_capy_m(n)) * prf3_m_8 + F_capy_m(n) * prf4_m_8
            prf2_y_8   = (1.0 - F_capy_m(n)) * prf3_8   + F_capy_m(n) * prf4_8   + &
                         (prf4_m_8 - prf3_m_8) * F_capy(n) 

            !- ---------------
            !- z interpolation 
            !- ---------------
  
            F_out_m(n) = ( (1.0 - F_capz_m(n)) * prf1_y_m_8 + F_capz_m(n)  * prf2_y_m_8 ) * F_dt
            F_out  (n) = ( (1.0 - F_capz_m(n)) * prf1_y_8   + F_capz_m(n)  * prf2_y_8   + & 
                         (prf2_y_m_8 - prf1_y_m_8) * F_capz(n) )  * F_dt

         enddo
      enddo
   enddo
!$omp end parallel do 

   !---------------------------------------------------------------------
   return
end subroutine adx_trilin4_tl
