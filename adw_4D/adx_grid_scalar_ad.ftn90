!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "stop_mpi.h"
#include "msg.h"

!/**
subroutine adx_grid_scalar_ad ( F_fld_adw, F_fld_model,          &
                                F_aminx,F_amaxx,F_aminy,F_amaxy, &
                                F_minx,F_maxx,F_miny,F_maxy,F_nk,F_pol0_L, F_extend_L)

   implicit none
!
   !@objective ADJ of adx_grid_scalar 
!
   !@arguments
   logical :: F_extend_L  !I, Extend field beyond poles
   logical :: F_pol0_L    !I, Set values=0 around poles (e.g. 4 winds)
   integer :: F_aminx,F_amaxx,F_aminy,F_amaxy !I, adw local array bounds
   integer :: F_minx,F_maxx,F_miny,F_maxy     !I, model's local array bounds
   integer :: F_nk        !I, number of levels
   real, dimension(F_minx:F_maxx,F_miny:F_maxy,F_nk) :: &
        F_fld_model       !I, fld on model-grid
   real, dimension(F_aminx:F_amaxx,F_aminy:F_amaxy,F_nk) :: &
        F_fld_adw         !O, fld on adw-grid
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD

!**/
#include "adx_dims.cdk"
   integer :: nrow,i,j,k
   logical :: is_south_L
   real, dimension(:,:,:)  ,allocatable :: in0_fld

   !---------------------------------------------------------------------

   call msg(MSG_DEBUG,'adx_grid_scalar_ad')

   if (adx_lam_L) call handle_error(-1,'adx_grid_scalar_ad','G_lam TO BE UPDATED') 

   if (adx_lam_L) allocate ( in0_fld(F_minx:F_maxx,F_miny:F_maxy,F_nk)   )
   !
   if (adx_lam_L) in0_fld = 0. 

!$omp parallel 

   IF_LAM: if (.not.adx_lam_L) then
      if (adx_is_north) then
         is_south_L = .false.
         call adx_pole0s2_ad(F_fld_adw, &
              F_aminx,F_amaxx,F_aminy,F_amaxy,F_minx,F_maxx,F_miny,F_maxy,&
              F_nk, F_pol0_L, F_extend_L, is_south_L)
      endif

      if (adx_is_south) then
         is_south_L = .true.
         call adx_pole0s2_ad(F_fld_adw, &
              F_aminx,F_amaxx,F_aminy,F_amaxy,F_minx,F_maxx,F_miny,F_maxy,&
              F_nk, F_pol0_L, F_extend_L, is_south_L)
      endif
   endif IF_LAM

!$omp end parallel 

   nrow = 999
   if (adx_lam_L) nrow = 0
   call rpn_comm_adj_halox( &
        F_fld_model, F_minx,F_maxx,F_miny,F_maxy, &
        adx_mlni, adx_mlnj, F_nk, adx_halox, adx_haloy, &
        adx_is_period_x, adx_is_period_y, &
        F_fld_adw, F_aminx,F_amaxx,F_aminy,F_amaxy, adx_lni, nrow)
   !
   if (adx_lam_L) then 
!$omp parallel do 
      do k=1,F_nk
         do j=F_miny,F_maxy
            do i=F_minx,F_maxx
               F_fld_model(i,j,k) = in0_fld(i,j,k) + F_fld_model(i,j,k)
            end do
         end do
      end do
!$omp end parallel do 
   endif

   !
   call msg(MSG_DEBUG,'adx_grid_scalar_ad [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_grid_scalar_ad
