!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

subroutine adx_lag3d_tricub_tl (F_out  , F_in  , F_x  , F_y  , F_z  , &
                                F_out_m, F_in_m, F_x_m, F_y_m, F_z_m, &
                                adx_y00_8,adx_x00_8,p_z00_8,adx_ovdx_8,adx_ovdy_8,adx_ovdz_8, &
                                adx_lcx,adx_lcy,p_lcz, adx_bsx_8,adx_bsy_8,p_bsz_8, &
                                adx_xabcd_8,adx_xbacd_8,adx_xcabd_8,adx_xdabc_8, &
                                adx_yabcd_8,adx_ybacd_8,adx_ycabd_8,adx_ydabc_8, &
                                p_zabcd_8,p_zbacd_8, p_zcabd_8, p_zdabc_8, p_zbc_8,&
                                F_num, F_mono_L, i0, in, j0, jn, k0, F_nk, kkmax)
!
   implicit none
#include <arch_specific.hf>
!
   !@objective TLM of adx_lag3d_tricub 
!
   !@arguments
   integer :: F_num            !I, number points
   integer :: F_nk             !I, number of vertical levels
   integer :: i0,in,j0,jn,k0   !I, scope of operator
   logical :: F_mono_L         !I, .true. monotonic interpolation
   real,dimension(F_num) ::  &
        F_x  , F_y  , F_z  , & !I, interpolation target x,y,z coordinates
        F_x_m, F_y_m, F_z_m    !I, interpolation target x,y,z coordinates TRAJ 
   real,dimension(*) :: &
        F_in, F_in_m           !I, field to interpolate (and TRAJ)
   real,dimension(F_num) :: &
        F_out, F_out_m         !O, result of interpolation (and TRAJ) 

   integer :: kkmax
   real*8  :: p_z00_8

   !TODO: specify min:max if not starting from zero
   integer,dimension(*) :: p_lcz
   real*8, dimension(0:kkmax+2) :: p_bsz_8
   real*8, dimension(*) :: p_zbc_8, p_zabcd_8,p_zbacd_8, p_zcabd_8, p_zdabc_8

   integer,dimension(*) :: adx_lcx,adx_lcy
   real*8, dimension(*) :: adx_bsx_8,adx_bsy_8
   real*8, dimension(*) :: adx_xabcd_8,adx_xbacd_8,adx_xcabd_8,adx_xdabc_8
   real*8, dimension(*) :: adx_yabcd_8,adx_ybacd_8,adx_ycabd_8,adx_ydabc_8
   real*8  :: adx_y00_8,adx_x00_8,adx_ovdx_8,adx_ovdy_8,adx_ovdz_8
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!
!**/

!#undef __ADX_DIMS__
#include "adx_dims.cdk"

   integer :: n,i,j,k,ii,jj,kk
   logical :: zcubic_L

   real :: prmin, prmax, prmin_m, prmax_m

   integer :: o1, o2, o3, o4
   real*8  :: a1, a2, a3, a4
   real*8  :: b1, b2, b3, b4
   real*8  :: c1, c2, c3, c4
   real*8  :: d1, d2, d3, d4
   real*8  :: p1, p2, p3, p4
   real*8  :: rri,rrj,rrk,ra,rb,rc,rd

   real*8  :: rri_m,rrj_m,rrk_m

   real*8  :: a1_m, a2_m, a3_m, a4_m
   real*8  :: b1_m, b2_m, b3_m, b4_m
   real*8  :: c1_m, c2_m, c3_m, c4_m
   real*8  :: d1_m, d2_m, d3_m, d4_m
   real*8  :: p1_m, p2_m, p3_m, p4_m

   real*8 :: triprd,za,zb,zc,zd
   triprd(za,zb,zc,zd)=(za-zb)*(za-zc)*(za-zd)

   real*8 :: triprd_tl,za_m
   triprd_tl(za,za_m,zb,zc,zd)= &
             za*(za_m-zc)*(za_m-zd)+(za_m-zb)*za*(za_m-zd)+(za_m-zb)*(za_m-zc)*za

   !---------------------------------------------------------------------

!$omp do
   DO_K2: do k=k0,F_nk
      DO_J2: do  j=j0,jn
         DO_I2: do  i=i0,in

            n = (k-1)*Adx_mlnij + ((j-1)*adx_mlni) + i

            !TRAJECTORY
            !----------
            rri_m= F_x_m(n)
            ii = (rri_m - adx_x00_8) * adx_ovdx_8
            ii = adx_lcx(ii+1) + 1
            if (rri_m < adx_bsx_8(ii)) ii = ii - 1
            ii = max(2,min(ii,Adx_iimax))

            !TLM
            !---
            rri= F_x(n)

            !TRAJECTORY
            !----------
            rrj_m= F_y_m(n)
            jj = (rrj_m - adx_y00_8) * adx_ovdy_8
            jj = adx_lcy(jj+1) + 1
            if (rrj_m < adx_bsy_8(jj)) jj = jj - 1
            jj = max(adx_haloy,min(jj,Adx_jjmax))

            !TLM
            !---
            rrj= F_y(n)

            !TRAJECTORY
            !----------
            rrk_m= F_z_m(n)
            kk = (rrk_m - p_z00_8) * adx_ovdz_8
            kk = p_lcz(kk+1)
            if (rrk_m < p_bsz_8(kk)) kk = kk - 1
            kk = min(kkmax-1,max(0,kk))

            !TLM
            !---
            rrk= F_z(n)

            zcubic_L = (kk > 0) .and. (kk < kkmax-1)

            !-----------------
            !- x interpolation
            !-----------------

            !TRAJECTORY
            !----------
            ra = adx_bsx_8(ii-1)
            rb = adx_bsx_8(ii  )
            rc = adx_bsx_8(ii+1)
            rd = adx_bsx_8(ii+2)
            p1_m = triprd(rri_m,rb,rc,rd)*adx_xabcd_8(ii)
            p2_m = triprd(rri_m,ra,rc,rd)*adx_xbacd_8(ii)
            p3_m = triprd(rri_m,ra,rb,rd)*adx_xcabd_8(ii)
            p4_m = triprd(rri_m,ra,rb,rc)*adx_xdabc_8(ii)

            !TLM
            !---
            p1 = triprd_tl(rri,rri_m,rb,rc,rd)*adx_xabcd_8(ii)
            p2 = triprd_tl(rri,rri_m,ra,rc,rd)*adx_xbacd_8(ii)
            p3 = triprd_tl(rri,rri_m,ra,rb,rd)*adx_xcabd_8(ii)
            p4 = triprd_tl(rri,rri_m,ra,rb,rc)*adx_xdabc_8(ii)
 
            o2 = (kk-1)*Adx_nijag + (jj-Adx_int_j_off-1)*Adx_nit + (ii-Adx_int_i_off)
            o1 = o2-Adx_nit
            o3 = o2+Adx_nit
            o4 = o3+Adx_nit
 
            if (zcubic_L) then

               !TRAJECTORY
               !----------

               a1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
               a2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
               a3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
               a4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

               !TLM
               !---
               a1  = p1  * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2) &
                   + p1_m* F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
               a2  = p1  * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2) &
                   + p1_m* F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
               a3  = p1  * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2) &
                   + p1_m* F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
               a4  = p1  * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2) &
                   + p1_m* F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
            endif

            o1 = o1 + Adx_nijag
            o2 = o2 + Adx_nijag
            o3 = o3 + Adx_nijag
            o4 = o4 + Adx_nijag

            if (F_mono_L) then
 
               !TRAJECTORY and TLM
               !------------------

               prmax_m = F_in_m(o2)  
               prmax   = F_in  (o2)  
               if(F_in_m(o2+1).gt.prmax_m) then
                  prmax_m = F_in_m(o2+1)
                  prmax   = F_in  (o2+1)
               endif
               if(F_in_m(o3)  .gt.prmax_m) then
                  prmax_m = F_in_m(o3)
                  prmax   = F_in  (o3)
               endif
               if(F_in_m(o3+1).gt.prmax_m) then
                  prmax_m = F_in_m(o3+1)
                  prmax   = F_in  (o3+1)
               endif
 
               prmin_m = F_in_m(o2)
               prmin   = F_in  (o2)
               if(F_in_m(o2+1).lt.prmin_m) then
                  prmin_m = F_in_m(o2+1)
                  prmin   = F_in  (o2+1)
               endif
               if(F_in_m(o3)  .lt.prmin_m) then
                  prmin_m = F_in_m(o3)
                  prmin   = F_in  (o3)
               endif
               if(F_in_m(o3+1).lt.prmin_m) then
                  prmin_m = F_in_m(o3+1)
                  prmin   = F_in  (o3+1)
               endif

            endif

            !TRAJECTORY
            !----------

            b1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
            b2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
            b3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
            b4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

            !TLM
            !---
            b1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2) &
                + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
            b2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2) &
                + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
            b3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2) &
                + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
            b4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2) &
                + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)

            o1 = o1 + Adx_nijag
            o2 = o2 + Adx_nijag
            o3 = o3 + Adx_nijag
            o4 = o4 + Adx_nijag

            if (F_mono_L) then

               !TRAJECTORY and TLM
               !------------------

               if(F_in_m(o2)  .gt.prmax_m) then
                  prmax_m = F_in_m(o2)
                  prmax   = F_in  (o2)
               endif
               if(F_in_m(o2+1).gt.prmax_m) then
                  prmax_m = F_in_m(o2+1)
                  prmax   = F_in  (o2+1)
               endif
               if(F_in_m(o3)  .gt.prmax_m) then
                  prmax_m = F_in_m(o3)
                  prmax   = F_in  (o3)
               endif
               if(F_in_m(o3+1).gt.prmax_m) then
                  prmax_m = F_in_m(o3+1)
                  prmax   = F_in  (o3+1)
               endif

               if(F_in_m(o2)  .lt.prmin_m) then
                  prmin_m = F_in_m(o2)
                  prmin   = F_in  (o2)
               endif
               if(F_in_m(o2+1).lt.prmin_m) then
                  prmin_m = F_in_m(o2+1)
                  prmin   = F_in  (o2+1)
               endif
               if(F_in_m(o3)  .lt.prmin_m) then
                  prmin_m = F_in_m(o3)
                  prmin   = F_in  (o3)
               endif
               if(F_in_m(o3+1).lt.prmin_m) then
                  prmin_m = F_in_m(o3+1)
                  prmin   = F_in  (o3+1)
               endif

            endif

            !TRAJECTORY
            !----------

            c1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
            c2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
            c3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
            c4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

            !TLM
            !---
            c1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2) &
                + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
            c2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2) &
                + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
            c3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2) &
                + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
            c4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2) &
                + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)

            if (zcubic_L) then

               o1 = o1 + Adx_nijag
               o2 = o2 + Adx_nijag
               o3 = o3 + Adx_nijag
               o4 = o4 + Adx_nijag

               !TRAJECTORY
               !----------

               d1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
               d2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
               d3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
               d4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

               !TLM
               !---

               d1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2) &
                   + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
               d2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2) &
                   + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
               d3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2) &
                   + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
               d4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2) &
                   + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)

            endif

            !-----------------
            !- y interpolation
            !-----------------

            !TRAJECTORY
            !----------
            ra = adx_bsy_8(jj-1)
            rb = adx_bsy_8(jj  )
            rc = adx_bsy_8(jj+1)
            rd = adx_bsy_8(jj+2)

            p1_m = triprd(rrj_m,rb,rc,rd)*adx_yabcd_8(jj)
            p2_m = triprd(rrj_m,ra,rc,rd)*adx_ybacd_8(jj)
            p3_m = triprd(rrj_m,ra,rb,rd)*adx_ycabd_8(jj)
            p4_m = triprd(rrj_m,ra,rb,rc)*adx_ydabc_8(jj)

            !TLM
            !---

            p1 = triprd_tl(rrj,rrj_m,rb,rc,rd)*adx_yabcd_8(jj)
            p2 = triprd_tl(rrj,rrj_m,ra,rc,rd)*adx_ybacd_8(jj)
            p3 = triprd_tl(rrj,rrj_m,ra,rb,rd)*adx_ycabd_8(jj)
            p4 = triprd_tl(rrj,rrj_m,ra,rb,rc)*adx_ydabc_8(jj)

            !TLM
            !---
            b1  = p1   * b1_m + p2   * b2_m + p3   * b3_m + p4   * b4_m &
                + p1_m * b1   + p2_m * b2   + p3_m * b3   + p4_m * b4
            c1  = p1   * c1_m + p2   * c2_m + p3   * c3_m + p4   * c4_m & 
                + p1_m * c1   + p2_m * c2   + p3_m * c3   + p4_m * c4

            !TRAJECTORY
            !----------
            b1_m = p1_m * b1_m + p2_m * b2_m + p3_m * b3_m + p4_m * b4_m
            c1_m = p1_m * c1_m + p2_m * c2_m + p3_m * c3_m + p4_m * c4_m

            !-----------------
            !- z interpolation
            !-----------------

            if (zcubic_L) then

               !TLM
               !---
               a1  = p1   * a1_m + p2   * a2_m + p3   * a3_m + p4   * a4_m &
                   + p1_m * a1   + p2_m * a2   + p3_m * a3   + p4_m * a4
               d1  = p1   * d1_m + p2   * d2_m + p3   * d3_m + p4   * d4_m &
                   + p1_m * d1   + p2_m * d2   + p3_m * d3   + p4_m * d4

               !TRAJECTORY
               !----------
               a1_m = p1_m * a1_m + p2_m * a2_m + p3_m * a3_m + p4_m * a4_m
               d1_m = p1_m * d1_m + p2_m * d2_m + p3_m * d3_m + p4_m * d4_m

               ra = p_bsz_8(kk-1)
               rb = p_bsz_8(kk  )
               rc = p_bsz_8(kk+1)
               rd = p_bsz_8(kk+2)

               !TRAJECTORY
               !----------
               p1_m = triprd(rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
               p2_m = triprd(rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
               p3_m = triprd(rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
               p4_m = triprd(rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)

               !TLM
               !---
               p1 = triprd_tl(rrk,rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
               p2 = triprd_tl(rrk,rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
               p3 = triprd_tl(rrk,rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
               p4 = triprd_tl(rrk,rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)

               !TRAJECTORY
               !----------
               F_out_m(n) = p1_m * a1_m + p2_m * b1_m + p3_m * c1_m + p4_m * d1_m 

               !TLM
               !---
               F_out(n) = p1   * a1_m + p2   * b1_m + p3   * c1_m + p4   * d1_m & 
                        + p1_m * a1   + p2_m * b1   + p3_m * c1   + p4_m * d1 

            else

               !TRAJECTORY
               !----------
               p3_m = (rrk_m-p_bsz_8(kk))*p_zbc_8(kk+1)
               p2_m = 1. - p3_m

               !TLM
               !---
               p3 = (rrk)*p_zbc_8(kk+1)
               p2 = - p3

               !TRAJECTORY
               !----------
               F_out_m(n) = p2_m * b1_m + p3_m * c1_m

               !TLM
               !---
               F_out(n) = p2   * b1_m + p3   * c1_m &
                        + p2_m * b1   + p3_m * c1

            endif

            if (F_mono_L) then

               !TRAJECTORY and TLM
               !------------------
               if(F_out_m(n).gt.prmax_m) then
                  F_out_m(n) = prmax_m
                  F_out  (n) = prmax
               endif
               if(F_out_m(n).lt.prmin_m) then
                  F_out_m(n) = prmin_m
                  F_out  (n) = prmin
               endif

            endif

         enddo DO_I2
      enddo DO_J2
   enddo DO_K2
!$omp enddo

   !---------------------------------------------------------------------

   return
end subroutine adx_lag3d_tricub_tl
