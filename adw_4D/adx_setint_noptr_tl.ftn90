!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!/**
subroutine adx_setint_lin_noptr1_tl ( &
                                     F_capx  , F_capy  , F_capz  , &
                                     F_x     , F_y     , F_z     , &
                                     F_n_m   , &
                                     F_capx_m, F_capy_m, F_capz_m, &
                                     F_x_m,    F_y_m   , F_z_m   , &
                                     F_lcx, F_bsx_8, F_dix_8,      &
                                     F_lcy, F_bsy_8, F_diy_8,      &
                                     F_lcz, F_bsz_8, F_diz_8,      &
                                     i0,in,j0,jn,k0,F_nk, F_num,F_nkm)
!
   implicit none
#include <arch_specific.hf>
!
   !@objective TLM of adx_setint_lin_noptr1 
!
   !@arguments
   integer :: F_num           !I, nb points of computations
   integer :: F_nk,F_nkm      !I, nb levels
   integer :: i0,in,j0,jn,k0  !I, scope of the operator
   real,dimension(F_num) :: &
        F_x, F_y, F_z, &             !I, upstream position coor
        F_capz, F_capy, F_capx, &    !O, x precomputed displacements and interp terms
        F_x_m, F_y_m, F_z_m, &       !I, upstream position coor TRAJ
        F_capz_m, F_capy_m, F_capx_m !O, x precomputed displacements and interp terms TRAJ
   integer,dimension(F_num) :: &
        F_n_m                  !O, pos in the 3D volume of interpolation boxes

   integer,dimension(*) :: F_lcx,F_lcy,F_lcz
   real*8, dimension(*) :: F_bsx_8,F_bsy_8
   real*8, dimension(*) :: F_dix_8,F_diy_8
   real*8, dimension(0:2*F_nkm)    :: F_bsz_8
   real*8, dimension(-1:2*F_nkm+2) :: F_diz_8
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD

!**/
#include "adx_dims.cdk"
#include "adx_grid.cdk"
#include "adx_interp.cdk"

   integer :: ii, jj, kk, ij, i, j, k, n
   real*8  :: prd_8, prdt_8, p_z00_8
   real*8  :: prd_m_8, prdt_m_8

   !---------------------------------------------------------------------
   p_z00_8 = adx_verZ_8%t(1)

!$omp parallel do private(n,prd_8,ii,prdt_8,prd_m_8,prdt_m_8,jj,kk,ij)
   do k=k0,F_nk
      do j=j0,jn
         do i=i0,in

            n = (k-1)*adx_mlnij + ((j-1)*adx_mlni) + i

            prd_m_8 = dble(F_x_m(n))
            prd_8   = dble(F_x  (n))

            ii = (prd_m_8 - adx_x00_8) * adx_ovdx_8
            ii = F_lcx(ii+1) + 1

            ii = max(2,ii)
            ii = min(ii,adx_gni+2*adx_halox-2)

            prdt_m_8 = prd_m_8 - F_bsx_8(ii)
            prdt_8   = prd_8
            if (prdt_m_8 < 0.0) then
               ii = max(2,ii - 1)
               prdt_m_8 = prd_m_8 - F_bsx_8(ii)
            endif
            F_capx_m(n) = prdt_m_8 * F_dix_8(ii)
            F_capx  (n) = prdt_8   * F_dix_8(ii)

            prd_m_8 = dble(F_y_m(n))
            prd_8   = dble(F_y(n))
            jj = (prd_m_8 - adx_y00_8) * adx_ovdy_8
            jj = F_lcy(jj+1) + 1

            jj = max(adx_haloy,jj)
            jj = min(jj,adx_gnj+adx_haloy)

            prdt_m_8 = prd_m_8 - F_bsy_8(jj)
            prdt_8   = prd_8 
            if (prdt_m_8 < 0.0) then
               jj = max(adx_haloy,jj - 1)
               prdt_m_8 = prd_m_8 - F_bsy_8(jj)
            endif
            F_capy_m(n) = prdt_m_8 * F_diy_8(jj)
            F_capy  (n) = prdt_8   * F_diy_8(jj)

            prd_m_8 = dble(F_z_m(n))
            prd_8   = dble(F_z  (n))
            kk = (prd_m_8 - p_z00_8) * adx_ovdz_8
            kk = F_lcz(kk+1)
            prd_m_8 = prd_m_8 - F_bsz_8(kk)
            if (prd_m_8 < 0.0) kk = kk - 1
            F_capz_m(n) = prd_m_8 * F_diz_8(kk)
            F_capz  (n) = prd_8   * F_diz_8(kk)
            if (prd_m_8 < 0.0) F_capz_m(n) = 1.0 + F_capz_m(n)
            ij = (jj-adx_int_j_off-1)*adx_nit + (ii-adx_int_i_off)
            F_n_m(n) = kk*adx_nijag + ij

         enddo
      enddo
   enddo
!$omp end parallel do

   !---------------------------------------------------------------------
   return
end subroutine adx_setint_lin_noptr1_tl
