!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "model_macros_f.h"

!/**
subroutine adx_trilin4_ad (F_out   , F_in    , &
                           F_capx  , F_capy  , F_capz  , &
                                     F_in_m  , F_dt    , F_n_m, &
                           F_capx_m, F_capy_m, F_capz_m, &
                           F_num,F_num_in,i0,in,j0,jn,k0,kn)
!
   implicit none
!
   !@objective ADJ of adx_trilin 
!
   !@arguments
   integer :: F_num, F_n_m(F_num),i0,in,j0,jn,kn,k0,F_num_in
   real :: F_dt, F_in(*), F_in_m(*)
   real :: F_out  (F_num), F_capx  (F_num), F_capy  (F_num), F_capz  (F_num)
   real ::                 F_capx_m(F_num), F_capy_m(F_num), F_capz_m(F_num)
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!
!**/
#include "adx_dims.cdk"
#include "ptopo.cdk"
#include "v4d_cfl.cdk"
#include "lun.cdk"
#include "glb_ld.cdk"
!
   integer :: n, o1, o2, i, j, k, shift
   real*8  :: prf1_8  , prf2_8  , prf3_8  , prf4_8
   real*8  :: prf1_m_8, prf2_m_8, prf3_m_8, prf4_m_8
   real*8  :: prf1_y_8, prf2_y_8, prf1_y_m_8, prf2_y_m_8
   real*8, parameter :: ZERO_8 = 0.0

   logical done_L
   data done_L /.false./
   save done_L
   integer cfl_p(Ptopo_numproc),cfl_n(Ptopo_numproc),iproc,err

   !---------------------------------------------------------------------

   if (.not.done_L) then
!
!        Evaluate min-max vertical CFL
!        -----------------------------
         V4d_cfl_p0 = V4d_cfl_p(k0)
         V4d_cfl_n0 = V4d_cfl_n(k0)
         do k=k0+1,kn
            if (V4d_cfl_p(k).gt.V4d_cfl_p0) then
                V4d_cfl_p0 = V4d_cfl_p(k)
            endif
            if (V4d_cfl_n(k).lt.V4d_cfl_n0) then
                V4d_cfl_n0 = V4d_cfl_n(k)
            endif
         enddo
!
         call RPN_COMM_gather (V4d_cfl_p0,1,"MPI_INTEGER",cfl_p,1, &
                               "MPI_INTEGER",0,"GRID", err)
         call RPN_COMM_gather (V4d_cfl_n0,1,"MPI_INTEGER",cfl_n,1, &
                               "MPI_INTEGER",0,"GRID", err)
!
         if (Ptopo_myproc.eq.0) then
!
            V4d_cfl_p0 = cfl_p(k0)
            V4d_cfl_n0 = cfl_n(k0)
            do iproc = k0+1, Ptopo_numproc
               if (cfl_p(iproc).gt.V4d_cfl_p0) &
                   V4d_cfl_p0 = cfl_p(iproc)
               if (cfl_n(iproc).lt.V4d_cfl_n0) &
                   V4d_cfl_n0 = cfl_n(iproc)
            end do
!
         endif
!
         call RPN_COMM_bcast(V4d_cfl_p0,1,"MPI_INTEGER",0,"grid",err )
         call RPN_COMM_bcast(V4d_cfl_n0,1,"MPI_INTEGER",0,"grid",err )
!
!        Evaluate admissible distance between threads
!        --------------------------------------------
         V4d_cfl_dist = max((kn+Ptopo_npeOpenMP-1)/Ptopo_npeOpenMP, &
                            2 + V4d_cfl_p0 - V4d_cfl_n0)
!
         if (Ptopo_myproc.eq.0.and.Lun_out.gt.0) then
             write(Lun_out,*) 'ADW_TRILIN_AD: max vertical CFL         =',V4d_cfl_p0
             write(Lun_out,*) 'ADW_TRILIN_AD: min vertical CFL         =',V4d_cfl_n0
             write(Lun_out,*) 'ADW_TRILIN_AD: Distance between threads =',V4d_cfl_dist
         endif
!
         done_L = .true.
!
   endif

   !Zero adjoint variables
   !---------------------- 
   prf1_8  = ZERO_8 
   prf2_8  = ZERO_8 
   prf3_8  = ZERO_8 
   prf4_8  = ZERO_8 
   prf1_y_8= ZERO_8 
   prf2_y_8= ZERO_8 

!  Distribute levels respecting admissible distance between threads
!  ----------------------------------------------------------------
   do shift=k0,V4d_cfl_dist

!$omp parallel do private(n,o1,o2,i,j,k,                                           &
!$omp                     prf1_8    ,prf2_8  ,prf3_8  ,prf4_8  ,prf1_y_8,prf2_y_8, &
!$omp                     prf1_m_8  ,prf2_m_8,prf3_m_8,prf4_m_8,                   &
!$omp                     prf1_y_m_8,prf2_y_m_8) shared(shift) 

   do k=shift,kn,V4d_cfl_dist
      do j=jn,j0,-1
         do i=in,i0,-1

            !TRAJECTORY
            !----------

            n = (k-1)*adx_mlnij + ((j-1)*adx_mlni) + i
            o1 = F_n_m(n)
            o2 = o1 + adx_nit

            prf1_m_8   = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
            prf2_m_8   = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)

            o1 = o1 + adx_nijag
            o2 = o2 + adx_nijag
  
            prf3_m_8   = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
            prf4_m_8   = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)

            prf1_y_m_8 = (1.0 - F_capy_m(n)) * prf1_m_8   + F_capy_m(n) * prf2_m_8
            prf2_y_m_8 = (1.0 - F_capy_m(n)) * prf3_m_8   + F_capy_m(n) * prf4_m_8

            !ADJOINT
            !-------

            !- z interpolation 
            !- ---------------
            prf2_y_8  =      F_capz_m(n)  * F_out(n)  * F_dt
            prf1_y_8  = (1.0-F_capz_m(n)) * F_out(n)  * F_dt
            F_capz(n) = (prf2_y_m_8 - prf1_y_m_8)  * F_out(n) * F_dt + F_capz(n) 
            F_out (n) = ZERO_8

            !- y interpolation 
            !- ---------------
            prf4_8    =      F_capy_m(n)  * prf2_y_8
            prf3_8    = (1.0-F_capy_m(n)) * prf2_y_8

            prf2_8    =      F_capy_m(n)  * prf1_y_8
            prf1_8    = (1.0-F_capy_m(n)) * prf1_y_8
            F_capy(n) =   (prf4_m_8 - prf3_m_8) * prf2_y_8 &
                        + (prf2_m_8 - prf1_m_8) * prf1_y_8 + F_capy(n)

            !- x interpolation 
            !- ---------------
            F_in(o2  ) =  (1.0 - F_capx_m(n)) * prf4_8  + F_in(o2  )
            F_in(o2+1) =         F_capx_m(n)  * prf4_8  + F_in(o2+1)

            F_in(o1  ) =  (1.0 - F_capx_m(n)) * prf3_8  + F_in(o1  )
            F_in(o1+1) =         F_capx_m(n)  * prf3_8  + F_in(o1+1) 

            F_capx(n)  =  prf4_8 * (F_in_m(o2+1) - F_in_m(o2)) + &  
                          prf3_8 * (F_in_m(o1+1) - F_in_m(o1)) + F_capx(n)  

            prf4_8 = ZERO_8
            prf3_8 = ZERO_8

            o1 = o1 - adx_nijag
            o2 = o2 - adx_nijag
 
            F_in(o2  ) =  (1.0 - F_capx_m(n)) * prf2_8  +  F_in(o2  ) 
            F_in(o2+1) =         F_capx_m(n)  * prf2_8  +  F_in(o2+1) 

            F_in(o1  ) =  (1.0 - F_capx_m(n)) * prf1_8  +  F_in(o1  ) 
            F_in(o1+1) =         F_capx_m(n)  * prf1_8  +  F_in(o1+1) 

            F_capx(n)  =  prf2_8 * (F_in_m(o2+1) - F_in_m(o2)) + &  
                          prf1_8 * (F_in_m(o1+1) - F_in_m(o1)) + F_capx(n)  

            prf2_8 = ZERO_8
            prf1_8 = ZERO_8

         enddo
      enddo
   enddo
!$omp end parallel do

   enddo

   !---------------------------------------------------------------------
   return
end subroutine adx_trilin4_ad
