!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "model_macros_f.h"

!/**
subroutine adx_trilin_turbo4_tl (F_out   , F_in    ,                      &
                                           F_capx  , F_capy  , F_capz  ,  & 
                                 F_x     , F_y     , F_z     ,            &
                                 F_out_m , F_in_m  , F_dt    ,            &
                                 F_n_m   , F_capx_m, F_capy_m, F_capz_m,  & 
                                 F_x_m   , F_y_m   , F_z_m   ,            &
                                 F_ii    , F_jj    , F_kk    ,            &
                                 F_lcx   , F_bsx_8 , F_dix_8 ,            &
                                 F_lcy   , F_bsy_8 , F_diy_8 ,            &
                                 F_lcz   , F_bsz_8 , F_diz_8 ,            &
                                 F_num,i0,in,j0,jn,k0,kn,F_nkm)
!
   implicit none
!
   !@objective TLM of adx_trilin_turbo 
!
   !@arguments
   integer :: F_num, F_n_m(F_num),i0,in,j0,jn,kn,k0,F_nkm
   real :: F_dt, F_in(*), F_in_m(*)
   real :: F_out  (F_num), F_capx  (F_num), F_capy  (F_num), F_capz  (F_num)
   real :: F_out_m(F_num), F_capx_m(F_num), F_capy_m(F_num), F_capz_m(F_num)
   real,dimension(F_num) :: &
        F_x, F_y, F_z      ,&  !I, upstream position coor
        F_x_m, F_y_m, F_z_m    !I, upstream position coor TRAJ
   integer,dimension(F_num) :: F_ii,F_jj,F_kk 
!
   integer,dimension(*) :: F_lcx,F_lcy,F_lcz
   real*8, dimension(*) :: F_bsx_8,F_bsy_8
   real*8, dimension(*) :: F_dix_8,F_diy_8
   real*8, dimension(0:2*F_nkm)    :: F_bsz_8
   real*8, dimension(-1:2*F_nkm+2) :: F_diz_8
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!**/
#include "adx_dims.cdk"
#include "adx_grid.cdk"
#include "adx_interp.cdk"
#include "adx_nosetint.cdk"
!
   integer :: n, o1, o2, i, j, k, ii, jj, kk, ij, n0
   real*8  :: prf1_8  , prf2_8  , prf3_8  , prf4_8
   real*8  :: prf1_m_8, prf2_m_8, prf3_m_8, prf4_m_8
   real*8  :: prf1_y_8, prf2_y_8, prf1_y_m_8, prf2_y_m_8

   real*8  :: prd_8, prdt_8, p_z00_8
   real*8  :: prd_m_8, prdt_m_8

   !---------------------------------------------------------------------

!  TRAJECTORY
!  ----------
   p_z00_8 = adx_verZ_8%t(1)

!$omp parallel do private(n,o1,o2,prf1_8,prf2_8,prf3_8,prf4_8,     &
!$omp                     prf1_m_8,prf2_m_8,prf3_m_8,prf4_m_8,     &
!$omp                     prf1_y_8,prf2_y_8,prf1_y_m_8,prf2_y_m_8, &
!$omp                     prd_8,prdt_8,prd_m_8,prdt_m_8,ii,jj,kk,ij)
   do k=k0,kn
      do j=j0,jn

         n0 = (k-1)*adx_mlnij + ((j-1)*adx_mlni) 

!        ------------------
!        TRAJECTORY (START)
!        ------------------
         if ( Adx_hor_L ) then

         do i=i0,in

            n  = n0 + i

            prd_m_8 = dble(F_x_m(n))
            ii = (prd_m_8 - adx_x00_8) * adx_ovdx_8
            ii = F_lcx(ii+1) + 1
            ii = max(2,ii)
            ii = min(ii,adx_gni+2*adx_halox-2)

            prdt_m_8 = prd_m_8 - F_bsx_8(ii)
            if (prdt_m_8 < 0.0) then
               ii = max(2,ii - 1)
               prdt_m_8 = prd_m_8 - F_bsx_8(ii)
            endif
            F_ii    (n) = ii
            F_capx_m(n) = prdt_m_8 * F_dix_8(ii)

            prd_m_8 = dble(F_y_m(n))
            jj = (prd_m_8 - adx_y00_8) * adx_ovdy_8
            jj = F_lcy(jj+1) + 1
            jj = max(adx_haloy,jj)
            jj = min(jj,adx_gnj+adx_haloy)

            prdt_m_8 = prd_m_8 - F_bsy_8(jj)
            if (prdt_m_8 < 0.0) then
               jj = max(adx_haloy,jj - 1)
               prdt_m_8 = prd_m_8 - F_bsy_8(jj)
            endif
            F_jj    (n) = jj 
            F_capy_m(n) = prdt_m_8 * F_diy_8(jj)

            kk = F_kk(n)

            ij = (jj-adx_int_j_off-1)*adx_nit + (ii-adx_int_i_off)
            F_n_m(n) = kk*adx_nijag + ij

         enddo

         endif
         if ( Adx_ver_L ) then

         do i=i0,in

            n  = n0 + i

            ii = F_ii(n)

            jj = F_jj(n)

            prd_m_8 = dble(F_z_m(n))
            kk = (prd_m_8 - p_z00_8) * adx_ovdz_8
            kk = F_lcz(kk+1)

            prd_m_8 = prd_m_8 - F_bsz_8(kk)
            if (prd_m_8 < 0.0) kk = kk - 1
            F_kk    (n) = kk 
            F_capz_m(n) = prd_m_8 * F_diz_8(kk)
            if (prd_m_8 < 0.0) F_capz_m(n) = 1.0 + F_capz_m(n)

            ij = (jj-adx_int_j_off-1)*adx_nit + (ii-adx_int_i_off)
            F_n_m(n) = kk*adx_nijag + ij

         enddo

         endif
!        ----------------
!        TRAJECTORY (END)
!        ----------------

         do i=i0,in

            n = n0 + i

!           TRAJECTORY
!           ----------
            ii = F_ii(n) 
            jj = F_jj(n) 
            kk = F_kk(n) 

!           TLM of SETINT (X)
!           -----------------
            prd_8     = dble(F_x(n))
            prdt_8    = prd_8
            F_capx(n) = prdt_8 * F_dix_8(ii)

!           TLM of SETINT (Y)
!           -----------------
            prd_8     = dble(F_y(n))
            prdt_8    = prd_8
            F_capy(n) = prdt_8 * F_diy_8(jj)

!           TLM of SETINT (Z)
!           -----------------
            prd_8     = dble(F_z(n))
            F_capz(n) = prd_8 * F_diz_8(kk)

            o1 = F_n_m(n)
            o2 = o1 + adx_nit

            !- ---------------
            !- x interpolation 
            !- ---------------

            !TRAJECTORY
            !----------
            prf1_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
            prf2_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)

            !TLM
            !---
            prf1_8 = (1.0 - F_capx_m(n)) * F_in(o1) + F_capx_m(n) * F_in(o1+1) + &
                     (F_in_m(o1+1) - F_in_m(o1)) * F_capx(n) 
            prf2_8 = (1.0 - F_capx_m(n)) * F_in(o2) + F_capx_m(n) * F_in(o2+1) + &
                     (F_in_m(o2+1) - F_in_m(o2)) * F_capx(n) 

            o1 = o1 + adx_nijag
            o2 = o2 + adx_nijag

            !TRAJECTORY
            !----------
            prf3_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
            prf4_m_8 = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)
  
            !TLM
            !---
            prf3_8 = (1.0 - F_capx_m(n)) * F_in(o1) + F_capx_m(n) * F_in(o1+1) + &
                     (F_in_m(o1+1) - F_in_m(o1)) * F_capx(n) 
            prf4_8 = (1.0 - F_capx_m(n)) * F_in(o2) + F_capx_m(n) * F_in(o2+1) + &
                     (F_in_m(o2+1) - F_in_m(o2)) * F_capx(n) 
  
            !- ---------------
            !- y interpolation 
            !- ---------------

            !TRAJECTORY/TLM
            !--------------
            prf1_y_m_8 = (1.0 - F_capy_m(n)) * prf1_m_8 + F_capy_m(n) * prf2_m_8
            prf1_y_8   = (1.0 - F_capy_m(n)) * prf1_8   + F_capy_m(n) * prf2_8   + &
                         (prf2_m_8 - prf1_m_8) * F_capy(n) 
  
            prf2_y_m_8 = (1.0 - F_capy_m(n)) * prf3_m_8 + F_capy_m(n) * prf4_m_8
            prf2_y_8   = (1.0 - F_capy_m(n)) * prf3_8   + F_capy_m(n) * prf4_8   + &
                         (prf4_m_8 - prf3_m_8) * F_capy(n) 

            !- ---------------
            !- z interpolation 
            !- ---------------
  
            F_out_m(n) = ( (1.0 - F_capz_m(n)) * prf1_y_m_8 + F_capz_m(n)  * prf2_y_m_8 ) * F_dt
            F_out  (n) = ( (1.0 - F_capz_m(n)) * prf1_y_8   + F_capz_m(n)  * prf2_y_8   + & 
                         (prf2_y_m_8 - prf1_y_m_8) * F_capz(n) )  * F_dt

         enddo

      enddo
   enddo
!$omp end parallel do 

   Adx_hor_L = .false.
   Adx_ver_L = .false.

   !---------------------------------------------------------------------
   return
end subroutine adx_trilin_turbo4_tl
