!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "constants.h"
#include "msg.h"
#include "stop_mpi.h"

#include "model_macros_f.h"

!/**
subroutine adx_main_2_pos4_ad( F_nb_iter  ,F_l_S, & 
!
                               F_px  ,F_py  ,F_pz  , &
                               F_u   ,F_v   ,F_w   , &
                               F_xth ,F_yth ,F_zth , &
                               F_xcth,F_ycth,F_zcth, &
                               F_xct1,F_yct1,F_zct1, &
!
                               F_px_m  ,F_py_m  ,F_pz_m  , &
                               F_u_m   ,F_v_m   ,F_w_m   , &
                               F_xth_m ,F_yth_m ,F_zth_m , &
                               F_xcth_m,F_ycth_m,F_zcth_m, &
                               F_xct1_m,F_yct1_m,F_zct1_m, &
!
                               F_aminx, F_amaxx, F_aminy, F_amaxy, &
                               F_ni, F_nj, k0, F_nk, F_nk_super)
!
   implicit none
!
   !@objective ADJ of adx_main_2_pos 
!
   !@arguments
   integer :: F_nb_iter          !I, total number of iterations for traj
   character(len=1) :: F_l_S     !I, m/t for momentum or thermo level
   integer :: F_aminx, F_amaxx, F_aminy, F_amaxy !I, wind fields array bounds
   integer :: F_ni, F_nj         !I, dims of position fields
   integer :: F_nk, F_nk_super   !I, nb levels
   integer :: k0                 !I, scope of the operation k0 to F_nk
   real, dimension(F_ni,F_nj,F_nk) :: &
        F_px  , F_py  , F_pz, &  !O, upstream positions valid at t1
        F_px_m, F_py_m, F_pz_m   !O, upstream positions valid at t1 TRAJ
   real,dimension(F_aminx:F_amaxx,F_aminy:F_amaxy,F_nk_super),target::&
        F_u   ,F_v   ,F_w, &     !I, real destag winds, super-set (mom+thermo)
        F_u_m ,F_v_m ,F_w_m      !I, real destag winds, super-set (mom+thermo) TRAJ
   real, dimension(F_ni,F_nj,F_nk) :: &
        F_xth   , F_yth   , F_zth   ,& !I/O, upwind longitudes at central time 
        F_xcth  , F_ycth  , F_zcth  ,& !O, upwind cartesian positions at central time
        F_xct1  , F_yct1  , F_zct1  ,& !O, upstream cartesian positions at t1
        F_xth_m , F_yth_m , F_zth_m ,& !I/O, upwind longitudes at central time TRAJ 
        F_xcth_m, F_ycth_m, F_zcth_m,& !O, upwind cartesian positions at central time TRAJ
        F_xct1_m, F_yct1_m, F_zct1_m   !O, upstream cartesian positions at t1 TRAJ
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!**/
#include "adx_nml.cdk"
#include "adx_dims.cdk"
#include "adx_grid.cdk"
#include "adx_dyn.cdk"
#include "adx_poles.cdk"
#include "adx_nosetint.cdk"
#include "adx_interp.cdk"

   real*8, parameter :: PDP_8 = 1.D0 + 1.D-6
   real*8, parameter :: PDM_8 = 1.D0 - 1.D-6
   logical,parameter :: CLIP_TRAJ = .true.
   logical,parameter :: DO_W      = .false.
   logical,parameter :: DO_UV     = .true.
   real, parameter   :: DTH_1     = 1.

   integer :: i, j, k, iter, ioff
   integer :: i0,in,j0,jn
   real    :: dth
   real, dimension(F_ni,F_nj,F_nk) :: wrkx1,wrky1
   real, dimension(F_ni,F_nj,F_nk) :: xgrid,ygrid,zgrid
   !
   real, dimension(F_ni,F_nj,F_nk) :: wrkx1_m,wrky1_m
   real, dimension(F_ni,F_nj,F_nk) :: xgrid_m,ygrid_m,zgrid_m
   logical :: doh_tr_L,doh_ad_L
   !
   real, dimension(F_ni,F_nj,F_nk,F_nb_iter) :: F_zth_1_m , F_yth_4_m  , wrkx1_4_m, wrky1_4_m, &
                                                F_xth_2_m , F_ygrid_2_m, F_zth_2_m,  &
                                                F_xth_3_m , F_ygrid_3_m, F_zth_3_m,  &
                                                F_xcth_4_m, F_ycth_4_m , F_zcth_4_m
   real, dimension(F_ni,F_nj,F_nk) :: wkx_m,wky_m,wkz_m,wkxc_m,wkyc_m,wkzc_m,wx1_m,wy1_m
   !
   real, dimension(:,:,:), pointer :: dummy3d
   real*8, dimension(:), pointer :: p_z
   real*8, parameter :: ZERO_8 = 0.0
   integer ii,jj,kk,ijk

   integer, dimension(F_ni,F_nj,F_nk) :: n1_m,ii_m,jj_m,kk_m
   real,    dimension(F_ni*F_nj*F_nk) :: capx1_m,capy1_m,capz1_m
   integer, dimension(F_ni*F_nj*F_nk* F_nb_iter)   :: n1_m_1,n1_m_2
   integer, dimension(F_ni*F_nj*F_nk*(F_nb_iter+1)):: ii_m_1,jj_m_1,kk_m_1
   real,    dimension(F_ni*F_nj*F_nk*(F_nb_iter+1)):: capx1_m_1,capy1_m_1
   real,    dimension(F_ni*F_nj*F_nk* F_nb_iter)   :: capz1_m_1
   real,    dimension(F_ni,F_nj,F_nk)              :: capx1,capy1,capz1

   integer ind(F_nb_iter+1)

   !---------------------------------------------------------------------

   call msg(MSG_DEBUG,'adx_main_2_pos_ad ('//trim(F_l_S)//')')

   if (adx_zdotMid_L) call handle_error(-1,'adx_main_2_pos_ad','adx_zdotMid_L not done')
   if (adx_lam_L    ) call handle_error(-1,'adx_main_2_pos_ad','adx_lam_L     not done')

   !CAUTION
   dummy3d => F_w

   !Zero adjoint variables
   !----------------------
!$omp parallel do
   do k=1,F_nk
      wrkx1(:,:,k) = 0.
      wrky1(:,:,k) = 0.
      xgrid(:,:,k) = 0.
      ygrid(:,:,k) = 0.
      zgrid(:,:,k) = 0.
   enddo
!$omp end parallel do

!  For convenience when TRAJ Adw_hor_L = T Adw_ver_L = T 
!  -----------------------------------------------------
   kk_m_1 = 0.

   dth  = adx_dt_8/2.

!  Set TRAJ positions
!  ------------------
   do iter = 1,F_nb_iter+1
      ind(iter) = F_ni*F_nj*F_nk*(iter-1) + 1
   enddo

   p_z => adx_verZ_8%t
   if (F_l_S == 'm') p_z => adx_verZ_8%m

   call adx_get_ij0n(i0,in,j0,jn)

   !TRAJECTORY
   !----------
   DO_ITER: do iter = 1, F_nb_iter

                       doh_tr_L = .false.
      if (iter .eq. 1) doh_tr_L = .true.

      !- 3d interpol of u and v winds and new upstream pos along x and y

!$omp parallel

!$omp do
      do kk = 1,F_nk
         ygrid_m(:,:,kk) = F_yth_m(:,:,kk)
      enddo
!$omp enddo

      !----------------------------
      !Preserve TRAJ for ADJOINT #3
      !----------------------------
!$omp do
      do kk = 1,F_nk
         do jj = 1,F_nj
            do ii = 1,F_ni
               F_xth_3_m   (ii,jj,kk,iter)  = F_xth_m(ii,jj,kk)
               F_ygrid_3_m (ii,jj,kk,iter)  = ygrid_m(ii,jj,kk)
               F_zth_3_m   (ii,jj,kk,iter)  = F_zth_m(ii,jj,kk)
            enddo
         enddo
      enddo
!$omp enddo

!$omp end parallel

      if (adx_lam_L) then

!!!   NOT DONE

      else

!        ----------------------------
!        Preserve n1_m for ADJOINT #1
!        ----------------------------

         Adx_hor_L = doh_tr_L
         Adx_ver_L = .true.

         if (.not.adw_nosetint_L) then
         call adx_pos_glb4 (wrkx1_m,wrky1_m,F_u_m,F_v_m,F_xth_m,ygrid_m,F_zth_m, &
                            DTH_1, DO_UV, i0,in,j0,jn, &
                            F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,k0,F_nk,F_nk_super)
         else

         call adx_trilin_turbo4 (wrkx1_m,F_u_m,DTH_1,                                            &
                                 n1_m_1   (ind(iter)),                                           & 
                                 capx1_m_1(ind(iter)),capy1_m_1(ind(iter)),capz1_m_1(ind(iter)), &
                                 F_xth_m             ,ygrid_m             ,F_zth_m             , &
                                 ii_m_1   (ind(iter)),jj_m_1   (ind(iter)),kk_m_1   (ind(iter)), &
                                 adx_lcx,adx_bsx_8, adx_dix_8,                                   &
                                 adx_lcy,adx_bsy_8, adx_diy_8,                                   &
                                 adx_lcz%s,adx_bsz_8%s,adx_diz_8,                                &
                                 F_ni*F_nj*F_nk,i0,in,j0,jn,k0,F_nk,adx_lnkm)

         call adx_trilin_turbo4 (wrky1_m,F_v_m,DTH_1,                                            &
                                 n1_m_1   (ind(iter)),                                           &
                                 capx1_m_1(ind(iter)),capy1_m_1(ind(iter)),capz1_m_1(ind(iter)), &
                                 F_xth_m             ,ygrid_m             ,F_zth_m             , &
                                 ii_m_1   (ind(iter)),jj_m_1   (ind(iter)),kk_m_1   (ind(iter)), &
                                 adx_lcx,adx_bsx_8, adx_dix_8,                                   &
                                 adx_lcy,adx_bsy_8, adx_diy_8,                                   &
                                 adx_lcz%s,adx_bsz_8%s,adx_diz_8,                                &
                                 F_ni*F_nj*F_nk,i0,in,j0,jn,k0,F_nk,adx_lnkm)
         endif

      endif

      !----------------------------
      !Preserve TRAJ for ADJOINT #4
      !----------------------------
!$omp parallel do
      do kk = 1,F_nk
         do jj = 1,F_nj
            do ii = 1,F_ni
               F_yth_4_m (ii,jj,kk,iter) = F_yth_m (ii,jj,kk)
               F_xcth_4_m(ii,jj,kk,iter) = F_xcth_m(ii,jj,kk)
               F_ycth_4_m(ii,jj,kk,iter) = F_ycth_m(ii,jj,kk)
               F_zcth_4_m(ii,jj,kk,iter) = F_zcth_m(ii,jj,kk)
                wrkx1_4_m(ii,jj,kk,iter) =  wrkx1_m(ii,jj,kk)
                wrky1_4_m(ii,jj,kk,iter) =  wrky1_m(ii,jj,kk)
            enddo
         enddo
      enddo
!$omp end parallel do

      call adx_trajsp2 (F_xth_m,F_yth_m,F_xcth_m,F_ycth_m,F_zcth_m,wrkx1_m,wrky1_m, &
                        adx_cx_8,adx_cy_8,adx_sx_8,adx_sy_8, &
                        dth,i0,in,j0,jn,k0,adx_lni,adx_lnj)

      !- 3D interpol of zeta dot and new upstream pos along zeta

!$omp parallel 

!$omp do
      do kk = 1,F_nk
         ygrid_m(:,:,kk) = F_yth_m(:,:,kk)
      enddo
!$omp enddo

      !-----------------------------
      !Preserve TRAJ for ADJOINT #20
      !-----------------------------
!$omp do
      do kk = 1,F_nk
         do jj = 1,F_nj
            do ii = 1,F_ni
               F_xth_2_m   (ii,jj,kk,iter)  = F_xth_m(ii,jj,kk)
               F_ygrid_2_m (ii,jj,kk,iter)  = ygrid_m(ii,jj,kk)
               F_zth_2_m   (ii,jj,kk,iter)  = F_zth_m(ii,jj,kk)
            enddo
         enddo
      enddo
!$omp enddo

!$omp end parallel 

      if (adx_lam_L) then

!!!   NOT DONE

      else

         Adx_hor_L = .true.
         Adx_ver_L = .false.

         if (.not.adw_nosetint_L) then
         call adx_pos_glb4 (wrkx1_m,wrky1_m,F_w_m,dummy3d,F_xth_m,ygrid_m,F_zth_m, &
                            -dth, DO_W, i0,in,j0,jn, &
                            F_ni,F_nj,F_aminx, F_amaxx, F_aminy, F_amaxy,k0,F_nk,F_nk_super)
         else

!        ----------------------------
!        Preserve n1_m for ADJOINT #2
!        ----------------------------
         call adx_trilin_turbo4 (wrkx1_m,F_w_m,-dth,                                                 &
                                 n1_m_2   (ind(iter)  ),                                             &
                                 capx1_m_1(ind(iter+1)),capy1_m_1(ind(iter+1)),capz1_m_1(ind(iter)), &
                                 F_xth_m,ygrid_m,F_zth_m,                                            &
                                 ii_m_1   (ind(iter+1)),jj_m_1   (ind(iter+1)),kk_m_1   (ind(iter)), &
                                 adx_lcx,adx_bsx_8, adx_dix_8,                                       &
                                 adx_lcy,adx_bsy_8, adx_diy_8,                                       &
                                 adx_lcz%s,adx_bsz_8%s,adx_diz_8,                                    &
                                 F_ni*F_nj*F_nk,i0,in,j0,jn,k0,F_nk,adx_lnkm)
         endif

      endif

!$omp parallel do 
      do k = max(2,k0),F_nk-1
         do j = j0,jn
            do i = i0,in
               !
               F_zth_m(i,j,k) = p_z(k) + 2.D0*wrkx1_m(i,j,k)
               !
               !------------------------------
               !Preserve zth_m for ADJOINT #10
               !------------------------------
               F_zth_1_m (i,j,k,iter)  = F_zth_m(i,j,k)

               !Make sure F_zth is below p_z(1) and above p_z(F_nk)
               !---------------------------------------------------
               F_zth_m(i,j,k) = min(PDM_8*p_z(F_nk),  &
                    max(1.0d0*F_zth_m(i,j,k), PDP_8*p_z(1)) )
               F_zth_m(i,j,k) = 0.5D0*(F_zth_m(i,j,k) + p_z(k))
            enddo
         enddo
      enddo
!$omp end parallel do 

   enddo DO_ITER

   !ADJ
   !---
!$omp parallel do 
   do k = F_nk,k0,-1
      if ((k.eq.1).or.(k.eq.F_nk)) then
         F_pz(i0:in,j0:jn, k) = 0.
         F_pz(i0:in,j0:jn, k) = 0.
      else
         do j = j0,jn
         do i = i0,in
            !
            F_pz (i,j,k) = 2.0 * F_pz(i,j,k)
            !
            F_zth(i,j,k) = F_pz(i,j,k) + F_zth(i,j,k)
            F_pz (i,j,k) = ZERO_8

            !
         enddo
         enddo
      endif
   enddo
!$omp end parallel do 

   call adx_trajex2_ad(F_px,F_py,F_xct1,F_yct1,F_zct1,F_xcth  ,F_ycth  ,F_zcth  , &
                                                      F_xcth_m,F_ycth_m,F_zcth_m, & 
                       i0,in,j0,jn,k0)

   DO_ITER_AD: do iter = F_nb_iter,1,-1

                       doh_ad_L = .false.
      if (iter .eq. 1) doh_ad_L = .true.

      !- ADJ of
      !- 3D interpol of zeta dot and new upstream pos along zeta

!$omp parallel 

!$omp do 
      do k = F_nk-1,max(2,k0),-1
         do j = j0,jn
            do i = i0,in
               !
               F_zth(i,j,k) = 0.5D0*(F_zth(i,j,k))
               !
               !---------------------------
               !Reset zth_m for ADJOINT #10
               !---------------------------
               if (1.0d0*F_zth_1_m(i,j,k,iter).lt.PDP_8*p_z(1)) then
                   F_zth (i,j,k) = 0.
               elseif (1.0d0*F_zth_1_m(i,j,k,iter).gt.PDM_8*p_z(F_nk)) then
                   F_zth (i,j,k) = 0.
               endif
               !
               wrkx1(i,j,k) = 2.D0*F_zth(i,j,k) + wrkx1(i,j,k)
               F_zth(i,j,k) = ZERO_8
               !
            enddo
         enddo
      enddo
!$omp enddo 

      !--------------------------
      !Reset TRAJ for ADJOINT #20
      !--------------------------
!$omp do 
      do kk = 1,F_nk
         do jj = 1,F_nj
            do ii = 1,F_ni
               wkx_m(ii,jj,kk) = F_xth_2_m  (ii,jj,kk,iter)
               wky_m(ii,jj,kk) = F_ygrid_2_m(ii,jj,kk,iter)
               wkz_m(ii,jj,kk) = F_zth_2_m  (ii,jj,kk,iter)
            enddo
         enddo
      enddo
!$omp enddo 

!$omp end parallel  

      if (adx_lam_L) then

!!!       NOT DONE

      else

         Adx_hor_L = .true.
         Adx_ver_L = .false.

!        -------------------------
!        Reset n1_m for ADJOINT #2
!        -------------------------

         !Zero adjoint variables
         !----------------------
!$omp parallel do
         do k=1,F_nk
            capx1(:,:,k) = 0.
            capy1(:,:,k) = 0.
            capz1(:,:,k) = 0.
         enddo
!$omp end parallel do
         call adx_trilin_turbo4_ad (wrkx1                 ,F_w                   ,                      &
                                    capx1                 ,capy1                 ,capz1               , &
                                    F_xth                 ,ygrid                 ,F_zth               , &
                                                           F_w_m                 ,-dth                , & 
                                    n1_m_2   (ind(iter)  ),                                             &
                                    capx1_m_1(ind(iter+1)),capy1_m_1(ind(iter+1)),capz1_m_1(ind(iter)), &
                                    wkx_m                 ,wky_m                 ,wkz_m               , &
                                    ii_m_1   (ind(iter+1)),jj_m_1   (ind(iter+1)),kk_m_1   (ind(iter)), &
                                    adx_lcx,adx_bsx_8, adx_dix_8,                                       &
                                    adx_lcy,adx_bsy_8, adx_diy_8,                                       &
                                    adx_lcz%s,adx_bsz_8%s,adx_diz_8,                                    &
                                    F_ni*F_nj*F_nk,(F_amaxx-F_aminx+1)*(F_amaxy-F_aminy+1)*F_nk_super,  &
                                    i0,in,j0,jn,k0,F_nk,adx_lnkm,.TRUE.)

      endif

!$omp parallel  

!$omp do  
      do kk = 1,F_nk
         F_yth(:,:,kk) = ygrid(:,:,kk) + F_yth(:,:,kk) 
         ygrid(:,:,kk) = 0.
      enddo
!$omp enddo  

      !- ADJ of
      !- 3d interpol of u and v winds and new upstream pos along x and y

      !-------------------------
      !Reset TRAJ for ADJOINT #4
      !--------------------------
!$omp do  
      do kk = 1,F_nk
         do jj = 1,F_nj
            do ii = 1,F_ni
               wky_m (ii,jj,kk) = F_yth_4_m (ii,jj,kk,iter)
               wkxc_m(ii,jj,kk) = F_xcth_4_m(ii,jj,kk,iter)
               wkyc_m(ii,jj,kk) = F_ycth_4_m(ii,jj,kk,iter) 
               wkzc_m(ii,jj,kk) = F_zcth_4_m(ii,jj,kk,iter)
               wx1_m (ii,jj,kk) =  wrkx1_4_m(ii,jj,kk,iter) 
               wy1_m (ii,jj,kk) =  wrky1_4_m(ii,jj,kk,iter) 
            enddo
         enddo
      enddo
!$omp enddo  

!$omp end parallel  

      call adx_trajsp2_ad (F_xth  ,F_yth  , F_xcth, F_ycth, F_zcth, wrkx1, wrky1, &
                                   wky_m  , wkxc_m, wkyc_m, wkzc_m, wx1_m, wy1_m, &
                           adx_cx_8,adx_cy_8,adx_sx_8,adx_sy_8, &
                           dth,i0,in,j0,jn,k0,adx_lni,adx_lnj)

      !-------------------------
      !Reset TRAJ for ADJOINT #3
      !-------------------------
!$omp parallel do  
      do kk = 1,F_nk
         do jj = 1,F_nj
            do ii = 1,F_ni
               wkx_m(ii,jj,kk) = F_xth_3_m  (ii,jj,kk,iter)
               wky_m(ii,jj,kk) = F_ygrid_3_m(ii,jj,kk,iter)
               wkz_m(ii,jj,kk) = F_zth_3_m  (ii,jj,kk,iter)
             enddo
         enddo
      enddo
!$omp end parallel do  

      if (adx_lam_L) then

!!!       NOT DONE

      else

         Adx_hor_L = doh_ad_L
         Adx_ver_L = .true.

!        -------------------------
!        Reset n1_m for ADJOINT #1
!        -------------------------
!$omp parallel do
         do k=1,F_nk
            capx1(:,:,k) = 0.
            capy1(:,:,k) = 0.
            capz1(:,:,k) = 0.
         enddo
!$omp end parallel do
         call adx_trilin_turbo4_ad (wrky1                 ,F_v                   ,                     &
                                    capx1                 ,capy1                 ,capz1           ,    &
                                    F_xth                 ,ygrid                 ,F_zth           ,    &
                                                           F_v_m                 ,DTH_1           ,    &
                                    n1_m_1   (ind(iter)),                                              &
                                    capx1_m_1(ind(iter)),capy1_m_1(ind(iter)),capz1_m_1(ind(iter)),    &
                                    wkx_m                 ,wky_m                 ,wkz_m           ,    &
                                    ii_m_1   (ind(iter)),jj_m_1   (ind(iter)),kk_m_1   (ind(iter)),    &
                                    adx_lcx,adx_bsx_8, adx_dix_8,                                      &
                                    adx_lcy,adx_bsy_8, adx_diy_8,                                      &
                                    adx_lcz%s,adx_bsz_8%s,adx_diz_8,                                   &
                                    F_ni*F_nj*F_nk,(F_amaxx-F_aminx+1)*(F_amaxy-F_aminy+1)*F_nk_super, &
                                    i0,in,j0,jn,k0,F_nk,adx_lnkm,.FALSE.)

         call adx_trilin_turbo4_ad (wrkx1                 ,F_u                   ,                     &
                                    capx1                 ,capy1                 ,capz1           ,    &
                                    F_xth                 ,ygrid                 ,F_zth           ,    &
                                                           F_u_m                 ,DTH_1           ,    &
                                    n1_m_1   (ind(iter)),                                              &
                                    capx1_m_1(ind(iter)),capy1_m_1(ind(iter)),capz1_m_1(ind(iter)),    &
                                    wkx_m                 ,wky_m                 ,wkz_m           ,    &
                                    ii_m_1   (ind(iter)),jj_m_1   (ind(iter)),kk_m_1   (ind(iter)),    &
                                    adx_lcx,adx_bsx_8, adx_dix_8,                                      &
                                    adx_lcy,adx_bsy_8, adx_diy_8,                                      &
                                    adx_lcz%s,adx_bsz_8%s,adx_diz_8,                                   &
                                    F_ni*F_nj*F_nk,(F_amaxx-F_aminx+1)*(F_amaxy-F_aminy+1)*F_nk_super, &
                                    i0,in,j0,jn,k0,F_nk,adx_lnkm,.TRUE.)

      endif

!$omp parallel do  
      do kk = 1,F_nk
         F_yth(:,:,kk) = ygrid(:,:,kk) + F_yth(:,:,kk)
         ygrid(:,:,kk) = 0.
      enddo
!$omp end parallel do  

   enddo DO_ITER_AD

   call msg(MSG_DEBUG,'adx_main_2_pos_ad ('//trim(F_l_S)//') [end]')

   !---------------------------------------------------------------------
   return
end subroutine adx_main_2_pos4_ad
