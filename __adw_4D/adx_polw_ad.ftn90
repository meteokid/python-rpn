!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "stop_mpi.h"

subroutine adx_polw3_ad (F_u, F_v, F_j, F_aminx,F_amaxx,F_aminy,F_amaxy, F_lni,F_lnj, F_halox,F_haloy, F_nk )
!
   implicit none
#include <arch_specific.hf>
!
   !@objective ADJ of adx_polw3  
!
   !@arguments
   integer :: F_aminx,F_amaxx,F_aminy,F_amaxy !I, adw local array bounds
   integer :: F_lni, F_lnj, F_nk !I, Field computational area dims
   integer :: F_halox, F_haloy   !I, Field halo dims
   integer :: F_j                !I, j position to fill
   real,dimension(F_aminx:F_amaxx,F_aminy:F_amaxy, F_nk)::&
        F_u, F_v                 !I/O, wind components to treat
!
   !@author monique tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!**/
#include "adx_grid.cdk"
   integer :: i,j,k
   real*8  :: vx_8, vy_8, coef1_8, coef2_8
   real*8, parameter :: ZERO_8 = 0.0
   !---------------------------------------------------------------------
   !
   !Zero adjoint variables
   !----------------------
   vx_8 = ZERO_8 
   vy_8 = ZERO_8 
   !
   if (F_j==0) then
      j       =  1
      coef1_8 = -1.0
      coef2_8 =  1.0
   else
      j       =  F_lnj
      coef1_8 =  1.0
      coef2_8 = -1.0
   endif

!$omp do
   do k = F_nk,1,-1
      do i = F_halox,1,-1
         F_v(F_lni+1-i,F_j,k) = F_v(1-i,    F_j,k) + F_v(F_lni+1-i,F_j,k)
         F_v(1-i,      F_j,k) = ZERO_8
         F_u(F_lni+1-i,F_j,k) = F_u(1-i,    F_j,k) + F_u(F_lni+1-i,F_j,k)
         F_u(1-i,      F_j,k) = ZERO_8
         F_v(i,        F_j,k) = F_v(F_lni+i,F_j,k) + F_v(i,        F_j,k)
         F_v(F_lni+i,  F_j,k) = ZERO_8
         F_u(i,        F_j,k) = F_u(F_lni+i,F_j,k) + F_u(i,        F_j,k)
         F_u(F_lni+i,  F_j,k) = ZERO_8
      enddo

      do i=F_lni,1,-1
         vx_8        = coef1_8 * dble(F_v(i,F_j,k)) * adx_cx_8(i) + vx_8
         vy_8        = coef2_8 * dble(F_v(i,F_j,k)) * adx_sx_8(i) + vy_8
         F_v(i,F_j,k)= ZERO_8
         vx_8        =           dble(F_u(i,F_j,k)) * adx_sx_8(i) + vx_8
         vy_8        =           dble(F_u(i,F_j,k)) * adx_cx_8(i) + vy_8
         F_u(i,F_j,k)= ZERO_8
      enddo

      do i=F_lni,1,-1
         F_u(i,j,k) = adx_wx_8(i) * (                 adx_cx_8(i) * vy_8 ) + F_u(i,j,k)
         F_v(i,j,k) = adx_wx_8(i) * ( - adx_sx_8(i) * adx_sy_8(j) * vy_8 ) + F_v(i,j,k)
         F_u(i,j,k) = adx_wx_8(i) * (                 adx_sx_8(i) * vx_8 ) + F_u(i,j,k)
         F_v(i,j,k) = adx_wx_8(i) * (   adx_cx_8(i) * adx_sy_8(j) * vx_8 ) + F_v(i,j,k)
      enddo

      vy_8 = 0.0
      vx_8 = 0.0
   enddo
!$omp enddo

   !---------------------------------------------------------------------
   return
end subroutine adx_polw3_ad
