!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "model_macros_f.h"

subroutine adx_lag3d_tricub_ad (F_out  , F_in  , F_x  , F_y  , F_z  , &
                                         F_in_m, F_x_m, F_y_m, F_z_m, &
                                adx_y00_8,adx_x00_8,p_z00_8,adx_ovdx_8,adx_ovdy_8,adx_ovdz_8, &
                                adx_lcx,adx_lcy,p_lcz, adx_bsx_8,adx_bsy_8,p_bsz_8, &
                                adx_xabcd_8,adx_xbacd_8,adx_xcabd_8,adx_xdabc_8, &
                                adx_yabcd_8,adx_ybacd_8,adx_ycabd_8,adx_ydabc_8, &
                                p_zabcd_8,p_zbacd_8, p_zcabd_8, p_zdabc_8, p_zbc_8,&
                                F_num, F_num_in, F_mono_L, i0, in, j0, jn, k0, F_nk, kkmax)
!
   implicit none
#include <arch_specific.hf>
!
   !@objective ADJ of adx_lag3d_tricub_tl
!
   !@arguments
   integer :: F_num            !I, number points
   integer :: F_num_in         !I, number points in F_in
   integer :: F_nk             !I, number of vertical levels
   integer :: i0,in,j0,jn,k0   !I, scope of operator
   logical :: F_mono_L         !I, .true. monotonic interpolation
   real,dimension(F_num) ::  &
        F_x  , F_y  , F_z  , & !I, interpolation target x,y,z coordinates
        F_x_m, F_y_m, F_z_m    !I, interpolation target x,y,z coordinates TRAJ
   real,dimension(*) :: &
        F_in, F_in_m           !I, field to interpolate (and TRAJ)
   real,dimension(F_num) :: &
        F_out                  !O, result of interpolation

   integer :: kkmax
   real*8  :: p_z00_8

   !TODO: specify min:max if not starting from zero
   integer,dimension(*) :: p_lcz
   real*8, dimension(0:kkmax+2) :: p_bsz_8
   real*8, dimension(*) :: p_zbc_8, p_zabcd_8,p_zbacd_8, p_zcabd_8, p_zdabc_8

   integer,dimension(*) :: adx_lcx,adx_lcy
   real*8, dimension(*) :: adx_bsx_8,adx_bsy_8
   real*8, dimension(*) :: adx_xabcd_8,adx_xbacd_8,adx_xcabd_8,adx_xdabc_8
   real*8, dimension(*) :: adx_yabcd_8,adx_ybacd_8,adx_ycabd_8,adx_ydabc_8
   real*8  :: adx_y00_8,adx_x00_8,adx_ovdx_8,adx_ovdy_8,adx_ovdz_8
!
   !@author Monique Tanguay
!
   !@revisions
   ! v4_13 - Tanguay M.        - Adjustments GEM413
   ! v4_40 - Tanguay M.        - Revision TL/AD
!
!**/

!#undef __ADX_DIMS__
#include "adx_dims.cdk"
#include "ptopo.cdk"

   integer :: n,i,j,k,ii,jj,kk
   logical :: zcubic_L

   real :: prmin, prmax, prmin_m, prmax_m

   real :: prmin1_m, prmax1_m,prmin2_m, prmax2_m
   real :: prmin3_m, prmax3_m,prmin4_m, prmax4_m
   real :: prmin5_m, prmax5_m,prmin6_m, prmax6_m
   real :: prmin7_m, prmax7_m,prmin8_m, prmax8_m
 
   real :: F_out_m

   integer :: o1, o2, o3, o4
   real*8  :: a1, a2, a3, a4
   real*8  :: b1, b2, b3, b4
   real*8  :: c1, c2, c3, c4
   real*8  :: d1, d2, d3, d4
   real*8  :: p1, p2, p3, p4
   real*8  :: rri,rrj,rrk,ra,rb,rc,rd

   real*8  :: rri_m,rrj_m,rrk_m

   real*8  :: a1_m, a2_m, a3_m, a4_m
   real*8  :: b1_m, b2_m, b3_m, b4_m
   real*8  :: c1_m, c2_m, c3_m, c4_m
   real*8  :: d1_m, d2_m, d3_m, d4_m
   real*8  :: p1_m, p2_m, p3_m, p4_m

   real*8  :: a1_z_m, b1_z_m, c1_z_m, d1_z_m
   real*8  :: p1_y_m, p2_y_m, p3_y_m, p4_y_m
   real*8  :: p1_z_m, p2_z_m, p3_z_m, p4_z_m

   real*8 :: triprd,za,zb,zc,zd
   triprd(za,zb,zc,zd)=(za-zb)*(za-zc)*(za-zd)

   real*8 :: triprd_ad,za_m
   triprd_ad(za,za_m,zb,zc,zd)= &
   za*(za_m-zc)*(za_m-zd)+(za_m-zb)*za*(za_m-zd)+(za_m-zb)*(za_m-zc)*za

   real*8, parameter :: ZERO_8 = 0.0

   !---------------------------------------------------------------------

   !Zero adjoint variables
   !----------------------
   if (F_mono_L) then
       prmin = ZERO_8
       prmax = ZERO_8
   endif

   DO_K2: do k=F_nk,k0,-1
      DO_J2: do j=jn,j0,-1
         DO_I2: do i=in,i0,-1

            !----------
            !TRAJECTORY
            !----------

            n = (k-1)*Adx_mlnij + ((j-1)*adx_mlni) + i

            rri_m= F_x_m(n)
            ii = (rri_m - adx_x00_8) * adx_ovdx_8
            ii = adx_lcx(ii+1) + 1
            if (rri_m < adx_bsx_8(ii)) ii = ii - 1
            ii = max(2,min(ii,Adx_iimax))

            rrj_m= F_y_m(n)
            jj = (rrj_m - adx_y00_8) * adx_ovdy_8
            jj = adx_lcy(jj+1) + 1
            if (rrj_m < adx_bsy_8(jj)) jj = jj - 1
            jj = max(adx_haloy,min(jj,Adx_jjmax))

            rrk_m= F_z_m(n)
            kk = (rrk_m - p_z00_8) * adx_ovdz_8
            kk = p_lcz(kk+1)
            if (rrk_m < p_bsz_8(kk)) kk = kk - 1
            kk = min(kkmax-1,max(0,kk))

            zcubic_L = (kk > 0) .and. (kk < kkmax-1)

            !- x interpolation
            !-----------------

            ra = adx_bsx_8(ii-1)
            rb = adx_bsx_8(ii  )
            rc = adx_bsx_8(ii+1)
            rd = adx_bsx_8(ii+2)
            p1_m = triprd(rri_m,rb,rc,rd)*adx_xabcd_8(ii)
            p2_m = triprd(rri_m,ra,rc,rd)*adx_xbacd_8(ii)
            p3_m = triprd(rri_m,ra,rb,rd)*adx_xcabd_8(ii)
            p4_m = triprd(rri_m,ra,rb,rc)*adx_xdabc_8(ii)

            o2 = (kk-1)*Adx_nijag + (jj-Adx_int_j_off-1)*Adx_nit + (ii-Adx_int_i_off)
            o1 = o2-Adx_nit
            o3 = o2+Adx_nit
            o4 = o3+Adx_nit

            if (zcubic_L) then
                a1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
                a2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
                a3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
                a4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
            endif

            o1 = o1 + Adx_nijag
            o2 = o2 + Adx_nijag
            o3 = o3 + Adx_nijag
            o4 = o4 + Adx_nijag

            if (F_mono_L) then

                prmax_m = F_in_m(o2)  
                prmax1_m= prmax_m  
                if(F_in_m(o2+1).gt.prmax1_m) prmax_m = F_in_m(o2+1) 
                   prmax2_m= prmax_m 
                if(F_in_m(o3)  .gt.prmax2_m) prmax_m = F_in_m(o3) 
                   prmax3_m= prmax_m 
                if(F_in_m(o3+1).gt.prmax3_m) prmax_m = F_in_m(o3+1) 
                   prmax4_m= prmax_m 

                prmin_m = F_in_m(o2)
                prmin1_m= prmin_m 
                if(F_in_m(o2+1).lt.prmin1_m) prmin_m = F_in_m(o2+1) 
                   prmin2_m= prmin_m
                if(F_in_m(o3)  .lt.prmin2_m) prmin_m = F_in_m(o3) 
                   prmin3_m= prmin_m
                if(F_in_m(o3+1).lt.prmin3_m) prmin_m = F_in_m(o3+1) 
                   prmin4_m= prmin_m

            endif

            b1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
            b2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
            b3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
            b4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

            o1 = o1 + Adx_nijag
            o2 = o2 + Adx_nijag
            o3 = o3 + Adx_nijag
            o4 = o4 + Adx_nijag

            if (F_mono_L) then

                if(F_in_m(o2)  .gt.prmax4_m) prmax_m = F_in_m(o2) 
                   prmax5_m = prmax_m
                if(F_in_m(o2+1).gt.prmax5_m) prmax_m = F_in_m(o2+1) 
                   prmax6_m = prmax_m
                if(F_in_m(o3)  .gt.prmax6_m) prmax_m = F_in_m(o3) 
                   prmax7_m = prmax_m
                if(F_in_m(o3+1).gt.prmax7_m) prmax_m = F_in_m(o3+1) 
                   prmax8_m = prmax_m
 
                if(F_in_m(o2)  .lt.prmin4_m) prmin_m = F_in_m(o2) 
                   prmin5_m = prmin_m
                if(F_in_m(o2+1).lt.prmin5_m) prmin_m = F_in_m(o2+1) 
                   prmin6_m = prmin_m
                if(F_in_m(o3)  .lt.prmin6_m) prmin_m = F_in_m(o3) 
                   prmin7_m = prmin_m
                if(F_in_m(o3+1).lt.prmin7_m) prmin_m = F_in_m(o3+1) 
                   prmin8_m = prmin_m

            endif

            c1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
            c2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
            c3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
            c4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

            if (zcubic_L) then

               o1 = o1 + Adx_nijag
               o2 = o2 + Adx_nijag
               o3 = o3 + Adx_nijag
               o4 = o4 + Adx_nijag

               d1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
               d2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
               d3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
               d4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)

            endif

            !- y interpolation
            !-----------------
            ra = adx_bsy_8(jj-1)
            rb = adx_bsy_8(jj  )
            rc = adx_bsy_8(jj+1)
            rd = adx_bsy_8(jj+2)

            p1_y_m = triprd(rrj_m,rb,rc,rd)*adx_yabcd_8(jj)
            p2_y_m = triprd(rrj_m,ra,rc,rd)*adx_ybacd_8(jj)
            p3_y_m = triprd(rrj_m,ra,rb,rd)*adx_ycabd_8(jj)
            p4_y_m = triprd(rrj_m,ra,rb,rc)*adx_ydabc_8(jj)

            b1_z_m = p1_y_m * b1_m + p2_y_m * b2_m + p3_y_m * b3_m + p4_y_m * b4_m
            c1_z_m = p1_y_m * c1_m + p2_y_m * c2_m + p3_y_m * c3_m + p4_y_m * c4_m
 
            !- z interpolation
            !-----------------

            if (zcubic_L) then

                a1_z_m = p1_y_m * a1_m + p2_y_m * a2_m + p3_y_m * a3_m + p4_y_m * a4_m
                d1_z_m = p1_y_m * d1_m + p2_y_m * d2_m + p3_y_m * d3_m + p4_y_m * d4_m

                ra = p_bsz_8(kk-1)
                rb = p_bsz_8(kk  )
                rc = p_bsz_8(kk+1)
                rd = p_bsz_8(kk+2)
 
                p1_z_m = triprd(rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
                p2_z_m = triprd(rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
                p3_z_m = triprd(rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
                p4_z_m = triprd(rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)
 
                F_out_m = p1_z_m * a1_z_m + p2_z_m * b1_z_m + p3_z_m * c1_z_m + p4_z_m * d1_z_m 
 
             else
 
                p3_z_m = (rrk_m-p_bsz_8(kk))*p_zbc_8(kk+1)
                p2_z_m = 1. - p3_z_m
 
                F_out_m = p2_z_m * b1_z_m + p3_z_m * c1_z_m  

             endif

            !--------------------
            !ADJOINT CALCULATIONS
            !--------------------

            if (F_mono_L) then

                if(F_out_m.lt.prmin8_m) then
                   prmin    = F_out(n) + prmin
                   F_out(n) = ZERO_8
                endif
                if(F_out_m.gt.prmax8_m) then
                   prmax    = F_out(n) + prmax
                   F_out(n) = ZERO_8
                endif

            endif 

            !- z interpolation

            if (zcubic_L) then

                p1 = F_out(n) * a1_z_m  
                p2 = F_out(n) * b1_z_m  
                p3 = F_out(n) * c1_z_m  
                p4 = F_out(n) * d1_z_m  
                a1 = p1_z_m   * F_out(n)   
                b1 = p2_z_m   * F_out(n)   
                c1 = p3_z_m   * F_out(n)   
                d1 = p4_z_m   * F_out(n)   

            else

                p2 = F_out(n) * b1_z_m  
                p3 = F_out(n) * c1_z_m  
                b1 = p2_z_m   * F_out(n)   
                c1 = p3_z_m   * F_out(n)   

            endif

            F_out(n) = ZERO_8

            if (zcubic_L) then

                rrk = triprd_ad(p4,rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)
                rrk = triprd_ad(p3,rrk_m,ra,rb,rd)*p_zcabd_8(kk+1) + rrk
                rrk = triprd_ad(p2,rrk_m,ra,rc,rd)*p_zbacd_8(kk+1) + rrk
                rrk = triprd_ad(p1,rrk_m,rb,rc,rd)*p_zabcd_8(kk+1) + rrk

            else

                p3  = -p2 + p3
                rrk = (p3)*p_zbc_8(kk+1)

            endif

            !- y interpolation

            if (zcubic_L) then
                p1 = d1 * d1_m  + c1 * c1_m + b1 * b1_m + a1 * a1_m 
                p2 = d1 * d2_m  + c1 * c2_m + b1 * b2_m + a1 * a2_m 
                p3 = d1 * d3_m  + c1 * c3_m + b1 * b3_m + a1 * a3_m 
                p4 = d1 * d4_m  + c1 * c4_m + b1 * b4_m + a1 * a4_m 
            else
                p1 = c1 * c1_m + b1 * b1_m  
                p2 = c1 * c2_m + b1 * b2_m 
                p3 = c1 * c3_m + b1 * b3_m  
                p4 = c1 * c4_m + b1 * b4_m  
            endif

            if (zcubic_L) then
                d2 = p2_y_m * d1  
                d3 = p3_y_m * d1  
                d4 = p4_y_m * d1  
                d1 = p1_y_m * d1  
            endif

            c2 = p2_y_m * c1
            c3 = p3_y_m * c1
            c4 = p4_y_m * c1
            c1 = p1_y_m * c1

            b2 = p2_y_m * b1
            b3 = p3_y_m * b1
            b4 = p4_y_m * b1
            b1 = p1_y_m * b1

            if (zcubic_L) then
                a2 = p2_y_m * a1
                a3 = p3_y_m * a1
                a4 = p4_y_m * a1
                a1 = p1_y_m * a1
            endif

            ra = adx_bsy_8(jj-1)
            rb = adx_bsy_8(jj  )
            rc = adx_bsy_8(jj+1)
            rd = adx_bsy_8(jj+2)

            rrj = triprd_ad(p4,rrj_m,ra,rb,rc)*adx_ydabc_8(jj)
            rrj = triprd_ad(p3,rrj_m,ra,rb,rd)*adx_ycabd_8(jj) + rrj
            rrj = triprd_ad(p2,rrj_m,ra,rc,rd)*adx_ybacd_8(jj) + rrj
            rrj = triprd_ad(p1,rrj_m,rb,rc,rd)*adx_yabcd_8(jj) + rrj

            if (zcubic_L) then

                p1 = F_in_m (o4-1) * d4 + F_in_m (o3-1) * d3 + F_in_m (o2-1) * d2 + F_in_m (o1-1) * d1   
                p2 = F_in_m (o4)   * d4 + F_in_m (o3)   * d3 + F_in_m (o2)   * d2 + F_in_m (o1)   * d1 
                p3 = F_in_m (o4+1) * d4 + F_in_m (o3+1) * d3 + F_in_m (o2+1) * d2 + F_in_m (o1+1) * d1 
                p4 = F_in_m (o4+2) * d4 + F_in_m (o3+2) * d3 + F_in_m (o2+2) * d2 + F_in_m (o1+2) * d1 

                F_in(o4-1) = p1_m * d4 + F_in(o4-1)
                F_in(o4  ) = p2_m * d4 + F_in(o4  )
                F_in(o4+1) = p3_m * d4 + F_in(o4+1)
                F_in(o4+2) = p4_m * d4 + F_in(o4+2)

                F_in(o3-1) = p1_m * d3 + F_in(o3-1)
                F_in(o3  ) = p2_m * d3 + F_in(o3  )
                F_in(o3+1) = p3_m * d3 + F_in(o3+1)
                F_in(o3+2) = p4_m * d3 + F_in(o3+2)

                F_in(o2-1) = p1_m * d2 + F_in(o2-1)
                F_in(o2  ) = p2_m * d2 + F_in(o2  )
                F_in(o2+1) = p3_m * d2 + F_in(o2+1)
                F_in(o2+2) = p4_m * d2 + F_in(o2+2)

                F_in(o1-1) = p1_m * d1 + F_in(o1-1)
                F_in(o1  ) = p2_m * d1 + F_in(o1  )
                F_in(o1+1) = p3_m * d1 + F_in(o1+1)
                F_in(o1+2) = p4_m * d1 + F_in(o1+2)

            else
                p1 = ZERO_8   
                p2 = ZERO_8   
                p3 = ZERO_8   
                p4 = ZERO_8   
            endif

            if (zcubic_L) then
               o1 = o1 - Adx_nijag
               o2 = o2 - Adx_nijag
               o3 = o3 - Adx_nijag
               o4 = o4 - Adx_nijag
            endif

               p1 = F_in_m (o4-1) * c4 + F_in_m (o3-1) * c3 + F_in_m (o2-1) * c2 + F_in_m (o1-1) * c1 + p1
               p2 = F_in_m (o4)   * c4 + F_in_m (o3)   * c3 + F_in_m (o2)   * c2 + F_in_m (o1)   * c1 + p2
               p3 = F_in_m (o4+1) * c4 + F_in_m (o3+1) * c3 + F_in_m (o2+1) * c2 + F_in_m (o1+1) * c1 + p3
               p4 = F_in_m (o4+2) * c4 + F_in_m (o3+2) * c3 + F_in_m (o2+2) * c2 + F_in_m (o1+2) * c1 + p4

               F_in(o4-1) = p1_m * c4 + F_in(o4-1)
               F_in(o4  ) = p2_m * c4 + F_in(o4  )
               F_in(o4+1) = p3_m * c4 + F_in(o4+1)
               F_in(o4+2) = p4_m * c4 + F_in(o4+2)

               F_in(o3-1) = p1_m * c3 + F_in(o3-1)
               F_in(o3  ) = p2_m * c3 + F_in(o3  )
               F_in(o3+1) = p3_m * c3 + F_in(o3+1)
               F_in(o3+2) = p4_m * c3 + F_in(o3+2)

               F_in(o2-1) = p1_m * c2 + F_in(o2-1)
               F_in(o2  ) = p2_m * c2 + F_in(o2  )
               F_in(o2+1) = p3_m * c2 + F_in(o2+1)
               F_in(o2+2) = p4_m * c2 + F_in(o2+2)

               F_in(o1-1) = p1_m * c1 + F_in(o1-1)
               F_in(o1  ) = p2_m * c1 + F_in(o1  )
               F_in(o1+1) = p3_m * c1 + F_in(o1+1)
               F_in(o1+2) = p4_m * c1 + F_in(o1+2)

               if (F_mono_L) then

                  if(F_in_m(o3+1).lt.prmin7_m) then
                     F_in(o3+1) = prmin + F_in(o3+1)
                     prmin = ZERO_8
                  endif
                  if(F_in_m(o3)  .lt.prmin6_m) then
                     F_in(o3) = prmin + F_in(o3)
                     prmin = ZERO_8
                  endif
                  if(F_in_m(o2+1).lt.prmin5_m) then
                     F_in(o2+1) = prmin + F_in(o2+1)
                     prmin = ZERO_8
                  endif
                  if(F_in_m(o2)  .lt.prmin4_m) then
                     F_in(o2) = prmin + F_in(o2)
                     prmin = ZERO_8
                  endif

                  if(F_in_m(o3+1).gt.prmax7_m) then
                     F_in(o3+1) = prmax + F_in(o3+1)
                     prmax = ZERO_8
                  endif
                  if(F_in_m(o3)  .gt.prmax6_m) then
                     F_in(o3) = prmax + F_in(o3)
                     prmax = ZERO_8
                  endif
                  if(F_in_m(o2+1).gt.prmax5_m) then
                     F_in(o2+1) = prmax + F_in(o2+1)
                     prmax = ZERO_8
                  endif
                  if(F_in_m(o2)  .gt.prmax4_m) then
                     F_in(o2) = prmax + F_in(o2)
                     prmax = ZERO_8
                  endif

               endif

               o1 = o1 - Adx_nijag
               o2 = o2 - Adx_nijag
               o3 = o3 - Adx_nijag
               o4 = o4 - Adx_nijag

               p1 = F_in_m (o4-1)* b4 + F_in_m (o3-1)* b3 + F_in_m (o2-1)* b2 + F_in_m (o1-1)* b1 + p1
               p2 = F_in_m (o4)  * b4 + F_in_m (o3)  * b3 + F_in_m (o2)  * b2 + F_in_m (o1)  * b1 + p2
               p3 = F_in_m (o4+1)* b4 + F_in_m (o3+1)* b3 + F_in_m (o2+1)* b2 + F_in_m (o1+1)* b1 + p3
               p4 = F_in_m (o4+2)* b4 + F_in_m (o3+2)* b3 + F_in_m (o2+2)* b2 + F_in_m (o1+2)* b1 + p4

               F_in(o4-1) = p1_m * b4 + F_in(o4-1)
               F_in(o4  ) = p2_m * b4 + F_in(o4  )
               F_in(o4+1) = p3_m * b4 + F_in(o4+1)
               F_in(o4+2) = p4_m * b4 + F_in(o4+2)

               F_in(o3-1) = p1_m * b3 + F_in(o3-1)
               F_in(o3  ) = p2_m * b3 + F_in(o3  )
               F_in(o3+1) = p3_m * b3 + F_in(o3+1)
               F_in(o3+2) = p4_m * b3 + F_in(o3+2)

               F_in(o2-1) = p1_m * b2 + F_in(o2-1)
               F_in(o2  ) = p2_m * b2 + F_in(o2  )
               F_in(o2+1) = p3_m * b2 + F_in(o2+1)
               F_in(o2+2) = p4_m * b2 + F_in(o2+2)

               F_in(o1-1) = p1_m * b1 + F_in(o1-1)
               F_in(o1  ) = p2_m * b1 + F_in(o1  )
               F_in(o1+1) = p3_m * b1 + F_in(o1+1)
               F_in(o1+2) = p4_m * b1 + F_in(o1+2)

               if (F_mono_L) then

                   if(F_in_m(o3+1).lt.prmin3_m) then
                      F_in(o3+1) = prmin + F_in(o3+1)
                      prmin = ZERO_8
                   endif
                   if(F_in_m(o3)  .lt.prmin2_m) then
                      F_in(o3) = prmin + F_in(o3)
                      prmin = ZERO_8
                   endif
                   if(F_in_m(o2+1).lt.prmin1_m) then
                      F_in(o2+1) = prmin + F_in(o2+1)
                      prmin = ZERO_8
                   endif
                      F_in(o2) = prmin + F_in(o2)
                      prmin = ZERO_8

                   if(F_in_m(o3+1).gt.prmax3_m) then
                      F_in(o3+1) = prmax + F_in(o3+1)
                      prmax = ZERO_8
                   endif
                   if(F_in_m(o3)  .gt.prmax2_m) then
                      F_in(o3) = prmax + F_in(o3)
                      prmax = ZERO_8
                   endif
                   if(F_in_m(o2+1).gt.prmax1_m) then
                      F_in(o2+1) = prmax + F_in(o2+1)
                      prmax = ZERO_8
                   endif
                      F_in(o2) = prmax + F_in(o2)
                      prmax = ZERO_8

               endif 

               o1 = o1 - Adx_nijag
               o2 = o2 - Adx_nijag
               o3 = o3 - Adx_nijag
               o4 = o4 - Adx_nijag

               if (zcubic_L) then

                   p1 = F_in_m (o4-1)* a4 + F_in_m (o3-1)* a3 + F_in_m (o2-1)* a2 + F_in_m (o1-1)* a1 + p1
                   p2 = F_in_m (o4)  * a4 + F_in_m (o3)  * a3 + F_in_m (o2)  * a2 + F_in_m (o1)  * a1 + p2
                   p3 = F_in_m (o4+1)* a4 + F_in_m (o3+1)* a3 + F_in_m (o2+1)* a2 + F_in_m (o1+1)* a1 + p3
                   p4 = F_in_m (o4+2)* a4 + F_in_m (o3+2)* a3 + F_in_m (o2+2)* a2 + F_in_m (o1+2)* a1 + p4

                   F_in(o4-1) = p1_m * a4 + F_in(o4-1)
                   F_in(o4  ) = p2_m * a4 + F_in(o4  )
                   F_in(o4+1) = p3_m * a4 + F_in(o4+1)
                   F_in(o4+2) = p4_m * a4 + F_in(o4+2)

                   F_in(o3-1) = p1_m * a3 + F_in(o3-1)
                   F_in(o3  ) = p2_m * a3 + F_in(o3  )
                   F_in(o3+1) = p3_m * a3 + F_in(o3+1)
                   F_in(o3+2) = p4_m * a3 + F_in(o3+2)

                   F_in(o2-1) = p1_m * a2 + F_in(o2-1)
                   F_in(o2  ) = p2_m * a2 + F_in(o2  )
                   F_in(o2+1) = p3_m * a2 + F_in(o2+1)
                   F_in(o2+2) = p4_m * a2 + F_in(o2+2)

                   F_in(o1-1) = p1_m * a1 + F_in(o1-1)
                   F_in(o1  ) = p2_m * a1 + F_in(o1  )
                   F_in(o1+1) = p3_m * a1 + F_in(o1+1)
                   F_in(o1+2) = p4_m * a1 + F_in(o1+2)

               endif

               ra = adx_bsx_8(ii-1)
               rb = adx_bsx_8(ii  )
               rc = adx_bsx_8(ii+1)
               rd = adx_bsx_8(ii+2)

               rri = triprd_ad(p4,rri_m,ra,rb,rc)*adx_xdabc_8(ii)
               rri = triprd_ad(p3,rri_m,ra,rb,rd)*adx_xcabd_8(ii) + rri
               rri = triprd_ad(p2,rri_m,ra,rc,rd)*adx_xbacd_8(ii) + rri
               rri = triprd_ad(p1,rri_m,rb,rc,rd)*adx_xabcd_8(ii) + rri

               F_z(n) = rrk + F_z(n)
               F_y(n) = rrj + F_y(n)
               F_x(n) = rri + F_x(n)

         enddo DO_I2
      enddo DO_J2
   enddo DO_K2

   !---------------------------------------------------------------------

   return
end subroutine adx_lag3d_tricub_ad
