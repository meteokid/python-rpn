!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#include "msg.h"

!/**
subroutine adx_exch_2_ad (F_a_fro  , F_b_fro  , F_c_fro  , &
                          F_a_for  , F_b_for  , F_c_for  , &
                          F_n_fro_n, F_n_fro_s, F_n_fro_a, &
                          F_n_for_n, F_n_for_s, F_n_for_a, &
                          F_n_treat)
   implicit none
#include <arch_specific.hf>

   !@objective ADJ of adx_exch_2_tl 

   !@arguments
   integer :: F_n_fro_n, F_n_fro_s, F_n_fro_a
   integer :: F_n_for_n, F_n_for_s, F_n_for_a
   integer :: F_n_treat

   real :: F_a_fro  (F_n_fro_a), F_b_fro  (F_n_fro_a), F_c_fro  (F_n_fro_a)
   real :: F_a_for  (F_n_for_a), F_b_for  (F_n_for_a), F_c_for  (F_n_for_a)

   !@author Monique Tanguay 

   !@revisions
   ! v4_XX - Tanguay M.        - Revision
!**/
#include "adx_dims.cdk"
   integer :: nwrn,nwrs,status,n 
   real :: abc_for_n  (F_n_for_n,F_n_treat), abc_for_s  (F_n_for_s,F_n_treat)
   real :: abc_fro_n  (F_n_fro_n,F_n_treat), abc_fro_s  (F_n_fro_s,F_n_treat)

   integer F_n_fro_n_R, F_n_fro_s_R, F_n_fro_a_R, &
           F_n_for_n_R, F_n_for_s_R, F_n_for_a_R
   !---------------------------------------------------------------------

   call msg(MSG_DEBUG,'adx_exch_2_ad')

!  Zero adjoint variables
!  ----------------------  
   abc_for_n(:,:) = 0. 
   abc_for_s(:,:) = 0. 
   abc_fro_n(:,:) = 0.
   abc_fro_s(:,:) = 0.

   if (F_n_fro_s > 0) then

      if (F_n_treat == 1) then
         do n = F_n_fro_s,1,-1

            abc_fro_s(n,1)       = F_a_fro(F_n_fro_n+n) + abc_fro_s(n,1)
            F_a_fro(F_n_fro_n+n) = 0.

         enddo
      else if (F_n_treat == 2) then
         do n = F_n_fro_s,1,-1

            abc_fro_s(n,2)       = F_b_fro(F_n_fro_n+n) + abc_fro_s(n,2)
            F_b_fro(F_n_fro_n+n) = 0.
            abc_fro_s(n,1)       = F_a_fro(F_n_fro_n+n) + abc_fro_s(n,1)
            F_a_fro(F_n_fro_n+n) = 0.

         enddo
      else if (F_n_treat == 3) then
         do n = F_n_fro_s,1,-1

            abc_fro_s(n,3)       = F_c_fro(F_n_fro_n+n) + abc_fro_s(n,3)
            F_c_fro(F_n_fro_n+n) = 0.
            abc_fro_s(n,2)       = F_b_fro(F_n_fro_n+n) + abc_fro_s(n,2)
            F_b_fro(F_n_fro_n+n) = 0.
            abc_fro_s(n,1)       = F_a_fro(F_n_fro_n+n) + abc_fro_s(n,1)
            F_a_fro(F_n_fro_n+n) = 0.

         enddo
      endif

   endif

   if (F_n_fro_n > 0) then

      if (F_n_treat == 1) then
         do n = F_n_fro_n,1,-1

            abc_fro_n(n,1) = F_a_fro(n) + abc_fro_n(n,1)
            F_a_fro(n)     = 0.

         enddo
      else if (F_n_treat == 2) then
         do n = F_n_fro_n,1,-1

            abc_fro_n(n,2) = F_b_fro(n) + abc_fro_n(n,2)
            F_b_fro(n)     = 0.
            abc_fro_n(n,1) = F_a_fro(n) + abc_fro_n(n,1) 
            F_a_fro(n)     = 0.

         enddo
      else if (F_n_treat == 3) then
         do n = F_n_fro_n,1,-1

            abc_fro_n(n,3) = F_c_fro(n) + abc_fro_n(n,3)
            F_c_fro(n)     = 0.
            abc_fro_n(n,2) = F_b_fro(n) + abc_fro_n(n,2)
            F_b_fro(n)     = 0. 
            abc_fro_n(n,1) = F_a_fro(n) + abc_fro_n(n,1)
            F_a_fro(n)     = 0.

         enddo
      endif

   endif

!  call RPN_COMM_swapns(F_n_treat*F_n_for_n,abc_for_n, &
!       F_n_treat*F_n_for_s,abc_for_s, &
!       F_n_treat*F_n_fro_n,nwrn,abc_fro_n, &
!       F_n_treat*F_n_fro_s,nwrs,abc_fro_s, &
!       adx_is_period_y,status)

   call RPN_COMM_swapns(F_n_treat*F_n_fro_n,abc_fro_n,      &
                        F_n_treat*F_n_fro_s,abc_fro_s,      &
                        F_n_treat*F_n_for_n,nwrs,abc_for_n, &
                        F_n_treat*F_n_for_s,nwrn,abc_for_s, &
                        adx_is_period_y,status)

   if (F_n_for_s > 0) then

      if (F_n_treat == 1) then
         do n = F_n_for_s,1,-1

            F_a_for(F_n_for_n+n) = abc_for_s(n,1) + F_a_for(F_n_for_n+n)
            abc_for_s(n,1)       = 0.

         enddo
      else if (F_n_treat == 2) then
         do n = F_n_for_s,1,-1

            F_b_for(F_n_for_n+n) = abc_for_s(n,2) + F_b_for(F_n_for_n+n)
            abc_for_s(n,2)       = 0.
            F_a_for(F_n_for_n+n) = abc_for_s(n,1) + F_a_for(F_n_for_n+n)
            abc_for_s(n,1)       = 0.

         enddo
      else if (F_n_treat == 3) then
         do n = F_n_for_s,1,-1

            F_c_for(F_n_for_n+n) = abc_for_s(n,3) + F_c_for(F_n_for_n+n)
            abc_for_s(n,3)       = 0.
            F_b_for(F_n_for_n+n) = abc_for_s(n,2) + F_b_for(F_n_for_n+n) 
            abc_for_s(n,2)       = 0.
            F_a_for(F_n_for_n+n) = abc_for_s(n,1) + F_a_for(F_n_for_n+n)
            abc_for_s(n,1)       = 0.

         enddo
      endif

   endif

   if (F_n_for_n > 0) then

      if (F_n_treat == 1) then
         do n = F_n_for_n,1,-1

            F_a_for(n)     = abc_for_n(n,1) + F_a_for(n)
            abc_for_n(n,1) = 0.

         enddo
      else if (F_n_treat == 2) then
         do n = F_n_for_n,1,-1

            F_b_for(n)     = abc_for_n(n,2) + F_b_for(n)
            abc_for_n(n,2) = 0.
            F_a_for(n)     = abc_for_n(n,1) + F_a_for(n)
            abc_for_n(n,1) = 0.

         enddo
      else if (F_n_treat == 3) then
         do n = F_n_for_n,1,-1

            F_c_for(n)     = abc_for_n(n,3) + F_c_for(n) 
            abc_for_n(n,3) = 0.
            F_b_for(n)     = abc_for_n(n,2) + F_b_for(n)
            abc_for_n(n,2) = 0.
            F_a_for(n)     = abc_for_n(n,1) + F_a_for(n)
            abc_for_n(n,1) = 0.

         enddo
      endif

   endif

   call msg(MSG_DEBUG,'adx_exch_2_ad [end]')
   !---------------------------------------------------------------------
   return
end subroutine adx_exch_2_ad
