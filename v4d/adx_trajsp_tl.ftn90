!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "constants.h"

subroutine adx_trajsp_tl
   call stop_mpi(STOP_ERROR,'adx_trajsp_tl','called a stub')
   return
end subroutine adx_trajsp_tl

!/**
subroutine adx_trajsp2_tl(F_lon  , F_lat  , F_x  , F_y  , F_z  , F_u  , F_v  , &
                          F_lon_m, F_lat_m, F_x_m, F_y_m, F_z_m, F_u_m, F_v_m, F_dt, &
                          i0,in,j0,jn,F_ni,F_nj,F_nk)

   implicit none
   !@objective TLM of adx_trajsp 
   !@arguments
   integer :: F_ni,F_nj,F_nk !I,
   real, dimension(F_ni,F_nj,F_nk) :: &
        F_lon, F_lat, &   !O, upwind longitudes at central time
        F_x, F_y, F_z, &  !O, upwind cartesian positions at central time
        F_u, F_v, &       !I, real wind components at upwind pos
   !
        F_lon_m, F_lat_m, &     !O, upwind longitudes at central time TRAJ
        F_x_m, F_y_m, F_z_m, &  !O, upwind cartesian positions at central time TRAJ
        F_u_m, F_v_m            !I, real wind components at upwind pos TRAJ
   real    :: F_dt        !I, timestep lenght
   integer :: i0,in,j0,jn !I, scope of operator
   !@author monique tanguay
   !@revisions
   ! v4_XX - Tanguay M.        - Adjustments GEM413
!**/
#include "adx_dims.cdk"
#include "adx_grid.cdk"
   integer :: vnij, i,j,k, trj_i_off
   !
   real*8 :: pdsa, pdca, pdcai, pdso, pdco, pdx, pdy, pdz
   real*8 :: pdux, pduy, pduz, pdsinal, pdcosal
   real*8,dimension(i0:in,j0:jn) :: xcos, ycos, xsin, ysin, yrec
   real*8,dimension(i0:in,j0:jn) :: xasin, yasin, xatan, yatan, zatan
   !
   !TRAJECTORY
   real F_z_m_2
   real*8 :: pdsa_m, pdca_m, pdcai_m, pdso_m, pdco_m, pdx_m, pdy_m, pdz_m
   real*8 :: pdux_m, pduy_m, pduz_m, pdsinal_m, pdcosal_m
   real*8,dimension(i0:in,j0:jn) :: xcos_m, ycos_m, xsin_m, ysin_m, yrec_m
   real*8,dimension(i0:in,j0:jn) :: xasin_m, yasin_m, xatan_m, yatan_m, zatan_m
   !TRAJECTORY (EXTRA)
   real*8 :: pdux_m1, pduy_m1, pduz_m1, pdsinal_m1, rsxyz_m, pdsinal_m2, rxyz_m 
   real*8,dimension(i0:in,j0:jn) :: suv2_m, slat_m, cos2_m, rcos2_m, sz2_m, xy2_m, rxy2_m 
   !
   !---------------------------------------------------------------------
   vnij = (in-i0+1)*(jn-j0+1)
   trj_i_off = adx_mli0 - adx_li0

   DO_K: do k=1,F_nk
      do j=j0,jn
         do i=i0,in
            !TRAJECTORY
            !---------- 
            xcos_m(i,j) = F_lat_m(i,j,k)
            suv2_m(i,j) = sqrt(F_u_m(i,j,k)**2 + F_v_m(i,j,k)**2) 
            xsin_m(i,j) = sqrt(F_u_m(i,j,k)**2 + F_v_m(i,j,k)**2) * F_dt
!!!         xsin_m(i,j) = suv2_m(i,j) * F_dt
            !TLM
            !--- 
            xcos(i,j) = F_lat(i,j,k)
            xsin(i,j) = ( (F_u(i,j,k) + F_v(i,j,k)) / suv2_m(i,j) ) * F_dt 
         end do
      end do
      !
      do j=j0,jn
         do i=i0,in
            !TRAJECTORY
            !----------
!!!         ysin_m(i,j) = sin(sqrt(F_u_m(i,j,k)**2 + F_v_m(i,j,k)**2) * F_dt)
!!!         ycos_m(i,j) = cos(F_lat_m(i,j,k))
!!!         yrec_m(i,j) = 1./cos(F_lat_m(i,j,k))
            !TLM
            !----
!!!         ysin(i,j) =  cos(sqrt(F_u_m(i,j,k)**2 + F_v_m(i,j,k)**2) * F_dt) * xsin(i,j)
!!!         ycos(i,j) = -sin(F_lat_m(i,j,k))* F_lat(i,j,k)
!!!         yrec(i,j) =( sin(F_lat_m(i,j,k))* F_lat(i,j,k) ) /cos(F_lat_m(i,j,k))**2
         end do
      end do
      !
      call vsin(ysin_m, xsin_m, vnij)
      call vcos(ycos_m, xcos_m, vnij)
      call vsin(slat_m, xcos_m, vnij)
      call vrec(yrec_m, ycos_m, vnij)
      !
      do j=j0,jn
         do i=i0,in
!!!         cos2_m(i,j) = cos(F_lat_m(i,j,k))**2
            cos2_m(i,j) = ycos_m(i,j) **2
         end do
      end do
      !
      call vrec(rcos2_m, cos2_m, vnij)
      !
      DO_J1: do j=j0,jn
         DO_I1: do i=i0,in
            !- cartesian coordinates of grid points
            pdx = adx_cx_8(trj_i_off + i)
            pdy = adx_sx_8(trj_i_off + i)
            pdz = adx_sy_8(j)

            !- if very small wind set upwind point to grid point
            if (abs(F_u_m(i,j,k))+abs(F_v_m(i,j,k)) >= 1.e-10) then
               pdx = pdx * adx_cy_8(j)
               pdy = pdy * adx_cy_8(j)

               ! sin and cosin of first guess of upwind positions
               !TRAJECTORY
               !----------
               pdsa_m  = F_z_m(i,j,k)
               pdca_m  = ycos_m(i,j)
               pdcai_m = yrec_m(i,j)
               pdso_m  = F_y_m(i,j,k) * pdcai_m
               pdco_m  = F_x_m(i,j,k) * pdcai_m

               !TLM
               !---
               pdsa  = F_z(i,j,k)
               pdca  = -slat_m(i,j) * F_lat(i,j,k)
               pdcai = -pdca * rcos2_m(i,j)
               pdso  = F_y_m(i,j,k) * pdcai + F_y(i,j,k) * pdcai_m
               pdco  = F_x_m(i,j,k) * pdcai + F_x(i,j,k) * pdcai_m

               !- wind components in cartesian coordinate at upwind positions
               !TRAJECTORY
               !----------
               pdux_m1 = ( - F_u_m(i,j,k) * pdso_m - F_v_m(i,j,k) * pdco_m * pdsa_m )
               pduy_m1 = (   F_u_m(i,j,k) * pdco_m - F_v_m(i,j,k) * pdso_m * pdsa_m )
               pduz_m1 =     F_v_m(i,j,k) * pdca_m

               !TLM
               !---
               pdux =  - F_u_m(i,j,k) * pdso   - F_v_m(i,j,k) * ( pdco_m * pdsa + pdco * pdsa_m) &
                       - F_u  (i,j,k) * pdso_m - F_v  (i,j,k) *   pdco_m * pdsa_m
               pduy =    F_u_m(i,j,k) * pdco   - F_v_m(i,j,k) * ( pdso_m * pdsa + pdso * pdsa_m) &
                       + F_u  (i,j,k) * pdco_m - F_v  (i,j,k) *   pdso_m * pdsa_m
               pduz = F_v_m(i,j,k) * pdca + F_v(i,j,k) * pdca_m


               !TRAJECTORY
               !----------
               pdsinal_m1 = pdx * pdux_m1 + pdy * pduy_m1 + pdz * pduz_m1
               pdux_m = pdux_m1 - pdx * pdsinal_m1
               pduy_m = pduy_m1 - pdy * pdsinal_m1
               pduz_m = pduz_m1 - pdz * pdsinal_m1

               rsxyz_m  = 1./sqrt( pdux_m * pdux_m + pduy_m * pduy_m + pduz_m * pduz_m )

               pdcosal_m  = sqrt( ( 1.0 + ysin_m(i,j) ) * ( 1.0 - ysin_m(i,j) ) )
!!!            pdsinal_m2 = ysin_m(i,j) * rsxyz_m
               pdsinal_m2 = ysin_m(i,j) / sqrt(pdux_m*pdux_m + pduy_m*pduy_m + pduz_m*pduz_m) 

               rxyz_m     = 1./( pdux_m * pdux_m + pduy_m * pduy_m + pduz_m * pduz_m )

               !TLM
               !---
               pdsinal = pdx * pdux + pdy * pduy + pdz * pduz
               pdux = pdux - pdx * pdsinal
               pduy = pduy - pdy * pdsinal
               pduz = pduz - pdz * pdsinal

               pdsinal =  F_dt*pdcosal_m  *(F_u_m(i,j,k)*F_u(i,j,k)+F_v_m(i,j,k)*F_v(i,j,k))/suv2_m(i,j)
               pdcosal = -F_dt*ysin_m(i,j)*(F_u_m(i,j,k)*F_u(i,j,k)+F_v_m(i,j,k)*F_v(i,j,k))/suv2_m(i,j)
               pdsinal =   pdsinal    *   rsxyz_m & 
                         - pdsinal_m2 * ( pdux_m * pdux  + pduy_m * pduy  + pduz_m * pduz ) * rxyz_m

               !TRAJECTORY
               !----------
               F_x_m(i,j,k) = pdcosal_m * pdx - pdsinal_m2 * pdux_m
               F_y_m(i,j,k) = pdcosal_m * pdy - pdsinal_m2 * pduy_m
               F_z_m(i,j,k) = pdcosal_m * pdz - pdsinal_m2 * pduz_m

               !TLM
               !---
               F_x(i,j,k) = pdcosal * pdx - pdsinal * pdux_m - pdsinal_m2 * pdux
               F_y(i,j,k) = pdcosal * pdy - pdsinal * pduy_m - pdsinal_m2 * pduy
               F_z(i,j,k) = pdcosal * pdz - pdsinal * pduz_m - pdsinal_m2 * pduz

            endif

            !TRAJECTORY + TLM
            !Replace the following line by two IF blocks:
            !--------------------------------------------
            !F_z_m(i,j,k) = min(1.D0,max(1.D0*F_z_m(i,j,k),-1.D0))

            F_z_m_2 = min(1.D0,max(1.D0*F_z_m(i,j,k),-1.D0))

            if ( F_z_m(i,j,k) .lt. -1.D0 ) then
!!!            F_z_m(i,j,k) = -1.D0
               F_z  (i,j,k) =  0.D0
            elseif ( F_z_m(i,j,k) .gt.  1.0D0 ) then
!!!            F_z_m(i,j,k) =  1.D0
               F_z  (i,j,k) =  0.D0
            endif

            F_z_m(i,j,k) = F_z_m_2

            xasin_m(i,j) = F_z_m(i,j,k)
            xatan_m(i,j) = F_x_m(i,j,k)
            yatan_m(i,j) = F_y_m(i,j,k)
            sz2_m  (i,j) = sqrt(1.0 - F_z_m(i,j,k)*F_z_m(i,j,k))
            xy2_m  (i,j) = F_x_m(i,j,k)*F_x_m(i,j,k) + F_y_m(i,j,k)*F_y_m(i,j,k)

         enddo DO_I1
      enddo DO_J1

!TODO: merge this part with the same done in trajex

      !TRAJECTORY
      !----------
      call vasin  ( yasin_m, xasin_m,          vnij )
      call vatan2 ( zatan_m, yatan_m, xatan_m, vnij )
      call vrec   ( rxy2_m,  xy2_m  ,          vnij )

      do j=j0,jn
         do i=i0,in

            !TRAJECTORY
            !----------
            F_lat_m(i,j,k) = yasin_m(i,j)
            F_lon_m(i,j,k) = zatan_m(i,j)

            !TLM
            !---
            if ( abs(F_z_m(i,j,k)) .ne. 1.D0 ) then
               F_lat(i,j,k) = F_z(i,j,k) / sz2_m(i,j)
            else
               F_lat(i,j,k) = 0.D0
            endif
            F_lon(i,j,k) = (F_x_m(i,j,k)*F_y (i,j,k) - F_y_m(i,j,k)*F_x (i,j,k)) * rxy2_m(i,j)

            !TRAJECTORY + TLM
            !----------------
            if ( F_lon_m(i,j,k) .lt. 0.0 ) F_lon_m(i,j,k) = F_lon_m(i,j,k) + CONST_2PI_8 

         end do
      end do

   enddo DO_K
   !---------------------------------------------------------------------
   return
end subroutine adx_trajsp2_tl
