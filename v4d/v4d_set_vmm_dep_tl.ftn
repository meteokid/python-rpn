!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r v4d_set_vmm_dep_tl - TLM of v4d_set_vmm_dep
*
#include "model_macros_f.h"
*
      subroutine v4d_set_vmm_dep_tl
*
      implicit none
*
      integer ipart
*
*author
*     M.Tanguay
*
*revision
* v3_31 - Tanguay M.        - initial MPI version
* v3_31 - Tanguay M.        - Control BC
*
*object
*     see id section
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "vt1m.cdk"
#include "vtxm.cdk"
#include "ind.cdk"
#include "indm.cdk"
#include "v4dg.cdk"
#include "p_geof.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer key1(50),nvar,err,i,j,k
      real pr1, pr2
*
*     __________________________________________________________________
*
      if (.not.Schm_hydro_L) call gem_stop ('v4d_set_vmm_dep_tl STOP',-1)
*
      if (Lun_out.gt.0) write(Lun_out,1000) 
*
*     Get VMM fields in memory
*     ------------------------
      key1( 1) = VMM_KEY( fit1)
      key1( 2) = VMM_KEY(  ut1)
      key1( 3) = VMM_KEY(  vt1)
      key1( 4) = VMM_KEY(  tt1)
      key1( 5) = VMM_KEY(  qt1)
      key1( 6) = VMM_KEY(fipt1)
      key1( 7) = VMM_KEY(  st1)
      key1( 8) = VMM_KEY(pipt1)
      key1( 9) = VMM_KEY( tpt1)
      key1(10) = VMM_KEY(tplt1)
      key1(11) = VMM_KEY( gptx)
      key1(12) = VMM_KEY(psdt1)
      key1(13) = VMM_KEY( tdt1)
      key1(14) = VMM_KEY( topo)
      nvar=14
*
*     TRAJECTORY
*     ----------
      key1( nvar+ 1) = VMM_KEY( fit1m)
      key1( nvar+ 2) = VMM_KEY(  ut1m)
      key1( nvar+ 3) = VMM_KEY(  vt1m)
      key1( nvar+ 4) = VMM_KEY(  tt1m)
      key1( nvar+ 5) = VMM_KEY(  qt1m)
      key1( nvar+ 6) = VMM_KEY(fipt1m)
      key1( nvar+ 7) = VMM_KEY(  st1m)
      key1( nvar+ 8) = VMM_KEY(pipt1m)
      key1( nvar+ 9) = VMM_KEY( tpt1m)
      key1( nvar+10) = VMM_KEY(tplt1m)
      key1( nvar+11) = VMM_KEY( gptxm)
      key1( nvar+12) = VMM_KEY(psdt1m)
      key1( nvar+13) = VMM_KEY( tdt1m)
      nvar= nvar+13
*
      err = vmmlod(key1,nvar)
*
      err = VMM_GET_VAR( fit1)
      err = VMM_GET_VAR(  ut1)
      err = VMM_GET_VAR(  vt1)
      err = VMM_GET_VAR(  tt1)
      err = VMM_GET_VAR(  qt1)
      err = VMM_GET_VAR(fipt1)
      err = VMM_GET_VAR(  st1)
      err = VMM_GET_VAR(pipt1)
      err = VMM_GET_VAR( tpt1)
      err = VMM_GET_VAR(tplt1)
      err = VMM_GET_VAR( gptx)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR( tdt1)
      err = VMM_GET_VAR( topo)
*
*     TRAJECTORY
*     ----------
      err = VMM_GET_VAR( fit1m)
      err = VMM_GET_VAR(  ut1m)
      err = VMM_GET_VAR(  vt1m)
      err = VMM_GET_VAR(  tt1m)
      err = VMM_GET_VAR(  qt1m)
      err = VMM_GET_VAR(fipt1m)
      err = VMM_GET_VAR(  st1m)
      err = VMM_GET_VAR(pipt1m)
      err = VMM_GET_VAR( tpt1m)
      err = VMM_GET_VAR(tplt1m)
      err = VMM_GET_VAR( gptxm)
      err = VMM_GET_VAR(psdt1m)
      err = VMM_GET_VAR( tdt1m)
*
      Ind_fi_  = fit1_
      Ind_u_   = ut1_
      Ind_v_   = vt1_
      Ind_t_   = tt1_
      Ind_q_   = qt1_
      Ind_fip_ = fipt1_
      Ind_s_   = st1_
      Ind_pip_ = pipt1_
      Ind_tp_  = tpt1_
      Ind_tpl_ = tplt1_
      Ind_gp_  = gptx_
      Ind_psd_ = psdt1_
      Ind_td_  = tdt1_
      Ind_topo_= topo_
*
      Indm_fim_  = fit1m_
      Indm_um_   = ut1m_
      Indm_vm_   = vt1m_
      Indm_tm_   = tt1m_
      Indm_qm_   = qt1m_
      Indm_fipm_ = fipt1m_
      Indm_sm_   = st1m_
      Indm_pipm_ = pipt1m_
      Indm_tpm_  = tpt1m_
      Indm_tplm_ = tplt1m_
      Indm_gpm_  = gptxm_
      Indm_psdm_ = psdt1m_
      Indm_tdm_  = tdt1m_
*
*     -------------------------------------------------------------
*     Set dependent variables phi',phi from T',s' when Schm_hydro_L
*     -------------------------------------------------------------
      if(Schm_hydro_L) call vtap_tl ()
*
!$omp parallel private (pr1,pr2)
*
      if(.not.Schm_hydro_L) then
*
*           Compute phi from phi'
*           ---------------------
!$omp do 
            do k= 1, G_nk
            do j= 1, l_nj
            do i= 1, l_ni
*
*              TRAJECTORY
*              ----------
               Indm_fim(i,j,k) =  Indm_fipm(i,j,k) + Cstvr_fistr_8(k)
     $                                             + Ind_topo(i,j)
*
*              TLM
*              ---
               Ind_fi(i,j,k) =  Ind_fip(i,j,k) 
*
            end do
            end do
            end do
!$omp end do 
*
      endif
*
*     Compute T from T'
*     -----------------
!$omp do 
      do k= 1, G_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
*        TRAJECTORY
*        ----------
         Indm_tm(i,j,k)  = Indm_tpm(i,j,k) + Cstv_tstr_8
*
*        TLM
*        ---
         Ind_t(i,j,k)  = Ind_tp(i,j,k) 
*
      end do
      end do
      end do
!$omp end do 
*
*     Compute q
*     ---------
!$omp do 
      do k= 1, G_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
*        TRAJECTORY
*        ----------
         Indm_qm(i,j,k) = alog( Geomg_pia(k) + Geomg_pib(k)*exp(Indm_sm(i,j)))
*
*        TLM
*        ---
         Ind_q(i,j,k) = ( Geomg_pib(k)*exp(Indm_sm(i,j))*Ind_s(i,j)     )/
     %                  ( Geomg_pia(k) + Geomg_pib(k)*exp(Indm_sm(i,j)) )
*
      end do
      end do
      end do
!$omp end do 
*
*     Compute pi'
*     -----------
!$omp do 
      do k= 1, G_nk
*
      if (k.eq.1) then
      do j= 1, l_nj
      do i= 1, l_ni
*
*        TRAJECTORY
*        ----------
         Indm_pipm(i,j,1) = 0.
*
*        TLM
*        ---
         Ind_pip(i,j,1) = 0.
*
      end do
      end do
*
      else
*
      do j= 1, l_nj
      do i= 1, l_ni
*
*        TRAJECTORY
*        ----------
         Indm_pipm(i,j,k) = Geomg_pia(k)+Geomg_pib(k)*exp(Indm_sm(i,j))
     %                      - Geomg_z_8(k)
*
*        TLM
*        ---
         Ind_pip(i,j,k) = Geomg_pib(k)*exp(Indm_sm(i,j))*Ind_s(i,j)
*
      end do
      end do
      endif
*
      end do
!$omp end do 
*
*     Compute P and T'
*                    lin
*     ------------------
!$omp do 
      do k= 1, G_nk
         pr1 = Dcst_rgasd_8 * Cstv_tstr_8 * Geomg_pib(k) / Geomg_z_8(k)
         pr2 = Cstv_tstr_8*(Geomg_pib(k)/Geomg_z_8(k) - Geomg_dpib(k))
         do j= 1, l_nj
         do i= 1, l_ni
*
*           TRAJECTORY
*           ----------
            Indm_gpm (i,j,k) = Indm_fipm(i,j,k) + pr1 * Indm_sm(i,j)
            Indm_tplm(i,j,k) = (Cstv_tstr_8+Indm_tpm(i,j,k))*
     %            (1.0+Geomg_dpib(k)*(exp(Indm_sm(i,j))-1.))*
     %      Geomg_z_8(k) / (Geomg_z_8(k) + Indm_pipm(i,j,k)) - Cstv_tstr_8
*
            Indm_tplm(i,j,k) = Indm_tplm(i,j,k) + pr2 * Indm_sm(i,j)

*
*           TLM
*           ---
            Ind_gp (i,j,k) = Ind_fip(i,j,k) + pr1 * Ind_s(i,j)
            Ind_tpl(i,j,k) =
     %                       (              Ind_tp   (i,j,k)           ) *
     %              (1.0+Geomg_dpib(k)*(exp(Indm_sm  (i,j))-1.)        ) *
     %       Geomg_z_8(k) / (Geomg_z_8(k) + Indm_pipm(i,j,k)) +
*
     %                        ( Cstv_tstr_8+Indm_tpm (i,j,k)           ) *
     %              (    Geomg_dpib(k)* exp(Indm_sm  (i,j))*Ind_s(i,j) ) *
     %       Geomg_z_8(k) / (Geomg_z_8(k) + Indm_pipm(i,j,k)) +
*
     %               (-1)*(
     %                        ( Cstv_tstr_8+Indm_tpm (i,j,k)           ) *
     %              (1.0+Geomg_dpib(k)*(exp(Indm_sm  (i,j))-1.)        ) *
     %       Geomg_z_8(k) / (Geomg_z_8(k) + Indm_pipm(i,j,k))**2
     %                    ) * Ind_pip(i,j,k)
*
            Ind_tpl(i,j,k) = Ind_tpl(i,j,k) + pr2 * Ind_s(i,j)
*
         end do
         end do
      end do
!$omp end do 
*
!$omp end parallel 
*
*     TLM of
*     Compute total divergence and vertical velocity
*     from winds with revised nesting
*     ----------------------------------------------
      call uv2tdpsd_tl( Ind_td,  Ind_psd,  Ind_u,  Ind_v,  Ind_s, 
     $                  Indm_tdm,Indm_psdm,Indm_um,Indm_vm,Indm_sm,
     $                  LDIST_DIM, l_nk)
*
      err = vmmuld(key1,nvar)
*
1000  format(//,'PREPROCESSING DATA: (S/R V4D_SET_VMM_TL)',
     %        /,'========================================',//)
*
*     __________________________________________________________________
      return
      end
