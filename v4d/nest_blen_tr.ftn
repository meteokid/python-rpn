! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nest_blen_tr - Equivalent to nest_blen for TRAJECTORY 
*
#include "model_macros_f.h"
*
      subroutine nest_blen_tr ()
*
      implicit none
*
*author M.Tanguay 
*
*revision
* v3_30 - Tanguay M.        - initial MPI version
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*
*arguments
*       none
*
*implicits
#include "glb_ld.cdk"
#include "vt1_m.cdk"
#include "nest_m.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "hblen.cdk"
#include "vtopo.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer err,key(26),i,j,k,nvar
      integer key1(Tr3d_ntr),key1_,key2(Tr3d_ntr),key2_, n
      real tr_m,tr1_m
      pointer (patr_m, tr_m(LDIST_SHAPE,*)),(patr1_m,tr1_m(LDIST_SHAPE,*))
*----------------------------------------------------------------------
*
      if ( (north+south+west+east.lt.1) .or.
     $    ((Hblen_x.le.0).and.(Hblen_y.le.0)) ) return
*
      key(1 )=VMM_KEY(nest_u_m)
      key(2 )=VMM_KEY(nest_v_m)
      key(3 )=VMM_KEY(nest_w_m)
      key(4 )=VMM_KEY(nest_t_m)
      key(5 )=VMM_KEY(nest_zd_m)
      key(6 )=VMM_KEY(nest_s_m)
      key(7 )=VMM_KEY(ut1_m)
      key(8 )=VMM_KEY(vt1_m)
      key(9 )=VMM_KEY(wt1_m)
      key(10)=VMM_KEY(tt1_m)
      key(11)=VMM_KEY(zdt1_m)
      key(12)=VMM_KEY(st1_m)
      nvar = 12
*
      if (.not.Schm_hydro_L) then
         key(13)=VMM_KEY(nest_q_m)
         key(14)=VMM_KEY(qt1_m)
         nvar = 14
      endif
*
      err = vmmlod(key,nvar)
      err = VMM_GET_VAR(nest_u_m)
      err = VMM_GET_VAR(nest_v_m)
      err = VMM_GET_VAR(nest_w_m)
      err = VMM_GET_VAR(nest_t_m)
      err = VMM_GET_VAR(nest_zd_m)
      err = VMM_GET_VAR(nest_s_m)
      err = VMM_GET_VAR(ut1_m)
      err = VMM_GET_VAR(vt1_m)
      err = VMM_GET_VAR(wt1_m)
      err = VMM_GET_VAR(tt1_m)
      err = VMM_GET_VAR(zdt1_m)
      err = VMM_GET_VAR(st1_m)
      if (.not.Schm_hydro_L) then
         err = VMM_GET_VAR(nest_q_m)
         err = VMM_GET_VAR(qt1_m)
      endif
*
* Update the nesting values in the blending zone before blending
* if the orography is growing
      if (Vtopo_L.and.(.not.Schm_theoc_L)) then
         call vtopo_bnd_update(nest_t_m,nest_s_m,
     $        LDIST_DIM,G_nk,Hblen_x,Hblen_y)
      endif
*
* Set up blending zones
      call nesajr (ut1_m  ,nest_u_m  ,LDIST_DIM,G_nk  ,1,0,Hblen_x,Hblen_y)
      call nesajr (vt1_m  ,nest_v_m  ,LDIST_DIM,G_nk  ,0,1,Hblen_x,Hblen_y)
      call nesajr (wt1_m  ,nest_w_m  ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
      call nesajr (zdt1_m ,nest_zd_m ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
      call nesajr (tt1_m  ,nest_t_m  ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
      call nesajr (st1_m  ,nest_s_m  ,LDIST_DIM,1     ,0,0,Hblen_x,Hblen_y)
*
      if (.not. Schm_hydro_L) then
      call nesajr (qt1_m  ,nest_q_m  ,LDIST_DIM,G_nk+2,0,0,Hblen_x,Hblen_y)
      endif
*
      err = vmmuld(key,nvar)
*
      key2_ = VMM_KEY (nest_tr_m)
      key1_ = VMM_KEY (trt1_m)
      do n=1,Tr3d_ntr
         key2(n) = key2_ + n
         key1(n) = key1_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key2,Tr3d_ntr)
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key2(n),patr_m, tr_m)
            err = vmmget(key1(n),patr1_m,tr1_m)
            call nesajr (tr1_m, tr_m, LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
         enddo
         err = vmmuld(key1,Tr3d_ntr)
         err = vmmuld(key2,Tr3d_ntr)
      endif
*
*----------------------------------------------------------------------
      return
      end
