! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r pre_ad - ADJ of pre_tl
*
#include "model_macros_f.h"
*
      subroutine pre_ad
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_31 - Tanguay M.        - adapt ADJ for new advection code
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - Add work arrays 
*                           - AIXport+Opti+OpenMP for TLM-ADJ
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "geomg.cdk"
#include "rhsc.cdk"
#include "orh.cdk"
#include "vt1.cdk"
#include "rhsc_m.cdk"
#include "vt1_m.cdk"
#include "p_geof.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "orh_m.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer pnerr, pnlod, pnlkey1(60), i, j, k 
*     ______________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)
*
*     Recover TRAJ RUW2/RVW2 from ORH for PRE_AD
*     ------------------------------------------
      pnlkey1(1) = VMM_KEY(ruw2_m )
      pnlkey1(2) = VMM_KEY(rvw2_m )
      pnlkey1(3) = VMM_KEY(oruw2_m)
      pnlkey1(4) = VMM_KEY(orvw2_m)
      pnerr = vmmlod(pnlkey1,4)
      pnerr = VMM_GET_VAR(ruw2_m )
      pnerr = VMM_GET_VAR(rvw2_m )
      pnerr = VMM_GET_VAR(oruw2_m)
      pnerr = VMM_GET_VAR(orvw2_m)
*
      ruw2_m = oruw2_m
      rvw2_m = orvw2_m
*
      pnerr = vmmuld(-1,0)
*     -----------------------------------------
*
      pnlkey1(1)  = VMM_KEY(rhsu)
      pnlkey1(2)  = VMM_KEY(rhsv)
      pnlkey1(3)  = VMM_KEY(ruw1)
      pnlkey1(4)  = VMM_KEY(ruw2)
      pnlkey1(5)  = VMM_KEY(rvw1)
      pnlkey1(6)  = VMM_KEY(rvw2)
      pnlkey1(7)  = VMM_KEY(xct1)
      pnlkey1(8)  = VMM_KEY(yct1)
      pnlkey1(9)  = VMM_KEY(zct1)
      pnlkey1(10) = VMM_KEY(topo)
      pnlkey1(11) = VMM_KEY(rhsc)
      pnlkey1(12) = VMM_KEY(rhst)
      pnlkey1(13) = VMM_KEY(orhsu)
      pnlkey1(14) = VMM_KEY(orhsv)
      pnlkey1(15) = VMM_KEY(rhsf)
      pnlod = 15
      if (.not. Schm_hydro_L) then
         pnlkey1(16) = VMM_KEY(rhsw)
         pnlod = 16
      endif
*
*     TRAJECTORY
*     ----------
      pnlkey1(pnlod+1)  = VMM_KEY(ruw2_m)
      pnlkey1(pnlod+2)  = VMM_KEY(rvw2_m)
      pnlkey1(pnlod+3)  = VMM_KEY(xct1_m)
      pnlkey1(pnlod+4)  = VMM_KEY(yct1_m)
      pnlkey1(pnlod+5)  = VMM_KEY(zct1_m)
      pnlod  =pnlod+5 
*
*     - - - - - - - - - - - - - - -
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(rhsu)
      pnerr = VMM_GET_VAR(rhsv)
      pnerr = VMM_GET_VAR(ruw1)
      pnerr = VMM_GET_VAR(ruw2)
      pnerr = VMM_GET_VAR(rvw1)
      pnerr = VMM_GET_VAR(rvw2)
      pnerr = VMM_GET_VAR(xct1)
      pnerr = VMM_GET_VAR(yct1)
      pnerr = VMM_GET_VAR(zct1)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(rhsc)
      pnerr = VMM_GET_VAR(rhst)
      pnerr = VMM_GET_VAR(orhsu)
      pnerr = VMM_GET_VAR(orhsv)
      pnerr = VMM_GET_VAR(rhsf)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(rhsw)
      else
         rhsw_ = 0
      endif
*
*     TRAJECTORY
*     ----------
      pnerr = VMM_GET_VAR(ruw2_m)
      pnerr = VMM_GET_VAR(rvw2_m)
      pnerr = VMM_GET_VAR(xct1_m)
      pnerr = VMM_GET_VAR(yct1_m)
      pnerr = VMM_GET_VAR(zct1_m)
*
      call prep_2_ad ( rhsu ,rhsv ,ruw1  ,ruw2 ,rvw1 ,rvw2 ,
     %                 xct1 ,yct1 ,zct1  ,topo ,rhsc ,rhst ,
     %                 rhsw ,rhsf ,orhsu ,orhsv,
*
     %                 ruw2_m,rvw2_m,
     %                 xct1_m,yct1_m,zct1_m, 
*
     %                 LDIST_DIM, l_ni, l_nj, l_nk )
*
      pnerr = vmmuld(-1,0)

1000  format(3X,'ADJ of COMPUTE PRE-COMPUTATIONS: (S/R PRE_AD)')

      return
      end
