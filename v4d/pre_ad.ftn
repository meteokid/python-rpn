!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r pre_ad - ADJ of pre_tl
*
#include "model_macros_f.h"
*
      subroutine pre_ad
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_31 - Tanguay M.        - adapt ADJ for new advection code
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - Add work arrays 
*                           - AIXport+Opti+OpenMP for TLM-ADJ
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
* v4_12 - Tanguay M.        - TL/AD Open top
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "geomg.cdk"
#include "rhsc.cdk"
#include "orh.cdk"
#include "vt1.cdk"
#include "rhsc_m.cdk"
#include "vt1_m.cdk"
#include "p_geof.cdk"
#include "schm.cdk"
#include "lctl.cdk"
#include "orh_m.cdk"
#include "nest.cdk"
*
*     ______________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)
*
*     Recover TRAJ RUW2/RVW2 from ORH for PRE_AD
*     ------------------------------------------
      gmmstat = gmm_get(gmmk_ruw2_m_s,ruw2_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(ruw2_m)'
      gmmstat = gmm_get(gmmk_rvw2_m_s,rvw2_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(rvw2_m)'
*
      gmmstat = gmm_get(gmmk_oruw2_m_s,oruw2_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(oruw2_m)'
      gmmstat = gmm_get(gmmk_orvw2_m_s,orvw2_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(orvw2_m)'
*
      ruw2_m = oruw2_m
      rvw2_m = orvw2_m
*
*     -----------------------------------------
      gmmstat = gmm_get(gmmk_rhsu_s,rhsu,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad  ERROR at gmm_get(rhsu)'
      gmmstat = gmm_get(gmmk_rhsv_s,rhsv,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad  ERROR at gmm_get(rhsv)'
      gmmstat = gmm_get(gmmk_rhst_s,rhst,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad  ERROR at gmm_get(rhst)'
      gmmstat = gmm_get(gmmk_rhsc_s,rhsc,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad  ERROR at gmm_get(rhsc)'
      gmmstat = gmm_get(gmmk_rhsf_s,rhsf,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad  ERROR at gmm_get(rhsf)'
      gmmstat = gmm_get(gmmk_rhsb_s,rhsb,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad  ERROR at gmm_get(rhsb)'
      gmmstat = gmm_get(gmmk_ruw1_s,ruw1,meta3d)
      If (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(ruw1)'
      gmmstat = gmm_get(gmmk_rvw1_s,rvw1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(rvw1)'
      gmmstat = gmm_get(gmmk_ruw2_s,ruw2,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(ruw2)'
      gmmstat = gmm_get(gmmk_rvw2_s,rvw2,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(rvw2)'
      gmmstat = gmm_get(gmmk_xct1_s,xct1,tmp_meta1d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(xct1)'
      gmmstat = gmm_get(gmmk_yct1_s,yct1,tmp_meta1d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(yct1)'
      gmmstat = gmm_get(gmmk_zct1_s,zct1,tmp_meta1d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(zct1)'
      gmmstat = gmm_get(gmmk_orhsu_s,orhsu,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(orhsu)'
      gmmstat = gmm_get(gmmk_orhsv_s,orhsv,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(orhsv)'
*
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_rhsw_s,rhsw,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(rhsw)'
      endif
*
      if (Schm_opentop_L) then
         gmmstat = gmm_get(gmmk_nest_t_s,nest_t,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(nest_t)'
      endif
*
      gmmstat = gmm_get(gmmk_topo_s,topo,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(topo)'
*
*     TRAJECTORY
*     ----------
      gmmstat = gmm_get(gmmk_ruw2_m_s,ruw2_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(ruw2_m)'
      gmmstat = gmm_get(gmmk_rvw2_m_s,rvw2_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(rvw2_m)'
      gmmstat = gmm_get(gmmk_xct1_m_s,xct1_m,tmp_meta1d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(xct1_m)'
      gmmstat = gmm_get(gmmk_yct1_m_s,yct1_m,tmp_meta1d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(yct1_m)'
      gmmstat = gmm_get(gmmk_zct1_m_s,zct1_m,tmp_meta1d)
      if (GMM_IS_ERROR(gmmstat)) print *,'pre_ad ERROR at gmm_get(zct1_m)'
*
      call prep_2_ad ( rhsu ,rhsv ,ruw1  ,ruw2 ,rvw1 ,rvw2 ,
     %                 xct1 ,yct1 ,zct1  ,topo ,rhsc ,rhst ,
     %                 rhsw ,rhsf ,orhsu ,orhsv,rhsb ,nest_t,
*
     %                 ruw2_m,rvw2_m,
     %                 xct1_m,yct1_m,zct1_m, 
*
     %                 LDIST_DIM, l_ni, l_nj, l_nk )
*
1000  format(3X,'ADJ of COMPUTE PRE-COMPUTATIONS: (S/R PRE_AD)')

      return
      end
