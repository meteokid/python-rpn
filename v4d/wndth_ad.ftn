!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r wndth_ad - ADJ of wndth 
*
#include "model_macros_f.h"
*
      subroutine wndth_ad
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v3_20 - Tanguay M.        - 1d higher order diffusion operator 
* v4_04 - Tanguay M.        - Staggered version TL/AD
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
* v4_12 - Tanguay M.        - OPENMP TL/AD
*
*object
*     see id section
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt0.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "hzd.cdk"
#include "schm.cdk"
#include "ver.cdk"
*
      integer i, j, k
*
      real*8, parameter :: ZERO_8 = 0.0
*
*     ---------------------------------------------------------------
*
      gmmstat = gmm_get(gmmk_uth_s, uth ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(uth)'
      gmmstat = gmm_get(gmmk_vth_s, vth ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(vth)'
      gmmstat = gmm_get(gmmk_zdth_s,zdth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(zdth)'
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_ut0_s,ut0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(ut0)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_vt0_s,vt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(vt0)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_zdt0_s,zdt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_ad ERROR at gmm_get(zdt0)'
*
*
*     Perform the averaging
*     ---------------------
*
!$omp parallel
*
      if(.not.Schm_zdotMid_L) then
!$omp do
      do k=l_nk+1,1,-1
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
            zdt0(i,j,k) = 0.5 * zdth(i,j,k) + zdt0(i,j,k)
            zdt1(i,j,k) = 0.5 * zdth(i,j,k) + zdt1(i,j,k)
            zdth(i,j,k) = ZERO_8
         end do
         end do
      end do
!$omp enddo
      endif
*
!$omp do
      do k=1,l_nk
*
         do j= 1+pil_s, l_njv-pil_n
         do i= 1+pil_w, l_ni-pil_e
         vt0(i,j,k)   = 0.5 * vth(i,j,k) + vt0(i,j,k)
         vt1(i,j,k)   = 0.5 * vth(i,j,k) + vt1(i,j,k)
         vth(i,j,k)   = ZERO_8
         end do
         end do
*
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
         ut0(i,j,k)   = 0.5 * uth(i,j,k) + ut0(i,j,k)
         ut1(i,j,k)   = 0.5 * uth(i,j,k) + ut1(i,j,k)
         uth(i,j,k)   = ZERO_8
         end do
         end do
*
      end do
!$omp enddo
*
!$omp end parallel
*
*     Filtering
*     ---------
      if (Hzd_t0_1_L) call hzd_hoffld_ad (zdt0, LDIST_DIM, G_nk+1,3)
      if (Hzd_t0_1_L) call hzd_hoffld_ad (vt0,  LDIST_DIM, G_nk,  2)
      if (Hzd_t0_1_L) call hzd_hoffld_ad (ut0,  LDIST_DIM, G_nk,  1)
*
*     ---------------------------------------------------------------
*
 1000 format(
     +/ /,'ADJ of AVERAGE WINDS t0-dt/2 (th): (S/R WNDTH_AD)',
     + /,'==================================================',
     +/ /)
*
      return
      end
