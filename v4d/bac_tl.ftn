! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r  bac_tl - TLM of bac 
*
#include "model_macros_f.h"
*
      subroutine bac_tl( Itr, Itnlh )
*
      implicit none
*
      integer Itr, Itnlh
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_30 - Edouard S.        - remove pi' at the top (pptt0) - hybrid version
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - adapt for tracers in tr3d  
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
*  Itr          I           current nonlinear iteration number
*  Itnlh        I           total number of nonlinear iterations
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "vt0.cdk"
#include "vtx.cdk"
#include "lctl.cdk"
#include "rhsc_m.cdk"
#include "nl_m.cdk"
#include "vt0_m.cdk"
#include "vtx_m.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer pnerr, pnlod, pnlkey1(60)
*
      real w_fiptx   (LDIST_SHAPE,0:l_nk+1)
      real w_fiptx_m (LDIST_SHAPE,0:l_nk+1)
*
*     ______________________________________________________
*
      if (Lun_debug_L) write(Lun_out,1000)
*
      pnlkey1( 1) = VMM_KEY(topo)
      pnlkey1( 2) = VMM_KEY(ut0)
      pnlkey1( 3) = VMM_KEY(vt0)
      pnlkey1( 4) = VMM_KEY(wt0)
      pnlkey1( 5) = VMM_KEY(tt0)
      pnlkey1( 6) = VMM_KEY(st0)
      pnlkey1( 7) = VMM_KEY(zdt0)
      pnlkey1( 8) = VMM_KEY(fiptx)
      pnlkey1( 9) = VMM_KEY(rhsu)
      pnlkey1(10) = VMM_KEY(rhsv)
      pnlkey1(11) = VMM_KEY(rhst)
      pnlkey1(12) = VMM_KEY(rhsf)
      pnlod = 12
      if (.not. Schm_hydro_L) then
         pnlkey1(13) = VMM_KEY(qt0)
         pnlkey1(14) = VMM_KEY(rhsw)
         pnlod = 14
      endif
*
*     TRAJECTORY
*     ----------
      pnlkey1(pnlod+ 1) = VMM_KEY(ut0_m)
      pnlkey1(pnlod+ 2) = VMM_KEY(vt0_m)
      pnlkey1(pnlod+ 3) = VMM_KEY(wt0_m)
      pnlkey1(pnlod+ 4) = VMM_KEY(tt0_m)
      pnlkey1(pnlod+ 5) = VMM_KEY(st0_m)
      pnlkey1(pnlod+ 6) = VMM_KEY(zdt0_m)
      pnlkey1(pnlod+ 7) = VMM_KEY(fiptx_m)
      pnlkey1(pnlod+ 8) = VMM_KEY(rhsu_m)
      pnlkey1(pnlod+ 9) = VMM_KEY(rhsv_m)
      pnlkey1(pnlod+10) = VMM_KEY(rhst_m)
      pnlkey1(pnlod+11) = VMM_KEY(rhsf_m)
      pnlod = pnlod+11
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0_m)
         pnlkey1(pnlod+2) = VMM_KEY(rhsw_m)
         pnlod = pnlod+2
      endif
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(ut0)
      pnerr = VMM_GET_VAR(vt0)
      pnerr = VMM_GET_VAR(wt0)
      pnerr = VMM_GET_VAR(tt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(zdt0)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(rhsu)
      pnerr = VMM_GET_VAR(rhsv)
      pnerr = VMM_GET_VAR(rhst)
      pnerr = VMM_GET_VAR(rhsf)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0)
         pnerr = VMM_GET_VAR(rhsw)
      else
         qt0_ = 0
         rhsw_    = 0
      endif
*
*     TRAJECTORY
*     ----------
      pnerr = VMM_GET_VAR(ut0_m)
      pnerr = VMM_GET_VAR(vt0_m)
      pnerr = VMM_GET_VAR(wt0_m)
      pnerr = VMM_GET_VAR(tt0_m)
      pnerr = VMM_GET_VAR(st0_m)
      pnerr = VMM_GET_VAR(zdt0_m)
      pnerr = VMM_GET_VAR(fiptx_m)
      pnerr = VMM_GET_VAR(rhsu_m)
      pnerr = VMM_GET_VAR(rhsv_m)
      pnerr = VMM_GET_VAR(rhst_m)
      pnerr = VMM_GET_VAR(rhsf_m)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0_m)
         pnerr = VMM_GET_VAR(rhsw_m)
      else
         qt0_m_ = 0
         rhsw_m_    = 0
      endif
*
*     Use to alleviate confusion in bac_ad 
*     ------------------------------------
      w_fiptx   = fiptx
      w_fiptx_m = fiptx_m
*
      call  bacp_2_tl (
     %                 Itr , Itnlh, w_fiptx, topo ,
     %                 ut0 , vt0  , wt0    , tt0  ,
     %                 st0 , zdt0 , qt0    , fiptx,
     %                 rhsu, rhsv , rhst   , rhsw , rhsf,
     %                 nl_u, nl_v , nl_t   , nl_w , nl_f,
*
     %                                 w_fiptx_m ,
     %                 ut0_m , vt0_m , wt0_m     , tt0_m  ,
     %                 st0_m , zdt0_m, qt0_m     , fiptx_m,
     %                 rhsu_m, rhsv_m, rhst_m    , rhsw_m , rhsf_m,
     %                 nl_m_u, nl_m_v, nl_m_t    , nl_m_w , nl_m_f,
*
     %                 LDIST_DIM, l_nk )
*
      pnerr = vmmuld(-1,0)

1000  format (5X,'TLM of BACK SUBSTITUTION: (S/R BAC_TL)')

      return
      end
