! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r v4d_rwtraj_dyn - For DYNAMICS: Read (Write) from (on) TRAJ WA file at each time step 
*
#include "model_macros_f.h"
*
      subroutine v4d_rwtraj_dyn (numtr,u,v,w)
*
*-------------------------------------------------------------------------
*  CAUTION: Parameters list is extended ONLY when numtr=5
*-------------------------------------------------------------------------
*
      implicit none
*
      integer numtr
*
c     real, optional ::  u(*),v(*),w(*) KO NAOS
      real           ::  u(*),v(*),w(*)
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - ADJ of HO option
*                           - ADJ of vertical sponge layer
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - change parameters of v4d_rwfld 
*                           - introduce v4d_rwfldx 
*                           - adapt for tracers in tr3d  
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - Remove HU in numtr.eq.1 
*                           - ADJ of digital filter 
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ 
* v3_30 - Tanguay M.        - Validation for LAM Nonhyd
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*
*
*arguments
* Name         I/O     Description
*-------------------------------------------------------------------------
* numtr        I       Indicates which portion of TRAJECTORY to Read-Write 
*-------------------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "lctl.cdk"
#include "vt1.cdk"
#include "vt1_m.cdk"
#include "vtx.cdk"
#include "vtx_m.cdk"
#include "vth.cdk"
#include "vth_m.cdk"
#include "rhsc.cdk"
#include "rhsc_m.cdk"
#include "vt0.cdk"
#include "vt0_m.cdk"
#include "v4dg.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "cori.cdk"
#include "tr3d.cdk"
#include "nl.cdk"
#include "nl_m.cdk"
#include "nest.cdk"
#include "nest_m.cdk"
#include "step.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
      integer pnerr,pnlkey1(100),pnlod,err,istep,i,j,k,n,iadd
*
      logical plpr_L
*
      integer key1_,key1(Tr3d_ntr),key1_m_,key1_m(Tr3d_ntr)
      real tr,tr_m
      pointer (patr, tr(LDIST_SHAPE,*)),(patr_m, tr_m(LDIST_SHAPE,*))
*
*     ______________________________________________________
*
      if (numtr     .gt.MAX_TR_NUMTR) call gem_stop('RWTRAJ_DYN numtr KO ',-1) 
      if (Step_total.gt.MAX_TR_STEP ) call gem_stop('RWTRAJ_DYN step  KO ',-1) 
      if (Schm_itcn .gt.MAX_TR_ITCN ) call gem_stop('RWTRAJ_DYN itcn  KO ',-1) 
      if (Schm_itnlh.gt.MAX_TR_ITNLH) call gem_stop('RWTRAJ_DYN itnlh KO ',-1) 
*
      if (numtr.gt.10) call gem_stop('ABORT v4d_rwtraj_dyn numtr not done',-1) 
*
*     Flag to trace storing and retrieving of trajectory
*     --------------------------------------------------
      plpr_L = .false.
      plpr_L = plpr_L.and.Lun_out.gt.0 
*
      istep = Lctl_step 
*
*     ------------------
*     TRAJ initial state
*     ------------------
      if (numtr.eq.1) then
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address 
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,1,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,1,1) 
*
         pnlkey1(1) = VMM_KEY(ut1_m)
         pnlkey1(2) = VMM_KEY(vt1_m)
         pnlkey1(3) = VMM_KEY(tt1_m)
         pnlkey1(4) = VMM_KEY(st1_m)
         pnlod = 4  
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(ut1_m)
         pnerr = VMM_GET_VAR(vt1_m)
         pnerr = VMM_GET_VAR(tt1_m)
         pnerr = VMM_GET_VAR(st1_m)
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (ut1_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (vt1_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (st1_m,LDIST_DIM,1,
     %                      iadd,plpr_L,'ST1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (tt1_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT1_M   ',V4dg_ad_L,0,-1)
*
         endif
*
*        ADJOINT MODEL
*        -------------
         if (V4dg_ad_L) then
*
            call v4d_rwfld (tt1_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj         ,-1)
*
            call v4d_rwfld (st1_m,LDIST_DIM,1,
     %                      iadd,plpr_L,'ST1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk    ,-1)
*
            call v4d_rwfld (vt1_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (ut1_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1) = VMM_KEY(ut1)
         pnlkey1(2) = VMM_KEY(vt1)
         pnlkey1(3) = VMM_KEY(tt1)
         pnlkey1(4) = VMM_KEY(st1)
         pnlod = 4 
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(ut1)
         pnerr = VMM_GET_VAR(vt1)
         pnerr = VMM_GET_VAR(tt1)
         pnerr = VMM_GET_VAR(st1)
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,1,1) = V4dg_addtr 
         iadd                            = V4dg_addtr 
*
            call v4d_rwfld (ut1,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (vt1,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (st1,LDIST_DIM,1,
     %                      iadd,plpr_L,'ST1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (tt1,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT1     ',V4dg_ad_L,0,1)
*
*        Store starting ADJOINT address 
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,1,1) = iadd - l_ni*l_nj*(l_nk+1)
         V4dg_addtr                      = iadd
*
         endif
*
         pnerr = vmmuld(-1,0)
*
      endif

*     --------------------------------------------------------------
*     TRAJ predictive variables 
*     NOTE:Fields are recovered at a fixed icn and keep their values 
*     --------------------------------------------------------------
      if (numtr.eq.2) then
*
         if (V4dg_di_L.and..NOT.(Orh_crank_L.and.Orh_icn.eq.1))         return
         if (V4dg_tl_L.and..NOT.(Orh_crank_L.and.Orh_icn.eq.1))         return
         if (V4dg_ad_L.and..NOT.(Orh_crank_L.and.Orh_icn.eq.Schm_itcn)) return
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,1,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,1,1) 
*
         pnlkey1(1)= VMM_KEY(ut1_m )
         pnlkey1(2)= VMM_KEY(vt1_m )
         pnlkey1(3)= VMM_KEY(tt1_m )
         pnlkey1(4)= VMM_KEY(st1_m )
         pnlkey1(5)= VMM_KEY(zdt1_m)
         pnlkey1(6)= VMM_KEY(bspqtx_m)
         pnlkey1(7)= VMM_KEY(wt1_m)
         pnlod = 7 
*
         if (.not. Schm_hydro_L) then
             pnlkey1(pnlod+1)= VMM_KEY(qt1_m)
             pnlkey1(pnlod+2)= VMM_KEY(mutx_m)
             pnlod = pnlod+2
         endif
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(ut1_m )
         pnerr = VMM_GET_VAR(vt1_m )
         pnerr = VMM_GET_VAR(tt1_m )
         pnerr = VMM_GET_VAR(st1_m )
         pnerr = VMM_GET_VAR(zdt1_m)
         pnerr = VMM_GET_VAR(bspqtx_m)
         pnerr = VMM_GET_VAR(wt1_m)
*
         if (.not. Schm_hydro_L) then
            pnerr = VMM_GET_VAR(qt1_m)
            pnerr = VMM_GET_VAR(mutx_m)
         endif
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (ut1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (vt1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (tt1_m,   LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (st1_m,   LDIST_DIM,1,
     %                      iadd,plpr_L,'ST1_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (zdt1_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDT1_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (bspqtx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'BSPQTX_M',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (wt1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'WT1_M   ',V4dg_ad_L,0,-1)
*
            key1_m_ = VMM_KEY (trt1_m)
            do n=1,Tr3d_ntr
               key1_m(n) = key1_m_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1_m,Tr3d_ntr)
               do n=1,Tr3d_ntr
                  err = vmmget(key1_m(n),patr_m,tr_m)
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'TRT1_M  ', V4dg_ad_L,0,-1)
               end do
               err = vmmuld(key1_m,Tr3d_ntr)
            endif
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt1_m,   LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT1_M   ',V4dg_ad_L,0,-1)
            call v4d_rwfld (mutx_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'MUTX_M  ',V4dg_ad_L,0,-1)
            endif
*
         endif
*
*        ADJOINT MODEL 
*        -------------
         if (V4dg_ad_L) then
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (mutx_m,  LDIST_DIM,l_nk+1,
     %                     iadd,plpr_L,'MUTX_M  ',V4dg_ad_L, 
     %                     l_ni*l_nj*(l_nk+2),-1)
            call v4d_rwfld (qt1_m,   LDIST_DIM,l_nk+2,
     %                     iadd,plpr_L,'QT1_M   ',V4dg_ad_L, 
     %                     l_ni*l_nj*(l_nk+2),-1)
            endif
*
            key1_m_ = VMM_KEY (trt1_m)
            do n=1,Tr3d_ntr
               key1_m(n) = key1_m_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1_m,Tr3d_ntr)
               do n=Tr3d_ntr,1,-1
                  err = vmmget(key1_m(n),patr_m,tr_m)
                  if (n.ne.1) then
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'TRT1_M  ', V4dg_ad_L,
     %                            l_ni*l_nj*(l_nk+2),-1)
                  else
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'TRT1_M  ', V4dg_ad_L,
     %                            l_ni*l_nj*(l_nk+1),-1)
                  endif
               end do
               err = vmmuld(key1_m,Tr3d_ntr)
            endif
*
            call v4d_rwfld (wt1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'WT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
            call v4d_rwfld (bspqtx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'BSPQTX_M',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (zdt1_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDT1_M  ',V4dg_ad_L,
     %                      l_ni*l_nj,-1)
*
            call v4d_rwfld (st1_m,   LDIST_DIM,1,
     %                      iadd,plpr_L,'ST1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
            call v4d_rwfld (tt1_m,   LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (vt1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (ut1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
            else
            call v4d_rwfld (ut1_m,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
            endif
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1)= VMM_KEY(ut1 )
         pnlkey1(2)= VMM_KEY(vt1 )
         pnlkey1(3)= VMM_KEY(tt1 )
         pnlkey1(4)= VMM_KEY(st1 )
         pnlkey1(5)= VMM_KEY(zdt1)
         pnlkey1(6)= VMM_KEY(bspqtx)
         pnlkey1(7)= VMM_KEY(wt1)
         pnlod = 7 
*
         if (.not. Schm_hydro_L) then
             pnlkey1(pnlod+1)= VMM_KEY(qt1)
             pnlkey1(pnlod+2)= VMM_KEY(mutx)
             pnlod = pnlod+2
         endif
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(ut1  )
         pnerr = VMM_GET_VAR(vt1  )
         pnerr = VMM_GET_VAR(tt1  )
         pnerr = VMM_GET_VAR(st1  )
         pnerr = VMM_GET_VAR(zdt1 )
         pnerr = VMM_GET_VAR(bspqtx)
         pnerr = VMM_GET_VAR(wt1  )
*
         if (.not. Schm_hydro_L) then
            pnerr = VMM_GET_VAR(qt1)
            pnerr = VMM_GET_VAR(mutx)
         endif
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,1,1) = V4dg_addtr 
         iadd                            = V4dg_addtr
*
            call v4d_rwfld (ut1,    LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (vt1,    LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (tt1,    LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (st1,    LDIST_DIM,1,
     %                      iadd,plpr_L,'ST1     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (zdt1,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDT1    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (bspqtx, LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'BSPQTX  ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (wt1,    LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'WT1     ',V4dg_ad_L,0,1)
*
            key1_ = VMM_KEY (trt1)
            do n=1,Tr3d_ntr
               key1(n) = key1_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1,Tr3d_ntr)
               do n=1,Tr3d_ntr
                  err = vmmget(key1(n),patr,tr)
*
                  call v4d_rwfld (tr,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'TRT1    ', V4dg_ad_L,0,1)
*
               end do
               err = vmmuld(key1,Tr3d_ntr)
            endif
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt1,    LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT1     ',V4dg_ad_L,0,1)
            call v4d_rwfld (mutx,   LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'MUTX    ',V4dg_ad_L,0,1)
            endif
*
*        Store starting ADJOINT address
*        ------------------------------
         if (.not. Schm_hydro_L) then
         V4dg_addtab_ad(numtr,istep,1,1) = iadd - l_ni*l_nj*(l_nk+1)
         else
         V4dg_addtab_ad(numtr,istep,1,1) = iadd - l_ni*l_nj*(l_nk+2)
         endif
         V4dg_addtr                      = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif
*
*     --------------------------------------------------------------
*     TRAJ Positions at time TH before ADV_MAIN modified by ADV_MAIN 
*     NOTE:Fields are changed at each icn 
*     --------------------------------------------------------------
      if (numtr.eq.3) then
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,1)  
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,1) 
*
         pnlkey1(1) = VMM_KEY(xth_m)
         pnlkey1(2) = VMM_KEY(yth_m)
         pnlkey1(3) = VMM_KEY(zth_m)
         pnlkey1(4) = VMM_KEY(xcth_m)
         pnlkey1(5) = VMM_KEY(ycth_m)
         pnlkey1(6) = VMM_KEY(zcth_m)
         pnlod = 6 
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(xth_m)
         pnerr = VMM_GET_VAR(yth_m)
         pnerr = VMM_GET_VAR(zth_m)
         pnerr = VMM_GET_VAR(xcth_m)
         pnerr = VMM_GET_VAR(ycth_m)
         pnerr = VMM_GET_VAR(zcth_m)
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfldx(xcth_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XCTH_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(ycth_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YCTH_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(zcth_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZCTH_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(xth_m, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XTH_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(yth_m, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YTH_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(zth_m, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZTH_M   ',V4dg_ad_L,0,-1)
*
         endif
*
*        ADJOINT MODEL 
*        -------------
         if (V4dg_ad_L) then
*
            call v4d_rwfldx(zth_m, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZTH_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(yth_m, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YTH_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(xth_m, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XTH_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(zcth_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZCTH_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(ycth_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YCTH_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(xcth_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XCTH_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
*
         pnlkey1(1) = VMM_KEY(xth)
         pnlkey1(2) = VMM_KEY(yth)
         pnlkey1(3) = VMM_KEY(zth)
         pnlkey1(4) = VMM_KEY(xcth)
         pnlkey1(5) = VMM_KEY(ycth)
         pnlkey1(6) = VMM_KEY(zcth)
         pnlod = 6 
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(xth)
         pnerr = VMM_GET_VAR(yth)
         pnerr = VMM_GET_VAR(zth)
         pnerr = VMM_GET_VAR(xcth)
         pnerr = VMM_GET_VAR(ycth)
         pnerr = VMM_GET_VAR(zcth)
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,1) = V4dg_addtr 
         iadd                                  = V4dg_addtr 
*
            call v4d_rwfldx(xcth,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XCTH    ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(ycth,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YCTH    ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(zcth,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZCTH    ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(xth, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XTH     ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(yth, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YTH     ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(zth, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZTH     ',V4dg_ad_L,0,1)
*
*        Store starting ADJOINT address
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,Orh_icn,1) = iadd - l_ni*l_nj*l_nk
         V4dg_addtr                            = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif
*
*     --------------------------------------------------------------
*     TRAJ Winds at time TH before ADV_MAIN NOT modified by ADV_MAIN 
*     NOTE:Fields are changed at each icn
*     --------------------------------------------------------------
      if (numtr.eq.4) then    
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,1) 
*
         pnlkey1(1) = VMM_KEY(uth_m)
         pnlkey1(2) = VMM_KEY(vth_m)
         pnlkey1(3) = VMM_KEY(zdth_m)
         pnlod = 3 
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(uth_m)
         pnerr = VMM_GET_VAR(vth_m)
         pnerr = VMM_GET_VAR(zdth_m)
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (uth_m,  LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'UTH_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (vth_m,  LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'VTH_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (zdth_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDTH_M  ',V4dg_ad_L,0,-1)
*
         endif
*
*        ADJOINT MODEL 
*        -------------
         if (V4dg_ad_L) then
*
            call v4d_rwfld (zdth_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDTH_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfld (vth_m,  LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'VTH_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfld (uth_m,  LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'UTH_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1) = VMM_KEY(uth)
         pnlkey1(2) = VMM_KEY(vth)
         pnlkey1(3) = VMM_KEY(zdth)
         pnlod = 3
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
*
         pnerr = VMM_GET_VAR(uth)
         pnerr = VMM_GET_VAR(vth)
         pnerr = VMM_GET_VAR(zdth)
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,1) = V4dg_addtr 
         iadd                                  = V4dg_addtr
*
         call v4d_rwfld (uth,  LDIST_DIM,l_nk,
     %                   iadd,plpr_L,'UTH     ',V4dg_ad_L,0,1)

         call v4d_rwfld (vth,  LDIST_DIM,l_nk,
     %                   iadd,plpr_L,'VTH     ',V4dg_ad_L,0,1)
*
         call v4d_rwfld (zdth, LDIST_DIM,l_nk+1,
     %                   iadd,plpr_L,'ZDTH    ',V4dg_ad_L,0,1)
*
*        Store starting ADJOINT address
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,Orh_icn,1) = iadd - l_ni*l_nj*(l_nk+1)
         V4dg_addtr                            = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif 
*
*     -----------------------
*     TRAJ upstream positions 
*     -----------------------
      if (numtr.eq.5) then
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address 
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,1) 
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfldx(u,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_U_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(v,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_V_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(w,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_W_M   ',V4dg_ad_L,0,-1)
*
         endif
*
*        ADJOINT MODEL
*        -------------
         if (V4dg_ad_L) then
*
            call v4d_rwfldx(w, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_W_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
* 
            call v4d_rwfldx(v, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_V_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(u, l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_U_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
         endif
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,1) = V4dg_addtr 
         iadd                                  = V4dg_addtr 
*
            call v4d_rwfldx(u,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_U     ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(v,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_V     ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(w,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'F_W     ',V4dg_ad_L,0,1)
*
*
*        Store starting ADJOINT address 
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,Orh_icn,1) = iadd - l_ni*l_nj*l_nk
         V4dg_addtr                            = iadd
*
         endif
*
      endif
*
*     ----------------------------
*     TRAJ RHS interpolated fields 
*     ----------------------------
      if (numtr.eq.6) then
*
*        ----------------
*        Read TRAJ Fields
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,1) 
*
         pnlkey1(1) = VMM_KEY(ruw2_m)
         pnlkey1(2) = VMM_KEY(rvw2_m)
         pnlkey1(3) = VMM_KEY(rhsc_m)
         pnlkey1(4) = VMM_KEY(rhst_m)
         pnlkey1(5) = VMM_KEY(xct1_m)
         pnlkey1(6) = VMM_KEY(yct1_m)
         pnlkey1(7) = VMM_KEY(zct1_m)
         pnlod = 7 
*
         if (.not. Schm_hydro_L) then
            pnlkey1(8) = VMM_KEY(rhsw_m)
            pnlkey1(9) = VMM_KEY(rhsf_m)
            pnlod = 9 
         endif
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
*
         pnerr =  VMM_GET_VAR(ruw2_m)
         pnerr =  VMM_GET_VAR(rvw2_m)
         pnerr =  VMM_GET_VAR(rhsc_m)
         pnerr =  VMM_GET_VAR(rhst_m)
         pnerr =  VMM_GET_VAR(xct1_m)
         pnerr =  VMM_GET_VAR(yct1_m)
         pnerr =  VMM_GET_VAR(zct1_m)
*
         if (.not. Schm_hydro_L) then
            pnerr = VMM_GET_VAR(rhsw_m)
            pnerr = VMM_GET_VAR(rhsf_m)
         endif
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (ruw2_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RUW2_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (rvw2_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RVW2_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (rhsc_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RHSC_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (rhst_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHST_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(xct1_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XCT1_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(yct1_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YCT1_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfldx(zct1_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZCT1_M  ',V4dg_ad_L,0,-1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (rhsw_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHSW_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (rhsf_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHSF_M  ',V4dg_ad_L,0,-1)
            endif
*
         endif
*
*        ADJOINT MODEL 
*        -------------
         if (V4dg_ad_L) then
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (rhsf_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHSW_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
            call v4d_rwfld (rhsw_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHSF_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
            endif
*
            call v4d_rwfldx(zct1_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZCT1_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(yct1_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YCT1_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfldx(xct1_m,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XCT1_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (rhst_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHST_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfld (rhsc_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RHSC_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            call v4d_rwfld (rvw2_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RVW2_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (ruw2_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RUW2_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
            else
            call v4d_rwfld (ruw2_m,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RUW2_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*l_nk,-1)
            endif
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1) = VMM_KEY(ruw2)
         pnlkey1(2) = VMM_KEY(rvw2)
         pnlkey1(3) = VMM_KEY(rhsc)
         pnlkey1(4) = VMM_KEY(rhst)
         pnlkey1(5) = VMM_KEY(xct1)
         pnlkey1(6) = VMM_KEY(yct1)
         pnlkey1(7) = VMM_KEY(zct1)
         pnlod = 7
*
         if (.not. Schm_hydro_L) then
            pnlkey1(8) = VMM_KEY(rhsw)
            pnlkey1(9) = VMM_KEY(rhsf)
            pnlod = 9
         endif
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
*
         pnerr =  VMM_GET_VAR(ruw2)
         pnerr =  VMM_GET_VAR(rvw2)
         pnerr =  VMM_GET_VAR(rhsc)
         pnerr =  VMM_GET_VAR(rhst)
         pnerr =  VMM_GET_VAR(xct1)
         pnerr =  VMM_GET_VAR(yct1)
         pnerr =  VMM_GET_VAR(zct1)
*
         if (.not. Schm_hydro_L) then
            pnerr = VMM_GET_VAR(rhsw)
            pnerr = VMM_GET_VAR(rhsf)
         endif
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,1) = V4dg_addtr 
         iadd                                  = V4dg_addtr
*
            call v4d_rwfld (ruw2,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RUW2    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (rvw2,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RVW2    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (rhsc,LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'RHSC    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (rhst,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHST    ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(xct1,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'XCT1    ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(yct1,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'YCT1    ',V4dg_ad_L,0,1)
*
            call v4d_rwfldx(zct1,l_ni,l_nj,l_nk,
     %                      iadd,plpr_L,'ZCT1    ',V4dg_ad_L,0,1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (rhsw,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHSW    ',V4dg_ad_L,0,1)
            call v4d_rwfld (rhsf,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHSF    ',V4dg_ad_L,0,1)
            endif
*
*        Store starting ADJOINT address
*        ------------------------------
         if (.not. Schm_hydro_L) then
         V4dg_addtab_ad(numtr,istep,Orh_icn,1) = iadd - l_ni*l_nj*(l_nk+1)
         else
         V4dg_addtab_ad(numtr,istep,Orh_icn,1) = iadd - l_ni*l_nj* l_nk
         endif
         V4dg_addtr                            = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif 
*
*     ----------------------------------------
*     TRAJ modified by BAC at previous Orh_icn 
*     ----------------------------------------
      if (numtr.eq.7) then
*
*        ----------------
*        Read TRAJ Fields
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,1) 
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,1) 
*
         pnlkey1(1) = VMM_KEY(tt0_m)
         pnlkey1(2) = VMM_KEY(zdt0_m)
         pnlkey1(3) = VMM_KEY(st0_m)
         pnlkey1(4) = VMM_KEY(fiptx_m)
         pnlod = 4
         if (Cori_cornl_L) then
            pnlkey1(pnlod+1) = VMM_KEY(ut0_m)
            pnlkey1(pnlod+2) = VMM_KEY(vt0_m)
            pnlod = pnlod+2
         endif
         if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0_m)
         pnlod = pnlod+1 
         endif
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(tt0_m)
         pnerr = VMM_GET_VAR(zdt0_m)
         pnerr = VMM_GET_VAR(st0_m)
         pnerr = VMM_GET_VAR(fiptx_m)
         if (Cori_cornl_L) then
            pnerr = VMM_GET_VAR(ut0_m)
            pnerr = VMM_GET_VAR(vt0_m)
         endif
         if (.not. Schm_hydro_L) pnerr = VMM_GET_VAR(qt0_m) 
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            if (Cori_cornl_L) then
            call v4d_rwfld (ut0_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT0_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (vt0_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT0_M   ',V4dg_ad_L,0,-1)
            endif
*
            call v4d_rwfld (tt0_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT0_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (zdt0_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDT0_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (st0_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M ',V4dg_ad_L,0,-1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt0_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT0_M   ',V4dg_ad_L,0,-1)
            endif
*
         endif
*
*        ADJOINT MODEL 
*        -------------
         if (V4dg_ad_L) then
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt0_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
            endif
*
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M ',V4dg_ad_L,
     %                      l_ni*l_nj,-1)
*
            call v4d_rwfld (st0_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (zdt0_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDT0_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
            if (Cori_cornl_L) then
            call v4d_rwfld (tt0_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
            else
            call v4d_rwfld (tt0_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
            endif
*
            if (Cori_cornl_L) then
            call v4d_rwfld (vt0_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
            call v4d_rwfld (ut0_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
            endif
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1) = VMM_KEY(tt0)
         pnlkey1(2) = VMM_KEY(zdt0)
         pnlkey1(3) = VMM_KEY(st0)
         pnlkey1(4) = VMM_KEY(fiptx)
         pnlod = 4
         if (Cori_cornl_L) then
            pnlkey1(pnlod+1) = VMM_KEY(ut0)
            pnlkey1(pnlod+2) = VMM_KEY(vt0)
            pnlod = pnlod+2
         endif
         if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0)
         pnlod = pnlod+1
         endif
*
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(tt0)
         pnerr = VMM_GET_VAR(zdt0)
         pnerr = VMM_GET_VAR(st0)
         pnerr = VMM_GET_VAR(fiptx)
         if (Cori_cornl_L) then
            pnerr = VMM_GET_VAR(ut0)
            pnerr = VMM_GET_VAR(vt0)
         endif
         if (.not. Schm_hydro_L) pnerr = VMM_GET_VAR(qt0)
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,1) = V4dg_addtr 
         iadd                                  = V4dg_addtr
*
            if (Cori_cornl_L) then
            call v4d_rwfld (ut0,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'UT0     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (vt0,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'VT0     ',V4dg_ad_L,0,1)
            endif
*
            call v4d_rwfld (tt0,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'TT0     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (zdt0, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'ZDT0    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (st0,  LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0     ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (fiptx,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX   ',V4dg_ad_L,0,1)
*
         if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt0,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT0     ',V4dg_ad_L,0,1)
         endif
*
*        Store starting ADJOINT address
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,Orh_icn,1) = iadd - l_ni*l_nj*(l_nk+2)
         V4dg_addtr                            = iadd
*
         endif
*
         pnerr = vmmuld(-1,0)
*
      endif 
*
*     ------------------------------
*     TRAJ requested to build BAC_TR 
*     ------------------------------
      if (numtr.eq.8) then
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address 
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,V4dg_iln)
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,V4dg_iln)
*
*        NOTE: st0 is requested also (in LAM: see bacp_2)  
*
         pnlkey1(1) = VMM_KEY(fiptx_m)
         pnlkey1(2) = VMM_KEY(rhst_m)
         pnlkey1(3) = VMM_KEY(st0_m)
         pnlod = 3 
         if (.not. Schm_hydro_L) then
             pnlkey1(pnlod+1)= VMM_KEY(qt0_m)
             pnlod = pnlod+1
         endif
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(fiptx_m)
         pnerr = VMM_GET_VAR(rhst_m)
         pnerr = VMM_GET_VAR(st0_m)
*
         if (.not. Schm_hydro_L) then
            pnerr = VMM_GET_VAR(qt0_m)
         endif
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (rhst_m,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHST_M   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nl_m_t,LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'NL_M_T   ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (st0_m,LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0_M    ',V4dg_ad_L,0,-1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt0_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT0_M    ',V4dg_ad_L,0,-1)
            endif
*
         endif
*
*        ADJOINT MODEL
*        -------------
         if (V4dg_ad_L) then
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt0_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj,-1)
            endif
*
            call v4d_rwfld (st0_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0_M   ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (nl_m_t, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'NL_M_T  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (rhst_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHST_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M  ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
            else
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M  ',V4dg_ad_L,
     %                      l_ni*l_nj,-1)
            endif
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1) = VMM_KEY(fiptx)
         pnlkey1(2) = VMM_KEY(rhst)
         pnlkey1(3) = VMM_KEY(st0)
         pnlod = 3 
         if (.not. Schm_hydro_L) then
             pnlkey1(pnlod+1)= VMM_KEY(qt0)
             pnlod = pnlod+1
         endif
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,pnlod)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(fiptx)
         pnerr = VMM_GET_VAR(rhst)
         pnerr = VMM_GET_VAR(st0)
*
         if (.not. Schm_hydro_L) then
            pnerr = VMM_GET_VAR(qt0)
         endif
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,V4dg_iln) = V4dg_addtr 
         iadd                                         = V4dg_addtr 
*
            call v4d_rwfld (fiptx, LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX   ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (rhst,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'RHST    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (nl_t,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'NL_T    ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (st0,   LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0     ',V4dg_ad_L,0,1)
*
            if (.not. Schm_hydro_L) then
            call v4d_rwfld (qt0,   LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'QT0     ',V4dg_ad_L,0,1)
            endif
*
*        Store starting ADJOINT address 
*        ------------------------------
         if (.not. Schm_hydro_L) then
         V4dg_addtab_ad(numtr,istep,Orh_icn,V4dg_iln) = iadd - l_ni*l_nj*(l_nk+2) 
         else
         V4dg_addtab_ad(numtr,istep,Orh_icn,V4dg_iln) = iadd - l_ni*l_nj 
         endif
         V4dg_addtr                                   = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif
*
*     ----------------------------
*     TRAJ requested during BAC_AD
*     ----------------------------
      if (numtr.eq.9) then
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address 
*        ------------------------
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,Orh_icn,V4dg_iln)
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,Orh_icn,V4dg_iln)
*
         pnlkey1(1) = VMM_KEY(fiptx_m)
         pnlkey1(2) = VMM_KEY(st0_m)
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,2)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(fiptx_m)
         pnerr = VMM_GET_VAR(st0_m)
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M  ',V4dg_ad_L,0,-1)
*
            call v4d_rwfld (st0_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0_M    ',V4dg_ad_L,0,-1)
*
         endif
*
*        ADJOINT MODEL
*        -------------
         if (V4dg_ad_L) then
*
            call v4d_rwfld (st0_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0_M    ',V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
            call v4d_rwfld (fiptx_m,LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX_M  ',V4dg_ad_L,
     %                      l_ni*l_nj,-1)
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1(1) = VMM_KEY(fiptx)
         pnlkey1(2) = VMM_KEY(st0)
*        - - - - - - - - - - - - - - -
         pnerr = vmmlod(pnlkey1,2)
*        - - - - - - - - - - - - - - -
         pnerr = VMM_GET_VAR(fiptx)
         pnerr = VMM_GET_VAR(st0)
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,Orh_icn,V4dg_iln) = V4dg_addtr 
         iadd                                         = V4dg_addtr 
*
            call v4d_rwfld (fiptx, LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'FIPTX   ',V4dg_ad_L,0,1)
*
            call v4d_rwfld (st0,   LDIST_DIM,1,
     %                      iadd,plpr_L,'ST0     ',V4dg_ad_L,0,1)
*
*        Store starting ADJOINT address 
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,Orh_icn,V4dg_iln) = iadd - l_ni*l_nj 
         V4dg_addtr                                   = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif
*
*     ---------------------------------------------------------------
*     TRAJ NEST 
*     ---------------------------------------------------------------
      if (numtr.eq.10.and.G_lam) then
*
*        ----------------
*        Read TRAJ Fields 
*        ----------------
         if (V4dg_rwtr.eq.0) then
*
*        Recover starting address 
*        ------------------------
         if (V4dg_di_L) iadd = V4dg_addtab_tl(numtr,istep,1,1)
         if (V4dg_tl_L) iadd = V4dg_addtab_tl(numtr,istep,1,1)
         if (V4dg_ad_L) iadd = V4dg_addtab_ad(numtr,istep,1,1)
*
         if(V4dg_tl_L.or.V4dg_ad_L) then
*
         pnlkey1( 1)=VMM_KEY(nest_u_m  )
         pnlkey1( 2)=VMM_KEY(nest_v_m  )
         pnlkey1( 3)=VMM_KEY(nest_w_m  )
         pnlkey1( 4)=VMM_KEY(nest_t_m  )
         pnlkey1( 5)=VMM_KEY(nest_zd_m )
         pnlkey1( 6)=VMM_KEY(nest_s_m  )
         pnlod =  6
*
         if (.not. Schm_hydro_L) then
              pnlkey1(pnlod+1)=VMM_KEY(nest_q_m )
              pnlod = pnlod+1
         endif
*
         err = vmmlod(pnlkey1,pnlod)
         err = VMM_GET_VAR(nest_u_m  )
         err = VMM_GET_VAR(nest_v_m  )
         err = VMM_GET_VAR(nest_w_m  )
         err = VMM_GET_VAR(nest_t_m  )
         err = VMM_GET_VAR(nest_zd_m )
         err = VMM_GET_VAR(nest_s_m  )
*
         if (.not. Schm_hydro_L) then
              err = VMM_GET_VAR(nest_q_m )
         endif
*
         elseif(V4dg_di_L) then
*
         pnlkey1( 1)=VMM_KEY(nest_u  )
         pnlkey1( 2)=VMM_KEY(nest_v  )
         pnlkey1( 3)=VMM_KEY(nest_w  )
         pnlkey1( 4)=VMM_KEY(nest_t  )
         pnlkey1( 5)=VMM_KEY(nest_zd )
         pnlkey1( 6)=VMM_KEY(nest_s  )
         pnlod =  6
*
         if (.not. Schm_hydro_L) then
             pnlkey1(pnlod+1)=VMM_KEY(nest_q )
             pnlod = pnlod+1
         endif
*
         err = vmmlod(pnlkey1,pnlod)
         err = VMM_GET_VAR(nest_u  )
         err = VMM_GET_VAR(nest_v  )
         err = VMM_GET_VAR(nest_w  )
         err = VMM_GET_VAR(nest_t  )
         err = VMM_GET_VAR(nest_zd )
         err = VMM_GET_VAR(nest_s  )
*
         if (.not. Schm_hydro_L) then
              err = VMM_GET_VAR(nest_q )
         endif
*
         endif
*
*        FORWARD MODEL
*        -------------
         if (V4dg_di_L) then
*
            call v4d_rwfld (nest_u,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_U     ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_v,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_V     ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_w,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_W     ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_t,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_T     ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_zd, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_ZD    ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_s,  LDIST_DIM,1,
     %                      iadd,plpr_L,'N_S     ',   V4dg_ad_L,0,-1)
*
            if (.not.Schm_hydro_L) then
*
            call v4d_rwfld (nest_q,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_Q     ',   V4dg_ad_L,0,-1)
*
            endif
*
            key1_ = VMM_KEY (nest_tr)
            do n=1,Tr3d_ntr
               key1(n) = key1_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1,Tr3d_ntr)
               do n=1,Tr3d_ntr
                  err = vmmget(key1(n),patr,tr)
                  call v4d_rwfld (tr,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'N_TR    ', V4dg_ad_L,0,-1)
               end do
               err = vmmuld(key1,Tr3d_ntr)
            endif
*
         endif
*
*        TANGENT LINEAR MODEL
*        --------------------
         if (V4dg_tl_L) then
*
            call v4d_rwfld (nest_u_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_U_M   ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_v_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_V_M   ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_w_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_W_M   ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_t_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_T_M   ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_zd_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_ZD_M  ',   V4dg_ad_L,0,-1)
*
            call v4d_rwfld (nest_s_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'N_S_M   ',   V4dg_ad_L,0,-1)
*
            if (.not.Schm_hydro_L) then
*
            call v4d_rwfld (nest_q_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_Q_M   ',   V4dg_ad_L,0,-1)
*
            endif
*
            key1_m_ = VMM_KEY (nest_tr_m)
            do n=1,Tr3d_ntr
               key1_m(n) = key1_m_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1_m,Tr3d_ntr)
               do n=1,Tr3d_ntr
                  err = vmmget(key1_m(n),patr_m,tr_m)
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'N_TR_M  ', V4dg_ad_L,0,-1)
               end do
               err = vmmuld(key1_m,Tr3d_ntr)
            endif
*
         endif
*
*        ADJOINT MODEL
*        -------------
         if (V4dg_ad_L) then
*
            key1_m_ = VMM_KEY (nest_tr_m)
            do n=1,Tr3d_ntr
               key1_m(n) = key1_m_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1_m,Tr3d_ntr)
               do n=Tr3d_ntr,1,-1
                  err = vmmget(key1_m(n),patr_m,tr_m)
                  if (n.ne.1) then
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'N_TR_M  ', V4dg_ad_L,
     %                            l_ni*l_nj*(l_nk+2),-1)
                  else
                  if (.not.Schm_hydro_L) then
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'N_TR_M  ', V4dg_ad_L,
     %                            l_ni*l_nj*(l_nk+2),-1)
                  else
                  call v4d_rwfld (tr_m,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'N_TR_M  ', V4dg_ad_L,
     %                            l_ni*l_nj,-1)
                  endif
                  endif
               end do
               err = vmmuld(key1_m,Tr3d_ntr)
            endif
*
            if (.not.Schm_hydro_L) then
*
            call v4d_rwfld (nest_q_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_Q_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj,-1)
*
            endif
*
            call v4d_rwfld (nest_s_m,  LDIST_DIM,1,
     %                      iadd,plpr_L,'N_S_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (nest_zd_m, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_ZD_M  ',  V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
*
            call v4d_rwfld (nest_t_m,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_T_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (nest_w_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_W_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            call v4d_rwfld (nest_v_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_V_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+1),-1)
*
            if (.not.Schm_hydro_L) then
            call v4d_rwfld (nest_u_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_U_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj*(l_nk+2),-1)
            else
            call v4d_rwfld (nest_u_m,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_U_M   ',  V4dg_ad_L,
     %                      l_ni*l_nj,-1)
            endif
*
         endif
*
         pnerr = vmmuld(-1,0)
*
*        -----------------
*        Write TRAJ Fields 
*        -----------------
         elseif(V4dg_rwtr.eq.1) then
*
         pnlkey1( 1)=VMM_KEY(nest_u  )
         pnlkey1( 2)=VMM_KEY(nest_v  )
         pnlkey1( 3)=VMM_KEY(nest_w  )
         pnlkey1( 4)=VMM_KEY(nest_t  )
         pnlkey1( 5)=VMM_KEY(nest_zd )
         pnlkey1( 6)=VMM_KEY(nest_s  )
         pnlod =  6
*
         if (.not. Schm_hydro_L) then
              pnlkey1(pnlod+1)=VMM_KEY(nest_q )
              pnlod = pnlod+1
         endif
*
         err = vmmlod(pnlkey1,pnlod)
         err = VMM_GET_VAR(nest_u  )
         err = VMM_GET_VAR(nest_v  )
         err = VMM_GET_VAR(nest_w  )
         err = VMM_GET_VAR(nest_t  )
         err = VMM_GET_VAR(nest_zd )
         err = VMM_GET_VAR(nest_s  )
*
         if (.not. Schm_hydro_L) then
              err = VMM_GET_VAR(nest_q )
         endif
*
*        Store starting TLM address
*        --------------------------
         V4dg_addtab_tl(numtr,istep,1,1) = V4dg_addtr
         iadd                            = V4dg_addtr
*
            call v4d_rwfld (nest_u,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_U     ',   V4dg_ad_L,0,1)
*
            call v4d_rwfld (nest_v,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_V     ',   V4dg_ad_L,0,1)
*
            call v4d_rwfld (nest_w,  LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_W     ',   V4dg_ad_L,0,1)
*
            call v4d_rwfld (nest_t,  LDIST_DIM,l_nk+2,
     %                      iadd,plpr_L,'N_T     ',   V4dg_ad_L,0,1)
*
            call v4d_rwfld (nest_zd, LDIST_DIM,l_nk+1,
     %                      iadd,plpr_L,'N_ZD    ',   V4dg_ad_L,0,1)
*
            call v4d_rwfld (nest_s,  LDIST_DIM,1,
     %                      iadd,plpr_L,'N_S     ',   V4dg_ad_L,0,1)
*
            if (.not.Schm_hydro_L) then
*
            call v4d_rwfld (nest_q,  LDIST_DIM,l_nk,
     %                      iadd,plpr_L,'N_Q     ',   V4dg_ad_L,0,1)
*
            endif
*
            key1_ = VMM_KEY (nest_tr)
            do n=1,Tr3d_ntr
               key1(n) = key1_ + n
            end do
            if (Tr3d_ntr.gt.0) then
               err = vmmlod(key1,Tr3d_ntr)
               do n=1,Tr3d_ntr
                  err = vmmget(key1(n),patr,tr)
                  call v4d_rwfld (tr,LDIST_DIM,l_nk+2,
     %                            iadd,plpr_L,'N_TR    ', V4dg_ad_L,0,1)
               end do
               err = vmmuld(key1,Tr3d_ntr)
            endif
*
*        Store starting ADJOINT address 
*        ------------------------------
         V4dg_addtab_ad(numtr,istep,1,1) = iadd - l_ni*l_nj*(l_nk+1)
         V4dg_addtr                      = iadd
*
         pnerr = vmmuld(-1,0)
*
         endif
*
      endif
*
      return
      end
