! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r adw_main_tl - TLM of adw_main
*
#include "model_macros_f.h"
*
      subroutine adw_main_tl ( F_it )
*
#include "impnone.cdk"
*
      integer F_it
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*        |                                                       |     |
* NAME   | DESCRIPTION                                           | I/O |
*--------|-------------------------------------------------------|-----|
* F_it   | total number of iterations for trajectories           |  i  |
*________|_______________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "adw.cdk"
************************************************************************
      real , dimension (Adw_nit*Adw_njt*G_nk) :: u,v
      real , dimension (Adw_nit*Adw_njt*(G_nk+1)) :: w
*
      real , dimension (Adw_nit*Adw_njt*G_nk) :: u_m,v_m
      real , dimension (Adw_nit*Adw_njt*(G_nk+1)) :: w_m
*
************************************************************************
      if (.NOT.Adw_nosetint_L                   ) call gem_stop ('NOT Adw_nosetint_L not done in POS_TL',-1) 
      if (.NOT.Adw_interp_type_S(1:5).eq.'LAG3D') call gem_stop ('NOT Interp LAG3D   not done in INT_TL',-1) 
************************************************************************
      if (Lun_debug_L) write (Lun_out,1000)
************************************************************************
*
*     TRAJECTORY
*     ----------
      call adw_main_1_wnd_tr ( u_m, v_m, w_m, l_ni, l_nj, G_nk)
*
*     TLM
*     ---
      call adw_main_1_wnd ( u, v, w, l_ni, l_nj, G_nk)
*
*     TLM and TRAJECTORY
*     ------------------
      call adw_main_2_pos_tl ( F_it, u, v, w, u_m, v_m, w_m )
*
*     Recover TRAJ upstream positions 
*     -------------------------------
      call v4d_rwtraj (5,u_m,v_m,w_m)
*
*     TLM and TRAJECTORY
*     ------------------
      call adw_main_3_int_tl ( u, v, w, u_m, v_m, w_m )
*
***********************************************************************
*
 1000  format(3X,'TLM of ADVECTE THE RIGHT-HAND-SIDES: (S/R ADW_MAIN_TL)')
*
      return
      end
