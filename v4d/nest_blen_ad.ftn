! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nest_blen_ad - ADJ of nest_blen
*
#include "model_macros_f.h"
*
      subroutine nest_blen_ad ()
*
      implicit none
*
*author 
*     M. Tanguay - rpn - december 2006
*
*revision
* v3_30 - Tanguay M.        - initial MPI version
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "vt1.cdk"
#include "nest.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "hblen.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer err,key(26),i,j,k,nvar
      integer key1(Tr3d_ntr),key1_,key2(Tr3d_ntr),key2_, n
      real tr,tr1
      pointer (patr, tr(LDIST_SHAPE,*)),(patr1,tr1(LDIST_SHAPE,*))
*----------------------------------------------------------------------
*
      if ( (north+south+west+east.lt.1) .or.
     $    ((Hblen_x.le.0).and.(Hblen_y.le.0)) ) return
*
      key2_ = VMM_KEY (nest_tr)
      key1_ = VMM_KEY (trt1)
      do n=1,Tr3d_ntr
         key2(n) = key2_ + n
         key1(n) = key1_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key2,Tr3d_ntr)
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key2(n),patr, tr)
            err = vmmget(key1(n),patr1,tr1)
            call nesajr_ad (tr1, tr, LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
         enddo
         err = vmmuld(key1,Tr3d_ntr)
         err = vmmuld(key2,Tr3d_ntr)
      endif
*
      key(1 )=VMM_KEY(nest_u)
      key(2 )=VMM_KEY(nest_v)
      key(3 )=VMM_KEY(nest_w)
      key(4 )=VMM_KEY(nest_t)
      key(5 )=VMM_KEY(nest_zd)
      key(6 )=VMM_KEY(nest_s)
*
      key(7 )=VMM_KEY(ut1)
      key(8 )=VMM_KEY(vt1)
      key(9 )=VMM_KEY(wt1)
      key(10)=VMM_KEY(tt1)
      key(11)=VMM_KEY(zdt1)
      key(12)=VMM_KEY(st1)
      nvar=12 
*
      if (.not.Schm_hydro_L) then
         key(nvar+1)=VMM_KEY(nest_q)
         key(nvar+2)=VMM_KEY(qt1)
         nvar = nvar+2 
      endif
*
      err = vmmlod(key,nvar)
      err = VMM_GET_VAR(nest_u)
      err = VMM_GET_VAR(nest_v)
      err = VMM_GET_VAR(nest_w)
      err = VMM_GET_VAR(nest_t)
      err = VMM_GET_VAR(nest_zd)
      err = VMM_GET_VAR(nest_s)
*
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(wt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(zdt1)
      err = VMM_GET_VAR(st1)
*
      if (.not.Schm_hydro_L) then
         err = VMM_GET_VAR(nest_q)
         err = VMM_GET_VAR(qt1)
      endif
*
* ADJ of
* Set up blending zones
      if (.not. Schm_hydro_L) then
      call nesajr_ad (qt1  ,nest_q ,  LDIST_DIM,G_nk+2 ,0,0,Hblen_x,Hblen_y)
      endif
*
      call nesajr_ad (st1  ,nest_s ,LDIST_DIM,     1,0,0,Hblen_x,Hblen_y)
      call nesajr_ad (tt1  ,nest_t ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
      call nesajr_ad (zdt1 ,nest_zd,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
      call nesajr_ad (wt1  ,nest_w ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y)
      call nesajr_ad (vt1  ,nest_v ,LDIST_DIM,G_nk  ,0,1,Hblen_x,Hblen_y)
      call nesajr_ad (ut1  ,nest_u ,LDIST_DIM,G_nk  ,1,0,Hblen_x,Hblen_y)
*
      err = vmmuld(key,nvar)
*
*----------------------------------------------------------------------
      return
      end
