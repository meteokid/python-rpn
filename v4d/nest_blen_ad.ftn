! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nest_blen_ad - ADJ of nest_blen
*
#include "model_macros_f.h"
*
      subroutine nest_blen_ad ()
*
      implicit none
*
*author 
*     M. Tanguay - rpn - december 2006
*
*revision
* v3_30 - Tanguay M.        - initial MPI version
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - Open top TL/AD
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*object
*     see id section
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "vt1.cdk"
#include "nest.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "hblen.cdk"
*
      character*16 tr_name
      integer i,j,k,n
      real, pointer, dimension(:,:,:) :: trn,tr1
*----------------------------------------------------------------------
*
      if ( (north+south+west+east.lt.1) .or.
     $    ((Hblen_x.le.0).and.(Hblen_y.le.0)) ) return
*
      do n=1,Tr3d_ntr
*
         tr_name = 'NEST/'//trim(Tr3d_name_S(n))//':C'
         gmmstat = gmm_get(tr_name,trn,meta3d)
         tr_name = 'TR/'//trim(Tr3d_name_S(n))//':P'
         gmmstat = gmm_get(tr_name,tr1,meta3d)
*
         call nesajr_ad (tr1, trn, LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y,Hblen_z)
*
      enddo
*
      gmmstat = gmm_get(gmmk_nest_u_s ,nest_u ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_u)'
      gmmstat = gmm_get(gmmk_nest_v_s ,nest_v ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_v)'
      gmmstat = gmm_get(gmmk_nest_w_s ,nest_w ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_w)'
      gmmstat = gmm_get(gmmk_nest_t_s ,nest_t ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_t)'
      gmmstat = gmm_get(gmmk_nest_zd_s,nest_zd,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_zd)'
      gmmstat = gmm_get(gmmk_nest_s_s ,nest_s ,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_s)'
*
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(wt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(st1)'
      if (.not.Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_nest_q_s,nest_q,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(nest_q)'
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_blen_ad ERROR at gmm_get(qt1)'
      endif
*
* ADJ of
* Set up blending zones
      if (.not. Schm_hydro_L) then
      call nesajr_ad (qt1  ,nest_q ,  LDIST_DIM,G_nk+2 ,0,0,Hblen_x,Hblen_y,Hblen_z)
      endif
*
      call nesajr_ad (st1  ,nest_s ,LDIST_DIM,     1,0,0,Hblen_x,Hblen_y,Hblen_z)
      call nesajr_ad (tt1  ,nest_t ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y,Hblen_z)
      call nesajr_ad (zdt1 ,nest_zd,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y,Hblen_z)
      call nesajr_ad (wt1  ,nest_w ,LDIST_DIM,G_nk+1,0,0,Hblen_x,Hblen_y,Hblen_z)
      call nesajr_ad (vt1  ,nest_v ,LDIST_DIM,G_nk  ,0,1,Hblen_x,Hblen_y,Hblen_z)
      call nesajr_ad (ut1  ,nest_u ,LDIST_DIM,G_nk  ,1,0,Hblen_x,Hblen_y,Hblen_z)
*
*----------------------------------------------------------------------
      return
      end
