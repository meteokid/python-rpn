! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r itf_phy_fillbus_ad - Adjoint of Fill the slice workspace variable for the physics
*
#include "model_macros_f.h"
*
      subroutine itf_phy_fillbus_ad
     $                      (F_busdyn, F_busper, F_busent, F_busvol,
     $                       F_pvptr, NPTR, F_trm, F_trp,
     $                       F_jdo, F_step,DIST_DIM,Nk)
*
      implicit none
*
      integer F_step,F_jdo, DIST_DIM, Nk, NPTR
*
      real F_busdyn(*),F_busper(*),F_busent(*), F_busvol(*)
      real  F_trp(DIST_SHAPE,Nk,*), F_trm(DIST_SHAPE,Nk,*)
      integer*8 F_pvptr(NPTR)
*
*author 
*     Stephane Laroche - January 2002
*
*revision
* v3_00 - Laroche S.            - initial MPI version
* v3_02 - Tanguay M./Laroche S. - do not assume TRAJ HU positive 
*                               - contribution of surface pressure
* v3_30 - Tanguay M.            - adapt TL/AD to itf
*                               - Validation for LAM version
* v4_03 - Spacek L.             - Staggered version
*
*object
*	Fill the slice workspace variable for the physics.
*	Change of units if required	
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_busdyn      I       - dynamic bus
* F_up          I       - wind image in x direction at time t*
* F_vp          I       - wind image in y direction at time t*
* F_tp          I       - virtual temperature at time t*
* F_qp          I       - ln of pressure at time t*
* F_um          I       - wind image in x direction at time t-
* F_vm          I       - wind image in y direction at time t-
* F_tm          I       - virtual temperature at time t-
* F_lpsm        I       - ln of surface pressure at time t-
* F_wp          I       - vertical motion at time t*
* F_sig         I       - sigma levels
* F_jdo         I       - slice number being processed
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "itf_phy_buses.cdk"
#include "itf_phy_busind.cdk"
#include "itf_phy_vmm.cdk"
#include "busind_tr.cdk"
*
*notes
*
      integer i, k, n, m, ii, indx, offp, offg, pid, gid, mul
      integer ntr
      real tr,wk
      real *8 ZERO_8
      parameter (ZERO_8=0.0)
      pointer (patr, tr(LDIST_SHAPE,*))
      pointer (pawk, wk(l_ni,l_nj,*))
*
*     -------------------------------------------------
      if(Schm_wload_L) call gem_stop('P_FILLBUS_TL',-1)
*     -------------------------------------------------
*
* -------------------------

         do n=1,phyt_ntr
            do k= 1,Nk
            do i= 1, p_ni
               indx = (k-1)*p_ni+i-1
               ii = i + p_offi
               F_trp(ii,F_jdo,k,n) = F_trp(ii,F_jdo,k,n) +
     $                               F_busdyn(phyt_ind(1,n)+indx)
               F_busdyn(phyt_ind(1,n)+indx) = ZERO_8
            end do
            end do
            if (phyt_ind(2,n).gt.0) then
            do k= 1,Nk
            do i= 1, p_ni
               indx = (k-1)*p_ni+i-1
               ii = i + p_offi
               F_trm(ii,F_jdo,k,n) = F_trm(ii,F_jdo,k,n) +
     $                               F_busdyn(phyt_ind(2,n)+indx)
               F_busdyn(phyt_ind(2,n)+indx) = ZERO_8
            end do
            end do
            endif
         end do
*
*C    2D variables: extract row F_jdo, one level!! 
      do n= p_phy3d_max+1,p_phy_max
         patr = F_pvptr(n)
      do i= 1, p_ni
         ii = i + p_offi
         tr(ii,F_jdo,1) = tr(ii,F_jdo,1) +  F_busdyn(p_phy_addr(n) + i-1)
         F_busdyn(p_phy_addr(n) + i-1) = ZERO_8
      end do
      end do
*
*-----------------------------
      do n= 1,p_phy3d_max
         patr = F_pvptr(n)
      do k= 1,Nk
      do i= 1, p_ni
         indx = (k-1)*p_ni+i-1
         ii = i + p_offi
         tr(ii,F_jdo,k) = tr(ii,F_jdo,k) + F_busdyn(p_phy_addr(n) + indx)
         F_busdyn(p_phy_addr(n) + indx) = ZERO_8
      end do
      end do
      enddo
*
*     ---------------------------------------------------------------
*
      return
      end

