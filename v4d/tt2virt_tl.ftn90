!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r tt2virt - Update physical quantities
!
#include "model_macros_f.h"
!
      subroutine tt2virt_tl (F_t, F_tt2tv, F_timelevel_s)
      implicit none
!
      character(1) F_timelevel_S
      logical F_tt2tv
      real F_t(*)
!author
!     Lubos Spacek - September 2009
!
!revision
! v4_12 - Spacek, L.     - First revision
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "tr3d.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "pw.cdk"
!
      integer i, j, k, n
      real, pointer, dimension(:,:,:)     :: hu, tt, tvirt
      real, pointer, dimension(:,:,:)     :: hutrajm, ttrajm
!     ________________________________________________________________
!
!     Compute temperature from virtual temperature when tt2tv = .false.
!     Compute virtual temperature from temperature when tt2tv = .true.
!     --------------------------------------------
!
      nullify (tvirt,tt,hu)

      if (.not.F_tt2tv) then
         if (F_timelevel_S.eq.'M') gmmstat = gmm_get(gmmk_tt0_s, tvirt, meta3d)
         if (F_timelevel_S.eq.'P') gmmstat = gmm_get(gmmk_tt1_s, tvirt, meta3d)
      else
         gmmstat = gmm_get(gmmk_pw_tplus_s,  tt, meta3d)
      endif

      gmmstat = gmm_get('TR/HU:'//F_timelevel_S, hu, meta3d)
      gmmstat = gmm_get('TTRAJM',ttrajm,meta3d)
      gmmstat = gmm_get('HUTRAJM',hutrajm,meta3d)
!
      if (.not.F_tt2tv) then
          call mfottv2_tl ( F_t, tvirt, hu, ttrajm, hutrajm,               &
          l_minx, l_maxx,l_miny,l_maxy,l_nk+2,1,l_ni,1,l_nj,F_tt2tv)
      else
          call mfottv2_tl ( tt,    F_t, hu, ttrajm, hutrajm,               &
          l_minx, l_maxx,l_miny,l_maxy,l_nk+2,1,l_ni,1,l_nj,F_tt2tv)
      endif
!
!     ________________________________________________________________
!
      return
      end
