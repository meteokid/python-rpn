! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nli_ad - ADJ of nli_tl
*
#include "model_macros_f.h"
*
      subroutine nli_ad()
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_30 - Edouard S.        - remove pi' at the top
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*object
*     see id section

*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "cori.cdk"
#include "vt0.cdk"
#include "vtx.cdk"
#include "ptopo.cdk"
#include "lctl.cdk"
#include "rhsc_m.cdk"
#include "nl_m.cdk"
#include "vt0_m.cdk"
#include "vtx_m.cdk"
*
*     ______________________________________________________
*
      if (Lun_debug_L)  write(Lun_out,1000)
*
      gmmstat = gmm_get(gmmk_rhsp_s,rhsp,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(rhsp)'
      gmmstat = gmm_get(gmmk_rhsc_s,rhsc,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(rhsc)'
      gmmstat = gmm_get(gmmk_tt0_s,tt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(tt0)'
      gmmstat = gmm_get(gmmk_st0_s,st0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(st0)'
      gmmstat = gmm_get(gmmk_bspqtx_s,bspqtx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(bspqtx)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(fiptx)'
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_mutx_s,mutx,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(mutx)'
      endif

*     - - - - - - - - - - - - - - -
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt0_s,qt0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(qt0)'
      else
         nullify(qt0)
      endif
      if (Cori_cornl_L) then
         gmmstat = gmm_get(gmmk_ut0_s,ut0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(ut0)'
         gmmstat = gmm_get(gmmk_vt0_s,vt0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(vt0)'
      else
         nullify(ut0,vt0)
      endif
*
*     TRAJECTORY
*     ----------
      gmmstat = gmm_get(gmmk_tt0_m_s,tt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(tt0_m)'
      gmmstat = gmm_get(gmmk_st0_m_s,st0_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(st0_m)'
      gmmstat = gmm_get(gmmk_bspqtx_m_s,bspqtx_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(bspqtx_m)'
      gmmstat = gmm_get(gmmk_fiptx_m_s,fiptx_m,meta3d)
*
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt0_m_s,qt0_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(qt0_m)'
         gmmstat = gmm_get(gmmk_mutx_m_s,mutx_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nli_ad ERROR at gmm_get(mutx_m)'
      endif
*
      call nlip_2_ad (
     $                 nl_u, nl_v, nl_t  , nl_c, nl_w, nl_f ,
     $                 ut0 , vt0 , tt0   , st0 , qt0 , fiptx,
     $                 rhsp, rhsc, bspqtx, mutx,
*
     $                 tt0_m,st0_m,bspqtx_m,fiptx_m,mutx_m,
*
     $                 LDIST_DIM, l_nk )
*
      call diag_fip_ad (fiptx, st0,   tt0, st0_m, tt0_m,   
     %                  1,l_ni,1,l_nj,l_nk)
*
      call diag_var_ad (bspqtx,mutx,st0,qt0,
     %                  st0_m,qt0_m,
     %                  1,l_ni,1,l_nj,l_nk)
*
 1000 format(5X,' ADJ of COMPUTE NON-LINEAR RHS: (S/R NLI_AD)',/)
*
*     __________________________________________________________________
*
      return
      end
