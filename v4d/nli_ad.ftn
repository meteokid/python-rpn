!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r nli_ad - ADJ of nli_tl
*
#include "model_macros_f.h"
*
      subroutine nli_ad()
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_30 - Edouard S.        - remove pi' at the top
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
*
*
*object
*     see id section
*     --------------------------------------------------------
*     REMARK: INPUT TRAJ:F_tpt0m,  F_pipt0m, F_qt0m, F_st0m
*                        F_fipt0m, F_mut0m (NoHyd)
*     --------------------------------------------------------

*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "cori.cdk"
#include "vt0.cdk" 
#include "vtx.cdk" 
#include "ptopo.cdk"
#include "rhscm.cdk"
#include "vt0m.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*
      integer  pnerr, pnlod, pnlkey1(40), i, j, k 
      real wijk1 (LDIST_SHAPE,l_nk), wijk2 (LDIST_SHAPE,l_nk)
      real                           wijk2m(LDIST_SHAPE,l_nk)
*
      real wk1(LDIST_SIZ*l_nk)
*
      real*8, parameter :: ZERO_8 = 0.0
*     ______________________________________________________
*
      if (Lun_debug_L)  write(Lun_out,1000)
*
      pnlkey1(1) = VMM_KEY(rheln)
      pnlkey1(2) = VMM_KEY(rhell)
      pnlkey1(3) = VMM_KEY(tpt0)
      pnlkey1(4) = VMM_KEY(tplt0)
      pnlkey1(5) = VMM_KEY(pipt0)
      pnlkey1(6) = VMM_KEY(st0)
      pnlkey1(7) = VMM_KEY(qt0)
      pnlod = 7 
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(fipt0)
         pnlkey1(pnlod+2) = VMM_KEY(topo)
         pnlkey1(pnlod+3) = VMM_KEY(mut0)
         pnlkey1(pnlod+4) = VMM_KEY(multx)
         pnlod = pnlod+4
      endif
      if (Cori_cornl_L) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0)
         pnlkey1(pnlod+2) = VMM_KEY(vt0)
         pnlod = pnlod+2
      endif
*
*     TRAJECTORY
*     ----------
      pnlkey1(pnlod+1) = VMM_KEY(tpt0m)
      pnlkey1(pnlod+2) = VMM_KEY(pipt0m)
      pnlkey1(pnlod+3) = VMM_KEY(qt0m)
      pnlkey1(pnlod+4) = VMM_KEY(st0m)
      pnlod = pnlod+4
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(fipt0m)
         pnlkey1(pnlod+2) = VMM_KEY(mut0m)
         pnlod = pnlod+2
      endif
*
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(rheln)
      pnerr = VMM_GET_VAR(rhell)
      pnerr = VMM_GET_VAR(tpt0)
      pnerr = VMM_GET_VAR(tplt0)
      pnerr = VMM_GET_VAR(pipt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(qt0)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(fipt0)
         pnerr = VMM_GET_VAR(topo)
         pnerr = VMM_GET_VAR(mut0)
         pnerr = VMM_GET_VAR(multx)
      else
         fipt0_ = 0
         topo_  = 0
         mut0_  = 0
         multx_ = 0
      endif
*
      if (Cori_cornl_L) then
         pnerr = VMM_GET_VAR(ut0)
         pnerr = VMM_GET_VAR(vt0)
      else
         ut0_ = 0
         vt0_ = 0
      endif
*
*     TRAJECTORY
*     ----------
      pnerr = VMM_GET_VAR(tpt0m)
      pnerr = VMM_GET_VAR(pipt0m)
      pnerr = VMM_GET_VAR(qt0m)
      pnerr = VMM_GET_VAR(st0m)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(fipt0m)
         pnerr = VMM_GET_VAR(mut0m)
      else
         fipt0m_ = 0
         mut0m_  = 0
      endif
*
*     Zero adjoint variables
*     ----------------------
      do i = 1,LDIST_SIZ*l_nk
      wk1(i) = ZERO_8 
      enddo
*
      do k=1,l_nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
      wijk1(i,j,k) = ZERO_8 
      wijk2(i,j,k) = ZERO_8 
      enddo
      enddo
      enddo
*
      call nlip_2_ad ( nl_nu  ,nl_nv  ,wk1   ,nl_nth  ,nl_n3   ,nl_n3p  ,
     $                 rheln  ,rhell  ,tpt0  ,tplt0   ,pipt0   ,nl_ncn  ,
     $                 st0    ,qt0    ,fipt0 ,topo    ,ut0     ,vt0     ,mut0 ,multx ,
     $                 wijk1  ,wijk2  ,
*
     $                                 tpt0m ,         pipt0m  ,
     $                 st0m   ,qt0m   ,fipt0m,                           mut0m,
     $                         wijk2m ,
*
     $                 LDIST_DIM,l_nk )
*
      pnerr = vmmuld(-1,0)
*
 1000 format(5X,' ADJ of COMPUTE NON-LINEAR RHS: (S/R NLI_AD)',/)
*
*     __________________________________________________________________
*
      return
      end
