!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "constants.h"

subroutine adx_trajsp_ad
   call stop_mpi(STOP_ERROR,'adx_trajsp_ad','called a stub')
   return
end subroutine adx_trajsp_ad

!/**
subroutine adx_trajsp2_ad(F_lon  , F_lat  , F_x  , F_y  , F_z  , F_u  , F_v  , &
                                   F_lat_m, F_x_m, F_y_m, F_z_m, F_u_m, F_v_m, F_dt, &
                          i0,in,j0,jn,F_ni,F_nj,F_nk)

   implicit none
#include "adx_dims.cdk"
   !@objective ADJ of adx_trajsp 
   !@arguments
   integer :: F_ni,F_nj,F_nk !I,
   real, dimension(F_ni,F_nj,F_nk) :: &
        F_lon, F_lat, &   !O, upwind longitudes at central time
        F_x, F_y, F_z, &  !O, upwind cartesian positions at central time
        F_u, F_v, &       !I, real wind components at upwind pos
   !
               F_lat_m, &       !O, upwind longitudes at central time TRAJ
        F_x_m, F_y_m, F_z_m, &  !O, upwind cartesian positions at central time TRAJ
        F_u_m, F_v_m            !I, real wind components at upwind pos TRAJ
   real    :: F_dt        !I, timestep lenght
   integer :: i0,in,j0,jn !I, scope of operator
   !@author monique tanguay
   !@revisions
   ! v4_XX - Tanguay M.        - Adjustments GEM413
!**/
#include "adx_grid.cdk"
   integer :: vnij, i,j,k, trj_i_off
   !
   real*8 :: pdsa, pdca, pdcai, pdso, pdco, pdx, pdy, pdz
   real*8 :: pdux, pduy, pduz, pdsinal, pdcosal
   real*8,dimension(i0:in,j0:jn) :: xcos, ycos, xsin, ysin, yrec
   real*8,dimension(i0:in,j0:jn) :: xasin, yasin, xatan, yatan, zatan
   !
   !TRAJECTORY
   real*8 :: pdsa_m, pdca_m, pdcai_m, pdso_m, pdco_m, pdx_m, pdy_m, pdz_m
   real*8 :: pdux_m, pduy_m, pduz_m, pdsinal_m, pdcosal_m
   real*8,dimension(i0:in,j0:jn) :: xcos_m, ycos_m, xsin_m, ysin_m, yrec_m
   real*8,dimension(i0:in,j0:jn) :: xasin_m, yasin_m, xatan_m, yatan_m, zatan_m
   !TRAJECTORY (EXTRA)
   real*8 :: pdux_m1, pduy_m1, pduz_m1, pdsinal_m1, pdsinal_m2, rxyz_m 
   real*8,dimension(i0:in,j0:jn) :: suv2_m, slat_m, cos2_m, rcos2_m, sz2_m, xy2_m, rxy2_m, rsxyz_m 
   real, dimension(F_ni,F_nj,F_nk) :: F_x_m1, F_y_m1, F_z_m1
   real z_m3
   !
   real*8, parameter :: ZERO_8 = 0.0
   !
   !---------------------------------------------------------------------
   vnij = (in-i0+1)*(jn-j0+1)
   trj_i_off = adx_mli0 - adx_li0

   !Zero adjoint work space
   !-----------------------
   pdsa   = ZERO_8
   pdca   = ZERO_8
   pdcai  = ZERO_8
   pdso   = ZERO_8
   pdco   = ZERO_8
   pdux   = ZERO_8
   pduy   = ZERO_8
   pduz   = ZERO_8
   pdsinal= ZERO_8
   pdcosal= ZERO_8

   DO_K: do k=F_nk,1,-1

      !------------------------
      !START REBUILD TRAJECTORY
      !------------------------

      !Pre-calculations (START)
      !------------------------
      do j=j0,jn
         do i=i0,in

            xcos_m(i,j) = F_lat_m(i,j,k)
            suv2_m(i,j) = sqrt( F_u_m(i,j,k) ** 2 + F_v_m(i,j,k) ** 2 )
            xsin_m(i,j) = suv2_m(i,j) * F_dt

         end do
      end do

      call vcos(ycos_m,  xcos_m, vnij)
      call vsin(ysin_m,  xsin_m, vnij)
      call vrec(yrec_m,  ycos_m, vnij)

      !Pre-calculations (END)
      !------------------------

      do j=j0,jn
         do i=i0,in

            !- cartesian coordinates of grid points
            pdx = adx_cx_8(trj_i_off + i)
            pdy = adx_sx_8(trj_i_off + i)
            pdz = adx_sy_8(j)

            !- if very small wind set upwind point to grid point
            if (abs(F_u_m(i,j,k))+abs(F_v_m(i,j,k)) >= 1.e-10) then
               pdx = pdx * adx_cy_8(j)
               pdy = pdy * adx_cy_8(j)

               ! sin and cosin of first guess of upwind positions
               pdsa_m  = F_z_m(i,j,k)
               pdca_m  = ycos_m(i,j)
               pdcai_m = yrec_m(i,j)
               pdso_m  = F_y_m(i,j,k) * pdcai_m
               pdco_m  = F_x_m(i,j,k) * pdcai_m

               !- wind components in cartesian coordinate at upwind positions
               pdux_m1 = ( - F_u_m(i,j,k) * pdso_m - F_v_m(i,j,k) * pdco_m * pdsa_m )
               pduy_m1 = (   F_u_m(i,j,k) * pdco_m - F_v_m(i,j,k) * pdso_m * pdsa_m )
               pduz_m1 =     F_v_m(i,j,k) * pdca_m

               pdsinal_m1 = pdx * pdux_m1 + pdy * pduy_m1 + pdz * pduz_m1
               pdux_m = pdux_m1 - pdx * pdsinal_m1
               pduy_m = pduy_m1 - pdy * pdsinal_m1
               pduz_m = pduz_m1 - pdz * pdsinal_m1

               rsxyz_m(i,j)= 1./sqrt( pdux_m * pdux_m + pduy_m * pduy_m + pduz_m * pduz_m )

               pdcosal_m  = sqrt( ( 1.0 + ysin_m(i,j) ) * ( 1.0 - ysin_m(i,j) ) )
               pdsinal_m2 = ysin_m(i,j) * rsxyz_m(i,j)

               F_x_m1(i,j,k) = F_x_m(i,j,k)
               F_y_m1(i,j,k) = F_y_m(i,j,k)
               F_z_m1(i,j,k) = F_z_m(i,j,k)

               F_x_m(i,j,k) = pdcosal_m * pdx - pdsinal_m2 * pdux_m
               F_y_m(i,j,k) = pdcosal_m * pdy - pdsinal_m2 * pduy_m
               F_z_m(i,j,k) = pdcosal_m * pdz - pdsinal_m2 * pduz_m

            endif

         end do
      end do

      !Pre-calculations (START)
      !------------------------

      do j=j0,jn
         do i=i0,in

            z_m3 = F_z_m(i,j,k)

            if ( F_z_m(i,j,k) .lt. -1.D0 ) then
                 z_m3 = -1.D0
            elseif ( F_z_m(i,j,k) .gt.  1.D0 ) then
                 z_m3 =  1.D0
            endif

            sz2_m (i,j) = sqrt(1.0 - z_m3*z_m3)
            xy2_m (i,j) = F_x_m(i,j,k)*F_x_m(i,j,k) + F_y_m(i,j,k)*F_y_m(i,j,k)
            cos2_m(i,j) = ycos_m(i,j) **2
         end do
      end do

      call vrec(rxy2_m , xy2_m , vnij)
      call vsin(slat_m , xcos_m, vnij)
      call vrec(rcos2_m, cos2_m, vnij)

      !Pre-calculations (END)
      !------------------------

      !----------------------
      !END REBUILD TRAJECTORY
      !----------------------

      DO_J1: do j=jn,j0,-1
         DO_I1: do i=in,i0,-1

            !- cartesian coordinates of grid points
            pdx = adx_cx_8(trj_i_off + i)
            pdy = adx_sx_8(trj_i_off + i)
            pdz = adx_sy_8(j)

            z_m3 = F_z_m(i,j,k)

            if ( F_z_m(i,j,k) .lt. -1.D0 ) then
               z_m3 = -1.D0
            elseif ( F_z_m(i,j,k) .gt.  1.D0 ) then
               z_m3 =  1.D0
            endif

            F_y  (i,j,k) =  F_x_m(i,j,k)*F_lon(i,j,k)*rxy2_m(i,j) + F_y(i,j,k)
            F_x  (i,j,k) = -F_y_m(i,j,k)*F_lon(i,j,k)*rxy2_m(i,j) + F_x(i,j,k)
            F_lon(i,j,k) = ZERO_8

            if ( abs(z_m3) .ne. 1.D0 ) then
              F_z  (i,j,k) = F_lat(i,j,k) / sz2_m(i,j) + F_z(i,j,k)
              F_lat(i,j,k) = ZERO_8
            else
              F_lat(i,j,k) = 0.0D0
            endif

            if ( F_z_m(i,j,k) .lt. -1.D0 ) then
              F_z (i,j,k) =  0.D0
            elseif ( F_z_m(i,j,k) .gt.  1.D0 ) then
              F_z (i,j,k) =  0.D0
            endif

            !- if very small wind set upwind point to grid point
            if (abs(F_u_m(i,j,k))+abs(F_v_m(i,j,k)) >= 1.e-10) then
               pdx = pdx * adx_cy_8(j)
               pdy = pdy * adx_cy_8(j)

               !TRAJECTORY
               !----------
               ! sin and cosin of first guess of upwind positions
               !
               pdsa_m  = F_z_m1(i,j,k)
               pdca_m  = ycos_m(i,j)
               pdcai_m = yrec_m(i,j)
               pdso_m  = F_y_m1(i,j,k) * pdcai_m
               pdco_m  = F_x_m1(i,j,k) * pdcai_m

               !TRAJECTORY
               !----------
               !- wind components in cartesian coordinate at upwind positions
               pdux_m1 = ( - F_u_m(i,j,k) * pdso_m - F_v_m(i,j,k) * pdco_m * pdsa_m )
               pduy_m1 = (   F_u_m(i,j,k) * pdco_m - F_v_m(i,j,k) * pdso_m * pdsa_m )
               pduz_m1 = F_v_m(i,j,k) * pdca_m

               pdsinal_m1 = pdx * pdux_m1 + pdy * pduy_m1 + pdz * pduz_m1
               pdux_m     = pdux_m1 - pdx * pdsinal_m1
               pduy_m     = pduy_m1 - pdy * pdsinal_m1
               pduz_m     = pduz_m1 - pdz * pdsinal_m1

               pdcosal_m  = sqrt( ( 1.0 + ysin_m(i,j) ) * ( 1.0 - ysin_m(i,j) ) )
               pdsinal_m2 = ysin_m(i,j) * rsxyz_m(i,j)

               rxyz_m     = 1./( pdux_m * pdux_m + pduy_m * pduy_m + pduz_m * pduz_m )


               !ADJ
               !---
               pdcosal =   F_x(i,j,k) * pdx &
                         + F_y(i,j,k) * pdy &
                         + F_z(i,j,k) * pdz
               pdsinal = - F_x(i,j,k) * pdux_m &
                         - F_y(i,j,k) * pduy_m &
                         - F_z(i,j,k) * pduz_m

               pdux    = -pdsinal_m2 * pdux_m * pdsinal * rxyz_m &
                         -pdsinal_m2 * F_x(i,j,k)

               pduy    = -pdsinal_m2 * pduy_m * pdsinal * rxyz_m &
                         -pdsinal_m2 * F_y(i,j,k)

               pduz    = -pdsinal_m2 * pduz_m * pdsinal * rxyz_m &
                         -pdsinal_m2 * F_z(i,j,k)

               pdsinal = pdsinal * rsxyz_m(i,j)

               F_u(i,j,k)  = -F_dt* ysin_m(i,j)* F_u_m(i,j,k)*pdcosal/ suv2_m(i,j) + F_u(i,j,k)
               F_v(i,j,k)  = -F_dt* ysin_m(i,j)* F_v_m(i,j,k)*pdcosal/ suv2_m(i,j) + F_v(i,j,k)
               F_u(i,j,k)  =  F_dt* pdcosal_m  * F_u_m(i,j,k)*pdsinal/ suv2_m(i,j) + F_u(i,j,k)
               F_v(i,j,k)  =  F_dt* pdcosal_m  * F_v_m(i,j,k)*pdsinal/ suv2_m(i,j) + F_v(i,j,k)

               pdsinal = - pdx * pdux - pdy * pduy - pdz * pduz

               pdux    = pdx * pdsinal + pdux
               pduy    = pdy * pdsinal + pduy
               pduz    = pdz * pdsinal + pduz


               !- ADJ of
               !- wind components in cartesian coordinate at upwind positions

               F_u(i,j,k)  =  - pdux * pdso_m &
                              + pduy * pdco_m + F_u(i,j,k)
               F_v(i,j,k)  =  - pdux * pdco_m * pdsa_m &
                              - pduy * pdso_m * pdsa_m & 
                              + pduz * pdca_m + F_v(i,j,k)

               pdco        = - F_v_m(i,j,k) *( pdux * pdsa_m ) &
                             + F_u_m(i,j,k) *  pduy
               F_x(i,j,k)  = pdco * pdcai_m

               pdso        = - F_u_m(i,j,k) *  pdux &
                             - F_v_m(i,j,k) *( pduy * pdsa_m )
               F_y(i,j,k)  = pdso * pdcai_m

               !- ADJ of
               ! sin and cosin of first guess of upwind positions

               pdcai       = F_y_m1(i,j,k) * pdso   + &
                             F_x_m1(i,j,k) * pdco
               F_lat(i,j,k)= -slat_m(i,j) * (-pdcai  * rcos2_m(i,j)  + F_v_m(i,j,k) * pduz)

               F_z(i,j,k)  = - F_v_m(i,j,k) *( pdco_m * pdux ) &
                             - F_v_m(i,j,k) *( pdso_m * pduy )

            endif

         enddo DO_I1
      enddo DO_J1

   enddo DO_K
   !---------------------------------------------------------------------
   return
end subroutine adx_trajsp2_ad
