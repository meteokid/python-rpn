! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r rhsp_2_tl - TLM of rhsp_2 
*
#include "model_macros_f.h"
*
      subroutine rhsp_2_tl ( F_oru, F_orv, F_orc,F_ort,F_orw,   F_orf,
     $                       F_ruw1,F_rvw1,F_ru, F_rv, F_nest_u,F_nest_v,
     $                       F_u,   F_v,   F_w,  F_t,  F_s,     F_zd,
     $                       F_BsPq,F_fip, F_mu,
*
     $                       F_oru_m, F_orv_m, F_orc_m,F_ort_m,F_orw_m,   F_orf_m,
     $                       F_ruw1_m,F_rvw1_m,F_ru_m, F_rv_m, F_nest_u_m,F_nest_v_m,
     $                       F_u_m,   F_v_m,   F_w_m,  F_t_m,  F_s_m,     F_zd_m,
     $                       F_BsPq_m,F_fip_m, F_mu_m,
*
     $                       DIST_DIM, Nk )
*
      implicit none
*
      integer DIST_DIM, Nk
*
      real F_oru   (DIST_SHAPE,  Nk)  ,F_orv   (DIST_SHAPE,  Nk)  ,
     $     F_orc   (DIST_SHAPE,  Nk)  ,F_ort   (DIST_SHAPE,  Nk+1),
     $     F_orw   (DIST_SHAPE,  Nk+1),F_orf   (DIST_SHAPE,  Nk+1),
     $     F_ruw1  (DIST_SHAPE,  Nk)  ,F_rvw1  (DIST_SHAPE,  Nk)  ,
     $     F_ru    (DIST_SHAPE,  Nk)  ,F_rv    (DIST_SHAPE,  Nk)  ,
     $     F_nest_u(DIST_SHAPE,  Nk)  ,F_nest_v(DIST_SHAPE,  Nk)  ,
     $     F_u     (DIST_SHAPE,  Nk)  ,F_v     (DIST_SHAPE,  Nk)  ,
     $     F_w     (DIST_SHAPE,  Nk+1),F_t     (DIST_SHAPE,  Nk+1),
     $     F_s     (DIST_SHAPE)       ,F_zd    (DIST_SHAPE,  Nk+1),
     $     F_BsPq  (DIST_SHAPE,0:Nk+1),F_fip   (DIST_SHAPE,0:Nk+1),
     $     F_mu    (DIST_SHAPE,  Nk+1)
*
      real F_oru_m   (DIST_SHAPE,  Nk)  ,F_orv_m   (DIST_SHAPE,  Nk)  ,
     $     F_orc_m   (DIST_SHAPE,  Nk)  ,F_ort_m   (DIST_SHAPE,  Nk+1),
     $     F_orw_m   (DIST_SHAPE,  Nk+1),F_orf_m   (DIST_SHAPE,  Nk+1),
     $     F_ruw1_m  (DIST_SHAPE,  Nk)  ,F_rvw1_m  (DIST_SHAPE,  Nk)  ,
     $     F_ru_m    (DIST_SHAPE,  Nk)  ,F_rv_m    (DIST_SHAPE,  Nk)  ,
     $     F_nest_u_m(DIST_SHAPE,  Nk)  ,F_nest_v_m(DIST_SHAPE,  Nk)  ,
     $     F_u_m     (DIST_SHAPE,  Nk)  ,F_v_m     (DIST_SHAPE,  Nk)  ,
     $     F_w_m     (DIST_SHAPE,  Nk+1),F_t_m     (DIST_SHAPE,  Nk+1),
     $     F_s_m     (DIST_SHAPE)       ,F_zd_m    (DIST_SHAPE,  Nk+1),
     $     F_BsPq_m  (DIST_SHAPE,0:Nk+1),F_fip_m   (DIST_SHAPE,0:Nk+1),
     $     F_mu_m    (DIST_SHAPE,  Nk+1)
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - replace xfis by topo
* v2_31 - Tanguay M.        - adapt for tracers in tr3d
* v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_21 - Tanguay M.        - Revision Openmp
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section 
*
*implicits
#include "glb_ld.cdk"
#include "cori.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "offc.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "lun.cdk"
*
      integer i, j, k, i0, j0, in, jn, i00, inn, j00, jnn, nij
      real    tdiv(DIST_SHAPE),tdiv_m(DIST_SHAPE)
      real*8  aaa_8,aaT_8,aaw_8,bbb_8,bbT_8,bbw_8,c1_8,c2_8,c3_8,
     $        wk1_8(DIST_SHAPE),wk2_8(DIST_SHAPE),barz_8,barzp_8,ww1_8,ww2_8,
     $        xxx_8,yyy_8,xlog_8(l_ni,l_nj),ylog_8(l_ni,l_nj),
     $        lnT_8(DIST_SHAPE,Nk+1)
*
      real*8  wk1_m_8(DIST_SHAPE),wk2_m_8(DIST_SHAPE),
     $        barz_m_8, barzp_m_8,ww1_m_8,ww2_m_8,
     $        xlog_m_8(l_ni,l_nj),ylog_m_8(l_ni,l_nj),
     $        lnT_m_8(DIST_SHAPE,Nk+1)
*
      real*8  ONE_8,HALF_8,ZERO_8
      parameter( ONE_8=1.d0, HALF_8=.5d0, ZERO_8=0.d0 )
*
*     __________________________________________________________________
*
      if (.not.Cori_cornl_L ) call gem_stop('rhsp_2_TL : NOT Cori_cornl_L NOT DONE ',-1)
*
*     Common coefficients 
*     -------------------
      aaa_8 = ONE_8 / Cstv_tau_8
      aaT_8 = ONE_8 / Cstv_tauT_8
      aaw_8 = ONE_8 / Cstv_tauw_8
      bbb_8 = ( ONE_8 - Offc_b0_8  ) / Offc_b0_8
      bbT_8 = ( ONE_8 - Offc_b0T_8 ) / Offc_b0T_8
      bbw_8 = ( ONE_8 - Offc_b0w_8 ) / Offc_b0w_8

      c1_8  = bbb_8 * Dcst_rgasd_8 / ( Dcst_rayt_8 * Dcst_rayt_8 )
      c2_8  = bbb_8 / ( Dcst_rayt_8 * Dcst_rayt_8 )
*
      if (Cori_cornl_L) then
         c3_8 = bbb_8
      else
         c3_8 = bbb_8 - ONE_8 
      endif
* 
*     Exchanging halos for derivatives & interpolation 
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
*     TRAJECTORY
*     ----------
      call rpn_comm_xch_halo( F_u_m , LDIST_DIM,l_niu,l_nj,G_nk,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_v_m , LDIST_DIM,l_ni,l_njv,G_nk,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_t_m , LDIST_DIM,l_ni,l_nj,G_nk+1,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo(F_BsPq_m,LDIST_DIM,l_ni,l_nj,G_nk+2,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_fip_m, LDIST_DIM,l_ni,l_nj,G_nk+2,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
         call rpn_comm_xch_halo( F_mu_m, LDIST_DIM,l_ni,l_nj,G_nk+1,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
*
*     TLM 
*     ---
      call rpn_comm_xch_halo( F_u , LDIST_DIM,l_niu,l_nj,G_nk,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_v , LDIST_DIM,l_ni,l_njv,G_nk,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_t , LDIST_DIM,l_ni,l_nj,G_nk+1,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo(F_BsPq,LDIST_DIM,l_ni,l_nj,G_nk+2,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_fip, LDIST_DIM,l_ni,l_nj,G_nk+2,
     $            G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
         call rpn_comm_xch_halo( F_mu, LDIST_DIM,l_ni,l_nj,G_nk+1,
     $               G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif 
*
      nij = l_ni*l_nj
*
C!$omp parallel private(i,j,i0,j0,jn,in,i00,inn,j00,jnn,
C!$omp$          tdiv,xlog_8,ylog_8,wk1_8,wk2_8,
C!$omp$          ww1_8,xxx_8,yyy_8,barz_8,barzp_8,
C!$omp$          tdiv_m,xlog_m_8,ylog_m_8,wk1_m_8,wk2_m_8,
C!$omp$          barz_m_8,barzp_m_8)
*
C!$omp do 
      do 1000 k = 1,l_nk 
*
***********************************
* Computing Ru: RHS of U equation *
***********************************
*
*     Setting indices for calculating Ru
      i0 = 1
      j0 = 1
      in = l_niu
      jn = l_nj
*
*     Computing (1 + mu) barx barz in wk1
*     -----------------------------------
*
      if (Schm_hydro_L) then
         do j = 1, l_nj
         do i = 1, l_ni
*
*           TRAJECTORY
*           ----------
            wk1_m_8(i,j) = ONE_8 
*
*           TLM 
*           ---
            wk1_8  (i,j) = ZERO_8 
*
         end do
         end do
      else
         do j = j0, jn
         do i = i0, in
*
*           TRAJECTORY
*           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i  ,j,k+1)
     $                 +Ver_wm_8%m(k)*F_mu_m(i  ,j,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i+1,j,k+1)
     $                 +Ver_wm_8%m(k)*F_mu_m(i+1,j,k)
            wk1_m_8(i,j) = ONE_8 + ( ONE_8 - intuv_c0xxu_8(i) ) * barz_m_8
     $                                     + intuv_c0xxu_8(i)   * barzp_m_8
*
*           TLM 
*           ---
            barz_8  = Ver_wp_8%m(k)*F_mu(i  ,j,k+1)
     $               +Ver_wm_8%m(k)*F_mu(i  ,j,k)
            barzp_8 = Ver_wp_8%m(k)*F_mu(i+1,j,k+1)
     $               +Ver_wm_8%m(k)*F_mu(i+1,j,k)
            wk1_8(i,j) =  ( ONE_8 - intuv_c0xxu_8(i) ) * barz_8
     $                            + intuv_c0xxu_8(i)   * barzp_8
*
         end do
         end do
      endif
*
      if ( abs(c3_8) .lt. 1.0e-6 ) then
*
*     NOT DONE 
*
      else
*        Computing Ru with the Coriolis factor
*
*        Setting indices for calculating V barx in wk2
         i00=minx
         inn=maxx
         j00 = 1
         jnn = l_njv
         if (l_south) j00 = 3
         if (l_north) jnn = l_njv-1
*
         do j = j00, jnn
         do i = i00, inn
*
*           TRAJECTORY
*           ----------
            wk2_m_8(i,j)  = inuvl_wyvy3_8(j,1) * F_v_m(i,j-2,k) 
     $                    + inuvl_wyvy3_8(j,2) * F_v_m(i,j-1,k) 
     $                    + inuvl_wyvy3_8(j,3) * F_v_m(i,j  ,k) 
     $                    + inuvl_wyvy3_8(j,4) * F_v_m(i,j+1,k)          
*
*           TLM
*           ---
            wk2_8  (i,j)  = inuvl_wyvy3_8(j,1) * F_v(i,j-2,k) 
     $                    + inuvl_wyvy3_8(j,2) * F_v(i,j-1,k) 
     $                    + inuvl_wyvy3_8(j,3) * F_v(i,j  ,k) 
     $                    + inuvl_wyvy3_8(j,4) * F_v(i,j+1,k)          
*
         end do
         end do
*
         if (.not.G_lam) then 
            if (l_south) then
               do i = i00, inn
*
*                 TRAJECTORY
*                 ----------
                  wk2_m_8(i,j00-2)= inuvl_wyvy3_8(j00-2,3) * F_v_m(i,j00-2,k) 
     $                            + inuvl_wyvy3_8(j00-2,4) * F_v_m(i,j00-1,k) 
                  wk2_m_8(i,j00-1)= inuvl_wyvy3_8(j00-1,2) * F_v_m(i,j00-2,k) 
     $                            + inuvl_wyvy3_8(j00-1,3) * F_v_m(i,j00-1,k) 
     $                            + inuvl_wyvy3_8(j00-1,4) * F_v_m(i,j00  ,k) 
*
*                 TLM
*                 ---
                  wk2_8  (i,j00-2)= inuvl_wyvy3_8(j00-2,3) * F_v(i,j00-2,k) 
     $                            + inuvl_wyvy3_8(j00-2,4) * F_v(i,j00-1,k) 
                  wk2_8  (i,j00-1)= inuvl_wyvy3_8(j00-1,2) * F_v(i,j00-2,k) 
     $                            + inuvl_wyvy3_8(j00-1,3) * F_v(i,j00-1,k) 
     $                            + inuvl_wyvy3_8(j00-1,4) * F_v(i,j00  ,k) 
*
               end do
            endif
            if (l_north) then
               do i = i00, inn
*
*                 TRAJECTORY
*                 ----------
                  wk2_m_8(i,jnn+2)= inuvl_wyvy3_8(jnn+2,1) * F_v_m(i,jnn  ,k) 
     $                            + inuvl_wyvy3_8(jnn+2,2) * F_v_m(i,jnn+1,k) 
                  wk2_m_8(i,jnn+1)= inuvl_wyvy3_8(jnn+1,1) * F_v_m(i,jnn-1,k) 
     $                            + inuvl_wyvy3_8(jnn+1,2) * F_v_m(i,jnn  ,k) 
     $                            + inuvl_wyvy3_8(jnn+1,3) * F_v_m(i,jnn+1,k) 
*
*                 TLM
*                 ---
                  wk2_8  (i,jnn+2)= inuvl_wyvy3_8(jnn+2,1) * F_v(i,jnn  ,k) 
     $                            + inuvl_wyvy3_8(jnn+2,2) * F_v(i,jnn+1,k) 
                  wk2_8  (i,jnn+1)= inuvl_wyvy3_8(jnn+1,1) * F_v(i,jnn-1,k) 
     $                            + inuvl_wyvy3_8(jnn+1,2) * F_v(i,jnn  ,k) 
     $                            + inuvl_wyvy3_8(jnn+1,3) * F_v(i,jnn+1,k) 
               end do
            endif
         endif
*
*        Setting indices for calculating Ru
         if (G_lam) then
             if (l_west ) i0 = 2
             if (l_east ) in = l_niu-1
             if (l_south) j0 = 3
             if (l_north) jn = l_njv-1
         endif
*
*        Ru with the Coriolis factor
         do j= j0, jn
         do i= i0, in
*
*           TRAJECTORY
*           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_t_m(i  ,j,k+1)
     %                 +Ver_wm_8%m(k)*F_t_m(i  ,j,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i+1,j,k+1)
     %                 +Ver_wm_8%m(k)*F_t_m(i+1,j,k)
*
*           TLM
*           ---
            barz_8  = Ver_wp_8%m(k)*F_t(i  ,j,k+1)
     %               +Ver_wm_8%m(k)*F_t(i  ,j,k)
            barzp_8 = Ver_wp_8%m(k)*F_t(i+1,j,k+1)
     %               +Ver_wm_8%m(k)*F_t(i+1,j,k)
*
*           TRAJECTORY
*           ----------
            F_oru_m(i,j,k) = aaa_8 * F_u_m(i,j,k)
     $               - c1_8 * ( ( ONE_8 - intuv_c0xxu_8(i) )* barz_m_8
     $                                  + intuv_c0xxu_8(i)  * barzp_m_8 )
     $                      * ( F_BsPq_m(i+1,j,k) - F_BsPq_m(i,j,k) )
     $                      * Geomg_invhx_8(i)
     $               - c2_8 * wk1_m_8(i,j) * ( F_fip_m(i+1,j,k) - F_fip_m(i,j,k) )
     $                      * Geomg_invhx_8(i)
     $               + c3_8 * Cori_fcoru_8(i,j)
     $                      * ( inuvl_wxxu3_8(i,1)*wk2_m_8(i-1,j)
     $                        + inuvl_wxxu3_8(i,2)*wk2_m_8(i  ,j)
     $                        + inuvl_wxxu3_8(i,3)*wk2_m_8(i+1,j)
     $                        + inuvl_wxxu3_8(i,4)*wk2_m_8(i+2,j) )
*
*           TLM
*           ---
            F_oru(i,j,k) = aaa_8 * F_u(i,j,k)
*
     $               - c1_8 * ( ( ONE_8 - intuv_c0xxu_8(i) )* barz_m_8
     $                                  + intuv_c0xxu_8(i)  * barzp_m_8 )
     $                      * ( F_BsPq  (i+1,j,k) - F_BsPq  (i,j,k) )
     $                      * Geomg_invhx_8(i)
*
     $               - c1_8 * ( ( ONE_8 - intuv_c0xxu_8(i) )* barz_8
     $                                  + intuv_c0xxu_8(i)  * barzp_8 )
     $                      * ( F_BsPq_m(i+1,j,k) - F_BsPq_m(i,j,k) )
     $                      * Geomg_invhx_8(i)
*
     $               - c2_8 * wk1_m_8(i,j) 
     $                      * ( F_fip  (i+1,j,k) - F_fip  (i,j,k) )
     $                      * Geomg_invhx_8(i)
*
     $               - c2_8 * wk1_8(i,j) 
     $                      * ( F_fip_m(i+1,j,k) - F_fip_m(i,j,k) )
     $                      * Geomg_invhx_8(i)
*
     $               + c3_8 * Cori_fcoru_8(i,j)
     $                      * ( inuvl_wxxu3_8(i,1)*wk2_8(i-1,j)
     $                        + inuvl_wxxu3_8(i,2)*wk2_8(i  ,j)
     $                        + inuvl_wxxu3_8(i,3)*wk2_8(i+1,j)
     $                        + inuvl_wxxu3_8(i,4)*wk2_8(i+2,j) )

*
         end do
         end do
*
      endif
*
***********************************
* Computing Rv: RHS of V equation *
***********************************
*
*     Setting indices for calculating Rv
      i0 = 1
      j0 = 1
      in = l_ni
      jn = l_njv
*
*     Computing (1 + mu) bary barz in wk1
*     -----------------------------------
*
      if (.not. Schm_hydro_L) then
         do j = j0, jn
         do i = i0, in
*
*           TRAJECTORY
*           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_mu_m(i,j  ,k+1)
     %                 +Ver_wm_8%m(k)*F_mu_m(i,j  ,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_mu_m(i,j+1,k+1)
     %                 +Ver_wm_8%m(k)*F_mu_m(i,j+1,k)
            wk1_m_8(i,j) = ONE_8 + ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8 
     $                                     + intuv_c0yyv_8(j)   * barzp_m_8
*
*           TLM
*           ---
            barz_8  = Ver_wp_8%m(k)*F_mu(i,j  ,k+1)
     %               +Ver_wm_8%m(k)*F_mu(i,j  ,k)
            barzp_8 = Ver_wp_8%m(k)*F_mu(i,j+1,k+1)
     %               +Ver_wm_8%m(k)*F_mu(i,j+1,k)
            wk1_8(i,j) =  ( ONE_8 - intuv_c0yyv_8(j) ) * barz_8
     $                            + intuv_c0yyv_8(j)   * barzp_8
*
         end do
         end do
      endif
*
      if ( abs(c3_8) .lt. 1.0e-6 ) then
*
*     NOT DONE
*
      else
*        Computing Rv with the Coriolis factor
*
*        Setting indices for calculating U bary in wk2
         j00=miny
         jnn=maxy
         i00 = 1
         inn = l_niu
         if (G_lam) then
            if (l_west) i00 = 3
            if (l_east) inn = l_niu-1
         endif
*
         do j = j00, jnn
         do i = i00, inn
*
*           TRAJECTORY
*           ----------
            wk2_m_8(i,j)  = inuvl_wxux3_8(i,1)*F_u_m(i-2,j,k) 
     $                    + inuvl_wxux3_8(i,2)*F_u_m(i-1,j,k) 
     $                    + inuvl_wxux3_8(i,3)*F_u_m(i  ,j,k) 
     $                    + inuvl_wxux3_8(i,4)*F_u_m(i+1,j,k) 
*
*           TLM
*           ---
            wk2_8  (i,j)  = inuvl_wxux3_8(i,1)*F_u(i-2,j,k) 
     $                    + inuvl_wxux3_8(i,2)*F_u(i-1,j,k) 
     $                    + inuvl_wxux3_8(i,3)*F_u(i  ,j,k) 
     $                    + inuvl_wxux3_8(i,4)*F_u(i+1,j,k) 
         end do
         end do
*
*        Setting indices for calculating Rv
         if (l_south) j0 = 2
         if (l_north) jn = l_njv-1
         if (G_lam) then
            if (l_west) i0 = 3
            if (l_east) in = l_niu-1
         endif
*
*        Rv with the Coriolis factor
         do j = j0, jn
         do i = i0, in
*
*           TRAJECTORY
*           ----------
            barz_m_8  = Ver_wp_8%m(k)*F_t_m(i,j  ,k+1)
     %                 +Ver_wm_8%m(k)*F_t_m(i,j  ,k)
            barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i,j+1,k+1)
     %                 +Ver_wm_8%m(k)*F_t_m(i,j+1,k)
*
*           TLM
*           ---
            barz_8  = Ver_wp_8%m(k)*F_t(i,j  ,k+1)
     %               +Ver_wm_8%m(k)*F_t(i,j  ,k)
            barzp_8 = Ver_wp_8%m(k)*F_t(i,j+1,k+1)
     %               +Ver_wm_8%m(k)*F_t(i,j+1,k)
*
*           TRAJECTORY
*           ----------
            F_orv_m(i,j,k) = aaa_8 * F_v_m(i,j,k)
     $               - c1_8 *( ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8
     $                                 + intuv_c0yyv_8(j)   * barzp_m_8 )
     $                      * ( F_BsPq_m(i,j+1,k) - F_BsPq_m (i,j,k) )
     $                      * Geomg_cyv2_8(j) * Geomg_invhsy_8(j)
     $               - c2_8 * wk1_m_8(i,j) * ( F_fip_m(i,j+1,k) - F_fip_m(i,j,k) )
     $                      * Geomg_cyv2_8(j) * Geomg_invhsy_8(j)
     $               - c3_8 * Cori_fcorv_8(i,j)
     $                      * ( inuvl_wyyv3_8(j,1)*wk2_m_8(i,j-1)
     $                        + inuvl_wyyv3_8(j,2)*wk2_m_8(i,j  )
     $                        + inuvl_wyyv3_8(j,3)*wk2_m_8(i,j+1)
     $                        + inuvl_wyyv3_8(j,4)*wk2_m_8(i,j+2) )
*
*           TLM
*           ---
            F_orv(i,j,k) = aaa_8 * F_v(i,j,k)
*
     $               - c1_8 *( ( ONE_8 - intuv_c0yyv_8(j) ) * barz_m_8
     $                                 + intuv_c0yyv_8(j)   * barzp_m_8 )
     $                      * ( F_BsPq(i,j+1,k) - F_BsPq (i,j,k) )
     $                      * Geomg_cyv2_8(j) * Geomg_invhsy_8(j)
*
     $               - c1_8 *( ( ONE_8 - intuv_c0yyv_8(j) ) * barz_8
     $                                 + intuv_c0yyv_8(j)   * barzp_8 )
     $                      * ( F_BsPq_m(i,j+1,k) - F_BsPq_m (i,j,k) )
     $                      * Geomg_cyv2_8(j) * Geomg_invhsy_8(j)
*
     $               - c2_8 * wk1_m_8(i,j) 
     $                      * ( F_fip(i,j+1,k) - F_fip(i,j,k) )
     $                      * Geomg_cyv2_8(j) * Geomg_invhsy_8(j)
*
     $               - c2_8 * wk1_8(i,j) 
     $                      * ( F_fip_m(i,j+1,k) - F_fip_m(i,j,k) )
     $                      * Geomg_cyv2_8(j) * Geomg_invhsy_8(j)
*
     $               - c3_8 * Cori_fcorv_8(i,j)
     $                      * ( inuvl_wyyv3_8(j,1)*wk2_8(i,j-1)
     $                        + inuvl_wyyv3_8(j,2)*wk2_8(i,j  )
     $                        + inuvl_wyyv3_8(j,3)*wk2_8(i,j+1)
     $                        + inuvl_wyyv3_8(j,4)*wk2_8(i,j+2) )
*
         end do
         end do
*
         if (.not.G_lam) then
*
            if (l_south) then
               do i = i0, in
*
*                 TRAJECTORY
*                 ----------
                  barz_m_8  = Ver_wp_8%m(k)*F_t_m(i,1  ,k+1)
     %                       +Ver_wm_8%m(k)*F_t_m(i,1  ,k)
                  barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i,1+1,k+1)
     %                       +Ver_wm_8%m(k)*F_t_m(i,1+1,k)
*
*                 TLM
*                 ---
                  barz_8  = Ver_wp_8%m(k)*F_t(i,1  ,k+1)
     %                     +Ver_wm_8%m(k)*F_t(i,1  ,k)
                  barzp_8 = Ver_wp_8%m(k)*F_t(i,1+1,k+1)
     %                     +Ver_wm_8%m(k)*F_t(i,1+1,k)
*
*                 TRAJECTORY
*                 ----------
                  F_orv_m(i,1,k) = aaa_8 * F_v_m(i,1,k)
     $               - c1_8 * ( ( ONE_8 - intuv_c0yyv_8(1) ) * barz_m_8 
     $                                  + intuv_c0yyv_8(1)   * barzp_m_8 )
     $                      * ( F_BsPq_m(i,1+1,k) - F_BsPq_m(i,1,k) )
     $                      * Geomg_cyv2_8(1)*Geomg_invhsy_8(1)
     $               - c2_8 * wk1_m_8(i,1) * ( F_fip_m(i,1+1,k) - F_fip_m(i,1,k) )
     $                      * Geomg_cyv2_8(1)*Geomg_invhsy_8(1)
     $               - c3_8 * Cori_fcorv_8(i,1)
     $                      * ( inuvl_wyyv3_8(1,2)*wk2_m_8(i,1)
     $                        + inuvl_wyyv3_8(1,3)*wk2_m_8(i,2) 
     $                        + inuvl_wyyv3_8(1,4)*wk2_m_8(i,3) )
*
*                 TLM
*                 ---
                  F_orv(i,1,k) = aaa_8 * F_v(i,1,k)
*
     $               - c1_8 * ( ( ONE_8 - intuv_c0yyv_8(1) ) * barz_m_8
     $                                  + intuv_c0yyv_8(1)   * barzp_m_8 )
     $                      * ( F_BsPq(i,1+1,k) - F_BsPq(i,1,k) )
     $                      * Geomg_cyv2_8(1)*Geomg_invhsy_8(1)
*
     $               - c1_8 * ( ( ONE_8 - intuv_c0yyv_8(1) ) * barz_8
     $                                  + intuv_c0yyv_8(1)   * barzp_8 )
     $                      * ( F_BsPq_m(i,1+1,k) - F_BsPq_m(i,1,k) )
     $                      * Geomg_cyv2_8(1)*Geomg_invhsy_8(1)
*
     $               - c2_8 * wk1_m_8(i,1) 
     $                      * ( F_fip(i,1+1,k) - F_fip(i,1,k) )
     $                      * Geomg_cyv2_8(1)*Geomg_invhsy_8(1)
*
     $               - c2_8 * wk1_8(i,1) 
     $                      * ( F_fip_m(i,1+1,k) - F_fip_m(i,1,k) )
     $                      * Geomg_cyv2_8(1)*Geomg_invhsy_8(1)
*
     $               - c3_8 * Cori_fcorv_8(i,1)
     $                      * ( inuvl_wyyv3_8(1,2)*wk2_8(i,1)
     $                        + inuvl_wyyv3_8(1,3)*wk2_8(i,2)
     $                        + inuvl_wyyv3_8(1,4)*wk2_8(i,3) )
*
               end do 
            endif 
*
            if (l_north) then
               do i = i0, in                  
*
*                 TRAJECTORY
*                 ----------
                  barz_m_8  = Ver_wp_8%m(k)*F_t_m(i,l_njv  ,k+1)
     %                       +Ver_wm_8%m(k)*F_t_m(i,l_njv  ,k)
                  barzp_m_8 = Ver_wp_8%m(k)*F_t_m(i,l_njv+1,k+1)
     %                       +Ver_wm_8%m(k)*F_t_m(i,l_njv+1,k)
*
*                 TLM
*                 ---
                  barz_8  = Ver_wp_8%m(k)*F_t(i,l_njv  ,k+1)
     %                     +Ver_wm_8%m(k)*F_t(i,l_njv  ,k)
                  barzp_8 = Ver_wp_8%m(k)*F_t(i,l_njv+1,k+1)
     %                     +Ver_wm_8%m(k)*F_t(i,l_njv+1,k)

*
*                 TRAJECTORY
*                 ----------
                  F_orv_m(i,l_njv,k) = aaa_8 * F_v_m(i,l_njv,k)
     $               - c1_8 * ( ( ONE_8 - intuv_c0yyv_8(l_njv) )*barz_m_8
     $                                  + intuv_c0yyv_8(l_njv)  *barzp_m_8 )
     $                      * ( F_BsPq_m (i,l_njv+1,k) - F_BsPq_m (i,l_njv,k) ) 
     $                      * Geomg_cyv2_8(l_njv) * Geomg_invhsy_8(l_njv)
     $               - c2_8 * wk1_m_8(i,l_njv)
     $                      * ( F_fip_m(i,l_njv+1,k) - F_fip_m(i,l_njv,k) )
     $                      * Geomg_cyv2_8(l_njv) * Geomg_invhsy_8(l_njv)
     $               - c3_8 * Cori_fcorv_8(i,l_njv)
     $                      * ( inuvl_wyyv3_8(l_njv,1)*wk2_m_8(i,l_njv-1) 
     $                        + inuvl_wyyv3_8(l_njv,2)*wk2_m_8(i,l_njv  ) 
     $                        + inuvl_wyyv3_8(l_njv,3)*wk2_m_8(i,l_njv+1) )
*
*                 TLM
*                 ---
                  F_orv(i,l_njv,k) = aaa_8 * F_v(i,l_njv,k)
*
     $              - c1_8 * ( ( ONE_8 - intuv_c0yyv_8(l_njv) )*barz_m_8
     $                                 + intuv_c0yyv_8(l_njv)  *barzp_m_8)
     $            * ( F_BsPq (i,l_njv+1,k) - F_BsPq (i,l_njv,k) )
     $            * Geomg_cyv2_8(l_njv) * Geomg_invhsy_8(l_njv)
*
     $              - c1_8 * ( ( ONE_8 - intuv_c0yyv_8(l_njv) )*barz_8
     $                                 + intuv_c0yyv_8(l_njv)  *barzp_8)
     $            * ( F_BsPq_m (i,l_njv+1,k) - F_BsPq_m (i,l_njv,k) )
     $            * Geomg_cyv2_8(l_njv) * Geomg_invhsy_8(l_njv)
*
     $               - c2_8 * wk1_m_8(i,l_njv)
     $                      * ( F_fip(i,l_njv+1,k) - F_fip(i,l_njv,k) )
     $            * Geomg_cyv2_8(l_njv) * Geomg_invhsy_8(l_njv)
*
     $               - c2_8 * wk1_8(i,l_njv)
     $                      * ( F_fip_m(i,l_njv+1,k) - F_fip_m(i,l_njv,k) )
     $            * Geomg_cyv2_8(l_njv) * Geomg_invhsy_8(l_njv)
*
     $               - c3_8 * Cori_fcorv_8(i,l_njv)
     $                      * ( inuvl_wyyv3_8(l_njv,1)*wk2_8(i,l_njv-1)
     $                        + inuvl_wyyv3_8(l_njv,2)*wk2_8(i,l_njv  )
     $                        + inuvl_wyyv3_8(l_njv,3)*wk2_8(i,l_njv+1) )
*
               end do 
            endif 
*
         endif
      endif
*
 1000 continue
C!$omp enddo
*
      i0 = 1
      j0 = 1
      in = l_ni
      jn = l_nj
*
C!$omp do
      do 2000 k = 1,l_nk+1
*
***********************************************
* computing Rt: RHS of thermodynamic equation *
* computing Rf: RHS of FI equation            *
***********************************************
*
      ww1_8 = ONE_8 / Cstv_tstr_8
      do j = j0, jn
      do i = i0, in
*
*        TRAJECTORY
*        ----------
         xlog_m_8(i,j) = F_t_m(i,j,k) * ww1_8
*
*        TLM
*        ---
         xlog_8  (i,j) = F_t  (i,j,k) * ww1_8
*
      end do
      end do
*
*     TRAJECTORY
*     ----------
      call vlog( ylog_m_8, xlog_m_8, nij )
*
*     TLM
*     ---
      do j= j0, jn
      do i= i0, in
         ylog_8 (i,j) = xlog_8(i,j)/xlog_m_8(i,j)
      end do
      end do
*
      do j= j0, jn
      do i= i0, in
*
*        TRAJECTORY
*        ----------
         wk1_m_8(i,j) = Ver_wp_8%t(k)*F_BsPq_m(i,j,k)+Ver_wm_8%t(k)*F_BsPq_m(i,j,k-1)
         wk2_m_8(i,j) = Ver_wp_8%t(k)* F_fip_m(i,j,k)+Ver_wm_8%t(k)* F_fip_m(i,j,k-1)
*
*        TLM
*        ---
         wk1_8(i,j) = Ver_wp_8%t(k)*F_BsPq(i,j,k)+Ver_wm_8%t(k)*F_BsPq(i,j,k-1)
         wk2_8(i,j) = Ver_wp_8%t(k)* F_fip(i,j,k)+Ver_wm_8%t(k)* F_fip(i,j,k-1)
*
      end do
      end do
*
                         xxx_8=Dcst_cappa_8
      if(Schm_autobar_L) xxx_8=0.d0
*
      do j= j0, jn
      do i= i0, in
*
*        TRAJECTORY
*        ---------- 
         lnT_m_8(i,j,k) = ylog_m_8(i,j)
         F_ort_m (i,j,k) = aaT_8 * ( ylog_m_8(i,j) - xxx_8 * wk1_m_8(i,j) )
     $                   + bbT_8 * Dcst_cappa_8 * F_zd_m(i,j,k)
         F_orf_m (i,j,k) = aaT_8 * wk2_m_8(i,j)
     $                   + bbT_8 * Cstv_RTstr_8 * F_zd_m(i,j,k)
     $                   + bbT_8 * Dcst_grav_8 * F_w_m(i,j,k)
*
*        TLM
*        --- 
         lnT_8(i,j,k) = ylog_8(i,j)
         F_ort (i,j,k) = aaT_8 * ( ylog_8(i,j) - xxx_8 * wk1_8(i,j) )
     $                 + bbT_8 * Dcst_cappa_8 * F_zd(i,j,k)
         F_orf (i,j,k) = aaT_8 * wk2_8(i,j)
     $                 + bbT_8 * Cstv_RTstr_8 * F_zd(i,j,k)
     $                 + bbT_8 * Dcst_grav_8 * F_w(i,j,k)
*
      end do
      end do
*
************************************
* computing Rw: RHS of  w equation *
************************************
*
      if (.not. Schm_hydro_L) then
         do j= j0, jn
         do i= i0, in
*
*           TRAJECTORY
*           ----------
            F_orw_m (i,j,k) = aaw_8 * F_w_m(i,j,k)
     $                      + bbw_8 * Dcst_grav_8 * F_mu_m(i,j,k)
*
*           TLM
*           ---
            F_orw (i,j,k) = aaw_8 * F_w(i,j,k)
     $                    + bbw_8 * Dcst_grav_8 * F_mu(i,j,k)
*
         end do
         end do
      endif
*
 2000 continue
C!$omp enddo
*
*********************************************
* computing Rcn: RHS of Continuity equation *
*********************************************
*
C!$omp do
      do 3000 k = 1,l_nk
*
*     Compute total divergence.
      if (G_lam) then
         do j= 1, l_njv
         do i= 1, l_niu
*
*           TRAJECTORY
*           ----------
            tdiv_m(i,j) = ( F_u_m(i,j,k) - F_u_m(i-1,j,k) )
     $                    / ( Geomg_cy2_8(j)*Geomg_hxu_8(i-1) )
     $                + ( F_v_m(i,j,k) - F_v_m(i,j-1,k) )
     $                    * Geomg_invhsyv_8(j-1)
*
*           TLM 
*           ---
            tdiv(i,j) = ( F_u(i,j,k) - F_u(i-1,j,k) )
     $                    / ( Geomg_cy2_8(j)*Geomg_hxu_8(i-1) )
     $                + ( F_v(i,j,k) - F_v(i,j-1,k) )
     $                    * Geomg_invhsyv_8(j-1)
*
         end do
         end do
      else
*
*        TRAJECTORY
*        ----------
         call caldiv_2 ( tdiv_m, F_u_m(minx,miny,k), 
     $                           F_v_m(minx,miny,k), LDIST_DIM, 1)
*
*        TLM
*        ---
         call caldiv_2 ( tdiv, F_u(minx,miny,k), 
     $                         F_v(minx,miny,k), LDIST_DIM, 1)
      endif
*
      do j= 1, l_njv
      do i= 1, l_niu
*
*        TRAJECTORY
*        ----------
         tdiv_m(i,j) = tdiv_m(i,j)
     $        + ( F_zd_m(i,j,k+1) - F_zd_m(i,j,k) ) * Ver_idz_8%m(k)
     $        + Ver_wp_8%m(k) * F_zd_m(i,j,k+1)
     $        + Ver_wm_8%m(k) * F_zd_m(i,j,k)
*
*        TLM
*        ---
         tdiv(i,j) = tdiv(i,j)
     $        + ( F_zd(i,j,k+1) - F_zd(i,j,k) ) * Ver_idz_8%m(k)
     $        + Ver_wp_8%m(k) * F_zd(i,j,k+1)
     $        + Ver_wm_8%m(k) * F_zd(i,j,k)
*
      end do
      end do
*
      do j = j0, jn
      do i = i0, in
*
*        TRAJECTORY
*        ----------
         xlog_m_8(i,j) = ONE_8 + Ver_dbdz_8%m(k) * F_s_m(i,j)
*
*        TLM
*        ---
         xlog_8(i,j) = Ver_dbdz_8%m(k) * F_s(i,j)
*
      end do
      end do
*
*     TRAJECTORY
*     ----------
      call vlog( ylog_m_8, xlog_m_8, nij)
*
*     TLM
*     ---
      do j= j0, jn
      do i= i0, in
         ylog_8 (i,j) = xlog_8(i,j)/xlog_m_8(i,j)  
      end do
      end do
*
                         xxx_8=ONE_8
      if(Schm_autobar_L) xxx_8=0.d0
*
      do j= j0, jn
      do i= i0, in
*
*        TRAJECTORY
*        ----------
         F_orc_m (i,j,k) = aaT_8 * ( xxx_8 * F_BsPq_m(i,j,k) + ylog_m_8(i,j) )
     $                   - bbT_8 * tdiv_m(i,j)
*
*        TLM
*        ---
         F_orc (i,j,k) = aaT_8 * ( xxx_8 * F_BsPq(i,j,k) + ylog_8(i,j) )
     $                 - bbT_8 * tdiv(i,j)
*
      end do
      end do
*
 3000 continue
C!$omp enddo
*
C!$omp  end parallel
*
C!$omp single
*
*********************************************************
* Interpolating Ru, Rv from U-, V-grid to G-grid, resp. *
*********************************************************
*
*     TRAJECTORY
*     ----------
      call rpn_comm_xch_halo ( F_oru_m, LDIST_DIM,l_niu,l_nj,G_nk,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo ( F_orv_m, LDIST_DIM,l_ni,l_njv,G_nk,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
*
*     TLM
*     ---
      call rpn_comm_xch_halo ( F_oru, LDIST_DIM,l_niu,l_nj,G_nk,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo ( F_orv, LDIST_DIM,l_ni,l_njv,G_nk,
     $              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
C!$omp end single
*
*     set indices for Ruw1
      i0 = 1
      in = l_niu
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west)  i0 = 4
         if (l_east)  in = l_niu-2
         if (l_south) j0 = 4
         if (l_north) jn = l_njv-2
      endif
*      
C!$omp do
      do k=1,l_nk
         do j = j0, jn
         do i = i0, in
*
*           TRAJECTORY
*           ----------
            F_ruw1_m(i,j,k) =  inuvl_wxux3_8(i,1) * F_oru_m(i-2,j,k)
     $                       + inuvl_wxux3_8(i,2) * F_oru_m(i-1,j,k)
     $                       + inuvl_wxux3_8(i,3) * F_oru_m(i  ,j,k)
     $                       + inuvl_wxux3_8(i,4) * F_oru_m(i+1,j,k)
*
*           TLM
*           ---
            F_ruw1  (i,j,k) =  inuvl_wxux3_8(i,1) * F_oru(i-2,j,k)
     $                       + inuvl_wxux3_8(i,2) * F_oru(i-1,j,k)
     $                       + inuvl_wxux3_8(i,3) * F_oru(i  ,j,k)
     $                       + inuvl_wxux3_8(i,4) * F_oru(i+1,j,k)
         end do
         end do
      end do
C!$omp enddo
*
*     set indices for Rvw1
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_njv
      if (l_south) j0 = 3
      if (l_north) jn = l_njv-1

      if (G_lam) then
          if (l_west)  i0 = 4
          if (l_east)  in = l_niu-2
          if (l_south) j0 = 4
          if (l_north) jn = l_njv-2
      endif
*
C!$omp do
      do k=1,l_nk
         do j = j0, jn
         do i = i0, in
*
*           TRAJECTORY
*           ----------
            F_rvw1_m(i,j,k) =  inuvl_wyvy3_8(j,1) * F_orv_m(i,j-2,k)
     $                       + inuvl_wyvy3_8(j,2) * F_orv_m(i,j-1,k)
     $                       + inuvl_wyvy3_8(j,3) * F_orv_m(i,j  ,k)
     $                       + inuvl_wyvy3_8(j,4) * F_orv_m(i,j+1,k)         
*
*           TLM
*           ---
            F_rvw1  (i,j,k) =  inuvl_wyvy3_8(j,1) * F_orv(i,j-2,k)
     $                       + inuvl_wyvy3_8(j,2) * F_orv(i,j-1,k)
     $                       + inuvl_wyvy3_8(j,3) * F_orv(i,j  ,k)
     $                       + inuvl_wyvy3_8(j,4) * F_orv(i,j+1,k)         
         end do
         end do
         if (.not.G_lam) then
            if (l_south) then
            do i = i0, in
*
*              TRAJECTORY
*              ----------
               F_rvw1_m(i,j0-2,k) = inuvl_wyvy3_8(j0-2,3) * F_orv_m(i,j0-2,k)
     $                            + inuvl_wyvy3_8(j0-2,4) * F_orv_m(i,j0-1,k)
               F_rvw1_m(i,j0-1,k) = inuvl_wyvy3_8(j0-1,2) * F_orv_m(i,j0-2,k)
     $                            + inuvl_wyvy3_8(j0-1,3) * F_orv_m(i,j0-1,k)
     $                            + inuvl_wyvy3_8(j0-1,4) * F_orv_m(i,j0,  k)
*
*              TLM
*              ---
               F_rvw1  (i,j0-2,k) = inuvl_wyvy3_8(j0-2,3) * F_orv(i,j0-2,k)
     $                            + inuvl_wyvy3_8(j0-2,4) * F_orv(i,j0-1,k)
               F_rvw1  (i,j0-1,k) = inuvl_wyvy3_8(j0-1,2) * F_orv(i,j0-2,k)
     $                            + inuvl_wyvy3_8(j0-1,3) * F_orv(i,j0-1,k)
     $                            + inuvl_wyvy3_8(j0-1,4) * F_orv(i,j0,  k)
*
            end do
            endif
            if (l_north) then
            do i = i0, in
*
*              TRAJECTORY
*              ----------
               F_rvw1_m(i,jn+2,k) = inuvl_wyvy3_8(jn+2,1) * F_orv_m(i,jn  ,k)
     $                            + inuvl_wyvy3_8(jn+2,2) * F_orv_m(i,jn+1,k)
               F_rvw1_m(i,jn+1,k) = inuvl_wyvy3_8(jn+1,1) * F_orv_m(i,jn-1,k)
     $                            + inuvl_wyvy3_8(jn+1,2) * F_orv_m(i,jn  ,k)
     $                            + inuvl_wyvy3_8(jn+1,3) * F_orv_m(i,jn+1,k)
*
*              TLM
*              ---
               F_rvw1  (i,jn+2,k) = inuvl_wyvy3_8(jn+2,1) * F_orv(i,jn  ,k)
     $                            + inuvl_wyvy3_8(jn+2,2) * F_orv(i,jn+1,k)
               F_rvw1  (i,jn+1,k) = inuvl_wyvy3_8(jn+1,1) * F_orv(i,jn-1,k)
     $                            + inuvl_wyvy3_8(jn+1,2) * F_orv(i,jn  ,k)
     $                            + inuvl_wyvy3_8(jn+1,3) * F_orv(i,jn+1,k)
*
            end do
            endif
         endif
      end do
C!$omp enddo
*
**************************************************
* Applying HORIZONTAL BOUNDARY CONDITIONS if LAM *
**************************************************
*
      if (G_lam) then
          if (l_west) then
C!$omp do
             do k=1,l_nk
             do j= 1+pil_s, l_nj-pil_n
*
*               TRAJECTORY
*               ----------
                F_ru_m (pil_w,j,k) = aaa_8 * F_nest_u_m(pil_w,j,k)
*
*               TLM
*               ---
                F_ru (pil_w,j,k) = aaa_8 * F_nest_u(pil_w,j,k)
*
             enddo
             enddo
C!$omp enddo
          endif
          if (l_east) then
C!$omp do
             do k=1,l_nk
             do j= 1+pil_s, l_nj-pil_n
*
*               TRAJECTORY
*               ----------
                F_ru_m (l_ni-pil_e,j,k) = aaa_8 * F_nest_u_m(l_ni-pil_e,j,k)
*
*               TLM
*               ---
                F_ru (l_ni-pil_e,j,k) = aaa_8 * F_nest_u(l_ni-pil_e,j,k)
*
             enddo
             enddo
C!$omp enddo
          endif
          if (l_south) then
C!$omp do
             do k=1,l_nk
             do i= 1+pil_w, l_ni-pil_e
*
*               TRAJECTORY
*               ----------
                F_rv_m (i,pil_s,k) = aaa_8 * F_nest_v_m(i,pil_s,k)
*
*               TLM
*               ---
                F_rv (i,pil_s,k) = aaa_8 * F_nest_v(i,pil_s,k)
*
             enddo
             enddo
C!$omp enddo
          endif
          if (l_north) then
C!$omp do
             do k=1,l_nk
             do i= 1+pil_w, l_ni-pil_e
*
*               TRAJECTORY
*               ----------
                F_rv_m (i,l_nj-pil_n,k) = aaa_8 * F_nest_v_m(i,l_nj-pil_n,k)
*
*               TLM
*               ---
                F_rv (i,l_nj-pil_n,k) = aaa_8 * F_nest_v(i,l_nj-pil_n,k)
*
             enddo
             enddo
C!$omp enddo
          endif
      endif
*
C!$omp  end parallel
*
      return
      end
