!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r sol_fft8_2_ad - ADJ of sol_fft8_2 
*
#include "model_macros_f.h"
*
      subroutine sol_fft8_2_ad( sol, Rhs, pri,
     $                          Minx, Maxx, Miny, Maxy, njl,
     $                          Minz, Maxz, Nk, Nkl, Gni, Gnj,
     $                                    Minij, Maxij, L_nij,
     $                          minx1, maxx1, minx2, maxx2,nx3,
     $                          F_npex1, F_npey1, ai, bi, ci,
     $                          fdg2,fdwfft)
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - zero adjoint variables 
*                           - verify if ci=0 or ai=0 or bi=1
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
*
*object
*     see id section 
*
*arguments
*   io     - Sol     - result
*   io     - Rhs     - r.h.s. of elliptic equation
*   i      - Gni     - number of points in x-direction
*   i      - Gnj     - number of points in y-direction
*
*implicits
#include "ptopo.cdk"
*
*modules
      external ffft8, rpn_comm_transpose
*
      integer  F_npex1, F_npey1
      integer  minx1, maxx1, minx2, maxx2,nx3
*
      Real*8   ai(minx1:maxx1,minx2:maxx2,nx3),
     $         bi(minx1:maxx1,minx2:maxx2,nx3),
     $         ci(minx1:maxx1,minx2:maxx2,nx3)
*
      integer Minx, Maxx, Miny, Maxy, njl
      integer Minz, Maxz, Nk, Nkl
      integer Gni, Gnj
      integer Minij, Maxij, L_nij
      real*8  Sol(Minx:Maxx,Miny:Maxy,Nk), Rhs(Minx:Maxx,Miny:Maxy,Nk)
      real*8  pri
*
      real*8 fdwfft(Miny:Maxy,Minz:Maxz,Gni+2+F_npex1)
      real*8  fdg2(Minz:Maxz,Minij:Maxij,Gnj+F_npey1)
*
      integer i,  j, k, ki, jw, jr, err
      integer kkii, ki0, kin, kitotal, kilon
      real*8 ZERO_8,ONE_8
      parameter( ZERO_8 = 0.0 )
      parameter( ONE_8  = 1.0 )
*
!$omp parallel private(ki0,kin,kkii,jr)
!$omp%          shared(kitotal,kilon,ai,bi,ci)
*
!$omp single
      call rpn_comm_transpose( Sol, Minx, Maxx, Gni, (Maxy-Miny+1),
     %                              Minz, Maxz, Nk, fdwfft,  1, 2 )
!$omp end single
*
*     Zero adjoint variables
*     ----------------------
!$omp do
      do k= 1,Nk
      do j= Miny,Maxy
      do i= Minx,Maxx
      sol(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp enddo
*
*     ADJ of
*     inverse projection ( r = x * w )

!$omp do
       do k=1, Nkl
       call ffft8( fdwfft(Miny,k,1), (Maxy-Miny+1) * (Maxz-Minz+1), 1,
     %                                               (Maxy-Miny+1), -1 )
       enddo
!$omp enddo
*
C      call ffft8( fdwfft,        (Maxy-Miny+1) * (Maxz-Minz+1), 1,
C    %                                            (Maxy-Miny+1) * Nkl, -1 )
*
!$omp do
      do k = Nkl,1,-1
        do j = (Maxy-Miny+1),1,-1
            fdwfft(j,k,Gni+2) = ZERO_8
            fdwfft(j,k,2)     = ZERO_8
            fdwfft(j,k,2)     = fdwfft(j,k,1) + fdwfft(j,k,2)
            fdwfft(j,k,1)     = ZERO_8
         enddo
      enddo
!$omp enddo
*
!$omp single
      call rpn_comm_transpose
     $     ( fdwfft(1,1,2), Miny, Maxy, Gnj, (Maxz-Minz+1),
     $                        Minij, Maxij, Gni, fdg2, 2, 2 )
!$omp end single
*
*     Zero adjoint variables
*     ----------------------
!$omp do
      do k= 1,Gni+2+F_npex1
      do j= Minz,Maxz
      do i= Miny,Maxy
      fdwfft(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp enddo
*
      kitotal = (Maxz-Minz+1)*L_nij
      kilon = (kitotal + Ptopo_npeOpenMP)/Ptopo_npeOpenMP

!$omp do
      do kkii = Ptopo_npeOpenMP,1,-1
*
          ki0 = 1 + kilon*(kkii-1)
          kin = min(kitotal, kilon*kkii)
*
         do j = 1,Gnj-1
            jr =  j + 1
C           do ki= (Maxz-Minz+1)*L_nij,1,-1
            do ki= kin, ki0,-1
              fdg2(ki,1,jr)=- ci(ki,1,j) * fdg2(ki,1,j) + fdg2(ki,1,jr)
            enddo
         enddo

         do j =Gnj,2,-1
            jr =  j - 1
C           do ki= (Maxz-Minz+1)*L_nij,1,-1
            do ki= kin, ki0,-1
               fdg2(ki,1,jr) = - ai(ki,1,j)*fdg2(ki,1,j) + fdg2(ki,1,jr)
               fdg2(ki,1,j)  =   bi(ki,1,j)*fdg2(ki,1,j) 
            enddo
         enddo
*
         j =1
C           do ki= (Maxz-Minz+1) *L_nij,1,-1
            do ki= kin, ki0,-1
               fdg2(ki,1,j) = bi(ki,1,j)*fdg2(ki,1,j)
            enddo
*
      enddo
!$omp enddo
*
!$omp single
      call rpn_comm_transpose
     $     ( fdwfft(1,1,2), Miny, Maxy, Gnj, (Maxz-Minz+1),
     $                         Minij, Maxij, Gni, fdg2, -2, 2 )
!$omp end single
*
*     Zero adjoint variables
*     ----------------------
!$omp do
      do k= 1,Gnj+F_npey1
      do j= Minij,Maxij
      do i= Minz,Maxz
      fdg2(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp enddo
*
!$omp do
      do k = Nkl,1,-1
         do j = (Maxy-Miny+1),1,-1
           fdwfft(j,k,1)     = fdwfft(j,k,2) + fdwfft(j,k,1) 
           fdwfft(j,k,2)     = ZERO_8 
           fdwfft(j,k,Gni+2) = ZERO_8
         enddo
*
         do i = (Gni)/2,0,-1
            do jw = (Maxy-Miny+1),1,-1
               fdwfft(jw,k,2*i+2) = pri * fdwfft(jw,k,2*i+2)
               fdwfft(jw,k,2*i+1) = pri * fdwfft(jw,k,2*i+1)
            enddo
         enddo
      enddo
!$omp enddo
*
*     ADJ of
*     projection ( wfft = x transposed * g )
*     --------------------------------------
!$omp do
      do k=1,Nkl
      call ffft8(fdwfft(Miny,k,1),(Maxy-Miny+1)*(Maxz-Minz+1),
     %                                       1, (Maxy-Miny+1), 1 )
      enddo
!$omp enddo
C     call ffft8(fdwfft,       (Maxy-Miny+1)*(Maxz-Minz+1),
C    %                                     1, (Maxy-Miny+1) * Nkl, 1 )
*
!$omp do
       do i= Gni,1,-1
         do k= Maxz,Nkl+1,-1
            do j= Maxy,Miny,-1
               fdwfft(j,k,i)=ZERO_8
            enddo
         enddo
*
         do k= nkl,Minz,-1
            do j= Maxy,njl+1,-1
               fdwfft(j,k,i)=ZERO_8
            enddo
         enddo
      enddo
!$omp enddo
*
!$omp single
      call rpn_comm_transpose( Rhs, Minx, Maxx, Gni, (Maxy-Miny+1),
     %                         Minz, Maxz, Nk, fdwfft, -1, 2 )
!$omp end single
*
*     Zero adjoint variables
*     ----------------------
!$omp do
      do k= 1,Gni+2+F_npex1
      do j= Minz,Maxz
      do i= Miny,Maxy
      fdwfft(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp enddo
!$omp end parallel
*
      return
      end
