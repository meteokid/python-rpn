! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r adw_main_tr -  Equivalent to adw_main for TRAJECTORY 
*
#include "model_macros_f.h"
*
      subroutine adw_main_tr ( F_it )
*
#include "impnone.cdk"
*
      integer F_it
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ 
* v3_21 - Tanguay M.        - Revision Openmp
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*        |                                                       |     |
* NAME   | DESCRIPTION                                           | I/O |
*--------|-------------------------------------------------------|-----|
* F_it   | total number of iterations for trajectories           |  i  |
*________|_______________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "vt0_m.cdk"
#include "vt1_m.cdk"
#include "orh_m.cdk"
#include "rhsc_m.cdk"
#include "tr3d.cdk"
#include "cstv.cdk"
#include "orh.cdk"
*
************************************************************************
      integer  vmmlod, vmmget, vmmuld, vmmuln
      external vmmlod, vmmget, vmmuld, vmmuln
*
      integer pnerr, pnlkey1(30), pnlod, 
     $        key1_m(Tr3d_ntr), key0_m(Tr3d_ntr), keyt_m(Tr3d_ntr),
     $        key1_m_, key0_m_, keyt_m_, err
*
      integer n,i,j,k
*
      real*8 aaa_8
      real tr1_m,tr0_m,ort_m
      pointer (patr1_m, tr1_m(LDIST_SHAPE,*)),
     $        (patr0_m, tr0_m(LDIST_SHAPE,*)),
     $        (paort_m, ort_m(LDIST_SHAPE,*))
*
************************************************************************
      if (Lun_debug_L) write (Lun_out,1000)
*
************************************************************************
*
*     Store TRAJ TRT0 in ORTR for ADW_MAIN_3_INT_AD when Orh_icn .eq. Schm_itcn
*     -------------------------------------------------------------------------
      if ( Orh_icn .eq. Schm_itcn ) then
*
      aaa_8 = -1.d0 / Cstv_tau_8
*
      key1_m_= VMM_KEY (trt1_m)
      key0_m_= VMM_KEY (trt0_m)
      keyt_m_= VMM_KEY (ortr_m)
      do n=1,Tr3d_ntr
         key1_m(n) = key1_m_ + n
         key0_m(n) = key0_m_ + n
         keyt_m(n) = keyt_m_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1_m,Tr3d_ntr)  
         err = vmmlod(key0_m,Tr3d_ntr)  
         err = vmmlod(keyt_m,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1_m(n), patr1_m, tr1_m)
            err = vmmget(key0_m(n), patr0_m, tr0_m)
            err = vmmget(keyt_m(n), paort_m, ort_m)
*
!$omp parallel do 
            do k=1,l_nk+1
*
              do j=1,l_nj
              do i=1,l_ni
                 tr0_m(i,j,k) = - aaa_8*tr1_m(i,j,k)
                 ort_m(i,j,k) =         tr0_m(i,j,k)
              end do
              end do
*
            end do
!$omp end parallel do  
*
         end do
         err = vmmuld(key1_m,Tr3d_ntr)
         err = vmmuld(key0_m,Tr3d_ntr)
         err = vmmuld(keyt_m,Tr3d_ntr)
      endif
*
      endif
*
*     Recover TRAJ RHS interpolated
*     -----------------------------
      call v4d_rwtraj (6)
*
*     Store TRAJ RUW2/RVW2 in ORH for PRE_AD
*     --------------------------------------
      pnlkey1(1)  = VMM_KEY(ruw2_m )
      pnlkey1(2)  = VMM_KEY(rvw2_m )
      pnlkey1(3)  = VMM_KEY(oruw2_m)
      pnlkey1(4)  = VMM_KEY(orvw2_m)
      pnlod = 4 
*
      pnerr = vmmlod(pnlkey1,pnlod)
*
      pnerr = VMM_GET_VAR(ruw2_m )
      pnerr = VMM_GET_VAR(rvw2_m )
      pnerr = VMM_GET_VAR(oruw2_m)
      pnerr = VMM_GET_VAR(orvw2_m)
*
!$omp parallel do  
      do k=1,l_nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
         oruw2_m(i,j,k) = ruw2_m(i,j,k)
         orvw2_m(i,j,k) = rvw2_m(i,j,k)
      end do
      end do
      end do
!$omp end parallel do  
*
      pnerr = vmmuld(-1,0)
*
***********************************************************************
*
 1000  format(3X,'TRAJ of ADVECT THE RIGHT-HAND-SIDES: (S/R ADW_MAIN_TR)')
*
      return
      end
