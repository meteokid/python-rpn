! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nli_tl - TLM of nli
*
#include "model_macros_f.h"
*
      subroutine nli_tl()
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - reduce standard output as in model 
* v2_30 - Edouard S.        - remove pi' at the top
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "cori.cdk"
#include "vt0.cdk"
#include "vtx.cdk"
#include "ptopo.cdk"
#include "lctl.cdk"
#include "rhsc_m.cdk"
#include "nl_m.cdk"
#include "vt0_m.cdk"
#include "vtx_m.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
*    
      integer  pnerr, pnlod, pnlkey1(40) 
*     ______________________________________________________
*
      if (Lun_debug_L)  write(Lun_out,1000)
*
      pnlkey1(1) = VMM_KEY(rhsp)
      pnlkey1(2) = VMM_KEY(rhsc)
      pnlkey1(3) = VMM_KEY(tt0)
      pnlkey1(4) = VMM_KEY(st0)
      pnlkey1(5) = VMM_KEY(bspqtx)
      pnlkey1(6) = VMM_KEY(fiptx)
      pnlkey1(7) = VMM_KEY(topo)
      pnlod = 7 
*
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0)
         pnlkey1(pnlod+2) = VMM_KEY(mutx)
         pnlod = pnlod+2
      endif
      if (Cori_cornl_L) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0)
         pnlkey1(pnlod+2) = VMM_KEY(vt0)
         pnlod = pnlod+2
      endif
*
*     TRAJECTORY
*     ----------
      pnlkey1(pnlod+1) = VMM_KEY(rhsp_m)
      pnlkey1(pnlod+2) = VMM_KEY(rhsc_m)
      pnlkey1(pnlod+3) = VMM_KEY(tt0_m)
      pnlkey1(pnlod+4) = VMM_KEY(st0_m)
      pnlkey1(pnlod+5) = VMM_KEY(bspqtx_m)
      pnlkey1(pnlod+6) = VMM_KEY(fiptx_m)
      pnlod = pnlod+6
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0_m)
         pnlkey1(pnlod+2) = VMM_KEY(mutx_m)
         pnlod = pnlod+2
      endif
      if (Cori_cornl_L) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0_m)
         pnlkey1(pnlod+2) = VMM_KEY(vt0_m)
         pnlod = pnlod+2
      endif
*
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(rhsp)
      pnerr = VMM_GET_VAR(rhsc)
      pnerr = VMM_GET_VAR(tt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(bspqtx)
      pnerr = VMM_GET_VAR(fiptx)
      pnerr = VMM_GET_VAR(topo)
*
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0)
         pnerr = VMM_GET_VAR(mutx)
      else
         qt0_= 0
         mutx_  = 0
      endif
      if (Cori_cornl_L) then
         pnerr = VMM_GET_VAR(ut0)
         pnerr = VMM_GET_VAR(vt0)
      else
         ut0_ = 0
         vt0_ = 0
      endif
*
*     TRAJECTORY
*     ----------
      pnerr = VMM_GET_VAR(rhsp_m)
      pnerr = VMM_GET_VAR(rhsc_m)
      pnerr = VMM_GET_VAR(tt0_m)
      pnerr = VMM_GET_VAR(st0_m)
      pnerr = VMM_GET_VAR(bspqtx_m)
      pnerr = VMM_GET_VAR(fiptx_m)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0_m)
         pnerr = VMM_GET_VAR(mutx_m)
      else
         qt0_m_= 0
         mutx_m_  = 0
      endif
      if (Cori_cornl_L) then
         pnerr = VMM_GET_VAR(ut0_m)
         pnerr = VMM_GET_VAR(vt0_m)
      else
         ut0_m_ = 0
         vt0_m_ = 0
      endif
*
      call diag_var_tl( bspqtx,  mutx,  st0,  qt0,
     $                  bspqtx_m,mutx_m,st0_m,qt0_m,
     $                  1,l_ni,1,l_nj,l_nk)
*
      call diag_fip_tl ( fiptx,  st0,  tt0,  
     $                   fiptx_m,st0_m,tt0_m,topo,
     $                   1,l_ni,1,l_nj,l_nk)
*
      call nlip_2_tl ( 
     $                 nl_u, nl_v, nl_t  , nl_c, nl_w, nl_f ,
     $                 ut0 , vt0 , tt0   , st0 , qt0 , fiptx,
     $                 rhsp, rhsc, bspqtx, mutx,
*
     $                 nl_m_u, nl_m_v, nl_m_t  , nl_m_c, nl_m_w, nl_m_f ,
     $                 ut0_m , vt0_m , tt0_m   , st0_m , qt0_m , fiptx_m,
     $                 rhsp_m, rhsc_m, bspqtx_m, mutx_m,
*
     $                 LDIST_DIM, l_nk )
*
      pnerr = vmmuld(-1,0)
*
 1000 format(/,5X,'TLM of COMPUTE NON-LINEAR RHS: (S/R NLI_TL)')
*
*     __________________________________________________________________
*
      return
      end
