! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r adw_main_ad - ADJ of adw_main_tl 
*
#include "model_macros_f.h"
*
      subroutine adw_main_ad ( F_it )
*
      implicit none
*
      integer F_it
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ 
* v3_21 - Tanguay M.        - Revision Openmp 
* v3_30 - Tanguay M.        - Adapt TL/AD to Adw_interp_type_S
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*        |                                                       |     |
* NAME   | DESCRIPTION                                           | I/O |
*--------|-------------------------------------------------------|-----|
* F_it   | total number of iterations for trajectories           |  i  |
*________|_______________________________________________________|_____|
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "adw.cdk"
#include "vth_m.cdk"
#include "orh_m.cdk"
#include "vt0_m.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "rhsc_m.cdk"
*
      integer i,j,k,n
      real, pointer    , dimension(:,:,:) :: tr0_m,ortr_m
*
      real , dimension (Adw_nit*Adw_njt*G_nk) :: u,v
      real , dimension (Adw_nit*Adw_njt*(G_nk+1)) :: w
*
      real , dimension (Adw_nit*Adw_njt*G_nk) :: u_m,v_m
      real , dimension (Adw_nit*Adw_njt*(G_nk+1)) :: w_m
*
      real , dimension (Adw_nit*Adw_njt*G_nk) :: uwork_m,vwork_m
      real , dimension (Adw_nit*Adw_njt*(G_nk+1)) :: wwork_m
*
*     -----------------------
*     Define extra space TRAJ
*     -----------------------
      real xth_w_m (l_ni*l_nj*l_nk), yth_w_m (l_ni*l_nj*l_nk), zth_w_m (l_ni*l_nj*l_nk)
      real xcth_w_m(l_ni*l_nj*l_nk), ycth_w_m(l_ni*l_nj*l_nk), zcth_w_m(l_ni*l_nj*l_nk)
*
***********************************************************************
      if (.NOT.Adw_nosetint_L                   ) call gem_stop ('NOT Adw_nosetint_L not done in POS_AD',-1)
      if (.NOT.Adw_interp_type_S(1:5).eq.'LAG3D') call gem_stop ('NOT Interp LAG3D   not done in INT_AD',-1)
************************************************************************
      if (Lun_debug_L) write (Lun_out,1000)
************************************************************************
*
*     Recover TRAJ TRT0 from ORTR for ADW_MAIN_3_INT_AD when Orh_icn .eq. Schm_itcn
*     -----------------------------------------------------------------------------
      if (Orh_icn.eq.Schm_itcn) then
*
      do n=1,Tr3d_ntr
*
         nullify (tr0_m,ortr_m)
         gmmstat = gmm_get('TRM/'//trim(Tr3d_name_S(n))//':M',tr0_m ,meta3d)
         gmmstat = gmm_get('TRM/'//trim(Tr3d_name_S(n))//':O',ortr_m,meta3d)
*
!$omp parallel do
             do k=1,l_nk+1
             do j=1,l_nj
             do i=1,l_ni
                tr0_m(i,j,k) = ortr_m(i,j,k)
             end do
             end do
             end do
!$omp end parallel do
*
      enddo
*
      endif
*
*     Zero adjoint variables
*     ----------------------
      u = 0.
      v = 0.
      w = 0.
*
*     ------------------
*     TRAJECTORY (START)
*     ------------------
      call adw_main_1_wnd_tr ( u_m, v_m, w_m, l_ni, l_nj, G_nk)
*
*     -------------------------------------------
*     Preserve fields in extra space TRAJ (START)
*     -------------------------------------------
      gmmstat = gmm_get(gmmk_xth_m_s,xth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(xth_m)'
      gmmstat = gmm_get(gmmk_yth_m_s,yth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(yth_m)'
      gmmstat = gmm_get(gmmk_zth_m_s,zth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(zth_m)'
*
      gmmstat = gmm_get(gmmk_xcth_m_s,xcth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(xcth_m)'
      gmmstat = gmm_get(gmmk_ycth_m_s,ycth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(ycth_m)'
      gmmstat = gmm_get(gmmk_zcth_m_s,zcth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(zcth_m)'
*
      xth_w_m  = xth_m 
      yth_w_m  = yth_m 
      zth_w_m  = zth_m 
      xcth_w_m = xcth_m
      ycth_w_m = ycth_m
      zcth_w_m = zcth_m
*
      uwork_m = u_m
      vwork_m = v_m
      wwork_m = w_m
*
*     -----------------------------------------
*     Preserve fields in extra space TRAJ (END)
*     -----------------------------------------
*
*     Recover TRAJ upstream positions 
*     -------------------------------
      call v4d_rwtraj (5,u_m,v_m,w_m)
*
*     ----------------
*     TRAJECTORY (END)
*     ----------------
*
*     ADJOINT CALCULATIONS
*     --------------------
      call adw_main_3_int_ad ( u, v, w, u_m, v_m, w_m )
*
*     ------------------------------------------
*     Reset fields from extra space TRAJ (START)
*     ------------------------------------------
      gmmstat = gmm_get(gmmk_xth_m_s,xth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(xth_m)'
      gmmstat = gmm_get(gmmk_yth_m_s,yth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(yth_m)'
      gmmstat = gmm_get(gmmk_zth_m_s,zth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(zth_m)'
*
      gmmstat = gmm_get(gmmk_xcth_m_s,xcth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(xcth_m)'
      gmmstat = gmm_get(gmmk_ycth_m_s,ycth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(ycth_m)'
      gmmstat = gmm_get(gmmk_zcth_m_s,zcth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'adw_main_ad ERROR at gmm_get(zcth_m)'
*
      xth_m  = xth_w_m 
      yth_m  = yth_w_m 
      zth_m  = zth_w_m 
      xcth_m = xcth_w_m
      ycth_m = ycth_w_m
      zcth_m = zcth_w_m
*
      u_m = uwork_m
      v_m = vwork_m
      w_m = wwork_m
*
*     ----------------------------------------
*     Reset fields from extra space TRAJ (END)
*     ----------------------------------------
*
      call adw_main_2_pos_ad ( F_it, u, v, w, u_m, v_m, w_m )
*
      call adw_main_1_wnd_ad ( u, v, w, l_ni, l_nj, G_nk)
*
***********************************************************************
*
 1000  format(3X,'ADJ of ADVECTE THE RIGHT-HAND-SIDES: (S/R ADW_MAIN_AD)')
*
      return
      end
