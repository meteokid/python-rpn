! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r adw_meanpos_tl - TLM of adw_meanpos  
*
#include "model_macros_f.h"
*
      subroutine adw_meanpos_tl ( F_xt,  F_yt,  F_zt,  F_xm,  F_ym,  F_zm,
     %                            F_xt_m,F_yt_m,F_zt_m,F_xm_m,F_ym_m,F_zm_m,
     %                            i0,in,j0,jn)
*
      implicit none
*
      real F_xt(*),F_yt(*),F_zt(*),F_xm(*),F_ym(*),F_zm(*)
      real F_xt_m(*),F_yt_m(*),F_zt_m(*),F_xm_m(*),F_ym_m(*),F_zm_m(*)
      integer i0,in,j0,jn
*
*author
*     M.Tanguay
*
*revision
* v4_04 - Tanguay M.        - initial MPI version
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_xt         | upwind longitudes for themodynamic level        |  o  |
* F_yt         | upwind latitudes for themodynamic level         |  o  |
* F_zt         | upwind height for themodynamic level            |  o  |
* F_xm         | upwind longitudes for momentum level            |  i  |
* F_ym         | upwind latitudes for momentum level             |  i  |
* F_zm         | upwind height for momentum level                |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "type.cdk"
#include "adw.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "ver.cdk"
*
************************************************************************
      integer n, nt, nm, nij,vnik, vnikm, i,j,k
*
      real*8  r2pi_8, TWO_8, HALF_8, alpha_8, alpha_m_8
*
      real*8 xcos_8(i0:in,l_nk), ycos_8(i0:in,l_nk)
      real*8 xsin_8(i0:in,l_nk), ysin_8(i0:in,l_nk)
      real*8 yasin_8(i0:in,l_nk-1), zatan_8(i0:in,l_nk-1)
      real*8 cx_8(i0:in,l_nk), cy_8(i0:in,l_nk), cz_8(i0:in,l_nk)
*
      real*8 xcos_m_8(i0:in,l_nk), ycos_m_8(i0:in,l_nk)
      real*8 xsin_m_8(i0:in,l_nk), ysin_m_8(i0:in,l_nk)
      real*8 yasin_m_8(i0:in,l_nk-1), zatan_m_8(i0:in,l_nk-1)
      real*8 cx_m_8(i0:in,l_nk), cy_m_8(i0:in,l_nk), cz_m_8(i0:in,l_nk)
      real*8 xcos_2_m_8(i0:in,l_nk), ycos_2_m_8(i0:in,l_nk)
*
      real*8 rrms_m_8(i0:in,l_nk-1),den_m_8(i0:in,l_nk-1)
*
      real*8 no_div0_m_8 
*
      parameter (TWO_8 = 2.0, HALF_8=0.5)
*
************************************************************************
*
      nij  = l_ni*l_nj
      vnik = (in-i0+1)*l_nk
      vnikm= (in-i0+1)*(l_nk-1)
*
      r2pi_8 = TWO_8 * Dcst_pi_8
*
************************************************************************
*
C!$omp parallel private(i,j,k,ysin_8,ycos_8,
C!$omp&  zatan_8,yasin_8,xsin_8,xcos_8,n,nm,nt,alpha_8,alpha_m_8,
C!$omp&  cx_8,cy_8,cz_8,
C!$omp&  ysin_m_8,ycos_m_8,
C!$omp&  zatan_m_8,yasin_m_8,xsin_m_8,xcos_m_8,
C!$omp&  cx_m_8,cy_m_8,cz_m_8,rrms_m_8,den_m_8,no_div0_m_8,
C!$omp&  xcos_2_m_8,ycos_2_m_8)
C!$omp do 
*
      do j=j0,jn
*
         do k=1,l_nk
         do i=i0,in
            n = (k-1)*nij + ((j-1)*l_ni) + i
*
*           TRAJECTORY
*           ----------
            xcos_m_8(i,k) = F_xm_m(n)
            ycos_m_8(i,k) = F_ym_m(n)
*
            xcos_2_m_8(i,k) = xcos_m_8(i,k) 
            ycos_2_m_8(i,k) = ycos_m_8(i,k) 
*
*           TLM 
*           ---
            xcos_8(i,k) = F_xm(n)
            ycos_8(i,k) = F_ym(n)
*
         end do
         end do
*
*        TRAJECTORY
*        ----------
         call vsin(xsin_m_8, xcos_2_m_8, vnik)
         call vsin(ysin_m_8, ycos_2_m_8, vnik)
         call vcos(xcos_m_8, xcos_2_m_8, vnik)
         call vcos(ycos_m_8, ycos_2_m_8, vnik)
*
         do k=1,l_nk
         do i=i0,in
*
            xsin_8(i,k) = cos(xcos_2_m_8(i,k))*xcos_8(i,k)  
            ysin_8(i,k) = cos(ycos_2_m_8(i,k))*ycos_8(i,k)  
            xcos_8(i,k) =-sin(xcos_2_m_8(i,k))*xcos_8(i,k)  
            ycos_8(i,k) =-sin(ycos_2_m_8(i,k))*ycos_8(i,k)  
*
         end do
         end do
*
************************************************************************
* For 1st and last thermodynamic levels positions in the horizontal are*
* those of the momentum levels; no displacement allowed in the vertical*
************************************************************************
         do i=i0,in
            n = ((j-1)*l_ni) + i
*
*           TRAJECTORY
*           ----------
            F_xt_m(n) = F_xm_m(n)
            F_yt_m(n) = F_ym_m(n)
            F_zt_m(n) = Ver_z_8%t(1) 
*
*           TLM
*           ---
            F_xt(n) = F_xm(n)
            F_yt(n) = F_ym(n)
            F_zt(n) = 0.
*
            nm = (l_nk-1)*nij + ((j-1)*l_ni) + i
            nt = (l_nk  )*nij + ((j-1)*l_ni) + i
*
*           TRAJECTORY
*           ----------
            F_xt_m(nt) = F_xm_m(nm)
            F_yt_m(nt) = F_ym_m(nm)
            F_zt_m(nt) = Ver_z_8%t(l_nk+1) 
*
*           TLM
*           ---
            F_xt(nt) = F_xm(nm)
            F_yt(nt) = F_ym(nm)
            F_zt(nt) = 0. 
         enddo
*
************************************************************************
* cartesian coordinates of each momemtum levels                        *
************************************************************************
         do k=1,l_nk
         do i=i0,in
*
*            TRAJECTORY
*            ----------
             cx_m_8(i,k) = xcos_m_8(i,k)*ycos_m_8(i,k)
             cy_m_8(i,k) = xsin_m_8(i,k)*ycos_m_8(i,k)
             cz_m_8(i,k) = ysin_m_8(i,k)
*
*            TLM
*            ---
             cx_8(i,k) = xcos_m_8(i,k)*ycos_8(i,k) + xcos_8(i,k)*ycos_m_8(i,k) 
             cy_8(i,k) = xsin_m_8(i,k)*ycos_8(i,k) + xsin_8(i,k)*ycos_m_8(i,k)
             cz_8(i,k) = ysin_8(i,k) 
*
         enddo
         enddo
*
************************************************************************
* cartesian coordinates of intermediate thermodynamic levels: mid point*
* between cartesian coordinates of upper and lower momentum levels     *
************************************************************************
         do k=2,l_nk
         do i=i0,in
*
*            TRAJECTORY
*            ----------
             alpha_m_8  = HALF_8*( 1.+cx_m_8(i,k-1)*cx_m_8(i,k)
     %                               +cy_m_8(i,k-1)*cy_m_8(i,k)
     %                               +cz_m_8(i,k-1)*cz_m_8(i,k) )
*
*            TLM
*            ---
             alpha_8  = HALF_8*(    cx_m_8(i,k-1)*cx_8(i,k)+cx_8(i,k-1)*cx_m_8(i,k) 
     %                             +cy_m_8(i,k-1)*cy_8(i,k)+cy_8(i,k-1)*cy_m_8(i,k)
     %                             +cz_m_8(i,k-1)*cz_8(i,k)+cz_8(i,k-1)*cz_m_8(i,k) )
*
*            TLM
*            ---
             alpha_8  = -(1./( TWO_8**2 * (alpha_m_8)**(3./2.) )) * alpha_8
*
*            TRAJECTORY
*            ----------
             alpha_m_8  = 1./(TWO_8*sqrt(alpha_m_8))
*
*            TLM
*            ---
             cx_8(i,k-1) = (cx_m_8(i,k-1)+cx_m_8(i,k))  *alpha_8 + (cx_8(i,k-1)+cx_8(i,k))  *alpha_m_8
             cy_8(i,k-1) = (cy_m_8(i,k-1)+cy_m_8(i,k))  *alpha_8 + (cy_8(i,k-1)+cy_8(i,k))  *alpha_m_8
             cz_8(i,k-1) = (cz_m_8(i,k)  +cz_m_8(i,k-1))*alpha_8 + (cz_8(i,k)  +cz_8(i,k-1))*alpha_m_8
*
*            TRAJECTORY
*            ----------
             cx_m_8(i,k-1) = (cx_m_8(i,k-1)+cx_m_8(i,k))  *alpha_m_8
             cy_m_8(i,k-1) = (cy_m_8(i,k-1)+cy_m_8(i,k))  *alpha_m_8
             cz_m_8(i,k-1) = (cz_m_8(i,k)  +cz_m_8(i,k-1))*alpha_m_8
*
*            TRAJECTORY and TLM
*            ------------------
             if (cz_m_8(i,k-1).gt.1.d0) then
                 cz_8  (i,k-1)=0.d0
                 cz_m_8(i,k-1)=1.d0
             elseif (cz_m_8(i,k-1).lt.-1.d0) then
                 cz_8  (i,k-1)= 0.d0
                 cz_m_8(i,k-1)=-1.d0
             endif
*
          enddo
          enddo
*
          do k=1,l_nk-1
          do i=i0,in
*
             rrms_m_8(i,k) = cx_m_8(i,k)*cx_m_8(i,k) + cy_m_8(i,k)*cy_m_8(i,k)
*
*            NOTE: no_div0_m is used to allow valid 1/den_m
*            ----------------------------------------------
             no_div0_m_8 = cz_m_8(i,k) 
             if (cz_m_8(i,k).ge.1.) then
                no_div0_m_8 = 0.
             elseif (cz_m_8(i,k).le.-1.) then
                no_div0_m_8 = 0.
             endif
*
             den_m_8(i,k) = sqrt( 1.0-no_div0_m_8*no_div0_m_8 )
*
          end do
          end do
*
          call vatan2(zatan_m_8,cy_m_8  ,cx_m_8,vnikm)
          call vasin (yasin_m_8,cz_m_8  ,       vnikm)
          call vrec  (rrms_m_8 ,rrms_m_8,       vnikm)
          call vrec  (den_m_8  ,den_m_8 ,       vnikm)
*
************************************************************************
* polar coordinates of upstream position for intermediate thermo levels*
************************************************************************
          do k=1,l_nk-1
          do i=i0,in
             n = k*nij + ((j-1)*l_ni) + i
             nm= (k-1)*nij + ((j-1)*l_ni) + i
*
*            TRAJECTORY
*            ----------
             F_yt_m(n) = yasin_m_8(i,k)
             F_xt_m(n) = zatan_m_8(i,k)
*
*            TLM
*            ---
             F_xt  (n) = (cy_8(i,k)*cx_m_8(i,k) - cy_m_8(i,k)*cx_8(i,k)) * rrms_m_8(i,k)
*
             if ( F_xt_m(n) .lt. 0.0 ) F_xt_m(n) = F_xt_m(n) + r2pi_8
*
             if (cz_m_8(i,k).ge.1.) then
                 F_yt(n) = 0.
             elseif (cz_m_8(i,k).le.-1.) then
                 F_yt(n) = 0.
             else
                 F_yt(n) = cz_8(i,k) * den_m_8(i,k)
             endif
*
*            TRAJECTORY
*            ----------
             F_zt_m(n) = (F_zm_m(nm)+F_zm_m(n))*HALF_8
*
*            TLM
*            ---
             F_zt(n) = (F_zm(nm)+F_zm(n))*HALF_8
*
          end do   
          end do   
*
      enddo
*
C!$omp enddo
C!$omp end parallel
*
      return
      end
