***s/r hzd_main_ad - ADJ of hzd_main_tl 
*
#include <model_macros_f.h>
*
      subroutine hzd_main_ad 
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - ADJ of HO option
*                           - replace xfis by topo
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - change name 
* v3_01 - Tanguay M.        - ADJ of Eigv_parity_L not done yet
* v3_02 - Tanguay M.        - ADJ of Eigv_parity_L done
* v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
*                           - Remove topo 
* v3_20 - Tanguay M.        - Introduce Hzd_hzdmain_n_L 
*
*object
*     see id section
*     -----------------------------------------------------------
*     REMARK:INPUT TRAJ:pipt1m after HZD diffusion
*                       pipt1m,qpt1m before HZD diffusion (NoHyd)
*     -----------------------------------------------------------
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "geomg.cdk"
#include "fft.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "vt1m.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer err, nlod, nlod_m, key1(30),key1_m(2), i, j, k
      real*8  ONE_8,ZERO_8
      parameter( ONE_8 = 1. )
      parameter( ZERO_8= 0. )
      real zpipt1m(LDIST_SHAPE,l_nk),zqpt1m(LDIST_SHAPE,l_nk)
*
*     ______________________________________________________
*
      if ((.not.Hzd_fact_L).and.(.not.Hzd_ho_L).or..not.Hzd_hzdmain_1_L) then
         if (Lun_out.gt.0) write(Lun_out,1001)
         return
      endif
*
      if ( Schm_psadj_L ) call gem_stop('hzd_main_ad',-1)
*     ______________________________________________________
*
*     Get fields in memory
*     --------------------
      key1(1)  = VMM_KEY(ut1)
      key1(2)  = VMM_KEY(vt1)
      key1(3)  = VMM_KEY(psdt1)
      key1(4)  = VMM_KEY(tpt1)
      key1(5)  = VMM_KEY(fipt1)
      key1(6)  = VMM_KEY(tdt1)
      key1(7)  = VMM_KEY(tt1)
      key1(8)  = VMM_KEY(fit1)
      key1(9) = VMM_KEY(tplt1)
      key1(10) = VMM_KEY(qt1)
      key1(11) = VMM_KEY(pipt1)
      key1(12) = VMM_KEY(st1)
      nlod=12
      if (.not. Schm_hydro_L) then
         key1(nlod+1) = VMM_KEY(wt1)
         key1(nlod+2) = VMM_KEY(qpt1)
         key1(nlod+3) = VMM_KEY(mut1)
         key1(nlod+4) = VMM_KEY(multx)
         nlod = nlod+4
      endif
*
      err = vmmlod(key1,nlod)
*
      err = VMM_GET_VAR(ut1)
      err = VMM_GET_VAR(vt1)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR(tpt1)
      err = VMM_GET_VAR(fipt1)
      err = VMM_GET_VAR(tdt1)
      err = VMM_GET_VAR(tt1)
      err = VMM_GET_VAR(fit1)
      err = VMM_GET_VAR(tplt1)
      err = VMM_GET_VAR(qt1)
      err = VMM_GET_VAR(pipt1)
      err = VMM_GET_VAR(st1)
      wt1_  = 0
      qpt1_ = 0
      mut1_ = 0
      multx_= 0
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR(wt1)
         err = VMM_GET_VAR(qpt1)
         err = VMM_GET_VAR(mut1)
         err = VMM_GET_VAR(multx)
      endif
*
*     -----------------------------------------------------
*     WHEN .not.Schm_hydro_L
*          Preserve TRAJ PIPT1,QPT1M before HZD diffusion
*          Diffuse  TRAJ PIPT1,QPT1M
*     -----------------------------------------------------
*     WHEN Schm_hydro_L, TRAJ PIPT1 after HZD diffusion 
*                        is already available in V4D_RWTRAJ
*     -----------------------------------------------------
      if(.not.Schm_hydro_L) then
*
         key1_m(1)= VMM_KEY(pipt1m)
         key1_m(2)= VMM_KEY(qpt1m )
         nlod_m=2
*
         err = vmmlod(key1_m,nlod_m)
*
         err = VMM_GET_VAR(pipt1m)
         err = VMM_GET_VAR(qpt1m )
*
*        Preserve TRAJ PIPT1,QPT1M before HZD diffusion
*        ----------------------------------------------
!$omp parallel do
         do k=1,l_nk
         do j=1,l_nj
         do i=1,l_ni
            zpipt1m(i,j,k) = pipt1m(i,j,k)
            zqpt1m (i,j,k) = qpt1m (i,j,k)
         enddo
         enddo
         enddo
!$omp end parallel do
*
         err = vmmuld(key1_m,2)
*
*        Diffuse TRAJ PIPT1,QPT1M
*        ------------------------
         call hzd_main_tr()
*
      endif
*
*     Recall TRAJ PIPT1 after HZD diffusion
*     -------------------------------------
      key1_m(1)= VMM_KEY(pipt1m)
      nlod_m=1
*
      err = vmmlod(key1_m,nlod_m)
*
      err = VMM_GET_VAR(pipt1m)
*
*     ADJ of
***********************************************
*  $. Indirect diffusion of s & q through pi' *
***********************************************
*
!$omp parallel
*
      if ((Hzd_fact_L.and.Cstv_phidf_8.gt.0.).or.(Hzd_ho_L)) then
*
      if ( .not. Schm_hydro_L ) then
!$omp do
         do k=1,G_nk
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
*
*           ADJ 
*           ---
            qpt1(i,j,k) = qt1(i,j,k) + qpt1(i,j,k)
*
         end do
         end do
         end do
!$omp enddo
      endif
*
!$omp do
      do k=1,G_nk
      do j= 1+pil_s, l_nj-pil_n
      do i= 1+pil_w, l_ni-pil_e
*
*        ADJ 
*        ---
         pipt1(i,j,k) = sngl(
     %                ( dble(  qt1(i,j,k)) ) /
     %                ( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
     %                      ) + pipt1(i,j,k)
         qt1(i,j,k)   = ZERO_8 
*
      end do
      end do
      end do
!$omp end do
*
!$omp do 
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
         pipt1 (i,j,G_nk) = ( dble(st1(i,j)        /geomg_pib(G_nk)))/
     %                 (ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
     %                 + pipt1 (i,j,G_nk)
         st1(i,j)         = ZERO_8
*
      end do
      end do
!$omp end do 
*
      endif
*
!$omp end parallel 
*
      err = vmmuld(key1_m,1)
*
*     -------------------------------------------------------
*     WHEN .not.Schm_hydro_L
*          Recall TRAJ PIPT1,QPT1 before HZD diffusion
*     -------------------------------------------------------
*     WHEN Schm_hydro_L, TRAJ PIPT1,QPT1 before HZD diffusion
*                        are not requested
*     -------------------------------------------------------
*
      if (.not. Schm_hydro_L) then
*
          key1_m(1)= VMM_KEY(pipt1m)
          key1_m(2)= VMM_KEY(qpt1m)
          nlod_m=2
*
          err = vmmlod(key1_m,nlod_m)
*
          err = VMM_GET_VAR(pipt1m)
          err = VMM_GET_VAR(qpt1m )
*
!$omp parallel do
          do k=1,l_nk
          do j=1,l_nj
          do i=1,l_ni
             pipt1m(i,j,k) = zpipt1m(i,j,k)
             qpt1m (i,j,k) = zqpt1m (i,j,k)
          enddo
          enddo
          enddo
!$omp end parallel do
*
      else
          pipt1m_= 0
          qpt1m_ = 0
      endif
*
*     ADJ of
*************************************
*  1. Implicit horizontal diffusion *
*************************************
*
      if (Hzd_ho_L) then
*
         if(Fft_fast_L) then
*
*        use FFT in diffusion-solver
*
            if (G_lam) then
*
            call hzd_hof_lam_ad ( ut1   , vt1  , psdt1 , tpt1  , fipt1 , tdt1 ,
     %                            tt1   , fit1 , tplt1 , pipt1 , wt1   ,
     %                            qpt1  , mut1 , multx ,
     %                            pipt1m, qpt1m, 
     %                            LDIST_DIM, G_nk)
*
            else
*
            call hzd_hof_ad ( ut1   , vt1  , psdt1, tpt1 , fipt1, tdt1,
     %                        tt1   , fit1 , tplt1, pipt1, wt1  ,
     %                        qpt1  , mut1 , multx, 
     %                        pipt1m, qpt1m, 
     %                        LDIST_DIM, G_nk)
*
            endif
*
         else
*
*        use MXMA in diffusion-solver
*
            if ( .not. Eigv_parity_L) then
*
            call hzd_ho_ad  ( ut1   , vt1  , psdt1, tpt1 , fipt1, tdt1,
     %                        tt1   , fit1 , tplt1, pipt1, wt1  ,
     %                        qpt1  , mut1 , multx, 
     %                        pipt1m, qpt1m, 
     %                        LDIST_DIM, G_nk)
*
            else
*
            call hzd_ho_parite_ad( ut1   , vt1  , psdt1, tpt1 , fipt1, tdt1,
     %                             tt1   , fit1 , tplt1, pipt1, wt1  ,
     %                             qpt1  , mut1 , multx, 
     %                             pipt1m, qpt1m, 
     %                             LDIST_DIM, G_nk)
            endif
*
         endif
*
      endif
*
      if (Hzd_fact_L) then
*
      call hzd_fact_ad ( ut1   , vt1  , psdt1, tpt1, fipt1, tdt1,
     %                   tt1   , fit1 , tplt1, qt1 , pipt1, wt1 ,
     %                   qpt1  , mut1 , multx, st1 , 
     %                   pipt1m, qpt1m, 
     %                   LDIST_DIM, G_nk)
*
      endif
*
      err = vmmuld(-1,0)
*
 1001 format(/,
     + 3X,'NO ADJ HORIZONTAL DIFFUSION REQUIRED',
     +/3X,'====================================',/)
*
      return
      end
