! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r frstgss_tr - Equivalent to frstgss for TRAJECTORY 
*
#include "model_macros_f.h"
*
      subroutine frstgss_tr ()
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_21 - Tanguay M.        - Revision Openmp
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*    see id section
*	
*arguments
*    none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cori.cdk"
#include "vt0_m.cdk"
#include "vt1_m.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer pnerr, pnlkey1(14),pnlod,key0_m,key1_m
      real tr0_m,tr1_m
      pointer (patr0_m, tr0_m(LDIST_SHAPE,*))
      pointer (patr1_m, tr1_m(LDIST_SHAPE,*))
      integer i, j, k
*     ______________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)
*
      pnlkey1(1) = VMM_KEY(tt0_m)
      pnlkey1(2) = VMM_KEY(st0_m)
      pnlkey1(3) = VMM_KEY(zdt0_m)
      pnlkey1(4) = VMM_KEY(tt1_m)
      pnlkey1(5) = VMM_KEY(st1_m)
      pnlkey1(6) = VMM_KEY(zdt1_m)
      pnlkey1(7) = VMM_KEY(wt0_m)
      pnlkey1(8) = VMM_KEY(wt1_m)
*
      pnlod=8
      pnerr = vmmlod(pnlkey1,pnlod)

* For humidity
      key0_m = VMM_KEY (trt0_m) + 1
      key1_m = VMM_KEY (trt1_m) +1
      pnerr = vmmlod(key0_m,1)
      pnerr = vmmlod(key1_m,1)
      pnerr = vmmget(key0_m,patr0_m,tr0_m)
      pnerr = vmmget(key1_m,patr1_m,tr1_m)
      do j= 1 , l_nj
      do i= 1 , l_ni
         tr0_m (i,j,l_nk+2) = tr1_m (i,j,l_nk+2)
      enddo
      enddo
*
      pnerr = VMM_GET_VAR(tt0_m)
      pnerr = VMM_GET_VAR(st0_m)
      pnerr = VMM_GET_VAR(zdt0_m)
      pnerr = VMM_GET_VAR(tt1_m)
      pnerr = VMM_GET_VAR(st1_m)
      pnerr = VMM_GET_VAR(zdt1_m)
      pnerr = VMM_GET_VAR(wt0_m)
      pnerr = VMM_GET_VAR(wt1_m)

!$omp parallel
*
!$omp do
      do k=1,l_nk+1
      do j= 1, l_nj
      do i= 1, l_ni
         tt0_m (i,j,k) = tt1_m (i,j,k)
         zdt0_m(i,j,k) = zdt1_m(i,j,k)
         wt0_m (i,j,k) = wt1_m (i,j,k)
      end do
      end do
      end do
!$omp end do

!$omp do
      do j= 1 , l_nj
      do i= 1 , l_ni
         tt0_m (i,j,l_nk+2) = tt1_m (i,j,l_nk+2)
         st0_m(i,j)   =  st1_m(i,j)
      end do
      end do
!$omp end do
*
!$omp end parallel
*
      pnerr = vmmuld(-1,0)
*
      pnlod=0
      if ( Cori_cornl_L ) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0_m)
         pnlkey1(pnlod+2) = VMM_KEY(vt0_m)
         pnlkey1(pnlod+3) = VMM_KEY(ut1_m)
         pnlkey1(pnlod+4) = VMM_KEY(vt1_m)
         pnlod=pnlod+4
      endif
      if ( .not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(qt0_m)
         pnlkey1(pnlod+2) = VMM_KEY(qt1_m)
         pnlod = pnlod+2
      endif
      pnerr = vmmlod(pnlkey1,pnlod)

      if ( Cori_cornl_L ) then
         pnerr = VMM_GET_VAR(ut0_m)
         pnerr = VMM_GET_VAR(ut1_m)
         pnerr = VMM_GET_VAR(vt0_m)
         pnerr = VMM_GET_VAR(vt1_m)
!$omp parallel do
         do k=1,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            ut0_m(i,j,k)  =  ut1_m(i,j,k)
            vt0_m(i,j,k)  =  vt1_m(i,j,k)
         end do
         end do
         end do
!$omp end parallel do
      endif
*
      if ( .not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(qt0_m)
         pnerr = VMM_GET_VAR(qt1_m)
!$omp parallel do
         do k=0,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            qt0_m(i,j,k)  = qt1_m(i,j,k)
         end do
         end do
         end do
!$omp end parallel do
      endif
*
      pnerr = vmmuld(-1,0)
*
1000  format(3X,'TRAJ of FIRST GUESS: (S/R FRSTGSS_TR)')

      return
      end
