!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r frstgss_tr - Equivalent to frstgss for TRAJECTORY 
*
#include "model_macros_f.h"
*
      subroutine frstgss_tr ()
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_21 - Tanguay M.        - Revision Openmp
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*object
*    see id section
*	
*arguments
*    none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cori.cdk"
#include "vt0_m.cdk"
#include "vt1_m.cdk"
#include "tr3d.cdk"
*
      real, pointer    , dimension(:,:,:) :: tr0_m,tr1_m
*
      integer i, j, k, n
*     ______________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)
*
      gmmstat = gmm_get(gmmk_wt0_m_s,wt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(wt0_m)'
      gmmstat = gmm_get(gmmk_tt0_m_s,tt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(tt0_m)'
      gmmstat = gmm_get(gmmk_st0_m_s,st0_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(st0_m)'
      gmmstat = gmm_get(gmmk_zdt0_m_s,zdt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(zdt0_m)'
*
      gmmstat = gmm_get(gmmk_wt1_m_s,wt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(wt1_m)'
      gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(tt1_m)'
      gmmstat = gmm_get(gmmk_st1_m_s,st1_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(st1_m)'
      gmmstat = gmm_get(gmmk_zdt1_m_s,zdt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(zdt1_m)'
*
      do n=1,Tr3d_ntr
*
         nullify (tr0_m,tr1_m)
         gmmstat = gmm_get('TRM/'//trim(Tr3d_name_S(n))//':M',tr0_m,meta3d)
         gmmstat = gmm_get('TRM/'//trim(Tr3d_name_S(n))//':P',tr1_m,meta3d)
*
*        CAUTION TO BE VERIFIED
         do j= 1 , l_nj
         do i= 1 , l_ni
            tr0_m (i,j,l_nk+2) = tr1_m (i,j,l_nk+2)
         enddo
         enddo
*
      enddo
*
!$omp parallel
*
!$omp do
      do k=1,l_nk+1
      do j= 1, l_nj
      do i= 1, l_ni
         tt0_m (i,j,k) = tt1_m (i,j,k)
         zdt0_m(i,j,k) = zdt1_m(i,j,k)
         wt0_m (i,j,k) = wt1_m (i,j,k)
      end do
      end do
      end do
!$omp end do

!$omp do
      do j= 1 , l_nj
      do i= 1 , l_ni
         tt0_m (i,j,l_nk+2) = tt1_m (i,j,l_nk+2)
         st0_m(i,j)   =  st1_m(i,j)
      end do
      end do
!$omp end do
*
!$omp end parallel
*
      if ( Cori_cornl_L ) then
           gmmstat = gmm_get(gmmk_ut0_m_s,ut0_m,meta3d)
           if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(ut0_m)'
           gmmstat = gmm_get(gmmk_vt0_m_s,vt0_m,meta3d)
           if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(vt0_m)'
*
           gmmstat = gmm_get(gmmk_ut1_m_s,ut1_m,meta3d)
           if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(ut1_m)'
           gmmstat = gmm_get(gmmk_vt1_m_s,vt1_m,meta3d)
           if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(vt1_m)'
      endif
      if ( .not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt0_m_s,qt0_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(qt0_m)'
*
         gmmstat = gmm_get(gmmk_qt1_m_s,qt1_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss_tr ERROR at gmm_get(qt0_m)'
      endif
*
      if ( Cori_cornl_L ) then
*
!$omp parallel do
         do k=1,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            ut0_m(i,j,k)  =  ut1_m(i,j,k)
            vt0_m(i,j,k)  =  vt1_m(i,j,k)
         end do
         end do
         end do
!$omp end parallel do
      endif
*
      if ( .not. Schm_hydro_L) then
*
!$omp parallel do
         do k=0,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            qt0_m(i,j,k)  = qt1_m(i,j,k)
         end do
         end do
         end do
!$omp end parallel do
      endif
*
1000  format(3X,'TRAJ of FIRST GUESS: (S/R FRSTGSS_TR)')

      return
      end
