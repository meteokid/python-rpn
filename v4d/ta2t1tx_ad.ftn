***s/r ta2t1tx_ad - ADJ of ta2t1tx_tl 
*
#include <model_macros_f.h>
*
      subroutine ta2t1tx_ad
*
      implicit none
*
*author
*     M Tanguay - rpn - july 2003
*
*revision
* v3_11 - Tanguay M.       - initial MPI version
*	
*arguments
*	none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "vta.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "nest.cdk"
#include "tr2d.cdk"
#include "tr3d.cdk"
#include "p_bus.cdk"
#include "mem.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
      integer open_db_file,close_db_file,rewind_db_file,
     $        read_db_file,write_db_file
      external open_db_file,close_db_file,rewind_db_file,
     $         read_db_file,write_db_file
*
      integer err, key(52), i, j, k, n, key1_, keya_, key1(Tr3d_ntr), 
     $        keya(Tr3d_ntr), pnlod
      real tr1,tra
      pointer (patr1,  tr1 (LDIST_SHAPE,*)),(patra,  tra (LDIST_SHAPE,*))
      real    busper(max(1,p_bper_siz))
*
      real*8, parameter :: ZERO_8 = 0.0
*
*     ---------------------------------------------------------------
*
      if ( Tr2d_ntr.ne.0.or.G_lam ) call gem_stop ('ta2t1tx_ad',-1)
*
*******************************************************************
*     Physics fields
*******************************************************************
*
*     --------------------------------------------------------------------------------
*     NOTE: For ADJ of simplified physics, the requested TRAJECTORY is given in RWTRAJ
*     --------------------------------------------------------------------------------
      if (.FALSE.) then
      if ( Schm_phyms_L ) then
         if (Mem_phyncore_L) then
            do i=1,p_bper_siz*p_nj
               Phy_busper3D(i) = Phy_busper3D_digf(i)
            end do
            call hpdeallc (Phy_busper3D_digf_ , err, 1)
         else
            err = open_db_file   (Lun_waphy)
            err = rewind_db_file (Lun_waphy)
            err = open_db_file   (Lun_wapta)
            err = rewind_db_file (Lun_wapta)
            do k = 1,p_nj
               err = read_db_file  (Lun_wapta,j,1)
               err = read_db_file  (Lun_wapta,busper,p_bper_siz)
               err = write_db_file (Lun_waphy,j,1)
               err = write_db_file (Lun_waphy,busper,p_bper_siz)
            end do
            err = close_db_file (Lun_waphy)
            err = close_db_file (Lun_wapta)
         endif
      endif
      endif
*
*     ------------------
*     ADJ of
*     Passive tracers 3D
*     ------------------
      key1_  = VMM_KEY (trt1)
      keya_  = VMM_KEY (trta)
      do n=1,Tr3d_ntr
         key1 (n) = key1_  + n
         keya (n) = keya_  + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1, Tr3d_ntr)
         err = vmmlod(keya, Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1 (n),patr1, tr1)
            err = vmmget(keya (n),patra, tra)
            do k=1,G_nk
            do j=1,l_nj
            do i=1,l_ni
*
               tra(i,j,k) = tr1(i,j,k) + tra(i,j,k)
               tr1(i,j,k) = ZERO_8
*
            end do
            end do
            end do
         end do
         err = vmmuld(key1, Tr3d_ntr)
         err = vmmuld(keya, Tr3d_ntr)
      endif
*
********************************************************************
*     ADJ of
*     Non-hydrostatic model fields
********************************************************************
*
      if ( .not. Schm_hydro_L ) then
*
         key(1) = VMM_KEY(wta  )
         key(2) = VMM_KEY(wt1  )
         key(3) = VMM_KEY(qpta )
         key(4) = VMM_KEY(qpt1 )
         key(5) = VMM_KEY(multa)
         key(6) = VMM_KEY(multx)
         key(7) = VMM_KEY(muta )
         key(8) = VMM_KEY(mut1 )
         pnlod  = 8
*
         err = vmmlod(key,pnlod)
         err = VMM_GET_VAR(wta  )
         err = VMM_GET_VAR(wt1  )
         err = VMM_GET_VAR(qpta )
         err = VMM_GET_VAR(qpt1 )
         err = VMM_GET_VAR(multa)
         err = VMM_GET_VAR(multx)
         err = VMM_GET_VAR(muta )
         err = VMM_GET_VAR(mut1 ) 
*
         do k=1,l_nk
         do j= 1, l_nj 
         do i= 1, l_ni 
*
            wta  (i,j,k) = wt1  (i,j,k) + wta  (i,j,k) 
            wt1  (i,j,k) = ZERO_8
*
            qpta (i,j,k) = qpt1 (i,j,k) + qpta (i,j,k)
            qpt1 (i,j,k) = ZERO_8
*
            multa(i,j,k) = multx(i,j,k) + multa(i,j,k) 
            multx(i,j,k) = ZERO_8
*
            muta (i,j,k) = mut1 (i,j,k) + muta (i,j,k)
            mut1 (i,j,k) = ZERO_8
*
         enddo
         enddo
         enddo
*
         err = vmmuld(-1,0)
*
      endif
*
*              ADJ of
*C       1.    Fetch variables ta into t1 and tx
*              ---------------------------------
*
      key(1)  = VMM_KEY(uta  )
      key(2)  = VMM_KEY(ut1  )
      key(3)  = VMM_KEY(vta  )
      key(4)  = VMM_KEY(vt1  )
      key(5)  = VMM_KEY(tdta )
      key(6)  = VMM_KEY(tdt1 )
      key(7)  = VMM_KEY(fita )
      key(8)  = VMM_KEY(fit1 )
      key(9)  = VMM_KEY(fipta)
      key(10) = VMM_KEY(fipt1)
      key(11) = VMM_KEY(tta  )
      key(12) = VMM_KEY(tt1  )
      key(13) = VMM_KEY(qta  )
      key(14) = VMM_KEY(qt1  )
      key(15) = VMM_KEY(tpta )
      key(16) = VMM_KEY(tpt1 )
      key(17) = VMM_KEY(pipta)
      key(18) = VMM_KEY(pipt1)
      key(19) = VMM_KEY(tplta)
      key(20) = VMM_KEY(tplt1)
      key(21) = VMM_KEY(psdta)
      key(22) = VMM_KEY(psdt1)
      key(23) = VMM_KEY(sta  )
      key(24) = VMM_KEY(st1  )
      key(25) = VMM_KEY(gpta )
      key(26) = VMM_KEY(gptx )
      pnlod   = 26
*
      err = vmmlod(key,pnlod)
      err = VMM_GET_VAR(uta  )
      err = VMM_GET_VAR(ut1  )
      err = VMM_GET_VAR(vta  )
      err = VMM_GET_VAR(vt1  )
      err = VMM_GET_VAR(tdta )
      err = VMM_GET_VAR(tdt1 )
      err = VMM_GET_VAR(fita )
      err = VMM_GET_VAR(fit1 )
      err = VMM_GET_VAR(fipta)
      err = VMM_GET_VAR(fipt1)
      err = VMM_GET_VAR(tta  )
      err = VMM_GET_VAR(tt1  )
      err = VMM_GET_VAR(qta  )
      err = VMM_GET_VAR(qt1  )
      err = VMM_GET_VAR(tpta )
      err = VMM_GET_VAR(tpt1 )
      err = VMM_GET_VAR(pipta)
      err = VMM_GET_VAR(pipt1)
      err = VMM_GET_VAR(tplta)
      err = VMM_GET_VAR(tplt1)
      err = VMM_GET_VAR(psdta)
      err = VMM_GET_VAR(psdt1)
      err = VMM_GET_VAR(sta  )
      err = VMM_GET_VAR(st1  )
      err = VMM_GET_VAR(gpta )
      err = VMM_GET_VAR(gptx )
*
      do j= 1, l_nj
      do i= 1, l_ni
*
         sta  (i,j) = st1  (i,j) + sta  (i,j)
         st1  (i,j) = ZERO_8 
*
      enddo
      enddo
*
      do k=1,l_nk
      do j= 1, l_nj
      do i= 1, l_ni
*
         gpta (i,j,k) = gptx (i,j,k) + gpta (i,j,k)
         gptx (i,j,k) = ZERO_8
*
         psdta(i,j,k) = psdt1(i,j,k) + psdta(i,j,k)
         psdt1(i,j,k) = ZERO_8
*
         tplta(i,j,k) = tplt1(i,j,k) + tplta(i,j,k)
         tplt1(i,j,k) = ZERO_8
*
         pipta(i,j,k) = pipt1(i,j,k) + pipta(i,j,k)
         pipt1(i,j,k) = ZERO_8
*
         tpta (i,j,k) = tpt1 (i,j,k) + tpta (i,j,k)
         tpt1 (i,j,k) = ZERO_8
*
         qta  (i,j,k) = qt1  (i,j,k) + qta  (i,j,k)
         qt1  (i,j,k) = ZERO_8
*
         tta  (i,j,k) = tt1  (i,j,k) + tta  (i,j,k)
         tt1  (i,j,k) = ZERO_8
*
         fipta(i,j,k) = fipt1(i,j,k) + fipta(i,j,k)
         fipt1(i,j,k) = ZERO_8
*
         fita (i,j,k) = fit1 (i,j,k) + fita (i,j,k)
         fit1 (i,j,k) = ZERO_8
*
         tdta (i,j,k) = tdt1 (i,j,k) + tdta (i,j,k)
         tdt1 (i,j,k) = ZERO_8
*
         vta  (i,j,k) = vt1  (i,j,k) + vta  (i,j,k)
         vt1  (i,j,k) = ZERO_8
*
         uta  (i,j,k) = ut1  (i,j,k) + uta  (i,j,k)
         ut1  (i,j,k) = ZERO_8
*
      enddo
      enddo
      enddo
*
      err = vmmuld(-1,0)
*
*     ---------------------------------------------------------------
      return
      end
