! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nest_update_ad - ADJ of nest_update
*
#include "model_macros_f.h"
*
      subroutine nest_update_ad ()
*
      implicit none
*
*author 
*     M. Tanguay - rpn - december 2006
*
*revision
* v3_30 - Tanguay M.        - initial MPI version
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "acid.cdk"
#include "glb_ld.cdk"
#include "bcsdim.cdk"
#include "bcsgrds.cdk"
#include "bcsmem.cdk"
#include "nest.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
*
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer err,key(13),nvar,id
      integer key1(Tr3d_ntr),key1_,n
      real tr,mul(LDIST_SHAPE,G_nk)
      pointer (patr, tr(LDIST_SHAPE,*))
*----------------------------------------------------------------------
*
      if (north+south+west+east.lt.1) return
*
      key1_ = VMM_KEY (nest_tr)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
      end do
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            id = (n-1)*bcs_sz+1
            err = vmmget(key1(n),patr,tr)
            call trnes_ad(tr,bcs_tr(id),
     $                 bcs_tr(id+bcs_in-1),bcs_tr(id+bcs_iw-1),
     $                 bcs_tr(id+bcs_ie-1),l_minx,l_maxx,l_miny,l_maxy,
     $       minxs,maxxs,minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+2,1)
         enddo
         err = vmmuld(key1,Tr3d_ntr)
      endif
*
      key1(1) = VMM_KEY(nest_u)
      key1(2) = VMM_KEY(nest_v)
      key1(3) = VMM_KEY(nest_w)
      key1(4) = VMM_KEY(nest_t)
      key1(5) = VMM_KEY(nest_zd)
      key1(6) = VMM_KEY(nest_s)
      nvar=6
*
      if (.not. Schm_hydro_L) then
         key1(nvar+1) = VMM_KEY(nest_q)
         nvar = nvar+1
      endif
      err = vmmlod(key1,nvar)
*
      err = VMM_GET_VAR(nest_u)
      err = VMM_GET_VAR(nest_v)
      err = VMM_GET_VAR(nest_w)
      err = VMM_GET_VAR(nest_t)
      err = VMM_GET_VAR(nest_zd)
      err = VMM_GET_VAR(nest_s)
*
      if (.not. Schm_hydro_L) then
         err = VMM_GET_VAR( nest_q)
      endif
*
      if (.not.Schm_hydro_L) then
          call trnes_ad (nest_q,bcs_q(bcs_is),bcs_q(bcs_in),bcs_q(bcs_iw),
     $                   bcs_q(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                   minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+2,0)
      endif
*
             call trnes_ad (nest_zd,bcs_zd(bcs_is),bcs_zd(bcs_in),bcs_zd(bcs_iw),
     $            bcs_zd(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
             call trnes_ad (nest_s,bcs_s(bcs_is),bcs_s(bcs_in),bcs_s(bcs_iw),
     $            bcs_s(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,1,0)
             call trnes_ad (nest_t,bcs_t(bcs_is),bcs_t(bcs_in),bcs_t(bcs_iw),
     $            bcs_t(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+2,0)
             call trnes_ad (nest_w,bcs_w(bcs_is),bcs_w(bcs_in),bcs_w(bcs_iw),
     $            bcs_w(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
             call trnes_ad (nest_v,bcs_v(bcs_is),bcs_v(bcs_in),bcs_v(bcs_iw),
     $            bcs_v(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
             call trnes_ad (nest_u,bcs_u(bcs_is),bcs_u(bcs_in),bcs_u(bcs_iw),
     $            bcs_u(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
*
      err = vmmuld(key,nvar)
*
*----------------------------------------------------------------------
      return
      end
