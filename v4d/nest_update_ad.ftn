! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r nest_update_ad - ADJ of nest_update
*
#include "model_macros_f.h"
*
      subroutine nest_update_ad ()
*
      implicit none
*
*author 
*     M. Tanguay - rpn - december 2006
*
*revision
* v3_30 - Tanguay M.        - initial MPI version
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - Adjust AD LAM when BCS 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "acid.cdk"
#include "glb_ld.cdk"
#include "bcsdim.cdk"
#include "bcsgrds.cdk"
#include "bcsmem.cdk"
#include "nest.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
*
      integer n,id
      real, pointer, dimension(:,:,:) :: tr
*----------------------------------------------------------------------
*
      if (north+south+west+east.lt.1) return
*
      do n=1,Tr3d_ntr
         nullify(tr)
         gmmstat = gmm_get('NEST/'//trim(Tr3d_name_S(n))//':C',tr,meta3d)
         id = (n-1)*bcs_sz+1
         call trnes_ad(tr,bcs_tr(id),bcs_tr(id+bcs_in-1),bcs_tr(id+bcs_iw-1),
     $                            bcs_tr(id+bcs_ie-1),bcs_tr(id+bcs_it-1),
     $                            l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                  minys,maxys,minxw,maxxw,minyw,maxyw,l_ni,l_nj,G_nk+2,1)
      enddo
*
      gmmstat = gmm_get(gmmk_nest_u_s ,nest_u ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_u)'
      gmmstat = gmm_get(gmmk_nest_v_s ,nest_v ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_v)'
      gmmstat = gmm_get(gmmk_nest_w_s ,nest_w ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_w)'
      gmmstat = gmm_get(gmmk_nest_t_s ,nest_t ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_t)'
      gmmstat = gmm_get(gmmk_nest_zd_s,nest_zd,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_zd)'
      gmmstat = gmm_get(gmmk_nest_s_s ,nest_s ,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_s)'

      if (.not.Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_nest_q_s,nest_q,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_update ERROR at gmm_get(nest_q)'
      endif
*
      if (.not.Schm_hydro_L) then
          call trnes_ad (nest_q,bcs_q(bcs_is),bcs_q(bcs_in),bcs_q(bcs_iw),
     $                   bcs_q(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                   minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+2,0)
      endif
*
             call trnes_ad (nest_zd,bcs_zd(bcs_is),bcs_zd(bcs_in),bcs_zd(bcs_iw),
     $            bcs_zd(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
             call trnes_ad (nest_s,bcs_s(bcs_is),bcs_s(bcs_in),bcs_s(bcs_iw),
     $            bcs_s(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,1,0)
             call trnes_ad (nest_t,bcs_t(bcs_is),bcs_t(bcs_in),bcs_t(bcs_iw),
     $            bcs_t(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+2,0)
             call trnes_ad (nest_w,bcs_w(bcs_is),bcs_w(bcs_in),bcs_w(bcs_iw),
     $            bcs_w(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
             call trnes_ad (nest_v,bcs_v(bcs_is),bcs_v(bcs_in),bcs_v(bcs_iw),
     $            bcs_v(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
             call trnes_ad (nest_u,bcs_u(bcs_is),bcs_u(bcs_in),bcs_u(bcs_iw),
     $            bcs_u(bcs_ie),l_minx,l_maxx,l_miny,l_maxy,minxs,maxxs,
     $                         minys,maxys,minxw,maxxw,minyw,maxyw,G_nk+1,0)
*
*----------------------------------------------------------------------
      return
      end
