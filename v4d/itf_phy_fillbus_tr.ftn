! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r itf_phy_fillbus_tr - Fill the slice workspace variable for the physics trajectory
*
#include "model_macros_f.h"
*
      subroutine itf_phy_fillbus_tr ( F_busdyn,F_busper,
     $                          F_jdo, F_step, DIST_DIM, nkphy )
*
      implicit none
*
      integer F_step,F_jdo, DIST_DIM, nkphy
*
      real F_busdyn(*),F_busper(*)

*
*author 
*     Stephane Laroche (Dec 2001)
*
*revision
* v3_00 - Laroche S.            - initial MPI version (from p_fillbus)
* v3_02 - Tanguay M./Laroche S. - do not assume TRAJ HU positive
* v3_30 - Tanguay M.            - adapt TL/AD to itf/pvptr
*                               - Validation for LAM version
* v4_03 - Spacek L.             - Staggered version
*
*object
*	Fill the slice workspace variable for the physics trajectory.
*	Change of units if required	
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_busdyn      I    - dynamic bus
* F_upm         I    - traj of wind image in x direction at time t*
* F_vpm         I    - traj of wind image in y direction at time t*
* F_tpm         I    - traj of virtual temperature at time t*
* F_qpm         I    - traj of ln of pressure at time t*
* F_umm         I    - traj of wind image in x direction at time t-
* F_vmm         I    - traj of wind image in y direction at time t-
* F_tmm         I    - traj of virtual temperature at time t-
* F_kmm         I    - traj of vertical diffusion coefficients for momentum
* F_ktm         I    - traj of vertical diffusion coefficients for heat
* F_sig         I    - sigma levels
* F_jdo         I    - slice number being processed
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "dcst.cdk"
#include "itf_phy_config.cdk"
#include "itf_phy_buses.cdk"
#include "itf_phy_busind.cdk"
#include "busind_tr.cdk"
#include "p4d_simp.cdk"
#include "ver.cdk"
*
*notes
*
      integer i, k, n, ii, indx, index, numtr
      real con
**
*     ---------------------------------------------------------------
*
*     3D variables: extract row F_jdo 
*     -------------------------------
*
      numtr=21
      index=0;        call v4d_rtrnch
     $  (F_busdyn,utrajm,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=nkphy;    call v4d_rtrnch
     $  (F_busdyn,vtrajm,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=2*nkphy;  call v4d_rtrnch
     $  (F_busdyn,ttrajm,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=3*nkphy;  call v4d_rtrnch
     $  (F_busdyn,hutrajm,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=4*nkphy;  call v4d_rtrnch
     $  (F_busdyn,utrajp,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=5*nkphy;  call v4d_rtrnch
     $  (F_busdyn,vtrajp,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=6*nkphy;  call v4d_rtrnch
     $  (F_busdyn,ttrajp,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
      index=7*nkphy;  call v4d_rtrnch
     $  (F_busdyn,hutrajp,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
*
      if( P4d_pbl.eq.2) then
         numtr=22
         index=0;     call v4d_rtrnch
     $  (F_busper,kmm,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)
         index=nkphy; call v4d_rtrnch
     $  (F_busper,ktm,numtr,F_step,index,F_jdo,p_offi,p_ni,nkphy)

         do i= 1, p_ni
            indx = i-1
            ii = i + p_offi
            F_busper(bmm + indx)  = F_busper(kmm+p_ni*(nkphy-1)+indx)
            F_busper(btm + indx)  = F_busper(ktm+p_ni*(nkphy-1)+indx)
         end do
      endif
**
*
      if (.not.G_LAM) then
         do i= 1, p_ni
            indx = i-1
            ii = i + p_offi
            F_busdyn(eponmod + indx) = P_lmvd_vlsp (ii,F_jdo)
         end do
      endif
*
      numtr=23
      index=0; ii=1;  call v4d_rtrnch
     $  (F_busdyn,sigm,numtr,ii,index,F_jdo,p_offi,p_ni,nkphy)
      index=nkphy; ii=1;  call v4d_rtrnch
     $  (F_busdyn,sigt,numtr,ii,index,F_jdo,p_offi,p_ni,nkphy)
*
      numtr=21
      index=8*nkphy;  call v4d_rtrnch
     $  (F_busdyn,ptrajp,numtr,F_step,index,F_jdo,p_offi,p_ni,1)
*
*     ---------------------------------------------------------------
*
      return
      end
