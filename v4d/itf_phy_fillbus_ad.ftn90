! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
!**s/r itf_phy_fillbus_tl - TLM of Fill the slice workspace variable for the physics
!
#include "model_macros_f.h"
!
      subroutine itf_phy_fillbus_ad(F_busdyn,F_busper,F_jdo,F_step,nk)
      implicit none
!
      integer F_step, F_jdo, nk
      real F_busdyn(*),F_busper(*)
!
!author 
!     Stephane Laroche - January 2002
!
!revision
! v3_00 - Laroche S.            - initial MPI version
! v3_02 - Tanguay M./Laroche S. - do not assume TRAJ HU positive
!                               - contribution of surface pressure
! v3_30 - Tanguay M.            - adapt TL/AD to itf
!                               - Validation for LAM version
! v4_03 - Spacek L.             - Staggered version
! v4_12 - Spacek L.             - GMM version
!
!object
!	Fill the slice workspace variable for the physics.
!
#include "glb_ld.cdk"
#include "itf_phy_buses.cdk"
!
!notes
!
      integer i, k, n, ii, indx, offp, offg, pid, gid, mul
      integer soit,lght,indx_n
      integer index, numtr
!
!     ---------------------------------------------------------------
!
      call getindx ('PW_PM:P',  'D', pid, lght, soit)
      do n=1,p_bdyn_top
         call getindx (dynnm(n),  'D', indx_n, lght, soit)
         if (dynpar(n,3).eq.1) then
         if (dynpar(n,7).eq.1) then
            do i= 1, p_ni
               ii   = i + p_offi
               phy_buffer(ii,F_jdo,nk,n) = phy_buffer(ii,F_jdo,nk,n) +      &
                                           F_busdyn(indx_n + i -1)
               F_busdyn(indx_n + i -1)   = 0.0
            end do
         else
            do k= 1, Nk
            do i= 1, p_ni
               indx = (k-1)*p_ni+i-1
               ii   = i + p_offi
               phy_buffer(ii,F_jdo, k,n) = phy_buffer(ii,F_jdo, k,n) +      &
                                           F_busdyn(indx_n + indx)
               F_busdyn(indx_n + indx)   = 0.0
            end do
            end do
         endif
         endif
      end do
!
!     ---------------------------------------------------------------
!
      return
      end
