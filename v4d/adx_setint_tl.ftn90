!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------

#include "stop_mpi.h"

subroutine adx_setint_tl()
   implicit none
   !---------------------------------------------------------------------
   call stop_mpi(STOP_ERROR,'adx_setint_tl','called a stub')
   !---------------------------------------------------------------------
   return
end subroutine adx_setint_tl

subroutine adx_setint2_tl()
   implicit none
   !---------------------------------------------------------------------
   call stop_mpi(STOP_ERROR,'adx_setint2_tl','called a stub')
   !---------------------------------------------------------------------
   return
end subroutine adx_setint2_tl

subroutine adx_setint_lin_hor_ver_tl()
   implicit none
   !---------------------------------------------------------------------
   call stop_mpi(STOP_ERROR,'adx_setint_lin_hor_ver_tl','called a stub')
   !---------------------------------------------------------------------
   return
end subroutine adx_setint_lin_hor_ver_tl

!/**
subroutine adx_setint_lin_hor_ver2_tl(&
                                      F_capx  , F_capy  , F_capz  , &
                                      F_x     , F_y     , F_z     , &
                                      F_n_m   , &
                                      F_capx_m, F_capy_m, F_capz_m, &
                                      F_x_m   , F_y_m   , F_z_m   , &
                                      i0,in,j0,jn,F_ni,F_nj,F_nk)
   implicit none
   !@objective TLM of adx_setint_lin_hor_ver2 
   !@arguments
   integer :: F_ni,F_nj,F_nk  !I, dims
   integer :: i0,in,j0,jn     !I, scope ofthe operator
   real,dimension(F_ni,F_nj,F_nk) :: &
        F_x, F_y, F_z, &          !I, upstream position coor
        F_capz, F_capy, F_capx, & !O, x precomputed displacements and interp terms
   !
        F_x_m, F_y_m, F_z_m, &       !I, upstream position coor TRAJ
        F_capz_m, F_capy_m, F_capx_m !O, x precomputed displacements and interp terms TRAJ
   integer,dimension(F_ni,F_nj,F_nk) :: &
        F_n_m                  !O, pos in the 3D volume of interpolation boxes
!**/
#include "adx_dims.cdk"
#include "adx_grid.cdk"
#include "adx_interp.cdk"
#include "adx_interp_m.cdk"
   integer :: ii, jj, kk, ij, nijag,i, j, k, nit, njt
   real*8  :: prd_8, prdt_8, p_z00_8, prd_m_8, prdt_m_8
   !---------------------------------------------------------------------
   p_z00_8 = adx_verZ_8%t(1)

   nit = adx_lmaxx - adx_lminx + 1
   njt = adx_lmaxy - adx_lminy + 1
   nijag = nit * njt

!$omp parallel private(prd_8,ii,prdt_8,jj,kk,ij)
   !$omp do
   do k=1,F_nk
      do j=j0,jn
         do i=i0,in

            !TRAJECTORY
            !----------
            ii = (dble(F_x_m(i,j,k)) - adx_x00_8) * adx_ovdx_8
            ii = adx_lcx(ii+1) + 1
            ii = min(max(2,ii), adx_gni+2*adx_halox-2)

            prdt_m_8 = dble(F_x_m(i,j,k)) - adx_bsx_8(ii)
            prdt_8   = dble(F_x  (i,j,k)) 
            if (prdt_m_8 < 0.D0) then
               ii = max(2, ii-1)
               prdt_m_8 = dble(F_x_m(i,j,k)) - adx_bsx_8(ii)
!!!            prdt_8   = dble(F_x  (i,j,k)) 
            endif
            F_capx_m(i,j,k) = prdt_m_8 * adx_dix_8(ii)
            F_capx  (i,j,k) = prdt_8   * adx_dix_8(ii)

            jj = (dble(F_y_m(i,j,k)) - adx_y00_8) * adx_ovdy_8
            jj = adx_lcy(jj+1) + 1
            jj = min(max(adx_haloy, jj), adx_gnj+adx_haloy)

            prdt_m_8 = dble(F_y_m(i,j,k)) - adx_bsy_8(jj)
            prdt_8   = dble(F_y  (i,j,k))
            if (prdt_m_8 < 0.D0) then
               jj = max(adx_haloy, jj-1)
               prdt_m_8 = dble(F_y_m(i,j,k)) - adx_bsy_8(jj)
!!!            prdt_8   = dble(F_y  (i,j,k))
            endif
            F_capy_m(i,j,k) = prdt_m_8 * adx_diy_8(jj)
            F_capy  (i,j,k) = prdt_8   * adx_diy_8(jj)

            prd_m_8 = dble(F_z_m(i,j,k))
            prd_8   = dble(F_z  (i,j,k))
            kk = (prd_m_8 - p_z00_8) * adx_ovdz_8
            kk = adx_lcz%s(kk+1)
            prd_m_8 = prd_m_8 - adx_bsz_8%s(kk)
!!!         prd_8   = prd_8 
            if (prd_m_8 < 0.D0) kk = kk - 1
            F_capz_m(i,j,k) = prd_m_8 * adx_diz_8(kk)
            F_capz  (i,j,k) = prd_8   * adx_diz_8(kk)
            if (prd_m_8 < 0.D0) F_capz_m(i,j,k) = 1.0 + F_capz_m(i,j,k)
            ij = (jj-(adx_lj0-1)-1)*nit + (ii-(adx_li0-1))
            F_n_m(i,j,k) = kk*nijag + ij
         enddo
      enddo
   enddo
   !$omp enddo
!$omp end parallel
   !---------------------------------------------------------------------
   return
end subroutine adx_setint_lin_hor_ver2_tl
