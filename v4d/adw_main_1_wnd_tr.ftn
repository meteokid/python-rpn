***s/r adw_main_1_wnd_tr - Equivalent to adw_main_1_wnd for TRAJECTORY 
*
#include "model_macros_f.h"
*
      subroutine adw_main_1_wnd_tr ( F_um, F_vm, F_wm, F_nit, F_njt, F_nk )
*
#include "impnone.cdk"
*
      integer F_nit, F_njt, F_nk
*
      real F_um(F_nit,F_njt,F_nk),
     %     F_vm(F_nit,F_njt,F_nk),
     %     F_wm(F_nit,F_njt,F_nk)
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v3_21 - Tanguay M.        - Revision Openmp
*
*language
*     fortran 77
*
*object
*     see id section
*
*TRAJECTORY of
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
* F_u          | u components of winds on advection grid         |  o  |
* F_v          | v components of winds on advection grid         |  o  |
* F_w          | w components of winds on advection grid         |  o  |
*              |                                                 |     |
* F_nit        | \ total number of points in x,y direction in    |  i  |
* F_njt        | / advection grid (including halos)              |  i  |
*              |                                                 |     |
* F_nk         | number of levels                                |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "adw.cdk"
#include "lun.cdk"
#include "inuvl.cdk"
#include "vthm.cdk"
*
*modules
      integer  vmmlod, vmmget, vmmuld
      external vmmlod, vmmget, vmmuld
************************************************************************
      integer pnerr, pnlkey1(30), pnlod
*
      integer i, j, k, i0, in, j0, jn, n, dest_ni
      real*8 ONE_8,sc_8
      parameter( ONE_8 = 1.0 )
************************************************************************
      if (Lun_debug_L) write (Lun_out,1000)
      pnlkey1(1)  = VMM_KEY(uthm)
      pnlkey1(2)  = VMM_KEY(vthm)
      pnlkey1(3)  = VMM_KEY(psdthm)
*
      pnerr = vmmlod(pnlkey1,3)
*
      pnerr = VMM_GET_VAR(uthm)
      pnerr = VMM_GET_VAR(vthm)
      pnerr = VMM_GET_VAR(psdthm)
***********************************************************************
* Interpolate advection winds to geopotential grid
* F_u and F_v are used as work space
***********************************************************************
      call rpn_comm_xch_halo (uthm,LDIST_DIM,l_niu,l_nj, G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo (vthm,LDIST_DIM,l_ni,l_njv,G_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
!$omp parallel private(i0,in,j0,jn,sc_8)
!$omp do
      do k=1,l_nk
*
         i0 = 1
         in = l_niu
         j0 = 1
         jn = l_nj
         if (G_lam) then
             if (l_west) i0 = 3
             if (l_east) in = l_niu - 1
         endif
         do j = j0, jn
         do i = i0, in
            F_um(i,j,k) = inuvl_wxux3_8(i,1) * uthm(i-2,j,k)
     %                  + inuvl_wxux3_8(i,2) * uthm(i-1,j,k)
     %                  + inuvl_wxux3_8(i,3) * uthm(i  ,j,k)
     %                  + inuvl_wxux3_8(i,4) * uthm(i+1,j,k)
         enddo
         enddo
*
         i0 = 1
         in = l_ni
         jn = l_njv
         if (l_south) j0 = 3
         if (l_north) jn = l_njv - 1
         do j = j0, jn
         do i = i0, in
            F_vm(i,j,k) = inuvl_wyvy3_8(j,1) * vthm(i,j-2,k)
     %                  + inuvl_wyvy3_8(j,2) * vthm(i,j-1,k)
     %                  + inuvl_wyvy3_8(j,3) * vthm(i,j  ,k)
     %                  + inuvl_wyvy3_8(j,4) * vthm(i,j+1,k)
         enddo
         enddo
         if (.not.G_lam) then
         if (l_south) then
            do i = i0, in
            F_vm(i,j0-2,k) = inuvl_wyvy3_8(j0-2,3) * vthm(i,j0-2,k)
     %                     + inuvl_wyvy3_8(j0-2,4) * vthm(i,j0-1,k)
            F_vm(i,j0-1,k) = inuvl_wyvy3_8(j0-1,2) * vthm(i,j0-2,k)
     %                     + inuvl_wyvy3_8(j0-1,3) * vthm(i,j0-1,k)
     %                     + inuvl_wyvy3_8(j0-1,4) * vthm(i,j0,k  )
            enddo
         endif
         if (l_north) then
            do i = i0, in
            F_vm(i,jn+2,k) = inuvl_wyvy3_8(jn+2,1) * vthm(i,jn  ,k)
     %                     + inuvl_wyvy3_8(jn+2,2) * vthm(i,jn+1,k)
            F_vm(i,jn+1,k) = inuvl_wyvy3_8(jn+1,1) * vthm(i,jn-1,k)
     %                     + inuvl_wyvy3_8(jn+1,2) * vthm(i,jn  ,k)
     %                     + inuvl_wyvy3_8(jn+1,3) * vthm(i,jn+1,k)
            enddo
         endif
         endif
      enddo
!$omp enddo
***********************************************************************
* Image to component
***********************************************************************
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
             if (l_south) j0 = 3
             if (l_north) jn = l_njv - 1
      endif
!$omp do
      do k = 1,l_nk
      do j = j0,jn
*
      sc_8 = ONE_8/Adw_cy_8(j)
*
      do i = i0,in
*
      vthm(i,j,k) = sc_8 * F_vm(i,j,k)
*
      enddo
      enddo
      enddo
!$omp enddo
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
             if (l_west) i0 = 3
             if (l_east) in = l_niu - 1
      endif
!$omp do 
      do k = 1,l_nk
      do j = j0,jn
*
      sc_8 = ONE_8/Adw_cy_8(j)
*
      do i = i0,in
*
      uthm(i,j,k) = sc_8 * F_um(i,j,k)
*
      enddo
      enddo
      enddo
!$omp enddo

***********************************************************************
* Adjust wind fields to advection grid
***********************************************************************
      if (G_lam) then
          n=0
          dest_ni=l_ni
      else
          n=999
          dest_ni=G_ni
      endif

!$omp single
      call rpn_comm_xch_halox ( uthm, LDIST_DIM, l_ni, l_nj, l_nk, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, F_um, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
*
      call rpn_comm_xch_halox ( vthm, LDIST_DIM, l_ni, l_nj, l_nk, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, F_vm, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
*
      call rpn_comm_xch_halox ( psdthm, LDIST_DIM, l_ni, l_nj, l_nk, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, F_wm, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
!$omp end single

*
      if (.not.G_lam) then
*
         if ( l_south ) then
*
            call adw_polw (F_um,F_vm,Adw_cx_8,Adw_sx_8,Adw_wx_8,
     %        Adw_sy_8,0,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,l_nk)
            call adw_pols (F_wm,Adw_wx_8,0,Adw_nic,Adw_halox,Adw_njc,
     %        Adw_haloy,l_nk)
         endif
*
         if ( l_north ) then
*
            call adw_polw (F_um,F_vm,Adw_cx_8,Adw_sx_8,Adw_wx_8,
     %        Adw_sy_8,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,l_nk)
            call adw_pols (F_wm,Adw_wx_8,Adw_njc+1,Adw_nic,Adw_halox,
     %        Adw_njc,Adw_haloy,l_nk)
         endif

      endif
!$omp end parallel
*
 1000  format(3X,'TRAJ of PREPARE WINDS: (S/R ADW_MAIN_1_WND_TR)')
      return
      end
