!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r v4d_cain - Canonical injection
*
#include "model_macros_f.h"
*
      subroutine v4d_cain (Ndim,F_px)
*
#include "impnone.cdk"
*
      integer Ndim
      real F_px(Ndim)
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
*                             (based on CAIN of IFS/ARPEGE)
* v2_31 - Tanguay M.        - adapt for tracers in tr3d  
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration
*
*object
*     see id section
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* Ndim         I                   Dimension of F_px  
* F_px         I                   Control variable 
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "schm.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
      integer pnerr, pnlkey1(5), key1(Tr3d_ntr),
     $        key1_, err, i, j, k, m, n
      real tr
      pointer (patr, tr(LDIST_SHAPE,*))
*
*     Get fields in memory
*     --------------------
      pnlkey1(1) = VMM_KEY(ut1 )
      pnlkey1(2) = VMM_KEY(vt1 )
      pnlkey1(3) = VMM_KEY(tpt1)
      pnlkey1(4) = VMM_KEY(st1 )
      if (.not. Schm_hydro_L) then
          pnlkey1(5) = VMM_KEY(fipt1 )
          pnerr = vmmlod(pnlkey1,5)
      else
          pnerr = vmmlod(pnlkey1,4)
      endif
*
*     - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1 )
      pnerr = VMM_GET_VAR(vt1 )
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(st1 )
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(fipt1 )
      endif
*     - - - - - - - - - - - - -
*
      m = 0
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_niu
         m = m+1
         ut1(i,j,k) = F_px(m)
      end do
      end do
      end do
*
      do k=1,l_nk
      do j=1,l_njv
      do i=1,l_ni
         m = m+1
         vt1(i,j,k) = F_px(m)
      end do
      end do
      end do
*
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
         m = m+1
         tpt1(i,j,k) = F_px(m)
      end do
      end do
      end do
*
      do j=1,l_nj
      do i=1,l_ni
         m = m+1
         st1(i,j) = F_px(m)
      end do
      end do
*
      if (.not. Schm_hydro_L) then
*
      do k=1,l_nk
      do j=1,l_nj
      do i=1,l_ni
         m = m+1
         fipt1(i,j,k) = F_px(m)
      end do
      end do
      end do
*
      endif
*
      pnerr = vmmuld(-1,0)
*
      key1_ = VMM_KEY (trt1)
      do n=1,Tr3d_ntr
         key1(n) = key1_ + n
      end do
*
      if (Tr3d_ntr.gt.0) then
         err = vmmlod(key1,Tr3d_ntr)
         do n=1,Tr3d_ntr
            err = vmmget(key1(n),patr,tr)
            do k=1,l_nk
            do j=1,l_nj
            do i=1,l_ni
               m = m+1
               tr(i,j,k) = F_px(m)
            end do
            end do
            end do
         end do
         err = vmmuld(key1,Tr3d_ntr)
      endif
*
*     ______________________________________________________
*
      if(m.ne.Ndim) call gem_stop('v4d_cain',-1)  
*     ______________________________________________________
*
      return
      end
