! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r v4d_blocstat - Same as BLOCSTAT but for 4D-Var control variables 
*
#include "model_macros_f.h"
*
      subroutine v4d_blocstat
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - adapt for tracers in tr3d  
* v3_00 - Tanguay M.        - replace print by write 
* v3_03 - Tanguay M.        - introduce fipt1 statistics and V4dg_imguv_L 
* v3_20 - Tanguay M.        - correction vmmuld 
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*object
*     see id section
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "step.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "lctl.cdk"
#include "ptopo.cdk"
#include "tr3d.cdk"
#include "lun.cdk"
#include "v4dg.cdk"
*
      integer i0,in,j0,jn,inn,n
      real, pointer    , dimension(:,:,:) :: tr
*     ---------------------------------------------------------------
*
      if (mod(Lctl_step,Step_gstat).eq.0) then
*
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_blocstat ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_blocstat ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_blocstat ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_blocstat ERROR at gmm_get(fiptx)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_blocstat ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'v4d_blocstat ERROR at gmm_get(st1)'
*
      if (Ptopo_myproc.eq.0.and.Lun_out.gt.0) write(Lun_out,1000) Lctl_step
*
      i0 = 1
      in = G_ni
      j0 = 1
      jn = G_nj
      inn= 0
      if (G_lam) then
           inn=1
      endif
*
      if(V4dg_imguv_L) then
      call glbstat (ut1  ,'4U',LDIST_DIM,G_nk+1,i0,in-inn,j0,jn,  1,G_nk+1)
      call glbstat (vt1  ,'4V',LDIST_DIM,G_nk+1,i0,in,    j0,jn-1,1,G_nk+1)
      else
      call glbstat (ut1  ,'UU',LDIST_DIM,G_nk+1,i0,in-inn,j0,jn,  1,G_nk+1)
      call glbstat (vt1  ,'VV',LDIST_DIM,G_nk+1,i0,in,    j0,jn-1,1,G_nk+1)
      endif
      call glbstat (zdt1 ,'WW',LDIST_DIM,G_nk+1,i0,in    ,j0,jn  ,1,G_nk+1)
      call glbstat (tt1  ,'TT',LDIST_DIM,G_nk+2,i0,in,    j0,jn,  1,G_nk+2)
      call glbstat (fiptx,'GZ',LDIST_DIM,G_nk+2,i0,in    ,j0,jn  ,1,G_nk+2)
      call glbstat (st1  ,'4S',LDIST_DIM,1,     i0,in,    j0,jn,  1,1)
*
      do n=1,Tr3d_ntr
         nullify (tr)
         gmmstat = gmm_get('TR/'//trim(Tr3d_name_S(n))//':P',tr,meta3d)
         call glbstat (tr,Tr3d_name_S(n),LDIST_DIM,G_nk+2,i0,in,j0,jn,
     $                                                       1,G_nk+2)
      end do
*
      if (Ptopo_myproc.eq.0.and.Lun_out.gt.0) write(Lun_out,1001)
*
      endif
*
 1000 format (/,19('#'),' V4D BLOC STAT ',i6,1X,19('#'))
 1001 format (  19('#'),' V4D BLOC STAT ...done')
*
*     ---------------------------------------------------------------
*
      return
      end
