! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r hzd_main_tl - TLM of hzd_main 
*
#include "model_macros_f.h"
*
      subroutine hzd_main_tl 
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - ADJ of HO option
*                           - replace xfis by topo
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - change name 
* v3_01 - Tanguay M.        - TLM of Eigv_parity_L not done yet 
* v3_02 - Tanguay M.        - TLM of Eigv_parity_L done 
* v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ 
*                           - Introduce Hzd_hzdmain_n_L
* v3_30 - Tanguay M.        - activate Hzd_type_S='EXPLICIT' 
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
*
*object
*     see id section
*
*arguments
*     none
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "fft.cdk"
#include "hzd.cdk"
#include "eigv.cdk"
#include "vt1.cdk"
#include "vt1_m.cdk"
#include "p_geof.cdk"
#include "grd.cdk"
#include "lctl.cdk"
#include "type.cdk"
#include "ver.cdk"
*
*     ______________________________________________________
*
      if (Hzd_type_S.eq.'HO_IMP'.and.G_lam) call gem_stop('hzd_main_TL HO_IMP G_lam',-1)
*
      if (.not.Hzd_ho_L.or..not.Hzd_hzdmain_1_L) then
         if (Lun_debug_L) write(Lun_out,1001)
         return
      endif
*
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(tt1)'
*
      if(.not.Schm_hydro_L)then
         gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(wt1)'
      endif
*
*     TRAJECTORY
*     ----------
      gmmstat = gmm_get(gmmk_ut1_m_s,ut1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(ut1_m)'
      gmmstat = gmm_get(gmmk_vt1_m_s,vt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(vt1_m)'
      gmmstat = gmm_get(gmmk_zdt1_m_s,zdt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(zdt1_m)'
      gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(tt1_m)'
*
      if(.not.Schm_hydro_L)then
         gmmstat = gmm_get(gmmk_wt1_m_s,wt1_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'hzd_main_tl ERROR at gmm_get(wt1_m)'
      endif
*
*************************************
*  1. Implicit horizontal diffusion *
*************************************
*
      call iw2rwnd ( ut1_m, vt1_m, LDIST_DIM, G_nk, 1 )
      call iw2rwnd ( ut1,   vt1,   LDIST_DIM, G_nk, 1 )
*
      if (Hzd_ho_L) then
*
         if (Hzd_type_S.eq.'HO_EXP') then
             call hzd_exhrdif_tl ( ut1,  vt1,  zdt1,  wt1,  tt1,  st1, 
     %                             ut1_m,vt1_m,zdt1_m,wt1_m,tt1_m,st1_m, 
     %                             LDIST_DIM, G_nk)
         else
            if (Fft_fast_L) then
*              use FFT in diffusion-solver
               if (G_lam) then
CCC                call hzd_hof_lam_tl ( ut1,  vt1,  zdt1,  wt1,  tt1,  st1,
CCC  %                                   ut1_m,vt1_m,zdt1_m,wt1_m,tt1_m,st1_m,
CCC  %                                   LDIST_DIM, G_nk)
               else
                   call hzd_hof_tl ( ut1,  vt1,  zdt1,  wt1,  tt1,  st1, 
     %                               ut1_m,vt1_m,zdt1_m,wt1_m,tt1_m,st1_m, 
     %                               LDIST_DIM, G_nk)
               endif
            else
*           NOT DONE
            endif
         endif
*
      endif
*
      call iw2rwnd ( ut1_m, vt1_m, LDIST_DIM, G_nk, 2 )
      call iw2rwnd ( ut1,   vt1,   LDIST_DIM, G_nk, 2 )
*
 1001 format(/,
     + 3X,'NO TLM HORIZONTAL DIFFUSION REQUIRED',
     +/3X,'====================================',/)
*
      return
      end
