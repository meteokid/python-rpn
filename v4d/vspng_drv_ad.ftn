***s/r vspng_drv_ad - ADJ of vspng_drv_tl 
*
#include "model_macros_f.h"
*
      subroutine vspng_drv_ad ( F_u   , F_v  , F_psd , F_tp , F_ip ,
     %                          F_td  , F_t  , F_it  , F_plt, F_q  ,
     %                          F_pip , F_w  , F_qp  , F_mu , F_mul, F_s,
     %                          F_pipm, F_qpm, F_xfis, DIST_DIM,Nk)
*
      implicit none
*
      integer DIST_DIM, Nk
      real   F_u  (DIST_SHAPE,Nk), F_v (DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %       F_ip (DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %       F_t  (DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk), F_q (DIST_SHAPE,Nk),
     %       F_pip(DIST_SHAPE,Nk), F_w (DIST_SHAPE,Nk),
     %       F_qp (DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk), F_s(DIST_SHAPE), F_xfis(DIST_SHAPE)
*
      real  F_pipm(DIST_SHAPE,Nk), F_qpm(DIST_SHAPE,Nk)
*
*author
*     M.Tanguay
*
*revision
* v2_21 - Tanguay M.        - initial MPI version
* v2_31 - Tanguay M.        - ADJ of control for sponge on momentum and
*                             T', T'lin & hence T on Vspng_nk levels +
*                             sponge on top level only on all other variables
* v3_00 - Tanguay M.        - correction as in vspng_drv 
* v3_01 - Laroche/Tanguay   - correction nj as in vspng_drv
* v3_01 - Tanguay M.        - adapt to Vspng_rwnd_L
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_20 - Tanguay M.        - Adjoint of variable higher order diffusion operator
*                           - Correction TRAJ F_pipm when NoHyd 
* v3_30 - Tanguay M.        - adjust TL/AD to Vspng_zmean_L
*
*object
*     see id section
*
*arguments
* 
*implicits
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "trp.cdk"
#include "vspng.cdk"
#include "hzd.cdk"
#include "opr.cdk"
*
      integer i, j, jj, k, nkspng
      real*8 HALF_8,TWO_8,c_8,c1_8
      parameter( HALF_8  = 0.5 )
      parameter(  TWO_8  = 2.0 )
*
      real work(LDIST_SHAPE,Nk),work_m(LDIST_SHAPE,Nk)
      real tmean(l_nj,Nk)
      real u_work(LDIST_SHAPE,Nk)
      real*8, dimension (trp_12emax*G_ni*Vspng_nk) :: aix_8,bix_8,cix_8,dix_8
      real*8, dimension (trp_22emax*G_nj*Vspng_nk) :: aiy_8,biy_8,ciy_8
      real*8 cy_8(l_nj+1), xp0_8(G_ni), yp0_8(G_nj)
*
      real*8 ZERO_8
      parameter (ZERO_8=0.0)
*     ______________________________________________________
*
*     Zero adjoint variables
*     ----------------------
      tmean  = 0.0
* 
!$omp parallel do
      do k=1,Nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
        work(i,j,k) = ZERO_8
      u_work(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp end parallel do
*
      if ( Cstv_phidf_8 .gt. 0.0) then
*
         c_8 = Cstv_phidf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         do j = 1, l_nj+1
            cy_8(j) = G_yg_8(l_j0+j-1)
         end do
*
         if (Vspng_uvwdt_L) then
             nkspng   = Vspng_nk
             Vspng_nk = 1
         endif
*
         if (Hzd_difva_L) then
           call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $                     cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $                     Hzd_yp2su_8,G_ni,G_nj,G_nj)
         else
           call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $                     cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $                     Opr_opsyp2_8,G_ni,G_nj,G_nj)
         endif
*
*     ----------------
*     START TRAJECTORY
*     ----------------
*
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
*
!$omp parallel do 
            do k = 1, Vspng_nk
            do j = 1, l_nj
            do i = 1, l_ni
*
               work_m(i,j,k) = F_pipm(i,j,k)
*
            end do
            end do
            end do
!$omp end parallel do 
*
*     The hydrostatic pressure: pi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_del2 (F_pipm,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         endif
*
*****************************
*  3. Nonyhydrostatic model * 
*****************************
*
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
*
*        Indirect diffusion of q'
*        ~~~~~~~~~~~~~~~~~~~~~~~~
!$omp parallel do
*
         do k=1, Vspng_nk
         do j=1, l_nj
         do i=1, l_ni
*
            work_m(i,j,k) = ( Geomg_z_8(k) + dble(work_m(i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) )
*
         end do
         end do
         end do
!$omp end parallel do 
*
         call vspng_del2 (work_m,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         endif
*
*     --------------
*     END TRAJECTORY
*     --------------
*
*****************************
*  ADJ of                   *
*  3. Nonyhydrostatic model *
*****************************
*
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
*
*        START ADJOINT CALCULATIONS
*        --------------------------
*
!$omp parallel do 
         do k=1, Vspng_nk
         do j=1, l_nj
         do i=1, l_ni
*
            work  (i,j,k) = ( dble(F_qp(i,j,k)  )*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) )
     %                     /( dble(work_m(i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) ) + work  (i,j,k)
            F_pip (i,j,k) = (-dble(work_m(i,j,k))*(                dble(F_qp  (i,j,k))) )
     %                     /( dble(work_m(i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) ) + F_pip (i,j,k)
            F_qp  (i,j,k) = ZERO_8
*
         end do
         end do
         end do
!$omp end parallel do 
*
         call vspng_del2_ad (work,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*        Indirect diffusion of q'
*        ~~~~~~~~~~~~~~~~~~~~~~~~
!$omp parallel do 
         do k=1, Vspng_nk
         do j=1, l_nj
         do i=1, l_ni
*
            F_qp(i,j,k) = ( Geomg_z_8(k) + dble(work_m(i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) ) * dble(work(i,j,k)) + F_qp(i,j,k)
*
            work(i,j,k) = (                dble(work  (i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) )
*
         end do
         end do
         end do
!$omp end parallel do 
*
         call vspng_del2_ad (F_mul,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         call vspng_del2_ad (F_mu,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*        END ADJOINT CALCULATIONS
*        ------------------------
*
         endif         
*
         if ( .not. Schm_hydro_L ) then
*
*     ADJ of
*     Vertical wind (physical)
*     ~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_del2_ad (F_w,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*
         endif
*
*     ADJ of
*     The hydrostatic pressure: pi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_del2_ad (F_pip,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*     ADJ of
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
!$omp parallel  
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
!$omp do 
            do k = 1, Vspng_nk
            do j = 1, l_nj
            do i = 1, l_ni
*
               F_pip(i,j,k) = work(i,j,k) + F_pip(i,j,k)
                work(i,j,k) = ZERO_8
*
            end do
            end do
            end do
!$omp enddo 
         endif
*
* ADJ of
* updating phi' at the top
*
!$omp do 
         do j = 1, l_nj
         do i = 1, l_ni
            F_it(i,j,1) = F_ip(i,j,1) + F_it(i,j,1)
            F_ip(i,j,1) = ZERO_8
         end do
         end do
!$omp enddo 
*
*        ADJ 
*        ---
         if (Vspng_nk.ge.2) then
*
!$omp do 
         do k = 2, Vspng_nk
         do j = 1, l_nj
         do i = 1, l_ni
           F_ip(i,j,k) = F_it(i,j,k) + F_ip(i,j,k)
           F_it(i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp enddo 
*
         endif
*
!$omp end parallel 
*
*     ADJ of
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
         call vspng_del2_ad (F_it,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
         call vspng_del2_ad (F_ip,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         if (Vspng_uvwdt_L) then
         Vspng_nk = nkspng
*
         if (Hzd_difva_L) then
           call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $                     cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $                     Hzd_yp2su_8,G_ni,G_nj,G_nj)
         else
           call vspng_abc (aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $                     cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Opr_opsyp0_8,
     $                     Opr_opsyp2_8,G_ni,G_nj,G_nj)
         endif
*
         endif
*
*     ADJ of
*     The temperature: T', T'lin & hence T
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!$omp parallel do 
         do k=1, Vspng_nk
         do j=1, l_nj
         do i=1, l_ni
            F_tp(i,j,k) = F_t(i,j,k) + F_tp(i,j,k)
            F_t (i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp end parallel do 
*
         call vspng_del2_ad (F_plt,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
         call vspng_del2_ad (F_tp,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*        ADJ of
*        Total divergence
*        ~~~~~~~~~~~~~~~~
         call vspng_del2_ad (F_td,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*
*        ADJ of
*        Vertical motion
*        ~~~~~~~~~~~~~~~
         call vspng_del2_ad (F_psd,
     $                  Opr_opsxp0_8(G_ni+1),Opr_opsyp0_8(G_nj+1),
     $                  aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                  LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
      endif
*
*     TRAJ
*     ----
      do i = 1, G_ni
         xp0_8 (i) = G_xg_8(i+1) - G_xg_8(i)
      end do
      do j = 1, G_nj
         yp0_8 (j) = sin(G_yg_8(j+1))-sin(G_yg_8(j))
      end do
*
      if ( Cstv_uvdf_8 .gt. 0.0 ) then
*
*        ADJ of
*        Horizontal Momentum
*        ~~~~~~~~~~~~~~~~~~~
         do j = 1, l_nj+1
            jj = l_j0+j-1
            cy_8(j) = cos((G_yg_8(jj+1)+G_yg_8(jj)) * HALF_8) **TWO_8
         end do
         c_8 = Cstv_uvdf_8*Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Opr_opsxp0_8,Opr_opsxp2_8,Hzd_yp0_8,Hzd_yp2_8,
     $               G_ni,G_nj,G_njv)
*
         if (Vspng_rwnd_L) then
!$omp parallel private(c1_8)
!$omp do
            do k=1,G_nk
               do j=1,l_nj
                  c1_8 = geomg_cy_8(j) / Dcst_rayt_8
                  do i=1,l_ni
                     f_v(i,j,k) = f_v(i,j,k) * c1_8
                  end do
               end do
               do j=1,l_nj
                  c1_8 = geomg_cy_8(j) / Dcst_rayt_8
                  do i=1,l_ni
                     f_u(i,j,k) = f_u(i,j,k) * c1_8
                  end do
               end do
            end do
!$omp enddo
!$omp end parallel
         endif
*
*  ADJ of
*  Add back the mean for the zonal component
*
         if (Vspng_zmean_L)then
             call vspng_zmean_ad(F_u,u_work,tmean,DIST_DIM,Nk,.false.)
                F_u = u_work
             u_work = 0.
         endif
*
         call vspng_del2_ad ( F_v, Opr_opsxp0_8(G_ni+1), yp0_8,
     $                 aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                 LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_njv)
*
         do j = 1, l_nj+1
            cy_8(j) = G_yg_8(l_j0+j-1)
         end do
         if (Hzd_difva_L) then
           call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Hzd_yp2su_8,
     $               G_ni,G_nj,G_nj)
         else
           call vspng_abc ( aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,c_8,
     $               cy_8,Hzd_xp0_8,Hzd_xp2_8,Opr_opsyp0_8,Opr_opsyp2_8,
     $               G_ni,G_nj,G_nj)
         endif
*
         call vspng_del2_ad ( F_u, xp0_8, Opr_opsyp0_8(G_nj+1),
     $                 aix_8,bix_8,cix_8,dix_8,aiy_8,biy_8,ciy_8,
     $                 LDIST_DIM,Vspng_nk,trp_12emax,trp_22emax,G_nj)
*
*  ADJ of
*  Substract the mean for the zonal component if wanted
*
         if (Vspng_zmean_L) then
             call vspng_zmean_ad(F_u,u_work,tmean,DIST_DIM,Nk,.true.)
                F_u = u_work
             u_work = 0.
         endif
*
         if (Vspng_rwnd_L) then
!$omp parallel private(c1_8)
!$omp do
            do k=1,G_nk
               do j=1,l_njv
                  c1_8 = Dcst_rayt_8 / geomg_cy_8(j)
                  do i=1,l_ni
                     f_v(i,j,k) = f_v(i,j,k) * c1_8
                  end do
               end do
               do j=1,l_nj
                  c1_8 = Dcst_rayt_8 / geomg_cy_8(j)
                  do i=1,l_ni
                     f_u(i,j,k) = f_u(i,j,k) * c1_8
                  end do
               end do
            end do
!$omp enddo
!$omp end parallel
         endif
*
      endif     
*     __________________________________________________________________
*
      return
      end
