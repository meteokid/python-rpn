! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r v4d_rwtraj_phy - For PHYSICS: Read (Write) from (on) TRAJ WA file at each time step 
*
#include "model_macros_f.h"
*
      subroutine v4d_rtrnch (bus,nvar,numtr,istep,ind,jdo,offi,niphy,nkphy)

*
      implicit none
*
      integer nvar,numtr,istep,ind,jdo,offi,niphy,nkphy
*
      real bus(*)
*
*author 
*     Lubos Spacek (Apr 2008)
*
*revision
*
*arguments
*  Name        I/O                 Description
*----------------------------------------------------------------
* F_busdyn      O    - dynamic bus
* F_jdo         I    - slice number being processed
* F_step        I    - sigma levels
*----------------------------------------------------------------
*
*implicits
#include "glb_ld.cdk"
#include "v4dg.cdk"
*modules
*
      integer i,j,k,indd,inds,iadd
*
      iadd = V4dg_addtab_tl(numtr,istep,1,1)
      iadd = iadd+l_ni*l_nj*ind
      do k= 1, nkphy
      do i= 1, niphy
         indd = (k-1)*niphy+i-1
         inds = l_ni*l_nj*(k-1) + l_ni*(jdo-1) + offi + i
         bus(nvar +indd)  =   V4dg_trincore(iadd + inds - 1)
      enddo
      enddo
*
      return
      end
