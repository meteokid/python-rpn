!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
#include "model_macros_f.h"
#if defined (NEC)
#define ADW_TRICUB_LAG3D_TL   adw_tricub_lag3d_vec_TL
#endif
*
!/**
      subroutine adw_interp_gmm_tl (F_out_S  , F_in_S  , F_wk_adw  ,
     %                              F_out_m_S, F_in_m_S, F_wk_adw_m,
     %                              F_wind_L, F_mono_L, DIST_DIM, F_nk,
     %                              i0,in,j0,jn, F_lev_S, F_fact_8)

      implicit none

      !@objective

      !@arguments
      character(len=*) :: F_out_S  , F_in_S
      character(len=*) :: F_out_m_S, F_in_m_S
      real :: F_wk_adw(*),F_wk_adw_m(*)
      logical :: F_wind_L, F_mono_L
      integer  :: DIST_DIM, F_nk, i0,in,j0,jn
      character(len=*) :: F_lev_S
      real(8) :: F_fact_8

      !@revisions
      !  2009-12,  Stephane Chamberland: original code from adw_main_3
      !  2010-01,  M.Tanguay           : TL/AD Thermo upstream positions 

      !@includes
#include "gmm.hf"
#include "glb_ld.cdk"
!**/
      type(gmm_metadata) :: dummy_gmm_meta
      integer :: i,j,k,err
      real, pointer, dimension (:,:,:) :: fld_in  ,fld_out  ,fld_in2
      real, pointer, dimension (:,:,:) :: fld_in_m,fld_out_m,fld_in2_m
      real(8) :: inverse_fact_8
      !---------------------------------------------------------------------
!$omp single

     !TRAJECTORY
     !----------
      err = gmm_get(F_in_m_S,fld_in_m,dummy_gmm_meta)
      call handle_error(err,'adw_interp_gmm_tl','gmm_get for'//trim(F_in_m_S))
      err = gmm_get(F_out_m_S,fld_out_m,dummy_gmm_meta)
      call handle_error(err,'adw_interp_gmm_tl','gmm_get for'//trim(F_out_m_S))

     !TLM
     !---
      err = gmm_get(F_in_S,fld_in,dummy_gmm_meta)
      call handle_error(err,'adw_interp_gmm','gmm_get for'//trim(F_in_S))
      err = gmm_get(F_out_S,fld_out,dummy_gmm_meta)
      call handle_error(err,'adw_interp_gmm','gmm_get for'//trim(F_out_S))

!$omp end single

      fld_in2   => fld_in
      fld_in2_m => fld_in_m
      if (F_fact_8/=1. .and. F_fact_8/=0.) then
         fld_in2   => fld_out
         fld_in2_m => fld_out_m
         inverse_fact_8 = 1.d0/F_fact_8
!$omp do
         do k=1,F_nk
            do j=1,l_nj
               do i=1,l_ni

     !            TRAJECTORY
     !            ----------
                  fld_in2_m(i,j,k) = inverse_fact_8*fld_in_m(i,j,k)

     !            TLM
     !            ---
                  fld_in2(i,j,k) = inverse_fact_8*fld_in(i,j,k)

               end do
            end do
         end do
!$omp enddo
      endif

      call adw_interp2_tl (fld_out  , fld_in2  , F_wk_adw  , 
     %                     fld_out_m, fld_in2_m, F_wk_adw_m,
     %                 F_wind_L, F_mono_L, LDIST_DIM, F_nk,
     %                 i0,in,j0,jn, F_lev_S)

      if (F_fact_8/=1. .and. F_fact_8/=0.) then
!$omp do
         do k=1,F_nk
            do j=1,l_nj
               do i=1,l_ni

     !            TRAJECTORY
     !            ----------
                  fld_out_m(i,j,k) = F_fact_8*fld_out_m(i,j,k)

     !            TLM
     !            ---
                  fld_out(i,j,k) = F_fact_8*fld_out(i,j,k)

               end do
            end do
         end do
!$omp enddo
      endif
      !---------------------------------------------------------------------
      return
      end subroutine adw_interp_gmm_tl


!/**
      subroutine adw_interp2_tl( F_out  , F_in  , F_wk_adw  ,
     %                           F_out_m, F_in_m, F_wk_adw_m,
     %                           F_wind_L, F_mono_L, DIST_DIM, F_nk,
     %                           i0,in,j0,jn, F_lev_S )

      implicit none

      character*1 F_lev_S

      logical F_wind_L, F_mono_L

      integer DIST_DIM, F_nk, i0,in,j0,jn

      real F_out (DIST_SHAPE, F_nk),
     %     F_in  (DIST_SHAPE, F_nk)
      real F_wk_adw(*)

      real F_out_m(DIST_SHAPE, F_nk),
     %     F_in_m (DIST_SHAPE, F_nk)
      real F_wk_adw_m(*)
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured Adw_main 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_20 - Tanguay M.        - Lagrange 3D
* v3_21 - Tanguay M.        - Revision Openmp
* v3_30 - Tanguay M.        - adjust OPENMP for LAM 
* v4_04 - Tanguay M.        - Staggered version TL/AD 
* v4_12 - Tanguay M.        - TL/AD Thermo upstream positions
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_out        | interpolated field                              |  o  |
* F_in         | field to interpolate                            |  i  |
* F_wind_L     | switch: .true. : field to interpolate is a wind |  i  |
*              |                  like quantity                  |  i  |
* F_mono_L     | switch: .true. : monotonic interpolation        |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "adw_m.cdk"
!**/
      integer i, j, k, nij, nijk, nijkag, n, dest_ni

      real dummy

      !---------------------------------------------------------------------
      nij    = l_ni   *l_nj
      nijk   = l_ni   *l_nj   *F_nk
      nijkag = Adw_nit*Adw_njt*F_nk

************************************************************************
* TLM of
* Adjust field to advection grid
* Compute extension beyond the pole if appropriate
************************************************************************
!$omp single
      if (G_lam) then
          n=0
          dest_ni=l_ni
      else
          n=999
          dest_ni=G_ni
      endif
*
*     TRAJECTORY
*     ----------
      call rpn_comm_xch_halox (F_in_m, LDIST_DIM, l_ni, l_nj, F_nk,
     % Adw_halox, Adw_haloy, G_periodx, G_periody, F_wk_adw_m, -Adw_halox+1,
     % Adw_nic+Adw_halox, -Adw_haloy+1, Adw_njc+Adw_haloy, dest_ni, n)
*
*     TLM
*     ---
      call rpn_comm_xch_halox (F_in, LDIST_DIM, l_ni, l_nj, F_nk,
     % Adw_halox, Adw_haloy, G_periodx, G_periody, F_wk_adw, -Adw_halox+1,
     % Adw_nic+Adw_halox, -Adw_haloy+1, Adw_njc+Adw_haloy, dest_ni, n)
!$omp end single
*
      if (.not.G_lam) then

     !TRAJECTORY
     !----------
         if (l_south) then
             if  (F_wind_L) then
               !set values at the pole = 0.0
               call adw_pol0 (F_wk_adw_m, 0, Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
             else
               !compute weighted average around the pole
               call adw_pols (F_wk_adw_m,Adw_wx_8, 0, Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
             endif
            !extension of a scalar field beyond the poles
            call adw_polx (F_wk_adw_m,Adw_xg_8,.true.,Adw_nic,Adw_halox,
     %           Adw_njc,Adw_haloy,F_nk)
         endif

         if (l_north) then
            if  (F_wind_L) then
               call adw_pol0 (F_wk_adw_m,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
            else
               call adw_pols (F_wk_adw_m,Adw_wx_8, Adw_njc+1,Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
            endif
            call adw_polx (F_wk_adw_m,Adw_xg_8,.false.,Adw_nic,Adw_halox,
     %           Adw_njc,Adw_haloy,F_nk)
         endif

     !TLM
     !---
         if (l_south) then

             if  (F_wind_L) then
               !set values at the pole = 0.0
               call adw_pol0 (F_wk_adw, 0, Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
             else
               call adw_pols (F_wk_adw,Adw_wx_8, 0, Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
             endif
             call adw_polx (F_wk_adw,Adw_xg_8,.true.,Adw_nic,Adw_halox,
     %            Adw_njc,Adw_haloy,F_nk)
         endif

         if ( l_north ) then

             if  (F_wind_L) then
                call adw_pol0 (F_wk_adw,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,
     %               Adw_haloy,F_nk)
             else
                call adw_pols (F_wk_adw,Adw_wx_8, Adw_njc+1,Adw_nic,Adw_halox,
     %               Adw_njc,Adw_haloy,F_nk)
             endif
             call adw_polx (F_wk_adw,Adw_xg_8,.false.,Adw_nic,Adw_halox,
     %            Adw_njc,Adw_haloy,F_nk)
         endif

      endif

************************************************************************
* TLM of
* Interpolate
************************************************************************

      call ADW_TRICUB_LAG3D_TL (
     %     Adw_wrkc,F_wk_adw,
     %     Adw_capx1,Adw_capy1,Adw_capz1,
     !
     %     Adw_wrkc_m,F_wk_adw_m,
     %     Adw_capx1_m,Adw_capy1_m,Adw_capz1_m,
     !
     %     nijk, F_mono_L,i0,in,j0,jn,F_nk,F_lev_S)

!$omp do
      do k = 1, F_nk
      do j = j0,jn
      do i = i0,in

     !   TRAJECTORY
     !   ----------
         F_out_m(i,j,k) = Adw_wrkc_m ( (k-1)*nij+(j-1)*l_ni+i )

     !   TLM
     !   ---
         F_out(i,j,k) = Adw_wrkc ( (k-1)*nij+(j-1)*l_ni+i )

      enddo
      enddo
      enddo
!$omp enddo
*
      return
      end
