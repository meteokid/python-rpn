! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/p adw_trilin_turbo_tr - Equivalent to adw_trilin_turbo for TRAJECTORY 
*
#include "model_macros_f.h"
*
      subroutine adw_trilin_turbo_tr ( F_out, F_in, F_dt, 
     %                                 F_x, F_y, F_z, F_capx, F_capy, F_capz, 
     %                                 Fn_I, F_num,i0,in,j0,jn,kn,
     %                                 F_lev_S)
*
      implicit none
*
      character*1 F_lev_S
*
      integer F_num, i0,in,j0,jn,kn, Fn_I(F_num)
*
      real F_dt, F_in(*)
*
      real F_out(F_num), F_x(F_num), F_y(F_num), F_z(F_num)
      real F_capx(F_num),F_capy(F_num),F_capz(F_num)
*
*authors
*     Valin & Tanguay
*
*     (Based on adw_trilin_tr v_3.1.1)
*
*revision
* v3_20 -Valin & Tanguay -  initial version
* v3_21 - Tanguay M.     - Revision Openmp
* v4_04 - Tanguay M.     - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_out        | F_dt * result of interpolation                  |  o  |
* F_in         | field to interpolate                            |  i  |
*              |                                                 |     |
* F_dt         | multiplicative constant (1.0 or timestep lenght)|  i  |
*              |                                                 |     |
* F_x          | \                                               |  i  |
* F_y          |   x,y,z positions                               |  i  |
* F_z          | /                                               |  i  |
*              |                                                 |     |
* F_capx       | precomputed displacements along the x-direction |  o  | 
* F_capy       | precomputed displacements along the y-direction |  o  | 
* F_capz       | precomputed displacements along the z-direction |  io | 
*              |                                                 |     |
* Fn_I         | localisation indices                            |  io |
*              |                                                 |     |
* F_num        | number of points to interpolate                 |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "type.cdk"
#include "adw.cdk"
#include "ver.cdk"
************************************************************************
*
      integer n, n0, nijag, nij, o1, o2, i, j, k, iimax, jjmax,
     %        ii,jj,kk
*
      real capx, capy, capz
*
      real*8 rri_8, rrj_8, rrk_8, prf1_8, prf2_8, prf3_8, prf4_8, p_z00_8
*
      integer,dimension(:),pointer :: p_lcz
      real*8, dimension(:),pointer :: p_bsz_8, p_diz_8
*
************************************************************************
*
      if ( F_lev_S .eq. 'm') then
         p_z00_8 = Ver_z_8%m(1)
         p_lcz =>Adw_lcz%m
         p_bsz_8 =>Adw_bsz_8%m
         p_diz_8 =>Adw_diz_8%m
      else
         p_z00_8 = Ver_z_8%t(1)
         p_lcz =>Adw_lcz%t
         p_bsz_8 =>Adw_bsz_8%t
         p_diz_8 =>Adw_diz_8%t
      endif
*
      nijag = Adw_nit * Adw_njt
      nij = l_ni*l_nj
*
      iimax = G_ni+2*Adw_halox-1
      jjmax = G_nj+Adw_haloy
*
!$omp parallel do private(n,n0,ii,jj,kk,rri_8,rrj_8,rrk_8,
!$omp&              capx,capy,capz,o1,o2,prf1_8,prf2_8,prf3_8,prf4_8)
      do 100 k=1,kn
      do  90 j=j0,jn
      n0 = (k-1)*nij + ((j-1)*l_ni)
      if ( Adw_hor_L ) then
        do  i=i0,in
          n = n0 + i
*
          rri_8= F_x(n)
          ii = ( rri_8 - Adw_x00_8 ) * Adw_ovdx_8
          ii = Adw_lcx( ii+1 ) + 1
          if ( rri_8 .lt. Adw_bsx_8(ii) ) ii = ii - 1
          ii = max(1,min(ii,iimax))
*
          rrj_8= F_y(n)
          jj = ( rrj_8 - Adw_y00_8 ) * Adw_ovdy_8
          jj = Adw_lcy( jj+1 ) + 1
          if ( rrj_8 .lt. Adw_bsy_8(jj) ) jj = jj - 1
          jj = max(Adw_haloy,min(jj,jjmax))
*
          kk = ishft(Fn_I(n) , -24)
          Fn_I(n) = ior( ior(ishft(jj,12) , ii) , ishft( kk , 24) )
*
        enddo
      endif
      if ( Adw_ver_L ) then
        do  i=i0,in
          n = n0 + i
*
          rrk_8= F_z(n)
          kk = ( rrk_8 - p_z00_8 ) * Adw_ovdz_8
          kk = p_lcz( kk+1 )
          rrk_8 = rrk_8 - p_bsz_8(kk)
          if ( rrk_8 .lt. 0.0 ) kk = kk - 1
*
          capz = rrk_8 * p_diz_8(kk)
          if ( rrk_8 .lt. 0.0 ) capz = 1.0 + capz
*
          F_capz(n) = capz
*
          ii = and( Fn_I(n) , 4095 )
          jj = and( ishft( Fn_I(n) , -12 ) , 4095 )
          Fn_I(n) = ior( ior(ishft(jj,12) , ii) , ishft( kk , 24) )
        enddo
      endif
      do  80 i=i0,in
        n = n0 + i
*
        ii = and( Fn_I(n) , 4095 )
        jj = and( ishft( Fn_I(n) , -12 ) , 4095 )
        kk = ishft(Fn_I(n) , -24)
*
        rri_8= F_x(n)
        rrj_8= F_y(n)
        rrk_8= F_z(n)
*
        o1 = (kk)*nijag + (jj-Adw_int_j_off-1)*Adw_nit + (ii-Adw_int_i_off)
        o2 = o1 + Adw_nit
*
************************************************************************
*     x interpolation
************************************************************************
        capx = (rri_8-Adw_bsx_8(ii)) *Adw_xbc_8(ii)
        F_capx(n) = capx
*
        prf1_8 = (1.0 - capx) * F_in(o1) + capx * F_in(o1+1)
        prf2_8 = (1.0 - capx) * F_in(o2) + capx * F_in(o2+1)
*
        o1 = o1 + nijag
        o2 = o2 + nijag
*
        prf3_8 = (1.0 - capx) * F_in(o1) + capx * F_in(o1+1)
        prf4_8 = (1.0 - capx) * F_in(o2) + capx * F_in(o2+1)
*
************************************************************************
*     y interpolation
************************************************************************
        capy = (rrj_8-Adw_bsy_8(jj)) *Adw_ybc_8(jj)  
        F_capy(n) = capy
*
        prf1_8 = (1.0 - capy) * prf1_8 + capy  * prf2_8
        prf2_8 = (1.0 - capy) * prf3_8 + capy  * prf4_8
************************************************************************
*     z interpolation
************************************************************************
        capz = F_capz(n)
*
        F_out(n) = ( (1.0 - capz) * prf1_8 + capz  * prf2_8 ) * F_dt
*
   80 continue
   90 continue
  100 continue
!$omp end parallel do 
*
      Adw_hor_L = .false.
      Adw_ver_L = .false.
*
      return
      end
