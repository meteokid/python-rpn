!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
#include "model_macros_f.h"
#if defined (NEC)
#define ADW_TRICUB_LAG3D_AD   adw_tricub_lag3d_vec_AD
#endif
*
!/**
      subroutine adw_interp_gmm_ad (F_out_S  , F_in_S  , F_wk_adw  ,
     %                              F_out_m_S, F_in_m_S, F_wk_adw_m,
     %                              F_wind_L, F_mono_L, DIST_DIM, F_nk,
     %                              i0,in,j0,jn, F_lev_S, F_fact_8)

      implicit none

      !@objective

      !@arguments
      character(len=*) :: F_out_S  , F_in_S
      character(len=*) :: F_out_m_S, F_in_m_S
      real :: F_wk_adw(*),F_wk_adw_m(*)
      logical :: F_wind_L, F_mono_L
      integer  :: DIST_DIM, F_nk, i0,in,j0,jn
      character(len=*) :: F_lev_S
      real(8) :: F_fact_8
      !
      !@author monique tanguay
      !@revisions
      ! v4_XX - Tanguay M.        - Adjustments GEM413
      !@includes
#include "gmm.hf"
#include "glb_ld.cdk"
!**/
      type(gmm_metadata) :: mymeta
      integer :: i,j,k,err
      real, pointer, dimension (:,:,:) :: fld_in  ,fld_out  
      real, pointer, dimension (:,:,:) :: fld_in_m,fld_out_m

      !---------------------------------------------------------------------

      !TRAJECTORY
      !----------
      err = gmm_get(F_in_m_S,fld_in_m,mymeta)
      call handle_error(err,'adw_interp_gmm_ad','gmm_get for'//trim(F_in_m_S))
      err = gmm_get(F_out_m_S,fld_out_m,mymeta)
      call handle_error(err,'adw_interp_gmm_ad','gmm_get for'//trim(F_out_m_S))

      !ADJ
      !---
      err = gmm_get(F_in_S,fld_in,mymeta)
      call handle_error(err,'adw_interp_gmm_ad','gmm_get for'//trim(F_in_S))
      err = gmm_get(F_out_S,fld_out,mymeta)
      call handle_error(err,'adw_interp_gmm_ad','gmm_get for'//trim(F_out_S))


      call adw_interp2_ad (fld_out  , fld_in  , F_wk_adw  , 
     %                                fld_in_m, F_wk_adw_m,
     %                     F_wind_L, F_mono_L, LDIST_DIM, F_nk,
     %                     i0,in,j0,jn, F_lev_S)

      !---------------------------------------------------------------------
      return
      end subroutine adw_interp_gmm_ad

!/**
      subroutine adw_interp2_ad( F_out, F_in,   F_wk_adw, 
     %                                  F_in_m, F_wk_adw_m,
     %                           F_wind_L, F_mono_L, DIST_DIM, F_nk,
     %                           i0,in,j0,jn, F_lev_S )
*
      implicit none
*
      character*1 F_lev_S
*
      logical F_wind_L, F_mono_L
*
      integer DIST_DIM, F_nk, i0,in,j0,jn
*
      real F_out (DIST_SHAPE, F_nk),
     %     F_in  (DIST_SHAPE, F_nk)
      real F_wk_adw(*)
*
      real F_out_m(DIST_SHAPE, F_nk),
     %     F_in_m (DIST_SHAPE, F_nk)
      real F_wk_adw_m(*)
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured Adw_main 
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_20 - Tanguay M.        - Lagrange 3D
* v3_21 - Tanguay M.        - Revision Openmp
* v3_30 - Tanguay M.        - adjust OPENMP for LAM 
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*language
*     fortran 77
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_out        | interpolated field                              |  o  |
* F_in         | field to interpolate                            |  i  |
* F_wind_L     | switch: .true. : field to interpolate is a wind |  i  |
*              |                  like quantity                  |  i  |
* F_mono_L     | switch: .true. : monotonic interpolation        |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "adw.cdk"
#include "adw_m.cdk"
!**/
      integer i, j, k, nij, nijk, nijkag, n, dest_ni

      real dummy

      real, dimension(:,:,:)  ,allocatable :: in0

      !---------------------------------------------------------------------

      if (G_lam) allocate ( in0(LDIST_SHAPE,F_nk) )

      nij    = l_ni   *l_nj
      nijk   = l_ni   *l_nj   *F_nk
      nijkag = Adw_nit*Adw_njt*F_nk

     !------------------
     !TRAJECTORY (START)
     !------------------

************************************************************************
* TRAJ of
* Adjust field to advection grid
* Compute extension beyond the pole if appropriate
************************************************************************
C!$omp single
      if (G_lam) then
          n=0
          dest_ni=l_ni
      else
          n=999
          dest_ni=G_ni
      endif

      call rpn_comm_xch_halox (F_in_m, LDIST_DIM, l_ni, l_nj, F_nk,
     % Adw_halox, Adw_haloy, G_periodx, G_periody, F_wk_adw_m, -Adw_halox+1,
     % Adw_nic+Adw_halox, -Adw_haloy+1, Adw_njc+Adw_haloy, dest_ni, n)

C!$omp end single

      if (.not.G_lam) then

         if (l_south) then

             if  (F_wind_L) then
               !set values at the pole = 0.0
               call adw_pol0 (F_wk_adw_m, 0, Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
             else
               call adw_pols (F_wk_adw_m,Adw_wx_8, 0, Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
             endif
               call adw_polx (F_wk_adw_m,Adw_xg_8,.true.,Adw_nic,Adw_halox,
     %               Adw_njc,Adw_haloy,F_nk)
         endif

         if (l_north) then

             if  (F_wind_L) then
               call adw_pol0 (F_wk_adw_m,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
             else
               call adw_pols (F_wk_adw_m,Adw_wx_8, Adw_njc+1,Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
             endif
               call adw_polx (F_wk_adw_m,Adw_xg_8,.false.,Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
         endif

      endif

     !----------------
     !TRAJECTORY (END)
     !----------------

************************************************************************
* ADJ of
* Interpolate
************************************************************************

C!$omp do
      do k = F_nk,1,-1
      do j = jn,j0,-1
      do i = in,i0,-1
*
         Adw_wrkc ( (k-1)*nij+(j-1)*l_ni+i ) = F_out(i,j,k) + Adw_wrkc ( (k-1)*nij+(j-1)*l_ni+i )
         F_out(i,j,k) = 0.
*
      enddo
      enddo
      enddo
C!$omp enddo

      call ADW_TRICUB_LAG3D_AD (
     %     Adw_wrkc,F_wk_adw,
     %     Adw_capx1,Adw_capy1,Adw_capz1,
     !
     %              F_wk_adw_m,
     %     Adw_capx1_m,Adw_capy1_m,Adw_capz1_m,
     !
     %     nijk, F_mono_L,i0,in,j0,jn,F_nk,F_lev_S)

************************************************************************
* ADJ of
* Adjust field to advection grid
* Compute extension beyond the pole if appropriate
************************************************************************

      if (.not.G_lam) then

         if (l_north) then
*
            call adw_polx_ad (F_wk_adw,Adw_xg_8,.false.,Adw_nic,Adw_halox,
     %                     Adw_njc,Adw_haloy,F_nk)
*
             if ( F_wind_L ) then
               call adw_pol0_ad (F_wk_adw,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
             else
               call adw_pols_ad (F_wk_adw,Adw_wx_8, Adw_njc+1,Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
             endif

         endif

         if (l_south) then

               call adw_polx_ad (F_wk_adw,Adw_xg_8,.true.,Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)

             if ( F_wind_L ) then
               call adw_pol0_ad (F_wk_adw, 0, Adw_nic,Adw_halox,Adw_njc,
     %              Adw_haloy,F_nk)
             else
               call adw_pols_ad (F_wk_adw,Adw_wx_8, 0, Adw_nic,Adw_halox,
     %              Adw_njc,Adw_haloy,F_nk)
             endif

         endif

      endif
*
C!$omp single
      if (G_lam) then
          n=0
          dest_ni=l_ni
      else
          n=999
          dest_ni=G_ni
      endif
*
        if (G_lam) then
C!$omp parallel do
            do k=1,F_nk
            do j=l_miny,l_maxy
            do i=l_minx,l_maxx
               in0(i,j,k) = F_in(i,j,k)
            end do
            end do
            end do
C!$omp end parallel do
        endif
*
      call rpn_comm_adj_halox (F_in, LDIST_DIM, l_ni, l_nj, F_nk,
     % Adw_halox, Adw_haloy, G_periodx, G_periody, F_wk_adw, -Adw_halox+1,
     % Adw_nic+Adw_halox, -Adw_haloy+1, Adw_njc+Adw_haloy, dest_ni, n)
*
         if (G_lam) then
C!$omp parallel do
             do k=1,F_nk
             do j=l_miny,l_maxy
             do i=l_minx,l_maxx
                F_in(i,j,k) = in0(i,j,k) + F_in(i,j,k)
C               in0 (i,j,k) = ZERO_8
             end do
             end do
             end do
C!$omp end parallel do
         endif
*
C!$omp end single
*
*     Zero adjoint variables
*     ---------------------
      do i = 1,nijkag
         F_wk_adw(i) = 0.
      enddo
*
      return
      end
