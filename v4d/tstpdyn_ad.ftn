! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r tstpdyn_ad -  ADJ of tstpdyn_tl 
*
#include "model_macros_f.h"
*
      subroutine tstpdyn_ad ( F_fnitraj )
*
      implicit none
*
      integer F_fnitraj
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_21 - Tanguay M.        - ADJ of HO option
*                           - ADJ of vertical sponge layer
* v2_31 - Tanguay M.        - adapt ADJ to new advection code,
*                             hybrid coord., tracer tr3d and
*                             diffusion in gem_run 
* v3_00 - Tanguay M.        - adapt to restructured adw_main 
* v3_02 - Tanguay M.        - ADJ of Eigv_parity_L and Hspng_main done
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ 
* v3_21 - Tanguay M.        - Revision Openmp
* v3_30 - Tanguay M.        - add parameter iln in sol_main
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*     see tstpdyn
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "nl.cdk"
#include "v4dg.cdk"
#include "nl_m.cdk"
#include "rhsc_m.cdk"
#include "orh_m.cdk"
#include "tr3d.cdk"
#include "vt0_m.cdk"
#include "vtx_m.cdk"
#include "vtopo.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer pnerr, pnlkey1(10), err, iln, dim, dimt, ilntrj
*
      real w_st0_m(LDIST_SHAPE),w_fiptx_m(LDIST_SHAPE,0:l_nk+1)
      real w_tt0_m(LDIST_SHAPE,l_nk+2)
      real w_qt0_m(LDIST_SHAPE,0:l_nk+1)
*     ______________________________________________________
*
      if (Schm_zdotlag_L) call gem_stop ('Schm_zdotlag_L not DONE in tstpdyn_AD',-1)
      if (Vtopo_L)        call gem_stop ('Vtopo_L not DONE in tstpdyn_AD',-1)
*
      if (Lun_debug_L) write(Lun_out,1000)
*
*     Recover TRAJ predictive variables 
*     ---------------------------------
      call v4d_rwtraj (2) 
*
*     Calculate (Orh_icn=Schm_itcn) or Recover RHS
*     --------------------------------------------
      call rhs_tr 
*
*     Recover TRAJ Positions TH/TRAJ Winds TH
*     ---------------------------------------
      call v4d_rwtraj (3)
      call v4d_rwtraj (4)
*
      call adw_main_tr ( F_fnitraj )
*
      call pre_tr ()
*
      dim = (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*l_nk
      dimt= (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*(l_nk+1)
      call hpalloc (nl_m_u_, dim, err,1)
      call hpalloc (nl_m_v_, dim, err,1)
      call hpalloc (nl_m_t_, dimt,err,1)
      call hpalloc (nl_m_c_, dim, err,1)
      call hpalloc (nl_m_f_, dimt,err,1)
      nl_m_w_ = 0
      if ( .not. Schm_hydro_L ) then
         call hpalloc (nl_m_w_, dimt, err,1)
      endif
*
      if (Lun_debug_L) write (Lun_out,1005) Schm_itnlh
*
*     ADJ
*     ---
      dim = (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*l_nk
      dimt= (l_maxx-l_minx+1)*(l_maxy-l_miny+1)*(l_nk+1)
      call hpalloc (nl_u_, dim, err,1)
      call hpalloc (nl_v_, dim, err,1)
      call hpalloc (nl_t_, dimt,err,1)
      call hpalloc (nl_c_, dim, err,1)
      call hpalloc (nl_f_, dimt, err,1)
      nl_w_ = 0
      if ( .not. Schm_hydro_L ) then
         call hpalloc (nl_w_, dimt, err,1)
      endif
*
*     Zero adjoint variables
*     ----------------------
      nl_u = 0.
      nl_v = 0.
      nl_c = 0.
      nl_t = 0.
      nl_f = 0.
      if (.not. Schm_hydro_L) then
          nl_w = 0.
      endif
*
      do 100 iln=Schm_itnlh,1,-1
*
         ilntrj = 1
*
         if (Orh_icn.ne.1) then
*
*           Recover TRAJ modified by BAC at previous Orh_icn 
*           ------------------------------------------------
            call v4d_rwtraj (7)
*
         else
*
            call frstgss_tr
*
         endif
*
         if (iln.gt.1) then
*
            do ilntrj=1,iln-1
*
               call nli_tr ()
*
*              Recover TRAJ requested to build BAC_TR
*              --------------------------------------
               V4dg_iln = ilntrj
               call v4d_rwtraj (8)
*
               call bac_tr ( ilntrj, Schm_itnlh )
*
            enddo
*
         endif
*
*        Store TRAJ in WORK_TRAJ for NLI_AD
*        ----------------------------------
         pnlkey1(1) = VMM_KEY(st0_m)
         pnlkey1(2) = VMM_KEY(fiptx_m)
         pnlkey1(3) = VMM_KEY(tt0_m)
         if (.not. Schm_hydro_L) then
         pnlkey1(4) = VMM_KEY(qt0_m)
         pnerr = vmmlod(pnlkey1,4)
         else
         pnerr = vmmlod(pnlkey1,3)
         endif
*
         pnerr = VMM_GET_VAR(st0_m)
         pnerr = VMM_GET_VAR(fiptx_m)
         pnerr = VMM_GET_VAR(tt0_m)
         if (.not. Schm_hydro_L) pnerr = VMM_GET_VAR(qt0_m) 
*
         w_st0_m   = st0_m
         w_fiptx_m = fiptx_m
         w_tt0_m   = tt0_m
         if (.not. Schm_hydro_L) w_qt0_m = qt0_m
*
         pnerr = vmmuld(-1,0)
*        ----------------------------------
*
         call nli_tr ()
*
*        Recover TRAJ requested during BAC_AD
*        ------------------------------------
         V4dg_iln = iln
         call v4d_rwtraj (9)
*
*        --------------
*        END TRAJECTORY
*        --------------
         call bac_ad ( iln, Schm_itnlh )
*
         call sol_main_ad (iln)
*
*        Recover TRAJ from WORK_TRAJ for NLI_AD
*        --------------------------------------
         pnlkey1(1) = VMM_KEY(st0_m)
         pnlkey1(2) = VMM_KEY(fiptx_m)
         pnlkey1(3) = VMM_KEY(tt0_m)
         if (.not. Schm_hydro_L) then
         pnlkey1(4) = VMM_KEY(qt0_m)
         pnerr = vmmlod(pnlkey1,4)
         else
         pnerr = vmmlod(pnlkey1,3)
         endif
*
         pnerr = VMM_GET_VAR(st0_m)
         pnerr = VMM_GET_VAR(fiptx_m)
         pnerr = VMM_GET_VAR(tt0_m)
         if (.not. Schm_hydro_L) pnerr = VMM_GET_VAR(qt0_m)
*
         st0_m   = w_st0_m
         fiptx_m = w_fiptx_m
         tt0_m   = w_tt0_m
         if (.not. Schm_hydro_L) qt0_m = w_qt0_m
*
         pnerr = vmmuld(-1,0)
*        --------------------------------------
*
         call nli_ad ()
*
  100 continue
*
*     TRAJECTORY
*     ----------
      call hpdeallc(nl_m_u_, err,1)
      call hpdeallc(nl_m_v_, err,1)
      call hpdeallc(nl_m_t_, err,1)
      call hpdeallc(nl_m_c_, err,1)
      call hpdeallc(nl_m_f_, err,1)
      if ( .not. Schm_hydro_L ) then
         call hpdeallc(nl_m_w_, err,1)
      endif
*
*     ADJ
*     ---
      call hpdeallc(nl_u_, err,1)
      call hpdeallc(nl_v_, err,1)
      call hpdeallc(nl_t_, err,1)
      call hpdeallc(nl_c_, err,1)
      call hpdeallc(nl_f_, err,1)
      if ( .not. Schm_hydro_L ) then
         call hpdeallc(nl_w_, err,1)
      endif
*
      if (Orh_icn.eq.1) call frstgss_ad( )
*
      call pre_ad ()
*
      call adw_main_ad ( F_fnitraj )
*
      if ( Orh_icn .eq. 1 ) call rhs_ad ()
*
*     ---------------------------------------------------------------
*
 1000 format(
     + 3X,'ADJ of PERFORM A DYNAMICAL STEP: (S/R TSTPDYN_AD)',
     +/3X,'=================================================',/)
*
 1005 format(
     $3X,'ADJ of ITERATING SCHM_ITNLH=',I3,' TIMES TO SOLVE NON-LINEAR ',
     $   'HELMHOLTZ PROBLEM',/)
*
      return
      end
