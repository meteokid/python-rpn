!-------------------------------------- LICENCE BEGIN -------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END ---------------------------
#include "msg.h"

!/**
subroutine adx_tricub_lag3d2_tl()
   print *,'ERROR: called a stub (adx_tricub_lag3d2_tl)'
   call flush()
   stop
end subroutine adx_tricub_lag3d2_tl

!/**
subroutine adx_tricub_lag3d3_tl(F_out  ,F_in  ,F_x  ,F_y  ,F_z  ,&
                                F_out_m,F_in_m,F_x_m,F_y_m,F_z_m,&
                                F_mono_L,i0,in,j0,jn, &
                                F_ni,F_nj,F_aminx,F_amaxx,F_aminy,F_amaxy, &
                                F_nk,F_nk_in,F_lev_S)
   implicit none
#include "adx_dims.cdk"
   !@objective TLM of adx_tricub_lag3d3 
   !@arguments
   character(len=*) :: F_lev_S !I, m/t : Momemtum/thermo level
   integer :: F_nk_in          !I, number of vertical levels (input field)
   integer :: F_ni, F_nj, F_nk !I, dims of output field
   integer :: F_aminx,F_amaxx,F_aminy,F_amaxy !I, F_in array bounds
   integer :: i0,in,j0,jn      !I, scope of operator
   logical :: F_mono_L         !I, .true. monotonic interpolation
   real,dimension(F_ni,F_nj,F_nk) :: &
        F_x  , F_y  , F_z, &   !I, interpolation target x,y,z coordinates
        F_x_m, F_y_m, F_z_m    !I, interpolation target x,y,z coordinates TRAJ
   real,dimension(F_aminx:F_amaxx,F_aminy:F_amaxy,F_nk_in) :: &
        F_in, &                !I, field to interpolate 
        F_in_m                 !I, field to interpolate TRAJ 
   real,dimension(F_ni,F_nj,F_nk) :: &
        F_out, &               !O, result of interpolation
        F_out_m                !O, result of interpolation TRAJ
   !@author monique tanguay
   !@revisions
   ! v4_XX - Tanguay M.        - Adjustments GEM413
!**/
#include "adx_grid.cdk"
#include "adx_interp.cdk"
#include "adx_interp_m.cdk"
   integer :: i,j,k,iimax,jjmax,kkmax,ii,jj,kk
   integer :: i2, j2, k2
   logical :: zcubic_L
   real    :: prmin, prmax, prmin_m, prmax_m
   real*8, dimension(4)  :: pp_8  , aa_8  , bb_8  , cc_8  , dd_8
   real*8, dimension(4)  :: pp_m_8, aa_m_8, bb_m_8, cc_m_8, dd_m_8

   integer,dimension(:),pointer :: p_lcz
   real*8  :: p_z00_8
   real*8, dimension(:),pointer :: p_bsz_8, p_zbc_8, p_zabcd_8
   real*8, dimension(:),pointer :: p_zbacd_8, p_zcabd_8, p_zdabc_8

   real*8 :: rri_8  ,rrj_8  ,rrk_8  ,ra_8,rb_8,rc_8,rd_8  
   real*8 :: rri_m_8,rrj_m_8,rrk_m_8

!TODO: all intermediate computations should be real*8 (not the present mix)... does not reproduce bit pattern

#define TRIPROD(ZA,ZB,ZC,ZD) ((ZA-ZB)*(ZA-ZC)*(ZA-ZD))
#define TRIPROD_tl(ZA,ZA_M,ZB,ZC,ZD) (ZA*(ZA_M-ZC)*(ZA_M-ZD)+(ZA_M-ZB)*ZA*(ZA_M-ZD)+(ZA_M-ZB)*(ZA_M-ZC)*ZA) 
#define INT_CUB_I2(F3D,AA,BB,CC,DD,II,JJ,KK) (AA*F3D(II-1,JJ,KK) + BB*F3D(II,JJ,KK) + CC*F3D(II+1,JJ,KK) + DD*F3D(II+2,JJ,KK))
#define INT_CUB_I2_tl(F3D,AA,BB,CC,DD,F3D_M,AA_M,BB_M,CC_M,DD_M,II,JJ,KK) (AA_M*F3D(II-1,JJ,KK)+BB_M*F3D(II,JJ,KK)+CC_M*F3D(II+1,JJ,KK)+DD_M*F3D(II+2,JJ,KK) + AA*F3D_M(II-1,JJ,KK)+BB*F3D_M(II,JJ,KK)+CC*F3D_M(II+1,JJ,KK)+DD*F3D_M(II+2,JJ,KK) )
#define INT_CUB_I1(F3D,AA,II,JJ,KK) INT_CUB_I2(F3D,AA(1),AA(2),AA(3),AA(4),II,JJ,KK)
#define INT_CUB_I1_tl(F3D,AA,F3D_M,AA_M,II,JJ,KK) INT_CUB_I2_tl(F3D,AA(1),AA(2),AA(3),AA(4),F3D_M,AA_M(1),AA_M(2),AA_M(3),AA_M(4),II,JJ,KK)

#define INT_CUB_I2_48(F3D4,AA8,BB8,CC8,DD8,II,JJ,KK) (AA8*dble(F3D4(II-1,JJ,KK)) + BB8*dble(F3D4(II,JJ,KK)) + CC8*dble(F3D4(II+1,JJ,KK)) +
DD8*dble(F3D4(II+2,JJ,KK)))
#define INT_CUB_I1_48(F3D4,AA8,II,JJ,KK) INT_CUB_I2(F3D4,AA8(1),AA8(2),AA8(3),AA8(4),II,JJ,KK)
   !---------------------------------------------------------------------
   if (F_lev_S == 'm') then
      kkmax   = adx_lnkm - 1
      p_z00_8 = adx_verZ_8%m(1)
      p_lcz     => adx_lcz%m
      p_bsz_8   => adx_bsz_8%m
      p_zabcd_8 => adx_zabcd_8%m
      p_zbacd_8 => adx_zbacd_8%m
      p_zcabd_8 => adx_zcabd_8%m
      p_zdabc_8 => adx_zdabc_8%m
      p_zbc_8   => adx_zbc_8%m
   else
      kkmax   = adx_lnkm
      p_z00_8 = adx_verZ_8%t(1)
      p_lcz     => adx_lcz%t
      p_bsz_8   => adx_bsz_8%t
      p_zabcd_8 => adx_zabcd_8%t
      p_zbacd_8 => adx_zbacd_8%t
      p_zcabd_8 => adx_zcabd_8%t
      p_zdabc_8 => adx_zdabc_8%t
      p_zbc_8   => adx_zbc_8%t
   endif

   iimax = adx_gni+2*adx_halox-2
   jjmax = adx_gnj+adx_haloy

   do k=1,F_nk
      do j=j0,jn
         do i=i0,in

            !TRAJECTORY
            !----------
            rri_m_8= F_x_m(i,j,k)
            ii = (rri_m_8 - adx_x00_8) * adx_ovdx_8
            ii = adx_lcx(ii+1) + 1
            if (rri_m_8 < adx_bsx_8(ii)) ii = ii - 1
            ii = max(2,min(ii,iimax))

            !TLM
            !---
            rri_8= F_x(i,j,k)

            !TRAJECTORY
            !----------
            rrj_m_8= F_y_m(i,j,k)
            jj = (rrj_m_8 - adx_y00_8) * adx_ovdy_8
            jj = adx_lcy(jj+1) + 1
            if (rrj_m_8 < adx_bsy_8(jj)) jj = jj - 1
            jj = max(adx_haloy,min(jj,jjmax))

            !TLM
            !---
            rrj_8= F_y(i,j,k)

            !TRAJECTORY
            !----------
            rrk_m_8= F_z_m(i,j,k)
            kk = (rrk_m_8 - p_z00_8) * adx_ovdz_8
            kk = p_lcz(kk+1)
            if (rrk_m_8 < p_bsz_8(kk)) kk = kk - 1
            kk = min(kkmax-1,max(0,kk))

            !TLM
            !---
            rrk_8= F_z(i,j,k)

            zcubic_L = (kk > 0) .and. (kk < kkmax-1)

            !- x interpolation
            !- --------------- 

            !- TRAJECTORY
            !- ---------- 
            ra_8 = adx_bsx_8(ii-1)
            rb_8 = adx_bsx_8(ii  )
            rc_8 = adx_bsx_8(ii+1)
            rd_8 = adx_bsx_8(ii+2)

            pp_m_8(1) = TRIPROD(rri_m_8,rb_8,rc_8,rd_8) * adx_xabcd_8(ii)
            pp_m_8(2) = TRIPROD(rri_m_8,ra_8,rc_8,rd_8) * adx_xbacd_8(ii)
            pp_m_8(3) = TRIPROD(rri_m_8,ra_8,rb_8,rd_8) * adx_xcabd_8(ii)
            pp_m_8(4) = TRIPROD(rri_m_8,ra_8,rb_8,rc_8) * adx_xdabc_8(ii)

            !- TLM 
            !- --- 
            pp_8(1) = TRIPROD_tl(rri_8,rri_m_8,rb_8,rc_8,rd_8) * adx_xabcd_8(ii)
            pp_8(2) = TRIPROD_tl(rri_8,rri_m_8,ra_8,rc_8,rd_8) * adx_xbacd_8(ii)
            pp_8(3) = TRIPROD_tl(rri_8,rri_m_8,ra_8,rb_8,rd_8) * adx_xcabd_8(ii)
            pp_8(4) = TRIPROD_tl(rri_8,rri_m_8,ra_8,rb_8,rc_8) * adx_xdabc_8(ii)

            !- lmin shift needed since indexes are computed with array starting at 1
            i2 = ii - (adx_li0-1) + (adx_lminx-1)
            j2 = jj - (adx_lj0-1) + (adx_lminy-1)
            k2 = kk

            !- TRAJECTORY
            !- ---------- 
            bb_m_8(1) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2-1,k2+1)
            bb_m_8(2) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2,  k2+1)
            bb_m_8(3) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+1,k2+1)
            bb_m_8(4) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+2,k2+1)

            !- TLM 
            !- --- 
            bb_8(1) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2-1,k2+1)
            bb_8(2) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2,  k2+1)
            bb_8(3) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+1,k2+1)
            bb_8(4) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+2,k2+1)

            !- TRAJECTORY
            !- ---------- 
            cc_m_8(1) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2-1,k2+2)
            cc_m_8(2) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2,  k2+2)
            cc_m_8(3) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+1,k2+2)
            cc_m_8(4) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+2,k2+2)

            !- TLM 
            !- --- 
            cc_8(1) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2-1,k2+2)
            cc_8(2) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2,  k2+2)
            cc_8(3) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+1,k2+2)
            cc_8(4) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+2,k2+2)

            if (zcubic_L) then

               !- TRAJECTORY
               !- ---------- 
               aa_m_8(1) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2-1,k2)
               aa_m_8(2) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2,  k2)
               aa_m_8(3) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+1,k2)
               aa_m_8(4) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+2,k2)

               !- TLM 
               !- --- 
               aa_8(1) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2-1,k2)
               aa_8(2) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2,  k2)
               aa_8(3) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+1,k2)
               aa_8(4) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+2,k2)

               !- TRAJECTORY
               !- ---------- 
               dd_m_8(1) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2-1,k2+3)
               dd_m_8(2) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2,  k2+3)
               dd_m_8(3) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+1,k2+3)
               dd_m_8(4) = INT_CUB_I1(F_in_m,pp_m_8,i2,j2+2,k2+3)

               !- TLM 
               !- --- 
               dd_8(1) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2-1,k2+3)
               dd_8(2) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2,  k2+3)
               dd_8(3) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+1,k2+3)
               dd_8(4) = INT_CUB_I1_tl(F_in,pp_8,F_in_m,pp_m_8,i2,j2+2,k2+3)

            endif

            !- y interpolation
            !- ---------------

            ra_8 = adx_bsy_8(jj-1)
            rb_8 = adx_bsy_8(jj  )
            rc_8 = adx_bsy_8(jj+1)
            rd_8 = adx_bsy_8(jj+2)

            !- TRAJECTORY
            !- ---------- 
            pp_m_8(1) = TRIPROD(rrj_m_8,rb_8,rc_8,rd_8) * adx_yabcd_8(jj)
            pp_m_8(2) = TRIPROD(rrj_m_8,ra_8,rc_8,rd_8) * adx_ybacd_8(jj)
            pp_m_8(3) = TRIPROD(rrj_m_8,ra_8,rb_8,rd_8) * adx_ycabd_8(jj)
            pp_m_8(4) = TRIPROD(rrj_m_8,ra_8,rb_8,rc_8) * adx_ydabc_8(jj)

            !- TLM 
            !- --- 
            pp_8(1) = TRIPROD_tl(rrj_8,rrj_m_8,rb_8,rc_8,rd_8) * adx_yabcd_8(jj)
            pp_8(2) = TRIPROD_tl(rrj_8,rrj_m_8,ra_8,rc_8,rd_8) * adx_ybacd_8(jj)
            pp_8(3) = TRIPROD_tl(rrj_8,rrj_m_8,ra_8,rb_8,rd_8) * adx_ycabd_8(jj)
            pp_8(4) = TRIPROD_tl(rrj_8,rrj_m_8,ra_8,rb_8,rc_8) * adx_ydabc_8(jj)

            !- TLM 
            !- --- 
            bb_8(1) = pp_8  (1)*bb_m_8(1) + pp_8  (2)*bb_m_8(2) + pp_8  (3)*bb_m_8(3) + pp_8  (4)*bb_m_8(4) + &
                      pp_m_8(1)*bb_8  (1) + pp_m_8(2)*bb_8  (2) + pp_m_8(3)*bb_8  (3) + pp_m_8(4)*bb_8  (4)
            cc_8(1) = pp_8  (1)*cc_m_8(1) + pp_8  (2)*cc_m_8(2) + pp_8  (3)*cc_m_8(3) + pp_8  (4)*cc_m_8(4) + &
                      pp_m_8(1)*cc_8  (1) + pp_m_8(2)*cc_8  (2) + pp_m_8(3)*cc_8  (3) + pp_m_8(4)*cc_8  (4)

            !- TRAJECTORY
            !- ---------- 
            bb_m_8(1) = pp_m_8(1)*bb_m_8(1) + pp_m_8(2)*bb_m_8(2) + pp_m_8(3)*bb_m_8(3) + pp_m_8(4)*bb_m_8(4)
            cc_m_8(1) = pp_m_8(1)*cc_m_8(1) + pp_m_8(2)*cc_m_8(2) + pp_m_8(3)*cc_m_8(3) + pp_m_8(4)*cc_m_8(4)

            !- z interpolation
            !- --------------- 
            if (zcubic_L) then

               !- TLM 
               !- --- 
               aa_8(1) = pp_8  (1)*aa_m_8(1) + pp_8  (2)*aa_m_8(2) + pp_8  (3)*aa_m_8(3) + pp_8  (4)*aa_m_8(4) + &
                         pp_m_8(1)*aa_8  (1) + pp_m_8(2)*aa_8  (2) + pp_m_8(3)*aa_8  (3) + pp_m_8(4)*aa_8  (4)
               dd_8(1) = pp_8  (1)*dd_m_8(1) + pp_8  (2)*dd_m_8(2) + pp_8  (3)*dd_m_8(3) + pp_8  (4)*dd_m_8(4) + &
                         pp_m_8(1)*dd_8  (1) + pp_m_8(2)*dd_8  (2) + pp_m_8(3)*dd_8  (3) + pp_m_8(4)*dd_8  (4)

               !- TRAJECTORY
               !- ---------- 
               aa_m_8(1) = pp_m_8(1)*aa_m_8(1) + pp_m_8(2)*aa_m_8(2) + pp_m_8(3)*aa_m_8(3) + pp_m_8(4)*aa_m_8(4)
               dd_m_8(1) = pp_m_8(1)*dd_m_8(1) + pp_m_8(2)*dd_m_8(2) + pp_m_8(3)*dd_m_8(3) + pp_m_8(4)*dd_m_8(4)

               ra_8 = p_bsz_8(kk-1)
               rb_8 = p_bsz_8(kk  )
               rc_8 = p_bsz_8(kk+1)
               rd_8 = p_bsz_8(kk+2)

               !- TRAJECTORY
               !- ---------- 
               pp_m_8(1) = TRIPROD(rrk_m_8,rb_8,rc_8,rd_8) * p_zabcd_8(kk+1)
               pp_m_8(2) = TRIPROD(rrk_m_8,ra_8,rc_8,rd_8) * p_zbacd_8(kk+1)
               pp_m_8(3) = TRIPROD(rrk_m_8,ra_8,rb_8,rd_8) * p_zcabd_8(kk+1)
               pp_m_8(4) = TRIPROD(rrk_m_8,ra_8,rb_8,rc_8) * p_zdabc_8(kk+1)

               !- TLM 
               !- --- 
               pp_8(1) = TRIPROD_tl(rrk_8,rrk_m_8,rb_8,rc_8,rd_8) * p_zabcd_8(kk+1)
               pp_8(2) = TRIPROD_tl(rrk_8,rrk_m_8,ra_8,rc_8,rd_8) * p_zbacd_8(kk+1)
               pp_8(3) = TRIPROD_tl(rrk_8,rrk_m_8,ra_8,rb_8,rd_8) * p_zcabd_8(kk+1)
               pp_8(4) = TRIPROD_tl(rrk_8,rrk_m_8,ra_8,rb_8,rc_8) * p_zdabc_8(kk+1)

               !- TRAJECTORY
               !- ---------- 
               F_out_m(i,j,k) = pp_m_8(1)*aa_m_8(1) + pp_m_8(2)*bb_m_8(1) + pp_m_8(3)*cc_m_8(1) + pp_m_8(4)*dd_m_8(1)

               !- TLM 
               !- --- 
               F_out(i,j,k) = pp_8  (1)*aa_m_8(1) + pp_8  (2)*bb_m_8(1) + pp_8  (3)*cc_m_8(1) + pp_8  (4)*dd_m_8(1) + &
                              pp_m_8(1)*aa_8  (1) + pp_m_8(2)*bb_8  (1) + pp_m_8(3)*cc_8  (1) + pp_m_8(4)*dd_8  (1)

            else

               !- TRAJECTORY
               !- ---------- 
               pp_m_8(3) = (rrk_m_8-p_bsz_8(kk))*p_zbc_8(kk+1)
               pp_m_8(2) = 1. - pp_m_8(3)

               !- TLM 
               !- --- 
               pp_8(3) = (rrk_8)*p_zbc_8(kk+1)
               pp_8(2) = - pp_8(3)

               !- TRAJECTORY
               !- ---------- 
               F_out_m(i,j,k) = pp_m_8(2)*bb_m_8(1) + pp_m_8(3)*cc_m_8(1)

               !- TLM 
               !- -- 
               F_out(i,j,k) = pp_8  (2)*bb_m_8(1) + pp_8  (3)*cc_m_8(1) + &
                              pp_m_8(2)*bb_8  (1) + pp_m_8(3)*cc_8  (1)

            endif

            if (F_mono_L) then

               !- TRAJECTORY and TLM
               !- ------------------- 
               prmax_m = F_in_m(i2,j2,  k2+1) 
               prmax   = F_in  (i2,j2,  k2+1) 
               if (F_in_m(i2+1,j2 ,k2+1).gt.prmax_m) then
                  prmax_m = F_in_m(i2+1,j2,  k2+1) 
                  prmax   = F_in  (i2+1,j2,  k2+1) 
               endif
               if(F_in_m(i2  ,j2+1,k2+1).gt.prmax_m) then
                  prmax_m = F_in_m(i2  ,j2+1,k2+1) 
                  prmax   = F_in  (i2  ,j2+1,k2+1) 
               endif
               if(F_in_m(i2+1,j2+1,k2+1).gt.prmax_m) then
                  prmax_m = F_in_m(i2+1,j2+1,k2+1) 
                  prmax   = F_in  (i2+1,j2+1,k2+1) 
               endif
               if(F_in_m(i2  ,j2  ,k2+2).gt.prmax_m) then
                  prmax_m = F_in_m(i2  ,j2  ,k2+2) 
                  prmax   = F_in  (i2  ,j2  ,k2+2) 
               endif
               if(F_in_m(i2+1,j2  ,k2+2).gt.prmax_m) then
                  prmax_m = F_in_m(i2+1,j2  ,k2+2) 
                  prmax   = F_in  (i2+1,j2  ,k2+2) 
               endif
               if(F_in_m(i2  ,j2+1,k2+2).gt.prmax_m) then
                  prmax_m = F_in_m(i2  ,j2+1,k2+2) 
                  prmax   = F_in  (i2  ,j2+1,k2+2) 
               endif
               if(F_in_m(i2+1,j2+1,k2+2).gt.prmax_m) then
                  prmax_m = F_in_m(i2+1,j2+1,k2+2) 
                  prmax   = F_in  (i2+1,j2+1,k2+2) 
               endif

               prmin_m = F_in_m(i2,j2,  k2+1)
               prmin   = F_in  (i2,j2,  k2+1)
               if (F_in_m(i2+1,j2 ,k2+1).lt.prmin_m) then
                  prmin_m = F_in_m(i2+1,j2,  k2+1)
                  prmin   = F_in  (i2+1,j2,  k2+1)
               endif
               if(F_in_m(i2  ,j2+1,k2+1).lt.prmin_m) then
                  prmin_m = F_in_m(i2  ,j2+1,k2+1)
                  prmin   = F_in  (i2  ,j2+1,k2+1)
               endif
               if(F_in_m(i2+1,j2+1,k2+1).lt.prmin_m) then
                  prmin_m = F_in_m(i2+1,j2+1,k2+1)
                  prmin   = F_in  (i2+1,j2+1,k2+1)
               endif
               if(F_in_m(i2  ,j2  ,k2+2).lt.prmin_m) then
                  prmin_m = F_in_m(i2  ,j2  ,k2+2)
                  prmin   = F_in  (i2  ,j2  ,k2+2)
               endif
               if(F_in_m(i2+1,j2  ,k2+2).lt.prmin_m) then
                  prmin_m = F_in_m(i2+1,j2  ,k2+2)
                  prmin   = F_in  (i2+1,j2  ,k2+2)
               endif
               if(F_in_m(i2  ,j2+1,k2+2).lt.prmin_m) then
                  prmin_m = F_in_m(i2  ,j2+1,k2+2)
                  prmin   = F_in  (i2  ,j2+1,k2+2)
               endif
               if(F_in_m(i2+1,j2+1,k2+2).lt.prmin_m) then
                  prmin_m = F_in_m(i2+1,j2+1,k2+2)
                  prmin   = F_in  (i2+1,j2+1,k2+2)
               endif

               !- TRAJECTORY and TLM
               !- ------------------- 
               if(F_out_m(i,j,k).gt.prmax_m) then
                  F_out_m(i,j,k) = prmax_m
                  F_out  (i,j,k) = prmax
               endif
               if(F_out_m(i,j,k).lt.prmin_m) then
                  F_out_m(i,j,k) = prmin_m
                  F_out  (i,j,k) = prmin
               endif

            endif

         enddo
      enddo
   enddo
   !---------------------------------------------------------------------
   return
end subroutine adx_tricub_lag3d3_tl
