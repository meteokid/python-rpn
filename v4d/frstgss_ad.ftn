***s/r frstgss_ad - ADJ of frstgss 
*
#include "model_macros_f.h"
*
      subroutine frstgss_ad ()
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - introduce Lun_debug_L 
* v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
* v3_21 - Tanguay M.        - Revision Openmp
*
*object
*    see id section
*	
*arguments
*    none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cori.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer pnerr, pnlkey1(12),pnlod
      integer i, j, k
*
      real*8, parameter :: ZERO_8 = 0.0
*     ______________________________________________________
*
      if (Lun_debug_L) write (Lun_out,1000)
*
      pnlod=0
      if ( Cori_cornl_L ) then
         pnlkey1(pnlod+1) = VMM_KEY(ut0)
         pnlkey1(pnlod+2) = VMM_KEY(vt0)
         pnlkey1(pnlod+3) = VMM_KEY(ut1)
         pnlkey1(pnlod+4) = VMM_KEY(vt1)
         pnlod=pnlod+4
      endif
      if ( .not. Schm_cptop_L .or. .not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(fipt0)
         pnlkey1(pnlod+2) = VMM_KEY(fipt1)
         pnlod = pnlod+2
      endif
      if ( .not. Schm_hydro_L ) then
         pnlkey1(pnlod+1) = VMM_KEY(mut0)
         pnlkey1(pnlod+2) = VMM_KEY(mut1)
         pnlod = pnlod+2
      endif
      pnerr = vmmlod(pnlkey1,pnlod)
*
      if ( .not. Schm_hydro_L ) then
         pnerr = VMM_GET_VAR(mut0)
         pnerr = VMM_GET_VAR(mut1)
!$omp parallel do
         do k=1,l_nk
         do j= 1 , l_nj
         do i= 1 , l_ni
            mut1(i,j,k) = mut0(i,j,k) + mut1(i,j,k)
            mut0(i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp end parallel do
      endif
*
      if ( .not. Schm_cptop_L .or. .not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(fipt0)
         pnerr = VMM_GET_VAR(fipt1)
!$omp parallel do
         do k=1,l_nk
         do j= 1 , l_nj
         do i= 1 , l_ni
            fipt1(i,j,k) = fipt0(i,j,k) + fipt1(i,j,k) 
            fipt0(i,j,k) = ZERO_8
         end do
         end do
         end do
!$omp end parallel do
      endif
*
      if ( Cori_cornl_L ) then
         pnerr = VMM_GET_VAR(ut0)
         pnerr = VMM_GET_VAR(ut1)
         pnerr = VMM_GET_VAR(vt0)
         pnerr = VMM_GET_VAR(vt1)
!$omp parallel do
         do k=1,l_nk
         do j= 1 , l_nj
         do i= 1 , l_ni
            vt1(i,j,k) = vt0(i,j,k) + vt1(i,j,k)
            vt0(i,j,k) = ZERO_8 
            ut1(i,j,k) = ut0(i,j,k) + ut1(i,j,k)
            ut0(i,j,k) = ZERO_8 
         end do
         end do
         end do
!$omp end parallel do
      endif
*
      pnerr = vmmuld(-1,0)
*
      pnlkey1(1) = VMM_KEY(qt0)
      pnlkey1(2) = VMM_KEY(tpt0)
      pnlkey1(3) = VMM_KEY(pipt0)
      pnlkey1(4) = VMM_KEY(tplt0)
      pnlkey1(5) = VMM_KEY(st0)
      pnlkey1(6) = VMM_KEY(qt1)
      pnlkey1(7) = VMM_KEY(tpt1)
      pnlkey1(8) = VMM_KEY(pipt1)
      pnlkey1(9) = VMM_KEY(tplt1)
      pnlkey1(10) = VMM_KEY(st1)
*
      pnlod=10
      pnerr = vmmlod(pnlkey1,pnlod)

      pnerr = VMM_GET_VAR(qt0)
      pnerr = VMM_GET_VAR(tpt0)
      pnerr = VMM_GET_VAR(pipt0)
      pnerr = VMM_GET_VAR(tplt0)
      pnerr = VMM_GET_VAR(st0)
      pnerr = VMM_GET_VAR(qt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(st1)
*
!$omp parallel
*
!$omp do 
      do j= 1 , l_nj
      do i= 1 , l_ni
         st1  (i,j) = st0  (i,j) + st1  (i,j)
         st0  (i,j) = ZERO_8 
      end do
      end do
!$omp end do 
*
!$omp do 
      do k=1,l_nk
      do j= 1 , l_nj
      do i= 1 , l_ni
         tplt1(i,j,k)= tplt0(i,j,k)+ tplt1(i,j,k)
         tplt0(i,j,k)= ZERO_8 
         pipt1(i,j,k)= pipt0(i,j,k)+ pipt1(i,j,k)
         pipt0(i,j,k)= ZERO_8 
         tpt1 (i,j,k)= tpt0 (i,j,k)+ tpt1 (i,j,k)
         tpt0 (i,j,k)= ZERO_8 
         qt1  (i,j,k)= qt0  (i,j,k)+ qt1  (i,j,k)
         qt0  (i,j,k)= ZERO_8 
      end do
      end do
      end do
!$omp end do 
*
!$omp end parallel 
*
      pnerr = vmmuld(-1,0)
*
1000  format(3X,' ADJ of FIRST GUESS: (S/R FRSTGSS_AD)')

      return
      end
