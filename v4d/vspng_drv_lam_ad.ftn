***s/r vspng_drv_lam_ad - ADJ of vspng_drv_lam_tl 
*
#include <model_macros_f.h>
*
      subroutine vspng_drv_lam_ad ( F_u   , F_v  , F_psd , F_tp , F_ip ,
     %                              F_td  , F_t  , F_it  , F_plt, F_q  ,
     %                              F_pip , F_w  , F_qp  , F_mu , F_mul, F_s, 
     %                              F_pipm, F_qpm, F_xfis, DIST_DIM,Nk)
*
#include "impnone.cdk"
*
      integer DIST_DIM, Nk
      real     F_u(DIST_SHAPE,Nk), F_v (DIST_SHAPE,Nk),
     %       F_psd(DIST_SHAPE,Nk), F_tp(DIST_SHAPE,Nk),
     %        F_ip(DIST_SHAPE,Nk), F_td(DIST_SHAPE,Nk),
     %         F_t(DIST_SHAPE,Nk), F_it(DIST_SHAPE,Nk),
     %       F_plt(DIST_SHAPE,Nk), F_q (DIST_SHAPE,Nk),
     %       F_pip(DIST_SHAPE,Nk), F_w (DIST_SHAPE,Nk),
     %        F_qp(DIST_SHAPE,Nk), F_mu(DIST_SHAPE,Nk),
     %       F_mul(DIST_SHAPE,Nk), F_s(DIST_SHAPE), F_xfis(DIST_SHAPE)
*
      real  F_pipm(DIST_SHAPE,Nk), F_qpm(DIST_SHAPE,Nk)
*
*author
*     M.Tanguay
*
*revision
* v3_03 - Tanguay M.        - initial MPI version
*
*object
*     see id section
*
*arguments
* 
*implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "vspng.cdk"
*
      integer i, j, k, nkspng
*
      real work(LDIST_SHAPE,Nk),work_m(LDIST_SHAPE,Nk)
*
      real*8 ZERO_8
      parameter (ZERO_8=0.0)
*     __________________________________________________________________
*
*     Zero adjoint variables
*     ----------------------
      do k=1,Nk
      do j=l_miny,l_maxy
      do i=l_minx,l_maxx
      work(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
*
*     Mass related fields
*     ~~~~~~~~~~~~~~~~~~~
         if (Vspng_uvwdt_L) then
            nkspng   = Vspng_nk
            Vspng_nk = 1
         endif
*
*     TRAJECTORY
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
            do k = 1, Vspng_nk
            do j=1, l_nj
            do i=1, l_ni
*
               work_m(i,j,k) = F_pipm(i,j,k)
*
            end do
            end do
            end do
         endif
*
*****************************
*  3. Nonyhydrostatic model * 
*****************************
*
         if ( .not. Schm_hydro_L ) then
*
         if ( Schm_difqp_L ) then ! q' & related variables
*
*        ----------------
*        START TRAJECTORY
*        ----------------
*        Indirect diffusion of q'
*        ~~~~~~~~~~~~~~~~~~~~~~~~
         do k=1, Vspng_nk
         do j=1, l_nj
         do i=1, l_ni
*
            work_m(i,j,k) = ( Geomg_z_8(k) + dble(work_m(i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) )
*
         end do
         end do
         end do
*
*        TRAJECTORY
*        ----------
         call vspng_lam ( work_m, LDIST_DIM, l_ni, l_nj)
*
*        --------------
*        END TRAJECTORY
*        --------------
*
*        START ADJOINT CALCULATIONS
*        --------------------------
         do k=1, Vspng_nk
            do j=1+pil_s, l_nj-pil_n
            do i=1+pil_w, l_ni-pil_e
*
            work  (i,j,k) = ( dble(F_qp(i,j,k)  )*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) )
     %                     /( dble(work_m(i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) ) + work  (i,j,k)
            F_pip (i,j,k) = (-dble(work_m(i,j,k))*(                dble(F_qp  (i,j,k))) )
     %                     /( dble(work_m(i,j,k))*( Geomg_z_8(k) + dble(F_pipm(i,j,k))) ) + F_pip (i,j,k)
            F_qp  (i,j,k) = ZERO_8
*
            end do
            end do
         end do
*
         call vspng_lam_ad ( work, LDIST_DIM, l_ni, l_nj)
*
*        ADJ of
*        Indirect diffusion of q'
*        ~~~~~~~~~~~~~~~~~~~~~~~~
         do k=1, Vspng_nk
         do j=1, l_nj
         do i=1, l_ni
*
            F_qp(i,j,k) = ( Geomg_z_8(k) + dble(work_m(i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) ) * dble(work(i,j,k)) + F_qp(i,j,k)
*
            work(i,j,k) = (                dble(work  (i,j,k)) )
     %                       *exp( dble(F_qpm(i,j,k)) )
*
         end do
         end do
         end do
*
         call vspng_lam_ad ( F_mul, LDIST_DIM, l_ni, l_nj)
         call vspng_lam_ad (  F_mu, LDIST_DIM, l_ni, l_nj)
*
*        END ADJOINT CALCULATIONS
*        ------------------------
         endif
*
*     ADJ of 
*     Vertical wind (physical) 
*     ~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_lam_ad ( F_w, LDIST_DIM, l_ni, l_nj)
*
         endif         
*
*     ADJ of
*     The hydrostatic pressure: pi'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         call vspng_lam_ad ( F_pip, LDIST_DIM, l_ni, l_nj)
*
*     ADJ of
*     Save pi' for the diffusion of q'
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if ( (.not.Schm_hydro_L) .and. Schm_difqp_L ) then
            do k = 1, Vspng_nk
            do j=1, l_nj
            do i=1, l_ni
*
               F_pip(i,j,k) = work(i,j,k) + F_pip(i,j,k)
                work(i,j,k) = ZERO_8
*
            end do
            end do
            end do
         endif
*
* ADJ of
* updating phi' at the top
*
         do j=1+pil_s, l_nj-pil_n
         do i=1+pil_w, l_ni-pil_e
            F_it(i,j,1) = F_ip(i,j,1) + F_it(i,j,1)
            F_ip(i,j,1) = ZERO_8
         end do
         end do
*
         do k = 2, Vspng_nk
         do j=1+pil_s, l_nj-pil_n
         do i=1+pil_w, l_ni-pil_e
           F_ip(i,j,k) = F_it(i,j,k) + F_ip(i,j,k)
           F_it(i,j,k) = ZERO_8
         end do
         end do
         end do
*
         call vspng_lam_ad ( F_it, LDIST_DIM, l_ni, l_nj)
         call vspng_lam_ad ( F_ip, LDIST_DIM, l_ni, l_nj)
*
         if (Vspng_uvwdt_L) Vspng_nk = nkspng
*
*     ADJ of
*     The temperature: T', T'lin & hence T
*     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do k=1, Vspng_nk
         do j=1+pil_s, l_nj-pil_n
         do i=1+pil_w, l_ni-pil_e
            F_tp(i,j,k) = F_t(i,j,k) + F_tp(i,j,k)
            F_t (i,j,k) = ZERO_8
         end do
         end do
         end do
*
         call vspng_lam_ad ( F_plt, LDIST_DIM, l_ni, l_nj)
         call vspng_lam_ad (  F_tp, LDIST_DIM, l_ni, l_nj)
*
*        ADJ of
*        Total divergence 
*        ~~~~~~~~~~~~~~~~
         call vspng_lam_ad ( F_td, LDIST_DIM, l_ni, l_nj)
*
*        ADJ of
*        Vertical motion
*        ~~~~~~~~~~~~~~~
         call vspng_lam_ad ( F_psd, LDIST_DIM, l_ni, l_nj)
*
*     ADJ
*     Momentum
*     ~~~~~~~~
         call vspng_lam_ad ( F_v, LDIST_DIM, l_ni , l_njv)
         call vspng_lam_ad ( F_u, LDIST_DIM, l_niu, l_nj )
*
*     __________________________________________________________________
*
      return
      end
