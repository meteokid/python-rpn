***s/r vspng_main - TLM of vspng_main 
*
#include <model_macros_f.h>
*
      subroutine vspng_main_tl
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_21 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - change name 
* v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ
*
*object
*     see id section
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "vspng.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "p_geof.cdk"
#include "vt1m.cdk"
#include "vtxm.cdk"
#include "v4dr.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer pnerr, pnlod, pnlkey1(40), i, j, k
      real*8  ONE_8
      parameter( ONE_8 = 1. )
*
*     ______________________________________________________
*
      if (Vspng_nk.lt.1) return
*
      if (Schm_psadj_L ) call gem_stop('vspng_main_tl',-1)
*     ______________________________________________________
*
      pnlkey1(1)  = VMM_KEY(ut1)
      pnlkey1(2)  = VMM_KEY(vt1)
      pnlkey1(3)  = VMM_KEY(psdt1)
      pnlkey1(4)  = VMM_KEY(tpt1)
      pnlkey1(5)  = VMM_KEY(fipt1)
      pnlkey1(6)  = VMM_KEY(tdt1)
      pnlkey1(7)  = VMM_KEY(tt1)
      pnlkey1(8)  = VMM_KEY(fit1)
      pnlkey1(9)  = VMM_KEY(topo)
      pnlkey1(10) = VMM_KEY(tplt1)
      pnlkey1(11) = VMM_KEY(qt1)
      pnlkey1(12) = VMM_KEY(pipt1)
      pnlkey1(13) = VMM_KEY(st1)
      pnlod = 13
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(wt1)
         pnlkey1(pnlod+2) = VMM_KEY(qpt1)
         pnlkey1(pnlod+3) = VMM_KEY(mut1)
         pnlkey1(pnlod+4) = VMM_KEY(multx)
         pnlod = pnlod+4
      endif
*
*     TRAJECTORY
*     ----------
      pnlkey1(pnlod+1)  = VMM_KEY(ut1m)
      pnlkey1(pnlod+2)  = VMM_KEY(vt1m)
      pnlkey1(pnlod+3)  = VMM_KEY(psdt1m)
      pnlkey1(pnlod+4)  = VMM_KEY(tpt1m)
      pnlkey1(pnlod+5)  = VMM_KEY(fipt1m)
      pnlkey1(pnlod+6)  = VMM_KEY(tdt1m)
      pnlkey1(pnlod+7)  = VMM_KEY(tt1m)
      pnlkey1(pnlod+8)  = VMM_KEY(fit1m)
      pnlkey1(pnlod+9)  = VMM_KEY(tplt1m)
      pnlkey1(pnlod+10) = VMM_KEY(qt1m)
      pnlkey1(pnlod+11) = VMM_KEY(pipt1m)
      pnlkey1(pnlod+12) = VMM_KEY(st1m)
      pnlod = pnlod+12
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(wt1m)
         pnlkey1(pnlod+2) = VMM_KEY(qpt1m)
         pnlkey1(pnlod+3) = VMM_KEY(mut1m)
         pnlkey1(pnlod+4) = VMM_KEY(multxm)
         pnlod = pnlod+4
      endif
*
*     - - - - - - - - - - - - - - -
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(psdt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(fipt1)
      pnerr = VMM_GET_VAR(tdt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(fit1)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(qt1)
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(st1)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(wt1)
         pnerr = VMM_GET_VAR(qpt1)
         pnerr = VMM_GET_VAR(mut1)
         pnerr = VMM_GET_VAR(multx)
      else
         wt1_  = 0
         qpt1_ = 0
         mut1_ = 0
         multx_= 0
      endif
*
*     TRAJECTORY
*     ----------
      pnerr = VMM_GET_VAR(ut1m)
      pnerr = VMM_GET_VAR(vt1m)
      pnerr = VMM_GET_VAR(psdt1m)
      pnerr = VMM_GET_VAR(tpt1m)
      pnerr = VMM_GET_VAR(fipt1m)
      pnerr = VMM_GET_VAR(tdt1m)
      pnerr = VMM_GET_VAR(tt1m)
      pnerr = VMM_GET_VAR(fit1m)
      pnerr = VMM_GET_VAR(tplt1m)
      pnerr = VMM_GET_VAR(qt1m)
      pnerr = VMM_GET_VAR(pipt1m)
      pnerr = VMM_GET_VAR(st1m)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(wt1m)
         pnerr = VMM_GET_VAR(qpt1m)
         pnerr = VMM_GET_VAR(mut1m)
         pnerr = VMM_GET_VAR(multxm)
      else
         wt1m_  = 0
         qpt1m_ = 0
         mut1m_ = 0
         multxm_= 0
      endif
*
      if (G_lam) then
         if (Lun_debug_L) write (Lun_out,1001) Vspng_nk
         call vspng_drv_lam_tl ( ut1  , vt1  , psdt1 , tpt1 , fipt1 , tdt1 ,
     %                           tt1  , fit1 , tplt1 , qt1  , pipt1 , wt1  ,
     %                           qpt1 , mut1 , multx , st1  , 
     %                           ut1m , vt1m , psdt1m, tpt1m, fipt1m, tdt1m,
     %                           tt1m , fit1m, tplt1m, qt1m , pipt1m, wt1m ,
     %                           qpt1m, mut1m, multxm, st1m , topo  ,
     %                           LDIST_DIM, G_nk )
      else
         if (Lun_debug_L) write (Lun_out,1000) Vspng_nk
         call vspng_drv_tl ( ut1  , vt1  , psdt1 , tpt1 , fipt1 , tdt1 ,
     %                       tt1  , fit1 , tplt1 , qt1  , pipt1 , wt1  ,
     %                       qpt1 , mut1 , multx , st1  , 
     %                       ut1m , vt1m , psdt1m, tpt1m, fipt1m, tdt1m,
     %                       tt1m , fit1m, tplt1m, qt1m , pipt1m, wt1m ,
     %                       qpt1m, mut1m, multxm, st1m , topo  ,
     %                       LDIST_DIM, G_nk )
      endif
*
!$omp parallel
*
      if (Cstv_phidf_8.gt.0.) then
*
***********************************************
*  $. Indirect diffusion of s & q through pi' *
***********************************************
*
      if(V4dr_redotr_L) then
!$omp do
      do j= 1+pil_s, l_nj-pil_n
      do i= 1+pil_w, l_ni-pil_e
*
*        TRAJECTORY
*        ----------
         st1m(i,j)= log(ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
*
      end do
      end do
!$omp enddo
      endif
*
!$omp do
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        TLM
*        ---
         st1(i,j)= (      dble(pipt1 (i,j,G_nk)/geomg_pib(G_nk)))/
     %             (ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
*
      end do
      end do
!$omp enddo
*
      if(V4dr_redotr_L) then
!$omp do
      do k=1,G_nk
      do j= 1+pil_s, l_nj-pil_n
      do i= 1+pil_w, l_ni-pil_e
*
*        TRAJECTORY
*        ----------
         qt1m(i,j,k) = log( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
*
      end do
      end do
      end do
!$omp enddo
      endif
*
!$omp do
      do k=1,G_nk
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        TLM
*        ---
         qt1(i,j,k) = ( dble(pipt1(i,j,k)) ) /
     %                ( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
*
      end do
      end do
      end do
!$omp enddo
*
      if ( .not. Schm_hydro_L ) then
*
      if(V4dr_redotr_L) then
!$omp do
         do k=1,G_nk
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
*
*           TRAJECTORY
*           ----------
            qt1m(i,j,k) = qt1m(i,j,k) + qpt1m(i,j,k)
*
         end do
         end do
         end do
!$omp enddo
      endif
*
!$omp do
         do k=1,G_nk
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
*
*           TLM
*           ---
            qt1(i,j,k) = qt1(i,j,k) + qpt1(i,j,k)
*
         end do
         end do
         end do
!$omp enddo
      endif
*
      endif
!$omp end parallel
*
      pnerr = vmmuld(-1,0)
*    
 1000 format(/,3X,
     $ 'TLM of DEL-2 SPONGE LAYER ON TOP ',I3,' LAYERS: (S/R VSPNG_DRV_TL)')
 1001 format(/,3X,
     $ 'TLM of 9PT FILT SPONGE LAYER ON TOP ',I3,' LAYERS: (S/R VSPNG_DRV_LAM_TL)')
*
      return
      end
