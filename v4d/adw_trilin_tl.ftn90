!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/p adw_trilin_tl - TLM of adw_trilin 
!
#include "model_macros_f.h"
!
      subroutine adw_trilin_tl ( F_out   , F_in    ,                  & 
                                 F_capx  , F_capy  , F_capz  ,        & 
                                 F_out_m , F_in_m  , F_dt    , F_n_m, &
                                 F_capx_m, F_capy_m, F_capz_m,        & 
                                 F_num,i0,in,j0,jn,kn)
!
      implicit none
!
      integer F_num, F_n_m(F_num),i0,in,j0,jn,kn
!
      real F_dt, F_in(*),F_in_m(*)
!
      real F_out  (F_num), F_capx  (F_num), F_capy  (F_num), F_capz  (F_num)
      real F_out_m(F_num), F_capx_m(F_num), F_capy_m(F_num), F_capz_m(F_num)
!
!     @author monique tanguay
!     @revisions
!     v4_XX - Tanguay M.        - Adjustments GEM413
!
!object
!     see id section
!
!arguments
!______________________________________________________________________
!              |                                                 |     |
! NAME         | DESCRIPTION                                     | I/O |
!--------------|-------------------------------------------------|-----|
!              |                                                 |     |
! F_out        | F_dt * result of interpolation                  |  o  |
! F_in         | field to interpolate                            |  i  |
!              |                                                 |     |
! F_dt         | multiplicative constant (1.0 or timestep lenght)|  i  |
!              |                                                 |     |
! F_n          | positions in the 3D volume of interpolation     |  i  |
!              | boxes                                           |     |
!              |                                                 |     |
! F_capx       | \                                               |  i  |
! F_capy       |   precomputed displacements                     |  i  |
! F_capz       | / along the x,y,z directions                    |  i  |
!              |                                                 |     |
! F_num        | number of points to interpolate                 |  i  |
!______________|_________________________________________________|_____|
!
!implicits
#include "glb_ld.cdk"
!      integer l_ni, l_nj
#include "adw.cdk"
!      integer             Adw_nit, Adw_njt
!***********************************************************************
      integer n, nijag, nij, o1, o2, i, j, k
!
      real*8 prf1  , prf2  , prf3  , prf4
      real*8 prf1_m, prf2_m, prf3_m, prf4_m
!
      nijag = Adw_nit * Adw_njt
      nij = l_ni*l_nj
!
      do 100 k=1,kn
      do  90 j=j0,jn
      do  80 i=i0,in
!
      n = (k-1)*nij + ((j-1)*l_ni) + i
      o1 = F_n_m(n)
      o2 = F_n_m(n) + Adw_nit

!***********************************************************************
!     x interpolation
!***********************************************************************
!
!     TLM
!     ---
      prf1 = (1.0 - F_capx_m(n)) * F_in(o1) + F_capx_m(n) * F_in(o1+1) + (F_in_m(o1+1)-F_in_m(o1))*F_capx(n)
      prf2 = (1.0 - F_capx_m(n)) * F_in(o2) + F_capx_m(n) * F_in(o2+1) + (F_in_m(o2+1)-F_in_m(o2))*F_capx(n)
!
!     TRAJECTORY
!     ----------
      prf1_m = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
      prf2_m = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)
!
      o1 = o1 + nijag
      o2 = o2 + nijag
!
!     TLM
!     ---
      prf3 = (1.0 - F_capx_m(n)) * F_in(o1) + F_capx_m(n) * F_in(o1+1) + (F_in_m(o1+1)-F_in_m(o1))*F_capx(n)
      prf4 = (1.0 - F_capx_m(n)) * F_in(o2) + F_capx_m(n) * F_in(o2+1) + (F_in_m(o2+1)-F_in_m(o2))*F_capx(n)
!
!     TRAJECTORY
!     ----------
      prf3_m = (1.0 - F_capx_m(n)) * F_in_m(o1) + F_capx_m(n) * F_in_m(o1+1)
      prf4_m = (1.0 - F_capx_m(n)) * F_in_m(o2) + F_capx_m(n) * F_in_m(o2+1)
!
!***********************************************************************
!     y interpolation
!***********************************************************************
!
!     TLM
!     ---
      prf1 = (1.0 - F_capy_m(n)) * prf1 + F_capy_m(n)  * prf2 + (prf2_m-prf1_m)*F_capy(n)
      prf2 = (1.0 - F_capy_m(n)) * prf3 + F_capy_m(n)  * prf4 + (prf4_m-prf3_m)*F_capy(n)
!
!     TRAJECTORY
!     ----------
      prf1_m = (1.0 - F_capy_m(n)) * prf1_m + F_capy_m(n)  * prf2_m
      prf2_m = (1.0 - F_capy_m(n)) * prf3_m + F_capy_m(n)  * prf4_m

!***********************************************************************
!     z interpolation
!***********************************************************************
!
!     TLM
!     ---
      F_out(n) = ( (1.0 - F_capz_m(n)) * prf1 + F_capz_m(n) * prf2 + (prf2_m - prf1_m) * F_capz(n) ) * F_dt
!
!     TRAJECTORY
!     ----------
      F_out_m(n) = ( (1.0 - F_capz_m(n)) * prf1_m + F_capz_m(n)  * prf2_m ) * F_dt
!
   80 continue
   90 continue
  100 continue
!
      return
      end
