!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r vspng_main_ad - ADJ of vspng_main_tl 
*
#include "model_macros_f.h"
*
      subroutine vspng_main_ad
*
      implicit none
*
*author
*     M.Tanguay
*
*revision
* v2_21 - Tanguay M.        - initial MPI version
* v2_30 - Edouard S.        - replace Schm_elast_L by Schm_cptop_L
* v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
*                           - change name 
* v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
* v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
* v3_31 - Tanguay M.        - add rwnd_L 
*
*object
*     see id section
*     -------------------------------------------------------------
*     REMARK:INPUT TRAJ:pipt1m after VSPNG diffusion
*                       pipt1m,qpt1m before VSPNG diffusion (NoHyd)
*     -------------------------------------------------------------
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "vspng.cdk"
#include "vt1.cdk"
#include "vtx.cdk"
#include "p_geof.cdk"
#include "vt1m.cdk"
*
*modules
      integer  vmmlod,vmmuld,vmmget
      external vmmlod,vmmuld,vmmget
*
      integer pnerr, pnlod, pnlod_m, pnlkey1(30), pnlkey1_m(2), i, j, k
      real zpipt1m(LDIST_SHAPE,l_nk),zqpt1m(LDIST_SHAPE,l_nk)
      real*8  ONE_8,ZERO_8
      parameter( ONE_8 = 1. )
      parameter( ZERO_8= 0. )
*
*     ______________________________________________________
*
      if (Vspng_nk.lt.1) return
*
      if (Schm_psadj_L ) call gem_stop('vspng_main_ad',-1)
*     ______________________________________________________
*
*
*     Get fields in memory
*     --------------------
      pnlkey1(1)  = VMM_KEY(ut1)
      pnlkey1(2)  = VMM_KEY(vt1)
      pnlkey1(3)  = VMM_KEY(psdt1)
      pnlkey1(4)  = VMM_KEY(tpt1)
      pnlkey1(5)  = VMM_KEY(fipt1)
      pnlkey1(6)  = VMM_KEY(tdt1)
      pnlkey1(7)  = VMM_KEY(tt1)
      pnlkey1(8)  = VMM_KEY(fit1)
      pnlkey1(9)  = VMM_KEY(topo)
      pnlkey1(10) = VMM_KEY(tplt1)
      pnlkey1(11) = VMM_KEY(qt1)
      pnlkey1(12) = VMM_KEY(pipt1)
      pnlkey1(13) = VMM_KEY(st1)
      pnlod = 13
      if (.not. Schm_hydro_L) then
         pnlkey1(pnlod+1) = VMM_KEY(wt1)
         pnlkey1(pnlod+2) = VMM_KEY(qpt1)
         pnlkey1(pnlod+3) = VMM_KEY(mut1)
         pnlkey1(pnlod+4) = VMM_KEY(multx)
         pnlod = pnlod+4
      endif
*
*     - - - - - - - - - - - - - - -
      pnerr = vmmlod(pnlkey1,pnlod)
*     - - - - - - - - - - - - - - -
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(psdt1)
      pnerr = VMM_GET_VAR(tpt1)
      pnerr = VMM_GET_VAR(fipt1)
      pnerr = VMM_GET_VAR(tdt1)
      pnerr = VMM_GET_VAR(tt1)
      pnerr = VMM_GET_VAR(fit1)
      pnerr = VMM_GET_VAR(topo)
      pnerr = VMM_GET_VAR(tplt1)
      pnerr = VMM_GET_VAR(qt1)
      pnerr = VMM_GET_VAR(pipt1)
      pnerr = VMM_GET_VAR(st1)
      if (.not. Schm_hydro_L) then
         pnerr = VMM_GET_VAR(wt1)
         pnerr = VMM_GET_VAR(qpt1)
         pnerr = VMM_GET_VAR(mut1)
         pnerr = VMM_GET_VAR(multx)
      else
         wt1_  = 0
         qpt1_ = 0
         mut1_ = 0
         multx_= 0
      endif
*
*     Note: iw2rwnd_ad = iw2rwnd 
*     --------------------------
      if (Vspng_rwnd_L) call iw2rwnd ( ut1, vt1, LDIST_DIM, G_nk, 2 )
*
*     -----------------------------------------------------
*     WHEN .not.Schm_hydro_L
*          Preserve TRAJ PIPT1,QPT1M before VSPNG diffusion
*          Diffuse  TRAJ PIPT1,QPT1M
*     -----------------------------------------------------
*     WHEN Schm_hydro_L, TRAJ PIPT1 after VSPNG diffusion
*                        is already available in V4D_RWTRAJ
*     -----------------------------------------------------
      if(.not.Schm_hydro_L) then
*
         pnlkey1_m(1)= VMM_KEY(pipt1m)
         pnlkey1_m(2)= VMM_KEY(qpt1m )
         pnlod_m=2
*
         pnerr = vmmlod(pnlkey1_m,pnlod_m)
*
         pnerr = VMM_GET_VAR(pipt1m)
         pnerr = VMM_GET_VAR(qpt1m )
*
*        Preserve TRAJ PIPT1,QPT1M before VSPNG diffusion
*        ------------------------------------------------
!$omp parallel do
         do k=1,l_nk
         do j=1,l_nj
         do i=1,l_ni
            zpipt1m(i,j,k) = pipt1m(i,j,k)
            zqpt1m (i,j,k) = qpt1m (i,j,k)
         enddo
         enddo
         enddo
!$omp end parallel do
*
         pnerr = vmmuld(pnlkey1_m,2)
*
*        Diffuse TRAJ PIPT1,QPT1M
*        ------------------------
         call vspng_main_tr()
*
      endif
*
*     Recall TRAJ PIPT1 after VSPNG diffusion
*     ---------------------------------------
      pnlkey1_m(1)= VMM_KEY(pipt1m)
      pnlod_m=1
*
      pnerr = vmmlod(pnlkey1_m,pnlod_m)
*
      pnerr = VMM_GET_VAR(pipt1m)
*
*     ADJ of
***********************************************
*  $. Indirect diffusion of s & q through pi' *
***********************************************
*
!$omp parallel
      if (Cstv_phidf_8.gt.0.) then
*
      if ( .not. Schm_hydro_L ) then
!$omp do 
         do k=1,G_nk
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
*
*           ADJ
*           ---
            qpt1(i,j,k) = qt1(i,j,k) + qpt1(i,j,k)
*
         end do
         end do
         end do
!$omp enddo 
      endif
*
!$omp do 
      do k=1,G_nk
      do j= 1+pil_s, l_nj-pil_n
      do i= 1+pil_w, l_ni-pil_e
*
*        ADJ 
*        ---
         pipt1(i,j,k) = sngl(
     %                ( dble(  qt1(i,j,k)) ) /
     %                ( Geomg_z_8(k) + dble(pipt1m(i,j,k)) )
     %                      ) + pipt1(i,j,k)
         qt1(i,j,k)   = ZERO_8
*
      end do
      end do
      end do
!$omp enddo 
*
!$omp do 
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
*
*        ADJ
*        ---
         pipt1 (i,j,G_nk) = ( dble(st1(i,j)        /geomg_pib(G_nk)))/
     %                 (ONE_8+dble(pipt1m(i,j,G_nk)/geomg_pib(G_nk)))
     %                 + pipt1 (i,j,G_nk)
         st1(i,j)         = ZERO_8
*
      end do
      end do
!$omp enddo 
*
      endif
!$omp end parallel
*
      pnerr = vmmuld(pnlkey1_m,1)
*
*     ---------------------------------------------------------
*     WHEN .not.Schm_hydro_L
*          Recall TRAJ PIPT1,QPT1 before VSPNG diffusion
*     ---------------------------------------------------------
*     WHEN Schm_hydro_L, TRAJ PIPT1,QPT1 before VSPNG diffusion
*                        are not requested
*     ---------------------------------------------------------
*
      if (.not. Schm_hydro_L) then
*
          pnlkey1_m(1)= VMM_KEY(pipt1m)
          pnlkey1_m(2)= VMM_KEY(qpt1m)
          pnlod_m=2
*
          pnerr = vmmlod(pnlkey1_m,pnlod_m)
*
          pnerr = VMM_GET_VAR(pipt1m)
          pnerr = VMM_GET_VAR(qpt1m )
*
!$omp parallel do
          do k=1,l_nk
          do j=1,l_nj
          do i=1,l_ni
             pipt1m(i,j,k) = zpipt1m(i,j,k)
             qpt1m (i,j,k) = zqpt1m (i,j,k)
          enddo
          enddo
          enddo
!$omp end parallel do
*
      else
          pipt1m_= 0
          qpt1m_ = 0
      endif
*
*     ADJ 
*     ---
      if (G_lam) then
         if (Lun_debug_L) write (Lun_out,1001) Vspng_nk
         call vspng_drv_lam_ad ( ut1   , vt1  , psdt1 , tpt1 , fipt1 , tdt1 ,
     %                           tt1   , fit1 , tplt1 , qt1  , pipt1 , wt1  ,
     %                           qpt1  , mut1 , multx , st1  ,
     %                           pipt1m, qpt1m, topo  ,
     %                           LDIST_DIM, G_nk )
      else
         if (Lun_debug_L) write (Lun_out,1000) Vspng_nk
         call vspng_drv_ad ( ut1   , vt1  , psdt1 , tpt1 , fipt1 , tdt1 ,
     %                       tt1   , fit1 , tplt1 , qt1  , pipt1 , wt1  ,
     %                       qpt1  , mut1 , multx , st1  ,
     %                       pipt1m, qpt1m, topo  ,
     %                       LDIST_DIM, G_nk )
      endif
*
*     Note: iw2rwnd_ad = iw2rwnd 
*     --------------------------
      if (Vspng_rwnd_L) call iw2rwnd ( ut1, vt1, LDIST_DIM, G_nk, 1 )
*
      pnerr = vmmuld(-1,0)
*    
 1000 format(/,3X,
     $ 'ADJ of DEL-2 SPONGE LAYER ON TOP ',I3,' LAYERS: (S/R VSPNG_DRV_AD)')
 1001 format(/,3X,
     $ 'ADJ of 9PT FILT SPONGE LAYER ON TOP ',I3,' LAYERS: (S/R VSPNG_DRV_LAM_AD)')
*
      return
      end
