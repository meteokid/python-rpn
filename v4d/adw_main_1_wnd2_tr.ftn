!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
***s/r adw_main_1_wnd_tr - Equivalent to adw_main_1_wnd for TRAJECTORY
*
#include "model_macros_f.h"
#include "msg.h"
*
      subroutine adw_main_1_wnd2_tr (F_su_m,F_sv_m,F_sw_m,um_m,vm_m,wm_m,ut_m,vt_m,wt_m,F_nit,F_njt,F_nk)
*
      implicit none
*
      integer F_nit, F_njt, F_nk
*
      real F_su_m(*),
     %     F_sv_m(*),
     %     F_sw_m(*)
      real um_m(F_nit,F_njt,F_nk), 
     %     vm_m(F_nit,F_njt,F_nk), 
     %     wm_m(F_nit,F_njt,F_nk), 
     %     ut_m(F_nit,F_njt,F_nk+1), 
     %     vt_m(F_nit,F_njt,F_nk+1),
     %     wt_m(F_nit,F_njt,F_nk+1)
*
*author
*     monique tanguay
*
*revision
* v2_31 - Tanguay M.        - initial MPI version
* v3_00 - Tanguay M.        - adapt to restructured adw_main
* v3_21 - Tanguay M.        - Revision Openmp
* v4_04 - Tanguay M.        - Staggered version TL/AD
* v4_10 - Tanguay M.        - Staggered version TL/AD updated
* v4_12 - Tanguay M.        - TL/AD Thermo upstream positions
*
*language
*     fortran 77
*
*object
*     see id section
*
*TRAJECTORY of
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
* F_nk         | number of levels                                |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "gmm.hf"
#include "var_gmm.cdk"
!      type(gmm_metadata) :: meta3d
!      integer :: gmmstat
#include "glb_ld.cdk"
!      logical G_lam, G_periodx, G_periody
!      integer G_ni
!      integer G_halox, G_haloy
!      logical l_north, l_south, l_east, l_west
!      integer l_ni, l_nj, l_niu, l_njv
!      integer l_minx, l_maxx, l_miny, l_maxy
#include "ver.cdk"
#include "adw.cdk"
!      integer adw_nic,adw_njc, adw_halox, adw_haloy
!      real*8 adw_cy_8(),adw_cx_8(),adw_sx_8(),adw_wx_8(),adw_sy_8()
#include "inuvl.cdk"
!      real*8 inuvl_wxux3_8(XDIST_SHAPE,4)
!      real*8 inuvl_wyvy3_8(YDIST_SHAPE,4)
#include "vth_m.cdk"
!      real, pointer, dimension (:,:,:) :: uth_m,vth_m,zdth_m
!      character(len=8) :: gmmk_uth_m_s, gmmk_vth_m_s, gmmk_zdth_m_s
#include "geomg.cdk"
*
      type(gmm_metadata) :: dummy_gmm_meta
*
      integer i, j, k, i0, in, j0, jn, n, dest_ni,istat
      real*8 ONE_8,sc_8,lag3_8,xx_8,x1_8,x2_8,x3_8,x4_8,w1_8,w2_8,w3_8,w4_8,den_8
      parameter( ONE_8 = 1.0 )
#define lag3_8(xx_8, x1_8, x2_8, x3_8, x4_8)  ((( xx_8 - x2_8 ) * ( xx_8 - x3_8 ) * ( xx_8 - x4_8 ))/( ( x1_8 - x2_8 ) * ( x1_8 - x3_8 ) * ( x1_8 - x4_8 )))
      real, dimension(LDIST_SHAPE,F_nk  ) :: workm_m
      real, dimension(LDIST_SHAPE,F_nk+1) :: wut_m,wvt_m
*
*     ---------------------------------------------------------------
*
      call msg(MSG_DEBUG,'TRAJ of PREPARE WINDS: (S/R ADW_MAIN_1_WND_TR)')
*
      istat = gmm_get(gmmk_uth_m_s,uth_m,dummy_gmm_meta)
      istat = min(istat,gmm_get(gmmk_vth_m_s,vth_m,dummy_gmm_meta))
      istat = min(istat,gmm_get(gmmk_zdth_m_s,zdth_m,dummy_gmm_meta))
      call handle_error(istat,'adw_main_1_wnd2_tr','gmm_get')
*
***********************************************************************
* Interpolate advection winds to geopotential grid
* um_m and vm_m are used as work space
***********************************************************************
*
      call rpn_comm_xch_halo (uth_m,LDIST_DIM,l_niu,l_nj, F_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
      call rpn_comm_xch_halo (vth_m,LDIST_DIM,l_ni,l_njv,F_nk,
     %             G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
*
!$omp parallel private(k,i0,in,j0,jn,sc_8,
!$omp& xx_8,x1_8,x2_8,x3_8,x4_8,w1_8,w2_8,w3_8,w4_8,den_8)
!$omp do
      do k=1,F_nk
*
         i0 = 1
         in = l_niu
         j0 = 1
         jn = l_nj
         if (G_lam) then
             if (l_west) i0 = 3
             if (l_east) in = l_niu - 1
         endif
         do j = j0, jn
         do i = i0, in
            um_m(i,j,k) =  inuvl_wxux3_8(i,1) * uth_m(i-2,j,k)
     %                   + inuvl_wxux3_8(i,2) * uth_m(i-1,j,k)
     %                   + inuvl_wxux3_8(i,3) * uth_m(i  ,j,k)
     %                   + inuvl_wxux3_8(i,4) * uth_m(i+1,j,k)
         enddo
         enddo
*
         i0 = 1
         in = l_ni
         jn = l_njv
         if (l_south) j0 = 3
         if (l_north) jn = l_njv - 1
         do j = j0, jn
         do i = i0, in
            vm_m(i,j,k) =  inuvl_wyvy3_8(j,1) * vth_m(i,j-2,k)
     %                   + inuvl_wyvy3_8(j,2) * vth_m(i,j-1,k)
     %                   + inuvl_wyvy3_8(j,3) * vth_m(i,j  ,k)
     %                   + inuvl_wyvy3_8(j,4) * vth_m(i,j+1,k)
         enddo
         enddo
         if (.not.G_lam) then
         if (l_south) then
            do i = i0, in
            vm_m(i,j0-2,k) = inuvl_wyvy3_8(j0-2,3) * vth_m(i,j0-2,k)
     %                      + inuvl_wyvy3_8(j0-2,4) * vth_m(i,j0-1,k)
            vm_m(i,j0-1,k) = inuvl_wyvy3_8(j0-1,2) * vth_m(i,j0-2,k)
     %                      + inuvl_wyvy3_8(j0-1,3) * vth_m(i,j0-1,k)
     %                      + inuvl_wyvy3_8(j0-1,4) * vth_m(i,j0,k  )
            enddo
         endif
         if (l_north) then
            do i = i0, in
            vm_m(i,jn+2,k) =  inuvl_wyvy3_8(jn+2,1) * vth_m(i,jn  ,k)
     %                      + inuvl_wyvy3_8(jn+2,2) * vth_m(i,jn+1,k)
            vm_m(i,jn+1,k) =  inuvl_wyvy3_8(jn+1,1) * vth_m(i,jn-1,k)
     %                      + inuvl_wyvy3_8(jn+1,2) * vth_m(i,jn  ,k)
     %                      + inuvl_wyvy3_8(jn+1,3) * vth_m(i,jn+1,k)
            enddo
         endif
         endif
      enddo
!$omp enddo
***********************************************************************
* Image to component
***********************************************************************      
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
             if (l_south) j0 = 3
             if (l_north) jn = l_njv - 1
      endif
!$omp do
      do k = 1,F_nk
      do j = j0,jn
*
      sc_8 = ONE_8/Adw_cy_8(j)
*
      do i = i0,in
*
      vth_m(i,j,k) = sc_8 * vm_m(i,j,k)
*
      enddo
      enddo
      enddo
!$omp enddo
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
      if (G_lam) then
             if (l_west) i0 = 3
             if (l_east) in = l_niu - 1
      endif
!$omp do 
      do k = 1,F_nk
      do j = j0,jn
*
      sc_8 = ONE_8/Adw_cy_8(j)
*
      do i = i0,in
*
      uth_m(i,j,k) = sc_8 * um_m(i,j,k)
*
      enddo
      enddo
      enddo
!$omp enddo
***********************************************************************
* Interpolate w_m on momentum levels
***********************************************************************
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west)  i0 = 3
         if (l_east)  in = l_ni - 1
         if (l_south) j0 = 3
         if (l_north) jn = l_nj - 1
      endif
!$omp do
      do k=2,F_nk-1
         xx_8 = Ver_z_8%m(k)
         x1_8 = Ver_z_8%t(k-1)
         x2_8 = Ver_z_8%t(k)
         x3_8 = Ver_z_8%t(k+1)
         x4_8 = Ver_z_8%t(k+2)
         w1_8 = lag3_8( xx_8, x1_8, x2_8, x3_8, x4_8 )
         w2_8 = lag3_8( xx_8, x2_8, x1_8, x3_8, x4_8 )
         w3_8 = lag3_8( xx_8, x3_8, x1_8, x2_8, x4_8 )
         w4_8 = lag3_8( xx_8, x4_8, x1_8, x2_8, x3_8 )
         do j = j0, jn
         do i = i0, in
            workm_m(i,j,k)=w1_8*zdth_m(i,j,k-1)+
     $                     w2_8*zdth_m(i,j,k)  +
     $                     w3_8*zdth_m(i,j,k+1)+
     $                     w4_8*zdth_m(i,j,k+2)
         enddo
         enddo
      enddo
!$omp enddo
*
*     Note  zdth_m(i,j,1)=0     
      k=1
*     w1_8=(Ver_z_8%m(k)-Ver_z_8%t(k+1))/
*     $    (Ver_z_8%t(k)-Ver_z_8%t(k+1))
      w2_8=(Ver_z_8%t(k)-Ver_z_8%m(k))/
     $     (Ver_z_8%t(k)-Ver_z_8%t(k+1))
!$omp do     
      do j = j0, jn
      do i = i0, in
         workm_m(i,j,k)=w2_8*zdth_m(i,j,k+1)
      enddo
      enddo
!$omp enddo
*
*     Note  zdth_m(i,j,F_nk+1)=0  
      k=F_nk
      w1_8=(Ver_z_8%m(k)-Ver_z_8%t(k+1))/
     $     (Ver_z_8%t(k)-Ver_z_8%t(k+1))
*     w2_8=(Ver_z_8%t(k)-Ver_z_8%m(k))/
*    $     (Ver_z_8%t(k)-Ver_z_8%t(k+1))
!$omp do     
      do j = j0, jn
      do i = i0, in
         workm_m(i,j,k)=w1_8*zdth_m(i,j,k)
      enddo
      enddo
!$omp enddo
*
***********************************************************************
* Interpolate u and v on thermo levels
***********************************************************************
!$omp do
      do k=3,F_nk-1
         xx_8 = Ver_z_8%t(k)
         x1_8 = Ver_z_8%m(k-2)
         x2_8 = Ver_z_8%m(k-1)
         x3_8 = Ver_z_8%m(k  )
         x4_8 = Ver_z_8%m(k+1)
         w1_8 = lag3_8( xx_8, x1_8, x2_8, x3_8, x4_8 )
         w2_8 = lag3_8( xx_8, x2_8, x1_8, x3_8, x4_8 )
         w3_8 = lag3_8( xx_8, x3_8, x1_8, x2_8, x4_8 )
         w4_8 = lag3_8( xx_8, x4_8, x1_8, x2_8, x3_8 )

         do j = j0, jn
         do i = i0, in
            wut_m(i,j,k)=w1_8*uth_m(i,j,k-2)+
     $                   w2_8*uth_m(i,j,k-1)+
     $                   w3_8*uth_m(i,j,k  )+
     $                   w4_8*uth_m(i,j,k+1)
            wvt_m(i,j,k)=w1_8*vth_m(i,j,k-2)+
     $                   w2_8*vth_m(i,j,k-1)+
     $                   w3_8*vth_m(i,j,k  )+
     $                   w4_8*vth_m(i,j,k+1)
         enddo
         enddo         
      enddo
!$omp enddo
*
      den_8=1.d0/(Ver_z_8%m(1)-Ver_z_8%m(2))
      k=2      
      w1_8=(Ver_z_8%t(k)-Ver_z_8%m(2))*den_8
      w2_8=(Ver_z_8%m(1)-Ver_z_8%t(k))*den_8
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut_m(i,j,k)=w1_8*uth_m(i,j,1)+w2_8*uth_m(i,j,2)
         wvt_m(i,j,k)=w1_8*vth_m(i,j,1)+w2_8*vth_m(i,j,2)
      enddo
      enddo
!$omp enddo
* Updward Extrapolation
      k=1      
      w1_8=(Ver_z_8%t(k)-Ver_z_8%m(2))*den_8
      w2_8=(Ver_z_8%m(1)-Ver_z_8%t(k))*den_8
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut_m(i,j,k)=w1_8*uth_m(i,j,1)+w2_8*uth_m(i,j,2)
         wvt_m(i,j,k)=w1_8*vth_m(i,j,1)+w2_8*vth_m(i,j,2)
      enddo
      enddo
!$omp enddo
*
      den_8=1.d0/(Ver_z_8%m(F_nk-1)-Ver_z_8%m(F_nk))
      k=F_nk
      w1_8=(Ver_z_8%t(k)     -Ver_z_8%m(F_nk))*den_8
      w2_8=(Ver_z_8%m(F_nk-1)-Ver_z_8%t(k)   )*den_8
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut_m(i,j,k)=w1_8*uth_m(i,j,F_nk-1)+w2_8*uth_m(i,j,F_nk)
         wvt_m(i,j,k)=w1_8*vth_m(i,j,F_nk-1)+w2_8*vth_m(i,j,F_nk)
      enddo
      enddo
!$omp enddo
* Downdward Extrapolation
      k=F_nk+1
      w1_8=(Ver_z_8%t(k)     -Ver_z_8%m(F_nk))*den_8
      w2_8=(Ver_z_8%m(F_nk-1)-Ver_z_8%t(k)   )*den_8
!$omp do     
      do j = j0, jn
      do i = i0, in
         wut_m(i,j,k)=w1_8*uth_m(i,j,F_nk-1)+w2_8*uth_m(i,j,F_nk)
         wvt_m(i,j,k)=w1_8*vth_m(i,j,F_nk-1)+w2_8*vth_m(i,j,F_nk)
      enddo
      enddo
!$omp enddo
***********************************************************************
* Adjust wind fields to advection grid
***********************************************************************
      if (G_lam) then
          n=0
          dest_ni=l_ni
      else
          n=999
          dest_ni=G_ni
      endif
*
!$omp single
      call rpn_comm_xch_halox ( uth_m, LDIST_DIM, l_ni, l_nj, F_nk, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, um_m, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
      call rpn_comm_xch_halox ( wut_m, LDIST_DIM, l_ni, l_nj, F_nk+1, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, ut_m, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
*
      call rpn_comm_xch_halox ( vth_m, LDIST_DIM, l_ni, l_nj, F_nk, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, vm_m, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
      call rpn_comm_xch_halox ( wvt_m, LDIST_DIM, l_ni, l_nj, F_nk+1, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, vt_m, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
*
      call rpn_comm_xch_halox ( zdth_m, LDIST_DIM, l_ni, l_nj, F_nk+1, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, wt_m, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
      call rpn_comm_xch_halox ( workm_m, LDIST_DIM, l_ni, l_nj, F_nk, 
     %  Adw_halox, Adw_haloy, G_periodx, G_periody, wm_m, 1-Adw_halox, 
     %  Adw_nic+Adw_halox, 1-Adw_haloy, Adw_njc+Adw_haloy, dest_ni, n)
!$omp end single
*
      if (.not.G_lam) then
*
         if ( l_south ) then
*
            call adw_polw (um_m,vm_m,Adw_cx_8,Adw_sx_8,Adw_wx_8,
     %        Adw_sy_8,0,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk)
            call adw_polw (ut_m,vt_m,Adw_cx_8,Adw_sx_8,Adw_wx_8,
     %        Adw_sy_8,0,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk+1)
            call adw_pols (wt_m,Adw_wx_8,0,Adw_nic,Adw_halox,Adw_njc,
     %        Adw_haloy,F_nk+1)
            call adw_pols (wm_m,Adw_wx_8,0,Adw_nic,Adw_halox,Adw_njc,
     %        Adw_haloy,F_nk)
         endif
*
         if ( l_north ) then
*
            call adw_polw (um_m,vm_m,Adw_cx_8,Adw_sx_8,Adw_wx_8,
     %        Adw_sy_8,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk)
            call adw_polw (ut_m,vt_m,Adw_cx_8,Adw_sx_8,Adw_wx_8,
     %        Adw_sy_8,Adw_njc+1,Adw_nic,Adw_halox,Adw_njc,Adw_haloy,F_nk+1)
            call adw_pols (wt_m,Adw_wx_8,Adw_njc+1,Adw_nic,Adw_halox,
     %        Adw_njc,Adw_haloy,F_nk+1)
            call adw_pols (wm_m,Adw_wx_8,Adw_njc+1,Adw_nic,Adw_halox,
     %        Adw_njc,Adw_haloy,F_nk)
         endif

      endif
*
***********************************************************************
!$omp end parallel
*
      call adw_load_super_winds(um_m,vm_m,wt_m,ut_m,vt_m,wm_m,F_su_m,F_sv_m,F_sw_m)
*
      return
      end
