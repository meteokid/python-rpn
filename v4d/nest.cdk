!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
#if defined (DOC)
!
!**comdeck nest.cdk
!
! v4_10 - Tanguay M.        - Adjust digital filter when LAM
!
!______________________________________________________________________
!                                                                      |
!  VARIABLES ASSOCIATED WITH NESTING for current timestep              |
!  For Nest_uf,Nest_vf - used for future timesteps with one extra level|
!______________________________________________________________________|
!                    |                                                 |
! NAME               | DESCRIPTION                                     |
!--------------------|-------------------------------------------------|
! Nest_u             | x component of velocity                         |
! Nest_v             | y component of velocity                         |
! Nest_t             | T (temperature)                                 |
! Nest_zd            |                                                 |
! Nest_s             | ln (dpi/dpi*)                                   |
!--------------------|-------------------------------------------------|
! Nest_w             | z component of velocity                         |
! Nest_q             |                                                 |
!--------------------|-------------------------------------------------|
! Nest_tr            | tracer 3d variables                             |
!----------------------------------------------------------------------|
!
!
#endif
      real, pointer, dimension (:,:,:) :: nest_u       ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_v       ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_t       ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_zd      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:  ) :: nest_s       ! effective dimensions are (LDIST_SHAPE         )
      real, pointer, dimension (:,:,:) :: nest_w       ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_q       ! effective dimensions are (LDIST_SHAPE,0:l_nk+1)

      real, pointer, dimension (:,:,:) :: nest_uf      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_vf      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_tf      ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_zdf     ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:  ) :: nest_sf      ! effective dimensions are (LDIST_SHAPE         )
      real, pointer, dimension (:,:,:) :: nest_wf      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_qf      ! effective dimensions are (LDIST_SHAPE,0:l_nk+1)

      real, pointer, dimension (:,:,:) :: nest_u2      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_v2      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_t2      ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_zd2     ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:  ) :: nest_s2      ! effective dimensions are (LDIST_SHAPE         )
      real, pointer, dimension (:,:,:) :: nest_w2      ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_q2      ! effective dimensions are (LDIST_SHAPE,0:l_nk+1)

      common /nest_gmm/ nest_u, nest_v, nest_t, nest_zd, nest_s, nest_w, nest_q
      common /nest_gmm/ nest_uf,nest_vf,nest_tf,nest_zdf,nest_sf,nest_wf,nest_qf
      common /nest_gmm/ nest_u2,nest_v2,nest_t2,nest_zd2,nest_s2,nest_w2,nest_q2

      character(len=8) :: gmmk_nest_u_s  , gmmk_nest_v_s , gmmk_nest_t_s
      character(len=8) :: gmmk_nest_zd_s , gmmk_nest_s_s , gmmk_nest_w_s , gmmk_nest_q_s
      character(len=8) :: gmmk_nest_uf_s , gmmk_nest_vf_s, gmmk_nest_tf_s
      character(len=8) :: gmmk_nest_zdf_s, gmmk_nest_sf_s, gmmk_nest_wf_s, gmmk_nest_qf_s
      character(len=8) :: gmmk_nest_u2_s , gmmk_nest_v2_s, gmmk_nest_t2_s
      character(len=8) :: gmmk_nest_zd2_s, gmmk_nest_s2_s, gmmk_nest_w2_s, gmmk_nest_q2_s
      common /nest_n_gmm/ gmmk_nest_u_s  , gmmk_nest_v_s , gmmk_nest_t_s
      common /nest_n_gmm/ gmmk_nest_zd_s , gmmk_nest_s_s , gmmk_nest_w_s , gmmk_nest_q_s
      common /nest_n_gmm/ gmmk_nest_uf_s , gmmk_nest_vf_s, gmmk_nest_tf_s
      common /nest_n_gmm/ gmmk_nest_zdf_s, gmmk_nest_sf_s, gmmk_nest_wf_s, gmmk_nest_qf_s
      common /nest_n_gmm/ gmmk_nest_u2_s , gmmk_nest_v2_s, gmmk_nest_t2_s
      common /nest_n_gmm/ gmmk_nest_zd2_s, gmmk_nest_s2_s, gmmk_nest_w2_s, gmmk_nest_q2_s
