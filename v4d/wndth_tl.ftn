! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r wndth_tl - TLM of wndth 
*
#include "model_macros_f.h"
*
      subroutine wndth_tl
*
#include "impnone.cdk"
*
*author
*     M.Tanguay
*
*revision
* v2_10 - Tanguay M.        - initial MPI version
* v3_20 - Tanguay M.        - 1d higher order diffusion operator 
* v4_04 - Tanguay M.        - Staggered version TL/AD 
*
*object
*     see id section
*	
*arguments
*     none
*
*implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt0.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "vt0_m.cdk"
#include "vth_m.cdk"
#include "vt1_m.cdk"
#include "hzd.cdk"
#include "schm.cdk"
#include "ver.cdk"
*
*modules
      integer  vmmlod,vmmget,vmmuld
      external vmmlod,vmmget,vmmuld
*
      integer pnerr, pnlkey1(18), nlkey
      integer i, j, k
*
*     ---------------------------------------------------------------
*
      if (Hzd_t1_0_L.or.Hzd_t1_1_L) call gem_stop('stop in wndth_TL',-1)
*
      pnlkey1(1) = VMM_KEY(uth)
      pnlkey1(2) = VMM_KEY(ut1)
      pnlkey1(3) = VMM_KEY(ut0)
      pnlkey1(4) = VMM_KEY(vth)
      pnlkey1(5) = VMM_KEY(vt1)
      pnlkey1(6) = VMM_KEY(vt0)
      pnlkey1(7) = VMM_KEY(zdth)
      pnlkey1(8) = VMM_KEY(zdt1)
      pnlkey1(9) = VMM_KEY(zdt0)
      nlkey=9
*
*     TRAJECTORY
*     ----------
      pnlkey1(nlkey+1) = VMM_KEY(uth_m)
      pnlkey1(nlkey+2) = VMM_KEY(ut1_m)
      pnlkey1(nlkey+3) = VMM_KEY(ut0_m)
      pnlkey1(nlkey+4) = VMM_KEY(vth_m)
      pnlkey1(nlkey+5) = VMM_KEY(vt1_m)
      pnlkey1(nlkey+6) = VMM_KEY(vt0_m)
      pnlkey1(nlkey+7) = VMM_KEY(zdth_m)
      pnlkey1(nlkey+8) = VMM_KEY(zdt1_m)
      pnlkey1(nlkey+9) = VMM_KEY(zdt0_m)
      nlkey=nlkey+9

*
      pnerr = vmmlod(pnlkey1,nlkey)
      pnerr = VMM_GET_VAR(uth)
      pnerr = VMM_GET_VAR(ut1)
      pnerr = VMM_GET_VAR(ut0)
      pnerr = VMM_GET_VAR(vth)
      pnerr = VMM_GET_VAR(vt1)
      pnerr = VMM_GET_VAR(vt0)
      pnerr = VMM_GET_VAR(zdth)
      pnerr = VMM_GET_VAR(zdt1)
      pnerr = VMM_GET_VAR(zdt0)
*
*     TRAJECTORY
*     ----------
      pnerr = VMM_GET_VAR(uth_m)
      pnerr = VMM_GET_VAR(ut1_m)
      pnerr = VMM_GET_VAR(ut0_m)
      pnerr = VMM_GET_VAR(vth_m)
      pnerr = VMM_GET_VAR(vt1_m)
      pnerr = VMM_GET_VAR(vt0_m)
      pnerr = VMM_GET_VAR(zdth_m)
      pnerr = VMM_GET_VAR(zdt1_m)
      pnerr = VMM_GET_VAR(zdt0_m)
*
*     Filtering
*     ---------
      if (Hzd_t0_0_L) call hzd_hoffld (ut0_m, LDIST_DIM, G_nk,  1)
      if (Hzd_t0_0_L) call hzd_hoffld (vt0_m, LDIST_DIM, G_nk,  2)
      if (Hzd_t0_0_L) call hzd_hoffld (zdt0_m,LDIST_DIM, G_nk+1,3)
*
      if (Hzd_t0_1_L) call hzd_hoffld (ut0,   LDIST_DIM, G_nk,  1)
      if (Hzd_t0_1_L) call hzd_hoffld (vt0,   LDIST_DIM, G_nk,  2)
      if (Hzd_t0_1_L) call hzd_hoffld (zdt0,  LDIST_DIM, G_nk+1,3)
*
*
*C       1.    Perform the averaging
*              ---------------------
*
C!$omp parallel
*
C!$omp do
      do k=1,l_nk
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
*   
*        TRAJECTORY
*        ----------
         uth_m(i,j,k) = 0.5*ut0_m(i,j,k)+ 0.5*ut1_m(i,j,k)
*
*        TLM 
*        ---
         uth(i,j,k) = 0.5*ut0(i,j,k)+ 0.5*ut1(i,j,k)
*
         end do
         end do
*
         do j= 1+pil_s, l_njv-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
*
*        TRAJECTORY
*        ----------
         vth_m(i,j,k) = 0.5*vt0_m(i,j,k)+ 0.5*vt1_m(i,j,k)
*
*        TLM 
*        ---
         vth(i,j,k) = 0.5*vt0(i,j,k)+ 0.5*vt1(i,j,k)
*
         end do
         end do
      end do
C!$omp enddo
*
      if(.not.Schm_zdotMid_L) then
C!$omp do
      do k=1,l_nk+1
         do j= 1+pil_s, l_nj-pil_n
         do i= 1+pil_w, l_ni-pil_e
*
*           TRAJECTORY
*           ----------
            zdth_m(i,j,k) = 0.5 * ( zdt0_m(i,j,k) + zdt1_m(i,j,k) )
*
*           TLM 
*           ---
            zdth(i,j,k) = 0.5 * ( zdt0(i,j,k) + zdt1(i,j,k) )
*
         end do
         end do
      end do
C!$omp enddo
      endif
*
C!$omp end parallel
*
      pnerr = vmmuld(-1,0)
*
*     ---------------------------------------------------------------
*
 1000 format(
     +/ /,' TLM of AVERAGE WINDS t0-dt/2 (th): (S/R WNDTH_TL)',
     + /,'===================================================',
     +/ /)
*
      return
      end
