! ------------------------------------------------------------------------------------------------------------------------------
! EC-RPN COMM Group License/Disclaimer, version 2, Last Modified: Jan 08th, 2008 , Environment Canada
! 
! This is free software, you can use/redistribute/modify it under the terms of the EC-RPN COMM Group License/Disclaimer version 2 
! or (at your option) any later version that should be found at http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
! 
! This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the EC-RPN COMM Group License/Disclaimer for more details.
! 
! You should have received a copy of the EC-RPN COMM Group License/Disclaimer along with this software; if not, write to the
! EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), CANADA, H9P 1J3 ; or send e-mail to service.rpn@ec.gc.ca
! ------------------------------------------------------------------------------------------------------------------------------
***s/r adw_tricub_lag3d_tl - TLM of adw_tricub_lag3d 
*
#include "model_macros_f.h"
*
      subroutine adw_tricub_lag3d_tl ( F_out,  F_in,  F_x,  F_y,  F_z,
     %                                 F_out_m,F_in_m,F_x_m,F_y_m,F_z_m,
     %                                 F_num,F_mono_L,i0,in,j0,jn,F_nk,F_lev_S )
*
      implicit none
*
      character*1 F_lev_S
*
      logical F_mono_L
*
      integer F_num,i0,in,j0,jn,F_nk
*
      real F_in(*),F_in_m(*)
*
      real F_out  (F_num),F_x  (F_num),F_y  (F_num),F_z  (F_num)
      real F_out_m(F_num),F_x_m(F_num),F_y_m(F_num),F_z_m(F_num)
*
*authors
*     Monique Tanguay
*
*     (Based on adw_tricub_tl v_3.1.1)
*
*revision
* v3_20 - Tanguay M. - initial version
* v3_21 - Tanguay M. - Revision Openmp
* v4_04 - Tanguay M. - Staggered version TL/AD 
*
*object
*     see id section
*
*arguments
*______________________________________________________________________
*              |                                                 |     |
* NAME         | DESCRIPTION                                     | I/O |
*--------------|-------------------------------------------------|-----|
*              |                                                 |     |
* F_out        | result of interpolation                         |  o  |
* F_in         | field to interpolate                            |  i  |
*              |                                                 |     |
* F_x          | interpolation target X coordinate               |  i  |
* F_y          | interpolation target Y coordinate               |  i  |
* F_z          | interpolation target Z coordinate               |  i  |
*              |                                                 |     |
* F_num        | number of points to interpolate                 |  i  |
*              |                                                 |     |
* F_mono_L     | switch: .true. : monotonic interpolation        |  i  |
*______________|_________________________________________________|_____|
*
*implicits
#include "glb_ld.cdk"
#include "type.cdk"
#include "adw.cdk"
#include "ver.cdk"
* **********************************************************************
      integer n, nijag,i,j,k,nij,iimax,jjmax,kkmax
      logical zcubic_L
*
      real prmin,  prmax,  prmin2,  prmax2 
      real prmin_m,prmax_m,prmin2_m,prmax2_m
*
      integer o1, o2, o3, o4
*
      real*8  a1_m,a2_m,a3_m,a4_m
      real*8  b1_m,b2_m,b3_m,b4_m
      real*8  c1_m,c2_m,c3_m,c4_m
      real*8  d1_m,d2_m,d3_m,d4_m
      real*8  p1_m,p2_m,p3_m,p4_m
*
      real*8  a1, a2, a3, a4
      real*8  b1, b2, b3, b4
      real*8  c1, c2, c3, c4
      real*8  d1, d2, d3, d4
      real*8  p1, p2, p3, p4
*
      integer ii,jj,kk
      real *8 triprd,za,zb,zc,zd,rri,rrj,rrk,ra,rb,rc,rd
      triprd(za,zb,zc,zd)=(za-zb)*(za-zc)*(za-zd)
*
      real *8 triprd_tl,za_m,rri_m,rrj_m,rrk_m
      triprd_tl(za,za_m,zb,zc,zd)=
     %za*(za_m-zc)*(za_m-zd)+(za_m-zb)*za*(za_m-zd)+(za_m-zb)*(za_m-zc)*za
*
      integer,dimension(:),pointer :: p_lcz
      real*8  p_z00_8
      real*8, dimension(:),pointer :: p_bsz_8, p_zbc_8, p_zabcd_8
      real*8, dimension(:),pointer :: p_zbacd_8, p_zcabd_8, p_zdabc_8
*
* **********************************************************************
*
      if ( F_lev_S .eq. 'm') then
         p_z00_8 = Ver_z_8%m(1)
         p_lcz =>Adw_lcz%m
         p_bsz_8 =>Adw_bsz_8%m
         p_zabcd_8 =>Adw_zabcd_8%m
         p_zbacd_8 =>Adw_zbacd_8%m
         p_zcabd_8 =>Adw_zcabd_8%m
         p_zdabc_8 =>Adw_zdabc_8%m
         p_zbc_8 =>Adw_zbc_8%m
         kkmax = G_nk-1
      else
         p_z00_8 = Ver_z_8%t(1)
         p_lcz =>Adw_lcz%t
         p_bsz_8 =>Adw_bsz_8%t
         p_zabcd_8 =>Adw_zabcd_8%t
         p_zbacd_8 =>Adw_zbacd_8%t
         p_zcabd_8 =>Adw_zcabd_8%t
         p_zdabc_8 =>Adw_zdabc_8%t
         p_zbc_8 =>Adw_zbc_8%t
         kkmax = G_nk
      endif
*
      nij   = l_ni*l_nj
      nijag = Adw_nit * Adw_njt
*
      iimax = G_ni+2*Adw_halox-2
      jjmax = G_nj+Adw_haloy
*
      if(F_mono_L) then
*
!$omp do
      do 100 k=1,F_nk
      do  90 j=j0,jn
      do  80 i=i0,in
      n = (k-1)*nij + ((j-1)*l_ni) + i
*
*     TRAJECTORY
*     ----------
      rri_m= F_x_m(n)
      ii = ( rri_m - Adw_x00_8 ) * Adw_ovdx_8
      ii = Adw_lcx( ii+1 ) + 1
      if ( rri_m .lt. Adw_bsx_8(ii) ) ii = ii - 1
      ii = max(2,min(ii,iimax))
*
*     TLM
*     ---
      rri= F_x(n)
*
*     TRAJECTORY
*     ----------
      rrj_m= F_y_m(n)
      jj = ( rrj_m - Adw_y00_8 ) * Adw_ovdy_8
      jj = Adw_lcy( jj+1 ) + 1
      if ( rrj_m .lt. Adw_bsy_8(jj) ) jj = jj - 1
      jj = max(Adw_haloy,min(jj,jjmax))
*
*     TLM
*     ---
      rrj= F_y(n)
*
*     TRAJECTORY
*     ----------
      rrk_m= F_z_m(n)
      kk = ( rrk_m - p_z00_8 ) * Adw_ovdz_8
      kk = p_lcz( kk+1 )
      if ( rrk_m .lt. p_bsz_8(kk) ) kk = kk - 1
      kk = min(kkmax-1,max(0,kk))
*
*     TLM
*     ---
      rrk= F_z(n)
*
      zcubic_L = (kk.gt.0) .and. (kk.lt.kkmax-1)
*
* *********************************************************************
*     x interpolation
* *********************************************************************
*
*     TRAJECTORY
*     ----------
      ra = Adw_bsx_8(ii-1)
      rb = Adw_bsx_8(ii  )
      rc = Adw_bsx_8(ii+1)
      rd = Adw_bsx_8(ii+2)
*
      p1_m = triprd(rri_m,rb,rc,rd)*Adw_xabcd_8(ii)
      p2_m = triprd(rri_m,ra,rc,rd)*Adw_xbacd_8(ii)
      p3_m = triprd(rri_m,ra,rb,rd)*Adw_xcabd_8(ii)
      p4_m = triprd(rri_m,ra,rb,rc)*Adw_xdabc_8(ii)
*
*     TLM 
*     ---
      p1 = triprd_tl(rri,rri_m,rb,rc,rd)*Adw_xabcd_8(ii)
      p2 = triprd_tl(rri,rri_m,ra,rc,rd)*Adw_xbacd_8(ii)
      p3 = triprd_tl(rri,rri_m,ra,rb,rd)*Adw_xcabd_8(ii)
      p4 = triprd_tl(rri,rri_m,ra,rb,rc)*Adw_xdabc_8(ii)
*
      o2 = (kk-1)*nijag + (jj-Adw_int_j_off-1)*Adw_nit + (ii-Adw_int_i_off)
      o1 = o2-Adw_nit
      o3 = o2+Adw_nit
      o4 = o3+Adw_nit
*
      if(zcubic_L) then
*
*     TRAJECTORY
*     ----------
      a1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      a2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      a3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      a4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      a1  = p1  * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m* F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      a2  = p1  * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m* F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      a3  = p1  * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m* F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      a4  = p1  * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m* F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
      endif
*
      o1 = o1 + nijag
      o2 = o2 + nijag
      o3 = o3 + nijag
      o4 = o4 + nijag
*
      prmax = max(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
      prmin = min(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
*
*     TRAJECTORY and TLM
*     ------------------
      prmax_m = F_in_m(o2)  
      prmax   = F_in  (o2)  
      if(F_in_m(o2+1).gt.prmax_m) then
         prmax_m = F_in_m(o2+1)
         prmax   = F_in  (o2+1)
      endif
      if(F_in_m(o3)  .gt.prmax_m) then
         prmax_m = F_in_m(o3)
         prmax   = F_in  (o3)
      endif
      if(F_in_m(o3+1).gt.prmax_m) then
         prmax_m = F_in_m(o3+1)
         prmax   = F_in  (o3+1)
      endif
*
      prmin_m = F_in_m(o2)
      prmin   = F_in  (o2)
      if(F_in_m(o2+1).lt.prmin_m) then
         prmin_m = F_in_m(o2+1)
         prmin   = F_in  (o2+1)
      endif
      if(F_in_m(o3)  .lt.prmin_m) then
         prmin_m = F_in_m(o3)
         prmin   = F_in  (o3)
      endif
      if(F_in_m(o3+1).lt.prmin_m) then
         prmin_m = F_in_m(o3+1)
         prmin   = F_in  (o3+1)
      endif
*
*     TRAJECTORY
*     ----------
      b1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      b2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      b3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      b4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      b1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      b2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      b3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      b4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
*
      o1 = o1 + nijag
      o2 = o2 + nijag
      o3 = o3 + nijag
      o4 = o4 + nijag
*
*     TRAJECTORY and TLM
*     ------------------
      if(F_in_m(o2)  .gt.prmax_m) then
         prmax_m = F_in_m(o2)
         prmax   = F_in  (o2)
      endif
      if(F_in_m(o2+1).gt.prmax_m) then
         prmax_m = F_in_m(o2+1)
         prmax   = F_in  (o2+1)
      endif
      if(F_in_m(o3)  .gt.prmax_m) then
         prmax_m = F_in_m(o3)
         prmax   = F_in  (o3)
      endif
      if(F_in_m(o3+1).gt.prmax_m) then
         prmax_m = F_in_m(o3+1)
         prmax   = F_in  (o3+1)
      endif
*
      if(F_in_m(o2)  .lt.prmin_m) then
         prmin_m = F_in_m(o2)
         prmin   = F_in  (o2)
      endif
      if(F_in_m(o2+1).lt.prmin_m) then
         prmin_m = F_in_m(o2+1)
         prmin   = F_in  (o2+1)
      endif
      if(F_in_m(o3)  .lt.prmin_m) then
         prmin_m = F_in_m(o3)
         prmin   = F_in  (o3)
      endif
      if(F_in_m(o3+1).lt.prmin_m) then
         prmin_m = F_in_m(o3+1)
         prmin   = F_in  (o3+1)
      endif
*
*     TRAJECTORY
*     ----------
      c1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      c2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      c3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      c4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      c1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      c2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      c3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      c4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
*
      o1 = o1 + nijag
      o2 = o2 + nijag
      o3 = o3 + nijag
      o4 = o4 + nijag
*
      if(zcubic_L) then
*
*     TRAJECTORY
*     ----------
      d1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      d2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      d3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      d4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      d1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      d2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      d3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      d4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
      endif
* *********************************************************************
*     y interpolation
* *********************************************************************
      ra = Adw_bsy_8(jj-1)
      rb = Adw_bsy_8(jj  )
      rc = Adw_bsy_8(jj+1)
      rd = Adw_bsy_8(jj+2)
*
*     TRAJECTORY
*     ----------
      p1_m = triprd(rrj_m,rb,rc,rd)*Adw_yabcd_8(jj)
      p2_m = triprd(rrj_m,ra,rc,rd)*Adw_ybacd_8(jj)
      p3_m = triprd(rrj_m,ra,rb,rd)*Adw_ycabd_8(jj)
      p4_m = triprd(rrj_m,ra,rb,rc)*Adw_ydabc_8(jj)
*
*     TLM 
*     ---
      p1 = triprd_tl(rrj,rrj_m,rb,rc,rd)*Adw_yabcd_8(jj)
      p2 = triprd_tl(rrj,rrj_m,ra,rc,rd)*Adw_ybacd_8(jj)
      p3 = triprd_tl(rrj,rrj_m,ra,rb,rd)*Adw_ycabd_8(jj)
      p4 = triprd_tl(rrj,rrj_m,ra,rb,rc)*Adw_ydabc_8(jj)
*
*     TLM
*     ---
      if(zcubic_L)a1  = p1   * a1_m + p2   * a2_m + p3   * a3_m + p4   * a4_m
     %                + p1_m * a1   + p2_m * a2   + p3_m * a3   + p4_m * a4
      b1  = p1   * b1_m + p2   * b2_m + p3   * b3_m + p4   * b4_m
     %    + p1_m * b1   + p2_m * b2   + p3_m * b3   + p4_m * b4
      c1  = p1   * c1_m + p2   * c2_m + p3   * c3_m + p4   * c4_m
     %    + p1_m * c1   + p2_m * c2   + p3_m * c3   + p4_m * c4
      if(zcubic_L)d1  = p1   * d1_m + p2   * d2_m + p3   * d3_m + p4   * d4_m
     %                + p1_m * d1   + p2_m * d2   + p3_m * d3   + p4_m * d4
*
*     TRAJECTORY
*     ----------
      if(zcubic_L)a1_m = p1_m * a1_m + p2_m * a2_m + p3_m * a3_m + p4_m * a4_m
      b1_m = p1_m * b1_m + p2_m * b2_m + p3_m * b3_m + p4_m * b4_m
      c1_m = p1_m * c1_m + p2_m * c2_m + p3_m * c3_m + p4_m * c4_m
      if(zcubic_L)d1_m = p1_m * d1_m + p2_m * d2_m + p3_m * d3_m + p4_m * d4_m
* *********************************************************************
*     z interpolation
* *********************************************************************
      if(zcubic_L) then
      ra = p_bsz_8(kk-1)
      rb = p_bsz_8(kk  )
      rc = p_bsz_8(kk+1)
      rd = p_bsz_8(kk+2)
*
*     TRAJECTORY
*     ----------
      p1_m = triprd(rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
      p2_m = triprd(rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
      p3_m = triprd(rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
      p4_m = triprd(rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)
*
*     TLM
*     ---
      p1 = triprd_tl(rrk,rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
      p2 = triprd_tl(rrk,rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
      p3 = triprd_tl(rrk,rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
      p4 = triprd_tl(rrk,rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)
*
*     TRAJECTORY
*     ----------
      F_out_m(n) = p1_m * a1_m + p2_m * b1_m + p3_m * c1_m + p4_m * d1_m 
*
*     TLM
*     ---
      F_out(n)  = p1   * a1_m + p2   * b1_m + p3   * c1_m + p4   * d1_m 
     %          + p1_m * a1   + p2_m * b1   + p3_m * c1   + p4_m * d1 
*
      else
*
*     TRAJECTORY
*     ----------
      p3_m = (rrk_m-p_bsz_8(kk))*p_zbc_8(kk+1)
      p2_m = 1. - p3_m
*
*     TLM
*     ---
      p3 = (rrk)*p_zbc_8(kk+1)
      p2 = - p3
*
*     TRAJECTORY
*     ----------
      F_out_m(n) = p2_m * b1_m + p3_m * c1_m
*
*     TLM
*     ---
      F_out(n) = p2   * b1_m + p3   * c1_m
     %         + p2_m * b1   + p3_m * c1
*
      endif
*
*        TRAJECTORY and TLM
*        ------------------
         if(F_out_m(n).gt.prmax_m) then
            F_out_m(n) = prmax_m
            F_out  (n) = prmax
         endif
         if(F_out_m(n).lt.prmin_m) then
            F_out_m(n) = prmin_m
            F_out  (n) = prmin
         endif
*
   80 continue
   90 continue
  100 continue
!$omp enddo
*
      else
*
!$omp do
      do 101 k=1,F_nk
      do  91 j=j0,jn
      do  81 i=i0,in
      n = (k-1)*nij + ((j-1)*l_ni) + i
*
*     TRAJECTORY
*     ----------
      rri_m= F_x_m(n)
      ii = ( rri_m - Adw_x00_8 ) * Adw_ovdx_8
      ii = Adw_lcx( ii+1 ) + 1
      if ( rri_m .lt. Adw_bsx_8(ii) ) ii = ii - 1
      ii = max(2,min(ii,iimax))
*
*     TLM
*     ---
      rri= F_x(n)
*
*     TRAJECTORY
*     ----------
      rrj_m= F_y_m(n)
      jj = ( rrj_m - Adw_y00_8 ) * Adw_ovdy_8
      jj = Adw_lcy( jj+1 ) + 1
      if ( rrj_m .lt. Adw_bsy_8(jj) ) jj = jj - 1
      jj = max(Adw_haloy,min(jj,jjmax))
*
*     TLM
*     ---
      rrj= F_y(n)
*
*     TRAJECTORY
*     ----------
      rrk_m= F_z_m(n)
      kk = ( rrk_m - p_z00_8 ) * Adw_ovdz_8
      kk = p_lcz( kk+1 )
      if ( rrk_m .lt. p_bsz_8(kk) ) kk = kk - 1
      kk = min(kkmax-1,max(0,kk))
*
*     TLM
*     ---
      rrk= F_z(n)
*
      zcubic_L = (kk.gt.0) .and. (kk.lt.kkmax-1)
*
* *********************************************************************
*     x interpolation
* *********************************************************************
*
*     TRAJECTORY
*     ----------
      ra = Adw_bsx_8(ii-1)
      rb = Adw_bsx_8(ii  )
      rc = Adw_bsx_8(ii+1)
      rd = Adw_bsx_8(ii+2)
*
      p1_m = triprd(rri_m,rb,rc,rd)*Adw_xabcd_8(ii)
      p2_m = triprd(rri_m,ra,rc,rd)*Adw_xbacd_8(ii)
      p3_m = triprd(rri_m,ra,rb,rd)*Adw_xcabd_8(ii)
      p4_m = triprd(rri_m,ra,rb,rc)*Adw_xdabc_8(ii)
*
*     TLM 
*     ---
      p1 = triprd_tl(rri,rri_m,rb,rc,rd)*Adw_xabcd_8(ii)
      p2 = triprd_tl(rri,rri_m,ra,rc,rd)*Adw_xbacd_8(ii)
      p3 = triprd_tl(rri,rri_m,ra,rb,rd)*Adw_xcabd_8(ii)
      p4 = triprd_tl(rri,rri_m,ra,rb,rc)*Adw_xdabc_8(ii)
*
      o2 = (kk-1)*nijag + (jj-Adw_int_j_off-1)*Adw_nit + (ii-Adw_int_i_off)
      o1 = o2-Adw_nit
      o3 = o2+Adw_nit
      o4 = o3+Adw_nit
*
      if(zcubic_L) then
*
*     TRAJECTORY
*     ----------
      a1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      a2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      a3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      a4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      a1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      a2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      a3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      a4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
      endif
*
      o1 = o1 + nijag
      o2 = o2 + nijag
      o3 = o3 + nijag
      o4 = o4 + nijag
*
      prmax = max(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
      prmin = min(F_in(o2),F_in(o2+1),F_in(o3),F_in(o3+1))
*
*     TRAJECTORY
*     ----------
      b1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m * F_in_m (o1+2)
      b2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m * F_in_m (o2+2)
      b3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m * F_in_m (o3+2)
      b4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m * F_in_m (o4+2)
*
*     TLM 
*     ---
      b1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      b2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      b3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      b4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
*
      o1 = o1 + nijag
      o2 = o2 + nijag
      o3 = o3 + nijag
      o4 = o4 + nijag
*
*     TRAJECTORY
*     ----------
      c1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      c2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      c3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      c4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      c1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      c2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      c3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      c4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
*
      o1 = o1 + nijag
      o2 = o2 + nijag
      o3 = o3 + nijag
      o4 = o4 + nijag
*
      if(zcubic_L) then
*
*     TRAJECTORY
*     ----------
      d1_m = p1_m* F_in_m (o1-1)+ p2_m* F_in_m (o1)+ p3_m* F_in_m (o1+1)+ p4_m* F_in_m (o1+2)
      d2_m = p1_m* F_in_m (o2-1)+ p2_m* F_in_m (o2)+ p3_m* F_in_m (o2+1)+ p4_m* F_in_m (o2+2)
      d3_m = p1_m* F_in_m (o3-1)+ p2_m* F_in_m (o3)+ p3_m* F_in_m (o3+1)+ p4_m* F_in_m (o3+2)
      d4_m = p1_m* F_in_m (o4-1)+ p2_m* F_in_m (o4)+ p3_m* F_in_m (o4+1)+ p4_m* F_in_m (o4+2)
*
*     TLM 
*     ---
      d1  = p1   * F_in_m (o1-1) + p2   * F_in_m (o1) + p3   * F_in_m (o1+1) + p4   * F_in_m (o1+2)
     %    + p1_m * F_in   (o1-1) + p2_m * F_in   (o1) + p3_m * F_in   (o1+1) + p4_m * F_in   (o1+2)
      d2  = p1   * F_in_m (o2-1) + p2   * F_in_m (o2) + p3   * F_in_m (o2+1) + p4   * F_in_m (o2+2)
     %    + p1_m * F_in   (o2-1) + p2_m * F_in   (o2) + p3_m * F_in   (o2+1) + p4_m * F_in   (o2+2)
      d3  = p1   * F_in_m (o3-1) + p2   * F_in_m (o3) + p3   * F_in_m (o3+1) + p4   * F_in_m (o3+2)
     %    + p1_m * F_in   (o3-1) + p2_m * F_in   (o3) + p3_m * F_in   (o3+1) + p4_m * F_in   (o3+2)
      d4  = p1   * F_in_m (o4-1) + p2   * F_in_m (o4) + p3   * F_in_m (o4+1) + p4   * F_in_m (o4+2)
     %    + p1_m * F_in   (o4-1) + p2_m * F_in   (o4) + p3_m * F_in   (o4+1) + p4_m * F_in   (o4+2)
      endif
* *********************************************************************
*     y interpolation
* *********************************************************************
      ra = Adw_bsy_8(jj-1)
      rb = Adw_bsy_8(jj  )
      rc = Adw_bsy_8(jj+1)
      rd = Adw_bsy_8(jj+2)
*
*     TRAJECTORY
*     ----------
      p1_m = triprd(rrj_m,rb,rc,rd)*Adw_yabcd_8(jj)
      p2_m = triprd(rrj_m,ra,rc,rd)*Adw_ybacd_8(jj)
      p3_m = triprd(rrj_m,ra,rb,rd)*Adw_ycabd_8(jj)
      p4_m = triprd(rrj_m,ra,rb,rc)*Adw_ydabc_8(jj)
*
*     TLM 
*     ---
      p1 = triprd_tl(rrj,rrj_m,rb,rc,rd)*Adw_yabcd_8(jj)
      p2 = triprd_tl(rrj,rrj_m,ra,rc,rd)*Adw_ybacd_8(jj)
      p3 = triprd_tl(rrj,rrj_m,ra,rb,rd)*Adw_ycabd_8(jj)
      p4 = triprd_tl(rrj,rrj_m,ra,rb,rc)*Adw_ydabc_8(jj)
*
*     TLM
*     ---
      if(zcubic_L)a1  = p1   * a1_m + p2   * a2_m + p3   * a3_m + p4   * a4_m
     %                + p1_m * a1   + p2_m * a2   + p3_m * a3   + p4_m * a4
      b1  = p1   * b1_m + p2   * b2_m + p3   * b3_m + p4   * b4_m
     %    + p1_m * b1   + p2_m * b2   + p3_m * b3   + p4_m * b4
      c1  = p1   * c1_m + p2   * c2_m + p3   * c3_m + p4   * c4_m
     %    + p1_m * c1   + p2_m * c2   + p3_m * c3   + p4_m * c4
      if(zcubic_L)d1  = p1   * d1_m + p2   * d2_m + p3   * d3_m + p4   * d4_m
     %                + p1_m * d1   + p2_m * d2   + p3_m * d3   + p4_m * d4
*
*     TRAJECTORY
*     ----------
      if(zcubic_L)a1_m = p1_m * a1_m + p2_m * a2_m + p3_m * a3_m + p4_m * a4_m
      b1_m = p1_m * b1_m + p2_m * b2_m + p3_m * b3_m + p4_m * b4_m
      c1_m = p1_m * c1_m + p2_m * c2_m + p3_m * c3_m + p4_m * c4_m
      if(zcubic_L)d1_m = p1_m * d1_m + p2_m * d2_m + p3_m * d3_m + p4_m * d4_m
* *********************************************************************
*     z interpolation
* *********************************************************************
      if(zcubic_L) then
      ra = p_bsz_8(kk-1)
      rb = p_bsz_8(kk  )
      rc = p_bsz_8(kk+1)
      rd = p_bsz_8(kk+2)
*
*     TRAJECTORY
*     ----------
      p1_m = triprd(rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
      p2_m = triprd(rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
      p3_m = triprd(rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
      p4_m = triprd(rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)
*
*     TLM
*     ---
      p1 = triprd_tl(rrk,rrk_m,rb,rc,rd)*p_zabcd_8(kk+1)
      p2 = triprd_tl(rrk,rrk_m,ra,rc,rd)*p_zbacd_8(kk+1)
      p3 = triprd_tl(rrk,rrk_m,ra,rb,rd)*p_zcabd_8(kk+1)
      p4 = triprd_tl(rrk,rrk_m,ra,rb,rc)*p_zdabc_8(kk+1)
*
*     TRAJECTORY
*     ----------
      F_out_m(n) = p1_m * a1_m + p2_m * b1_m + p3_m * c1_m + p4_m * d1_m 
*
*     TLM
*     ---
      F_out(n)  = p1   * a1_m + p2   * b1_m + p3   * c1_m + p4   * d1_m 
     %          + p1_m * a1   + p2_m * b1   + p3_m * c1   + p4_m * d1 
*
      else
*
*     TRAJECTORY
*     ----------
      p3_m = (rrk_m-p_bsz_8(kk))*p_zbc_8(kk+1)
      p2_m = 1. - p3_m
*
*     TLM
*     ---
      p3 = (rrk)*p_zbc_8(kk+1)
      p2 = - p3
*
*     TRAJECTORY
*     ----------
      F_out_m(n) = p2_m * b1_m + p3_m * c1_m
*
*     TLM
*     ---
      F_out(n) = p2   * b1_m + p3   * c1_m
     %         + p2_m * b1   + p3_m * c1
*
      endif
*
   81 continue
   91 continue
  101 continue
!$omp enddo
*
      endif
      return
      end
