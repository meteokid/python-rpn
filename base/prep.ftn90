!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!
!**s/r prep_2 - Add metric corrections to r.h.s. of momentum equations.
!               Compute advective contributions on geopotential grid.
!               Interpolate advection contribution from geopotential 
!               grid to wind grids. Update r.h.s with advective 
!               contributions.
!               Combine some rhs obtaining Rt", Rf" and Rc", the linear
!               contributions to the rhs of Helmholtz equation
!
#include "model_macros_f.h"
!
      subroutine prep_2 ( F_ru  ,F_rv  ,F_ruw1 ,F_ruw2 ,F_rvw1 ,F_rvw2,  &
                          F_xct1,F_yct1,F_zct1 ,F_fis  ,F_rc   ,F_rt  , &
                          F_rw  ,F_rf  ,F_oru  ,F_orv  ,F_rb ,F_nest_t, &
                          DIST_DIM, ni, nj, Nk )
!
      implicit none
!
      integer DIST_DIM, ni, nj, Nk
      real F_ru    (DIST_SHAPE,Nk)  ,F_rv    (DIST_SHAPE,Nk)  , &
           F_ruw1  (DIST_SHAPE,Nk)  ,F_ruw2  (DIST_SHAPE,Nk)  , &
           F_rvw1  (DIST_SHAPE,Nk)  ,F_rvw2  (DIST_SHAPE,Nk)  , &
           F_xct1  (ni,nj,Nk)       ,F_yct1  (ni,nj,Nk)       , &
           F_zct1  (ni,nj,Nk)       ,F_fis   (DIST_SHAPE)     , &
           F_rc    (DIST_SHAPE,Nk)  ,F_rt    (DIST_SHAPE,Nk+1), &
           F_rw    (DIST_SHAPE,Nk+1),F_rf    (DIST_SHAPE,Nk+1), &
           F_oru   (DIST_SHAPE,Nk)  ,F_orv   (DIST_SHAPE,Nk)  , &
           F_rb    (DIST_SHAPE)     ,F_nest_t(DIST_SHAPE,*)
!
!author
!     Alain Patoine 
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_21 - Lee V.            - modification for LAM version
! v2_31 - Desgagne M.       - remove stkmemw and switch to adw_*
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_11 - Gravel S.         - modify for theoretical cases
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Girard C.         - Open top
! v4_40 - Qaddouri/Lee      - expand range of calculation for Yin-Yang only
!
!object
!
!arguments
!     see appropriate comdeck documentation
!
!implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "lam.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "grd.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "type.cdk"
#include "cori.cdk"
#include "ver.cdk"
#include "ptopo.cdk"
!
!modules
      integer i, j, k, i0, j0, k0, in, inu, jn, jnv, onept
      real*8  x, y, z, cx, cy, cz, rx, ry, rz, mumu, tot, &
              a1,a2,a3,a4,b1,b2,b3,b4,zero,one,four,xxx,yyy,zzz
      real    rdiv            , Ttop(DIST_SHAPE), w_rt
!
      parameter( zero=0.d0, one=1.d0, four=4.d0 )
!*
!     __________________________________________________________________
!
!
      tot = - four*Dcst_omega_8/Cstv_dt_8
!
!     Coriolis term is zero for theoretical cases
      if( Schm_theoc_L ) tot = zero
 
      onept=0
      if (Grd_yinyang_L) onept=1
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
      k0 = 1+Lam_gbpil_T

!*****************************************************************
! Metric corrections to the RHS of horizontal momentum equations *
!*****************************************************************
!
!     Temporary Indices to compute metric corrections
      if (G_lam) then
         if (l_west)  i0= pil_w - onept
         if (l_east)  in= l_niu - pil_e + 2 + onept
         if (l_south) j0= pil_s - onept
         if (l_north) jn= l_njv - pil_n + 2 + onept
      endif

!$omp parallel private(x,y,z,rz,ry,rx,cx,cy,cz,&
!$omp   mumu,rdiv,xxx,yyy,zzz,w_rt)

!$omp do
      do 100 k= k0, l_nk
      do 100 j= j0, jn
      do 100 i= i0, in

!     Compute components of r(t0) and put in x, y, z
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         y = geomg_cy_8(j)
         x = geomg_cx_8(i) * y
         y = geomg_sx_8(i) * y
         z = geomg_sy_8(j)

!     Compute (Rx, Ry, Rz) = (rx, ry, rz)
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         mumu = ( one + F_zct1(i,j,k) )*( one - F_zct1(i,j,k) )
         if (mumu .GT. zero) mumu = one / mumu

         rz = F_rvw2(i,j,k)
         ry =  mumu * (F_xct1(i,j,k)*F_ruw2(i,j,k)- &
                       F_yct1(i,j,k)*F_zct1(i,j,k)*rz)
         rx = -mumu * (F_yct1(i,j,k)*F_ruw2(i,j,k)+ &
                       F_xct1(i,j,k)*F_zct1(i,j,k)*rz)

!     Compute components of (r - r~) and put in cx, cy, cz
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         cx = x - F_xct1(i,j,k)
         cy = y - F_yct1(i,j,k)
         cz = z - F_zct1(i,j,k)

!     Find components of Coriolis vector  2 * omg/tau * [k' ^ (r - r~)]
!     where geographic unit north vector  k' = r_13 I + r_23 J + r_33 K
!     Then substract them from (rx, ry, rz)
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if (.not.Cori_cornl_L) then
         rx = rx + ( Grd_rot_8(2,3)*cz - Grd_rot_8(3,3)*cy )*tot
         ry = ry + ( Grd_rot_8(3,3)*cx - Grd_rot_8(1,3)*cz )*tot
         rz = rz + ( Grd_rot_8(1,3)*cy - Grd_rot_8(2,3)*cx )*tot
         endif

!     Compute components of c and put in cx, cy, cz 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         cx = x + Cstv_Beta_8*F_xct1(i,j,k)
         cy = y + Cstv_Beta_8*F_yct1(i,j,k)
         cz = z + Cstv_Beta_8*F_zct1(i,j,k)

!     Compute mu and modify (Rx,Ry,Rz)
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         mumu = - ( x*rx + y*ry + z*rz )/( x*cx + y*cy + z*cz )
         rx = rx + mumu*cx
         ry = ry + mumu*cy
         rz = rz + mumu*cz

!     Compute advective contributions on G-grid 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         F_ruw2(i,j,k) = x*ry - y*rx - F_ruw1(i,j,k)
         F_rvw2(i,j,k) = rz - F_rvw1(i,j,k)
         
100   continue 
!$omp enddo
!
!$omp single
      call rpn_comm_xch_halo( F_fis , LDIST_DIM, l_ni,l_nj,  1 , &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_ruw2, LDIST_DIM, l_ni,l_nj,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_rvw2, LDIST_DIM, l_ni, l_nj,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

!     Indices to compute Right-Hand Sides 
      i0  = 1+pil_w
      in  = l_ni -pil_e
      inu = l_niu-pil_e
      j0  = 1+pil_s
      jn  = l_nj -pil_n
      jnv = l_njv-pil_n
      if (Grd_yinyang_L) then
         if (l_west)  i0= i0 - onept
         if (l_east)  inu= inu + onept
         if (l_east)  in= in + onept
         if (l_south) j0= j0 - onept
         if (l_north) jn= jn + onept
         if (l_north) jnv= jnv + onept
      endif

!$omp end single
!
!*********************************************************
! Final form of the RHS of horizontal momentum equations *
!*********************************************************
!$omp do
      do k=k0,l_nk 

!     Add advective contributions to Ru & Rv
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0, inu
            F_ru(i,j,k) =  F_oru(i,j,k) + &
                         inuvl_wxxu3_8(i,1)*F_ruw2(i-1,j,k) &
                       + inuvl_wxxu3_8(i,2)*F_ruw2(i  ,j,k) &
                       + inuvl_wxxu3_8(i,3)*F_ruw2(i+1,j,k) &
                       + inuvl_wxxu3_8(i,4)*F_ruw2(i+2,j,k)
         end do
         end do
!
         do j= j0, jnv
         do i= i0, in
            F_rv(i,j,k) =  F_orv(i,j,k) + &
                         inuvl_wyyv3_8(j,1)*F_rvw2(i,j-1,k) &
                       + inuvl_wyyv3_8(j,2)*F_rvw2(i,j  ,k) &
                       + inuvl_wyyv3_8(j,3)*F_rvw2(i,j+1,k) &
                       + inuvl_wyyv3_8(j,4)*F_rvw2(i,j+2,k)
         end do
         end do
      end do

!$omp enddo
!
!******************************************
! N.B. OPENTOP BOUNDARY CONDITION:        *
! Top temperature is externally specified *
!******************************************
!
      if (Schm_opentop_L) then
         do j= j0, jn
         do i= i0, in
            F_rb(i,j) = F_rt(i,j,k0)
            Ttop(i,j) = F_nest_t(i,j,k0)
         end do
         end do
      else
         do j= j0, jn
         do i= i0, in
            F_rb(i,j) = 0.0
            Ttop(i,j) = 0.0
         end do 
         end do
      endif
!
!*************************************
! Combination of governing equations * 
!*************************************
!
!$omp single
      a1 = Dcst_cappa_8 / Cstv_RTstr_8
      a2 = Ver_epsilon_8 / Cstv_RTstr_8
      a3 = one / ( Cstv_tau_8*Cstv_tau_8 * Cstv_RTstr_8 )
                         a4 = 0.d0
      if(Schm_autobar_L) a4 = a3/(Cstv_Zsrf_8-Cstv_Ztop_8)
!
      b1 = one / ( Dcst_grav_8 * Cstv_tau_8 )
      b2 = Ver_gamma_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b3 = one / ( Dcst_cappa_8 * Cstv_tau_8 )
      b4 = one / ( Dcst_cappa_8 * Cstv_tau_8*Cstv_tau_8*Cstv_Tstr_8 )
!
      call rpn_comm_xch_halo( F_ru, LDIST_DIM,l_niu,l_nj,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 ) 
      call rpn_comm_xch_halo( F_rv, LDIST_DIM,l_ni,l_njv,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!$omp end single
!
!$omp do
      do k=k0,l_nk
!
         if(.not.Schm_hydro_L) then
!           Combine continuity & w equations
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            do j= j0, jn
            do i= i0, in
               F_rc(i,j,k) = F_rc(i,j,k) - b1 *  &
                                ( Ver_wp_8%m(k) * F_rw(i,j,k+1) &
                                + Ver_wm_8%m(k) * F_rw(i,j,k  ) )
            end do
            end do
         endif
!
         do j= j0, jn
         do i= i0, in
!           Compute the divergence of the RHS of momentum equations
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            rdiv  = geomg_invcy2_8(j) * ( &
                    (F_ru(i,j,k)-F_ru(i-1,j,k))*geomg_invDX_8(i) &
                  + (F_rv(i,j,k)-F_rv(i,j-1,k))*geomg_invDY_8(j) )
!
!           Combine divergence & continuity equations : Rc'
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            F_rc(i,j,k) = rdiv - F_rc(i,j,k) / Cstv_tau_8
         end do
         end do
!
      end do
!$omp enddo
!
!$omp do
      do k=k0,l_nk+1
!
!        Compute Rt" & Rf"
!        ~~~~~~~~~~~~~~~~~
!
         if (.not. Schm_hydro_L) then
!           Combine Rt and Rw
!           ~~~~~~~~~~~~~~~~~
            do j= j0, jn
            do i= i0, in
               F_rt(i,j,k) = F_rt(i,j,k) + b1 * F_rw(i,j,k)
            end do
            end do
         endif
!
         do j= j0, jn
         do i= i0, in
            w_rt        = F_rt(i,j,k)
!           Compute Rt"
!           ~~~~~~~~~~~
            F_rt(i,j,k) = b2 * ( w_rt + a2 * F_rf(i,j,k) )
!           Compute Rf"
!           ~~~~~~~~~~~
            F_rf(i,j,k) = b2 * ( w_rt - a1 * F_rf(i,j,k) )
         end do
         end do
!
      enddo
!$omp enddo
!
!************************************************************
! The linear contributions to the RHS of Helmholtz equation *
!************************************************************
!
!     Finish computations of RP(Rc"), combining Rc', Rt", Rf" 
!
!$omp do
      do k=k0,l_nk
         xxx=one + Ver_dz_8%m(k) * Ver_wp_8%m(k)
         yyy=one - Ver_dz_8%m(k) * Ver_wm_8%m(k)
         do j= j0, jn
         do i= i0, in
            F_rc(i,j,k) = Ver_dz_8%m(k) * ( F_rc(i,j,k) - a4 * F_fis(i,j) ) &
                           - xxx * F_rt(i,j,k+1) + yyy * F_rt(i,j,k)
         end do
         end do
         if (.not. Schm_hydro_L) then    
            zzz=Ver_dz_8%m(k) * Ver_epsilon_8
            do j= j0, jn
            do i= i0, in
               F_rc(i,j,k) = F_rc(i,j,k) - zzz * &
                                ( Ver_wp_8%m(k) * F_rf(i,j,k+1) &
                                + Ver_wm_8%m(k) * F_rf(i,j,k  ) )
            end do
            end do
         endif
      end do
!$omp enddo
!
!     Apply lower and upper boundary conditions
!
!$omp do
      do j= j0, jn
      do i= i0, in
         F_rb(i,j       ) = F_rt(i,j,k0    ) - b3*F_rb(i,j) + b4*Ttop(i,j)
         F_rc(i,j,k0    ) = F_rc(i,j,k0    ) - Ver_cstp_8 * F_rb(i,j)
         F_rt(i,j,l_nk+1) = F_rt(i,j,l_nk+1) - a3 * F_fis(i,j)
         F_rc(i,j,l_nk  ) = F_rc(i,j,l_nk  ) + Ver_cssp_8 * F_rt(i,j,l_nk+1)
      end do
      end do
!$omp enddo      
!
!$omp end parallel
!
!     __________________________________________________________________
!
      return
      end
