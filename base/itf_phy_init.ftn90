!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_init - Initializes physics parameterization package
!
      subroutine itf_phy_init
      use phy_itf, only: PHY_COMPATIBILITY_LVL, phy_nml, phy_init
      implicit none

!authors 
!     Desgagne, McTaggart-Cowan, Chamberland -- Spring 2014
!
!revision
! v4_70 - authors          - initial version

#include <arch_specific.hf>
#include <WhiteBoard.hf>
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "out3.cdk"
#include "cstv.cdk"
#include "step.cdk"
#include "ver.cdk"
#include "path.cdk"
#include "tr3d.cdk"

      integer, parameter :: COMPATIBILITY_LVL = 6

      logical cond_satu_L
      integer dateo, err
!
!     ---------------------------------------------------------------
!
      if (.not.Schm_phyms_L) return

      if (Lun_out.gt.0) write(Lun_out,1000)

      if ( Schm_theoc_L) then
         if (Lun_out.gt.0) write(Lun_out,9500)
         return
      endif

! Important compatibility level check

      err = 0
      if ( PHY_COMPATIBILITY_LVL .ne. COMPATIBILITY_LVL ) err = -1

      call gem_error ( err, 'itf_phy_init', &
                       'Wrong physics compatibility level')

! Initialize physics configuration with default values and read 
! user configuration in namelists from file 'model_settings'

      err= 0
      err= min(phy_nml ( trim(Path_nml_S) ), err)

! We put mandatory variables in the WhiteBoard

      err= min(wb_put('itf_phy/VSTAG'       , .true.    ), err)
      err= min(wb_put('itf_phy/TLIFT'       , Schm_Tlift), err)
      err= min(wb_put('itf_phy/COUPLING'    , .false.   ), err)
      err= min(wb_put('itf_phy/READ_TRACERS', &
              Tr3d_from_gemntr_S(1:Tr3d_ntr_from_gemntr)), err)

      call gem_error ( err,'itf_phy_init','phy_nml or WB_put' )
      
! Complete physics initialization (see phy_init for interface content)

      call datp2f   ( dateo, Step_runstrt_S)

      err= phy_init ( Path_phy_S, dateo, real(Cstv_dt_8), &
              'model/Hgrid/lclphy','model/Hgrid/lclcore', &
                               G_nk+1, Ver_std_p_prof%m )

! The current physics interface operate on an arbitrary number of
! columns p_ni containing G_nk+1 levels. Here p_ni is defined as a
! whole row of points 'j' and there will be p_nj rows to compute
! P_ni & p_nj are a function of the running length p_runlgt

      err= min(wb_get('phy/satuco', cond_satu_L), err)

      call gem_error ( err,'itf_phy_init','phy_init or WB_get' )

! Consistency check for saturation calculations

      if (Out3_satues_L .and. .not.cond_satu_L) then
          Out3_satues_L = .false.
          if (Lun_out.gt.0) write(Lun_out,9600)
      endif

!     ---------------------------------------------------------------
 1000 format(/,'INITIALIZATION OF PHYSICS PACKAGE (S/R itf_phy_init)', &
             /,'====================================================')
 9500 format(/,' PHYSICS NOT SUPPORTED FOR NOW IN THEORETICAL CASE')
 9600 format(/ 'Out3_satues_L reset to .false. as SATUCO eq false')
!     ---------------------------------------------------------------
!
      return
      end
