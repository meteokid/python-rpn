!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_init - Initializes physics parameterization package
!
#include "model_macros_f.h"
!
      subroutine itf_phy_init
      use phy_itf, only: PHY_COMPATIBILITY_LVL,phy_nml,phy_init
      implicit none

!author
!     Michel Desgagne    -   Summer 2006
!
!revision
! v3_30 - Desgagne M.        - Initial version
! v3_30 - Tanguay M.         - adapt TL/AD to itf
! v3_30 - Bilodeau B.        - add call to phy_opt for offline mode
! v3_30 - Dugas B.           - correction to P_out_moyhr, add Out3_satues_L
! v4_05 - Plante A.          - add iceline option (ICELAC)
! v4_14 - Dugas B.           - define ININCR (via call to phy_optl)
! v4_40 - Lee V.             - add VSTAG flag to inform vertical coordinate
! v4_44 - Plante A.          - Add standard pressure profil std_p_prof for non orographic gwd

#include <arch_specific.hf>
#include <WhiteBoard.hf>
#include <msg.h>
#include "glb_ld.cdk"
#include "lun.cdk"
#include "grd.cdk"
#include "schm.cdk"
#include "out3.cdk"
#include "cstv.cdk"
#include "step.cdk"
#include "ver.cdk"
#include "path.cdk"
#include "tr3d.cdk"
#include "itf_phy.cdk"

      integer, parameter :: COMPATIBILITY_LVL = 6

      logical prout, cond_satu_L
      integer offset, dateo, err
!
!     ---------------------------------------------------------------
!
      if (.not.Schm_phyms_L) return

      if (Lun_out.gt.0) write(Lun_out,1000)

      prout= Lun_out.gt.0 ! for print/write statements in stdout

      if ( Schm_theoc_L) then
         if (Lun_out.gt.0) write(Lun_out,9500)
         return
      endif

! Important compatibility level check

      err = 0
      if ( PHY_COMPATIBILITY_LVL .ne. COMPATIBILITY_LVL ) then
         if (Lun_out.gt.0) write(Lun_out,9001) COMPATIBILITY_LVL, PHY_COMPATIBILITY_LVL
         err = -1
      else
         if (Lun_out.gt.0) write(Lun_out,1002) COMPATIBILITY_LVL
      endif
      call handle_error ( err,'itf_phy_init','Wrong physics compatibility level')

! Initialize physics configuration with default values and read 
! user configuration in namelists from file 'model_settings'

      err= WB_OK
      err= min(phy_nml ( trim(Path_nml_S), Lun_out ), err)

! We put mandatory variables in the WhiteBoard

      err= min(wb_put('itf_phy/VSTAG'       , .true.    ), err)
      err= min(wb_put('itf_phy/TLIFT'       , Schm_Tlift), err)
      err= min(wb_put('itf_phy/COUPLING'    , .false.   ), err)
      err= min(wb_put('itf_phy/READ_TRACERS', Tr3d_username_S(1:Tr3d_userntr)), err)
      if (.not.WB_IS_OK(err)) then
         call msg(MSG_ERROR,'(itf_phy_init) Problem with WB_put or phy_nml')
         return
      endif
      
! Complete physics initialization (see phy_init for interface content)

      p_nk = G_nk+1
      call itf_phy_gdef4 ( )
      call datp2f   ( dateo, Step_runstrt_S)
      err= phy_init ( Path_phy_S, dateo, real(Cstv_dt_8),P_LNAME_S, &
           'grid/dyn_lclcore', p_nk, Ver_std_p_prof%m)
      call handle_error ( err, 'itf_phy_init', 'phy_init' )

! The current physics interface operate on an arbitrary number of
! columns p_ni containing G_nk+1 levels. Here p_ni is defined as a
! whole row of points 'j' and there will be p_nj rows to compute
! P_ni & p_nj are a function of the running length p_runlgt

      err= WB_OK
      err= min(wb_get('phy/satuco', cond_satu_L), err)

      if (.not.WB_IS_OK(err)) then
         call msg(MSG_ERROR,'(itf_phy_init) Problem with WB_get')
         return
      endif

! Consistency check for saturation calculations
      if (Out3_satues_L .and. .not.cond_satu_L) then
          Out3_satues_L = .false.
          if (Lun_out.gt.0) write(Lun_out,9600)
      endif

!     ---------------------------------------------------------------
 1000 format(/,'INITIALIZATION OF PHYSICS PACKAGE (S/R itf_phy_init)', &
             /,'====================================================')
 1002 format(/,'PHYSICS COMPATIBILITY LEVEL IS OK: (level=',i2,')')
 9000 format(/'==> STOP IN ITF_PHY_INIT: MAXBUS TOO SMALL IN BUSESD.CDK'/ &
              '==> REQUIRED: ',i10/)
 9001 format(/'==> STOP IN ITF_PHY_INIT: INCOMPATIBLE PHYSICS INTERFACE'/ &
              '    physics interface compatibility level= ',i2/&
              '    physics package compatibility level= ',i2/)
 9500 format(/,' PHYSICS NOT SUPPORTED FOR NOW IN THEORETICAL CASE')
 9600 format(/ 'Out3_satues_L reset to .false. as SATUCO eq false')
!     ---------------------------------------------------------------
!
      return
      end
