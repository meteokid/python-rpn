!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r rhs - compute the right-hand sides of governing and derived equations
!
#include "model_macros_f.h"
!
      subroutine rhs()
!
      implicit none
#include <arch_specific.hf>
!
!author
!     Alain Patoine - Gabriel Lemay
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
! v2_31 - Desgagne M.       - remove treatment of hut1 and qct1
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_21 - Desgagne M.       - Revision Openmp
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Lepine M.         - VMM replacement with GMM
!
!object
!**********************************************************************
! See GEMergo4.doc
!**********************************************************************
!
!arguments
!        None
!
!implicits
#include "gmm.hf"
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "orh.cdk"
#include "p_geof.cdk" 
#include "rhsc.cdk"
#include "vt1.cdk" 
#include "vtx.cdk" 
#include "nest.cdk"
#include "acid.cdk"
!
!modules
!
      type(gmm_metadata) :: mymeta
      integer  i,j,k,istat
!*
!     __________________________________________________________________
!
      if (Lun_debug_L) write (Lun_out,1000)

      istat = gmm_get(gmmk_ruw1_s,ruw1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(ruw1)'
      istat = gmm_get(gmmk_rvw1_s,rvw1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(rvw1)'
      istat = gmm_get(gmmk_ut1_s,ut1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(ut1)'
      istat = gmm_get(gmmk_vt1_s,vt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(vt1)'
      istat = gmm_get(gmmk_wt1_s,wt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(wt1)'
      istat = gmm_get(gmmk_tt1_s,tt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(tt1)'
      istat = gmm_get(gmmk_bspqtx_s,bspqtx,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(bspqtx)'
      istat = gmm_get(gmmk_st1_s,st1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(st1)'
      istat = gmm_get(gmmk_zdt1_s,zdt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(zdt1)'
      istat = gmm_get(gmmk_fiptx_s,fiptx,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(fiptx)'
      istat = gmm_get(gmmk_orhsu_s,orhsu,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(orhsu)'
      istat = gmm_get(gmmk_orhsv_s,orhsv,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(orhsv)'
      istat = gmm_get(gmmk_orhsc_s,orhsc,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(orhsc)'
      istat = gmm_get(gmmk_orhst_s,orhst,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(orhst)'
      istat = gmm_get(gmmk_orhsf_s,orhsf,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(orhsf)'
      if (G_lam) then
         istat = gmm_get(gmmk_rhsu_s,rhsu,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(rhsu)'
         istat = gmm_get(gmmk_rhsv_s,rhsv,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(rhsv)'
         istat = gmm_get(gmmk_nest_u_s,nest_u,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(nest_u)'
         istat = gmm_get(gmmk_nest_v_s,nest_v,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(nest_v)'
      endif
      if (.not. Schm_hydro_L) then
         istat = gmm_get(gmmk_mutx_s,mutx,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(mutx)'
         istat = gmm_get(gmmk_orhsw_s,orhsw,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(orhsw)'
         istat = gmm_get(gmmk_qt1_s,qt1,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(qt1)'
      endif

      istat = gmm_get(gmmk_fis0_s,fis0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'rhs ERROR at gmm_get(fis0)'
!
!     Perform the computation in the first 
!     cycle of Crank-Nicholson procedure only
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      call diag_var( bspqtx, mutx, st1, qt1, 1,l_ni,1,l_nj,1,l_nk)       
!
      call diag_fip(fiptx, st1, tt1, qt1, fis0, LDIST_DIM, l_nk)
!
      call rhsp_2  ( orhsu, orhsv, orhsc,  orhst, orhsw,  orhsf, &
                      ruw1,  rvw1,  rhsu,   rhsv,nest_u, nest_v, &
                       ut1,   vt1,   wt1,    tt1,   st1,   zdt1, &
                    bspqtx, fiptx,  mutx, &
                     LDIST_DIM,l_nk  )
!     
      if (Acid_test_L)call acid_stat_rhs(fiptx,orhsu,ruw1,orhst,orhsc,2)

!     Pour debug
!      if (Acid_test_L) then
!         call glbstat (orhsc,'rhsc',LDIST_DIM,G_nk  ,1,l_ni,1,l_nj,1,G_nk  )
!         call glbstat (orhst,'rhst',LDIST_DIM,G_nk+1,1,l_ni,1,l_nj,1,G_nk+1)
!         call handle_error(-1,'rhs','rhs')
!      endif

!
1000  format(3X,'COMPUTE THE RIGHT-HAND-SIDES: (S/R RHS)')
!
!     __________________________________________________________________
!
      return
      end
