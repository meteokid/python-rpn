!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**function samegrid - 
!
#include "model_macros_f.h"
!
      logical function samegrid (unf, ni,nj, p1,p2,p3,g1,g2,g3,g4,xp,yp)
      implicit none
!
      integer unf, ni,nj, p1,p2,p3, g1,g2,g3,g4
      real xp(*), yp(*)
!
!author
!
!revision
! v3_30 - Desgagne          - Initial version
!
!object
!     Compare positional parameters
!
!arguments
!
!implicites
!
!modules
      integer  fstinf,fstluk,fstprm
      external fstinf,fstluk,fstprm
!*
      character*1    typ, grd
      character*2    var
      character*8    lab
      integer  dte, det, ipas, ip1, ip2, ip3, ig1, ig2, ig3, ig4, bit, &
               dty, swa, lng, dlf, ubc, ex1, ex2, ex3, err, key, &
               ni1, nj1, nk1, i, cnt
      real r1, r2, xps(ni), yps(nj)
!
! ---------------------------------------------------------------------
!
      samegrid = .false.
      key = fstinf(unf,ni1,nj1,nk1,-1,' ',p1,p2,p3,' ','>>')
      if (key.lt.0) then
         write(6,4000) '>>'
         stop
      endif
      if (ni1.ne.ni) goto 999
!
      err = fstprm ( key, dte, det, ipas, ni1, nj1, nk1, bit, dty,  &
                  ip1, ip2, ip3, typ, var, lab, grd, ig1, ig2, ig3, ig4, &
                  swa, lng, dlf, ubc, ex1, ex2, ex3 )
      if ( (ig1.ne.g1).or.(ig2.ne.g2).or.(ig3.ne.g3) &
                      .or.(ig4.ne.g4)) goto 999
!
      err = fstluk( xps, key, ni1,nj1,nk1)
      key = fstinf(unf,ni1,nj1,nk1,-1,' ',p1,p2,p3,' ','^^')
      if (key.lt.0) then
         write (6,4000) '^^'
         stop
      endif  
      if (nj1.ne.nj) goto 999
      err = fstluk( yps, key, ni1,nj1,nk1)
!
      samegrid = .true.
      cnt = 0
      do i=1,ni
         r1 = xps(i)+5.
         r2 = xp (i)+5.
         if (abs((r1-r2)/r1).gt.1.e-5) then
            samegrid = .false.
            cnt = cnt + 1
         endif
      end do
      if (.not.samegrid.and.(real(cnt)/real(ni).le.0.2)) then
         samegrid = .true.
         do i=1,ni
            r1 = xps(i)+5.
            r2 = xp (i)+5.
            if (abs((r1-r2)/r1).gt.1.e-4) samegrid = .false.
         end do
      endif
      if (.not.samegrid) goto 999
      cnt = 0
      do i=1,nj
         r1 = yps(i)+91.
         r2 = yp (i)+91.
         if (abs((r1-r2)/r1).gt.1.e-5) then
            samegrid = .false.
            cnt = cnt + 1
         endif
      end do
      if (.not.samegrid.and.(real(cnt)/real(nj).le.0.2)) then
         samegrid = .true.
         do i=1,nj
            r1 = yps(i)+91.
            r2 = yp (i)+91.
            if (abs((r1-r2)/r1).gt.1.e-4) &
                 samegrid = .false.
         end do                  
      endif
! 
 4000 format (/' Can t find ',a2,' record describing ',a2,  &
               ' grid -- ABORT --'/)
! ---------------------------------------------------------------------
!     
 999  return
      end




!**s/r samegrid2
!
      subroutine samegrid2 (nis,njs, g1s, g2s, g3s, g4s, xps,yps, &
                            nid,njd, g1d, g2d, g3d, g4d, xpd,ypd, inttyp)
      implicit none
!
      character*(*) inttyp
      integer nis,njs, g1s, g2s, g3s, g4s
      integer nid,njd, g1d, g2d, g3d, g4d
      real xps(nis), yps(njs), xpd(nid), ypd(njd)
!
!author   M. Desgagne	-- Summer 2010 --
!
!revision
! v4_14 - Desgagne          - Initial version
!
!object
!     Compare positional parameters
!
      logical samegrid
      integer i,j,ideb,jdeb,cnt,ii
      real eps1,eps2,r1,r2
!
! ---------------------------------------------------------------------
!
      if ( (g1s.ne.g1d).or.(g2s.ne.g2d).or.(g3s.ne.g3d).or.(g4s.ne.g4d)) goto 999

      do i=1,nis
        ideb = i
        if (xps(i).gt.xpd(1)) exit
      end do
      ideb = max(1,ideb-1)

      do j=1,njs
        jdeb = j
        if (yps(j).gt.ypd(1)) exit
      end do
      jdeb = max(1,jdeb-1)

      eps1 = 1.e-5 
      eps2 = 1.e-4

      ii = max(min((ideb),nis),1)
      r1 = xps(ii)+5.
      r2 = xpd (1)+5.
      samegrid = (abs((r1-r2)/r1).le.eps2)

      if (samegrid) then
         cnt = 0
         do i=1,nid
            ii = max(min((ideb+i-1),nis),1)
            r1 = xps(ii)+5.
            r2 = xpd (i)+5.
            if (abs((r1-r2)/r1).gt.eps1) then
               samegrid = .false.
               cnt = cnt + 1
            endif
         end do
         if (.not.samegrid.and.(real(cnt)/real(nid).le.0.2)) then
            samegrid = .true.
            do i=1,nid
               ii = max(min((ideb+i-1),nis),1)
               r1 = xps(ii)+5.
               r2 = xpd (i)+5.
               if (abs((r1-r2)/r1).gt.eps2) samegrid = .false.
            end do
         endif
      endif

      if (.not.samegrid) goto 999

      ii = max(min((jdeb),njs),1)
      r1 = yps(ii)+5.
      r2 = ypd (1)+5.
      samegrid = (abs((r1-r2)/r1).le.eps2)

      if (samegrid) then
         cnt = 0
         do i=1,njd
            ii = max(min((jdeb+i-1),njs),1)
            r1 = yps(ii)+5.
            r2 = ypd (i)+5.
            if (abs((r1-r2)/r1).gt.eps1) then
               samegrid = .false.
               cnt = cnt + 1
            endif
         end do
         if (.not.samegrid.and.(real(cnt)/real(njd).le.0.2)) then
            samegrid = .true.
            do i=1,njd
               ii = max(min((jdeb+i-1),njs),1)
               r1 = yps(ii)+5.
               r2 = ypd (i)+5.
               if (abs((r1-r2)/r1).gt.eps2) samegrid = .false.
            end do
         endif
      endif
      if (.not.samegrid) goto 999
!
      inttyp = 'NEAREST'
!
! ---------------------------------------------------------------------
!     
 999  return
      end

