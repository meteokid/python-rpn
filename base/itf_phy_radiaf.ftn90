!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_radiaf -- Initialization of climatological ozone data
!                        and radiation table
!
#include "model_macros_f.h"
!
      subroutine itf_phy_radiaf (F_fichier_S, F_chemin_S, F_value,  &
                                                     NX, F_flag_L)
      implicit none
!
      character* (*) F_fichier_S, F_chemin_S
      logical F_flag_L
      integer NX
      real F_value (NX)
!
!author
!     M. Desgagne
!
!revision
! v3_31 - Desgagne M.       - initial version
! v4_03 - Desgagne M.       - ISST + new ozone file
!
!object
!     This routine is called by the physics package to initialize
!     either the radiation or ozone arrays in the dynamics
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_nomvar_S    I      array of nom var
! F_fichier_S   I      file name of input file
! F_chemin_S    I      path of the input file
! F_value       O      data read in from input file
! NX            I      number of points of data to read
! F_flag_L      I      .true. for RPN standard file format (ozone)
!                      .false.for sequential unformatted file format (radiation)
!
#include "ptopo.cdk"
#include "path.cdk"
!
      character*1024 filename
      character*26 datatype_S
      logical local_L,found_L,isfst_L
      integer iun,ilir,inbr,indice,long,status,ityp,ierr
      integer fnom,fstouv,fstopc,fstfrm,fclos,wkoffit
      data iun /26/
      data datatype_S /'RADIATION TABLE FILE: '/
!-----------------------------------------------------------------
!
      if (F_flag_L) then
         if (Ptopo_myproc.eq.0) then
             write(*,*)'F_fichier_S',F_fichier_S
             write(*,*)'F_chemin_S',F_chemin_S
         endif
         call itf_phy_rdozone (F_fichier_S, F_chemin_S)
         return
      endif
!
      status = 0
!
      if (Ptopo_myproc.eq.0) then
!
         filename = trim(Path_input_S)//'/'//trim(F_fichier_S)
         inquire (FILE=filename,EXIST=found_L)
         if (.not.found_L) then
            filename = trim(F_chemin_S)//trim(F_fichier_S)
            inquire (FILE=filename,EXIST=found_L)
         endif
!
         if (found_L) then
            ilir = wkoffit(filename)
            if ((ilir.eq.1) .or.(ilir.eq.2).or. &
                (ilir.eq.33).or.(ilir.eq.34) ) then
               write (6,1001) trim(datatype_S),trim(filename)
               ilir = fnom (iun,filename,'STD+RND+OLD',0)
               ilir = fstouv (iun,'RND')
               call rd_radtab (F_value,iun,NX,status)
               inbr = fstfrm (iun)
               inbr = fclos  (iun)    
            else
               print*, ' FILE ',trim(filename)
               print*, ' NOT FST FILE FORMAT -- ABORT --'
               status = -1
            endif
         else
            print*
            print *,'********************************************'
            print *,'   CAN NOT FIND ',datatype_S,trim(filename)
            print *,'********************************************'
            status = -1
         endif
!     
      endif
!
      call handle_error(status,'itf_phy_radiaf','itf_phy_radiaf')
!
      call RPN_COMM_bcast (F_value,NX,"MPI_REAL",0,"grid",ierr)
!
 1001 format (/a/a)
!
!-----------------------------------------------------------------
!
      return
      end
