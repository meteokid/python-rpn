!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_step - Apply the physical processes: CMC/RPN package
!
#include "model_macros_f.h"

      subroutine itf_phy_step (F_stepno)

      use itf_phy_iface  , only : itf_phy_geti, itf_phy_inincr
      use phy_input_iface, only : phy_acquire_data !TODO: rm w/ itf_phy_geti

      implicit none
#include <arch_specific.hf>
!
      integer, intent(IN) :: F_stepno
!
!author 
!     Michel roch - rpn - april 1994
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_21 - Desgagne/Methot/Bilodeau - dzmin calculation
! v2_31 - Desgagne          - clean up and introduce h2o tracers
! v2_32 - Lee V.            - call genslabp here, add "HY" record to slabs
! v3_00 - Laroche S.        - adapted for simplified physics
! v3_02 - Tanguay M.        - Add V4dg_oktr_L for v4d_rwtraj_kmkt 
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_11 - Dugas B.          - Correct DUMPBUS mechanism for OpenMP
! v3_12 - Leduc A-M         - Add variables gzm and topo
! v3_20 - Lee & Kallaur     - Add coding to support chemistry modules. (may/june 2005)
! v3_21 - Valcke, S.        - Bugfix: no call to itf_phy_apply in offline mode
! v3_30 - Tanguay M.        - adapt TL/AD to pvptr
! v3_30 - McTaggart-Cowan R.- Allow for user-defined domain tag extensions
! v4_03 - Spacek L.         - Staggered version
! v4    - Chamberland-Spacek - Staggered version
! v4_04 - Plante A.         - Remove offline mode
! v4_05 - Desgagne M.       - Update AIX binding rules
! v4_13 - Spacek L.         - Allocate geofld as entry analogy to Phy_busper3D
! v4_14 - Dugas B.          - Account for increment forcings
!                           - dumpbus3 is now all done here
!   
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_stepno      O           step number
!----------------------------------------------------------------
!
#include <rmnlib_basics.hf>
#include <gmm.hf>
#include <msg.h>
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
#include "itf_phy_buses.cdk"
#include "itf_phy_config.cdk"
#include "out3.cdk"
#include "cstv.cdk"
#include "rstr.cdk"
#include "clim.cdk"
#include "modconst.cdk"
#include "path.cdk"
#include "grd.cdk"

      integer,parameter :: MAX_COMMBLOC_SWAP = 10

      integer,external :: phy_dataload5
      external :: itf_phy_geom, itf_phy_xhfold_3d2

      integer, save :: l_phy_gid = -1
      integer, save :: dateo = -1
      integer, save :: pslic

      integer PG_ni,PG_nj
      integer j, obussiz, err, gmmstat,g_phy_gid
      character*512 fn,geofilename_S
      real, dimension(:,:), allocatable :: obusval
!
      real, pointer, dimension (:,:) :: BUSENT_3d  => null()
      real, pointer, dimension (:,:) :: BUSDYN_3d  => null()
      real, pointer, dimension (:,:) :: BUSVOL_3d  => null()
      type(gmm_metadata) :: meta
      real :: gxfi(G_ni+1), gyfi(G_nj)
!
!     ---------------------------------------------------------------
!
      call iniobus(obussiz)
      allocate (obusval(l_ni*l_nj,obussiz))
      obusval = 999999.
!
      err = gmm_get('BUSENT_3d',BUSENT_3d,meta)
      if (F_stepno.eq.0) BUSENT_3d = 0.

      call itf_phy_prep ()
!
      !TODO: find other solution for inbloc - rpn_comm_bloc creates new communicator every call - we hit a limit after about 500 on AIX
      if (F_stepno < MAX_COMMBLOC_SWAP) &
           call rpn_comm_bloc(Ptopo_ninblocx,Ptopo_ninblocy)

      if (l_phy_gid < 0) call itf_phy_gdef(l_phy_gid, g_phy_gid, gxfi, gyfi)
      if (dateo < 0) call datp2f(dateo,Mod_runstrt_S)
      geofilename_S = 'GEOPHY/Gem_geophy.fst'
      if (Grd_yinyang_L) &
           geofilename_S = 'GEOPHY/Gem_geophy_'//trim(Grd_yinyang_S)//'.fst'
      !TODO: remove this next conditional when FCREST is removed
      if (P_pbl_schsl_s /= 'FCREST') then
         err = phy_dataload5(itf_phy_geom,itf_phy_xhfold_3d2,dateo, &
                             nint(cstv_dt_8),F_stepno,l_phy_gid, &
                             Path_phyincfg_S,Path_phy_S,geofilename_S)
      else 
         err = 0
         if (F_stepno == 0) then
            call phy_acquire_data ( itf_phy_geti,p_ni,p_nj,p_nk, p_bper_siz,&
                                    F_stepno, Rstri_sdon,Lun_out>0,err )
         endif
      endif
      call handle_error(err,'itf_phy_step','Problem getting input data') 

      if (F_stepno < MAX_COMMBLOC_SWAP) &
           call rpn_comm_bloc(Ptopo_nblocx,Ptopo_nblocy)

      if (Lun_out.gt.0) write(Lun_out,1000) F_stepno

      if (G_lam) then
         PG_ni  = G_ni - 4
         PG_nj  = G_nj - 4
      else
         PG_ni  = G_ni
         PG_nj  = G_nj
      endif

      call pe_rebind (Ptopo_smtphy,(Ptopo_myproc.eq.0).and. &
                                   (F_stepno    .eq.0)  )

      call phy_step (F_stepno)

      call pe_rebind (Ptopo_smtdyn,(Ptopo_myproc.eq.0).and. &
                                   (F_stepno    .eq.0) )

      gmmstat = gmm_get ('BUSPER_3d',BUSPER_3d,meta)
      gmmstat = gmm_get ('BUSDYN_3d',BUSDYN_3d,meta)
      gmmstat = gmm_get ('BUSVOL_3d',BUSVOL_3d,meta)

      do j = 1, p_nj
         call itf_phy_update ( BUSDYN_3d(1,j), j, p_nk, F_stepno.gt.0 )
      end do

!$omp parallel do
      do j = 1, p_nj
         call itf_phy_extract ( BUSENT_3d(1,j), BUSPER_3d(1,j), BUSVOL_3d(1,j), &
                                                   obusval, F_stepno, j, p_nk )
      end do
!$omp end parallel do
!
!
      call out_phy (obusval,l_ni,l_nj,F_stepno)
!
      deallocate (obusval)
!
      call itf_phy_apply ( F_stepno.gt.0 )
!
 1000 format(/'PERFORM A PHYSICS STEP: stepno= ',i6, &
              ' (S/R itf_phy_step)'/57('='))
!
!     ---------------------------------------------------------------
!
      return
      end
