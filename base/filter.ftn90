!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r filter - filters given field using 2-delta x and/or dgf filter
!
#include "model_macros_f.h"
!
      subroutine filter (F_fd, F_lx, F_coef, F_d_S,  &
                         F_flag_L,DIST_DIM,Nk)
!
      implicit none
#include <arch_specific.hf>
!
      integer DIST_DIM,F_lx,Nk
      real F_fd(DIST_SHAPE,Nk),  F_coef
      character*1 F_d_S
      logical F_flag_L
!
!author
!     andre methot
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v3_12 - Lee V.            - removed work fields from calling parameters
!
!object
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_stepno      O           step number
!----------------------------------------------------------------
!
! ______________________________________________________________________
!         |                                             |          |   |
!  NAME   |             DESCRIPTION                     |DIMENSIONS|IN |
!         |                                             |          |OUT|
! --------|---------------------------------------------|----------|---|
!         |                                             |          |   |
! F_fd | field to be filtered                        | fnis,fnjs|io |
!         |                                             | fnks     |   |
!         |                                             |          |   |
! F_lx  | number of pass into 2 delta x filter        | scalar   | i |
!         |                                             |          |   |
! F_coef  | 2 delta x filter coefficient                | scalar   | i |
!         |                                             |          |   |
!         |                                             |          |   |
! F_d_S   | 'G' : topography is on geopotential grid    | scalar   | i |
!         | 'U' : topography is on U wind component grid|          |   |
!         | 'V' : topography is on V wind component grid|          |   |
!         |                                             |          |   |
! F_flag_L | switch: if true => for each pass in         | scalar   | i |
!         |         2 delta x filter, do an additionnal |          |   |
!         |         pass with negative a negative coefficient      |   |
!         |                                             |          |   |
!           THIS CODE DOES NOT ALLOW 'U' or 'V' GRID YET
! ______________________________________________________________________
!
!implicit
#include "glb_ld.cdk"
#include "geomg.cdk"
!
      integer i,j,k,n
      real w1(l_minx:l_maxx,l_miny:l_maxy,nk)
      real w2(l_minx:l_maxx,l_miny:l_maxy,nk)
      real*8 whx,why
      pointer (pawhx, whx(l_minx:l_maxx)), (pawhy, why(l_miny:l_maxy)) 
!*
!        -----------------------------------------------------
!     IN CASE WHERE ZERO IS NOT QUITE EQUAL TO ZERO

      if ( abs(F_coef) .lt. 0.0001 ) return
!

      call handle_error_l(F_coef>0..and.F_coef<=0.5,'filter','THE RANGE OF VALIDITY OF THE COEFFICIENT IS NOT RESPECTED')

      if ( ( F_coef .gt. 0. ) .and. ( F_coef .le. 0.5 ) ) then
         pawhx = 0
         pawhy = 0 
         if ((F_d_S.eq.'G').or.(F_d_S.eq.'V')) &
              pawhx= loc(geomg_hx_8(l_minx))
         if ((F_d_S.eq.'G').or.(F_d_S.eq.'U')) &
              pawhy= loc(geomg_hy_8(l_miny))
         if (F_d_S.eq.'U') pawhx= loc(geomg_hxu_8(l_minx))
         if (F_d_S.eq.'V') pawhy= loc(geomg_hyv_8(l_miny))
!
         do n=1,F_lx
         do k=1,Nk
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            w2(i,j,k) = F_fd(i,j,k)
         end do
         end do
         end do
         call xyfil (F_fd,w2,w1,F_coef,whx,why,.false.,LDIST_DIM,Nk)
         if ( F_flag_L ) then 
         do k=1,Nk
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            w2(i,j,k) = F_fd(i,j,k)
         end do
         end do
         end do
         call xyfil(F_fd,w2,w1,-F_coef,whx,why,.false.,LDIST_DIM,Nk)
         endif
         end do
       endif
!
!-------------------------------------------------------------
!-------------------------------------------------------------
!
      return
      end
