!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r stat_ps - Evaluate average of surface pressure (Based on psadj)
!
      subroutine stat_ps

      implicit none

#include "gmm.hf"
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "vt1.cdk"
#include "glb_pil.cdk"
#include "grd.cdk"
#include "dcst.cdk"

      integer err, i, j, istat
      real wk1(l_minx:l_maxx,l_miny:l_maxy) 
      real*8 :: l_avg_8,g_avg_8
      real*8, parameter ::  ZERO_8 = 0.0, QUATRO_8 = 4.0
!     _________________________________________________________________
!
      istat= gmm_get(gmmk_st1_s,st1)

!$omp parallel private(i)
!$omp do
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            wk1(i,j)= (exp(st1(i,j)) - 1.) * Cstv_pref_8
         end do
         end do
!$omp enddo
!$omp end parallel

      l_avg_8 = ZERO_8
      do j=1+pil_s,l_nj-pil_n
      do i=1+pil_w,l_ni-pil_e
         l_avg_8= l_avg_8 + Geomg_area_8(i,j)*Geomg_mask_8(i,j)*wk1(i,j)
      enddo
      enddo

      if (Grd_yinyang_L) then

         call RPN_COMM_allreduce(l_avg_8,g_avg_8,1,&
              "MPI_DOUBLE_PRECISION","MPI_SUM","MULTIGRID",err)

      else

         call RPN_COMM_allreduce(l_avg_8,g_avg_8,1, &
              "MPI_DOUBLE_PRECISION","MPI_SUM","GRID",err )

      endif

      g_avg_8 = g_avg_8 / ( QUATRO_8 * Dcst_pi_8 )

      if (Lun_out>0) write(Lun_out,*) 'AVERAGE SURFACE PRESSURE = ', g_avg_8  

!     _________________________________________________________________
!
      return
      end
