!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r nlip_2 - compute non-linear terms:  Nu, Nv, Nt, Nc, Nw, Nf,
!             - compute full right-hand side of Helmholtz eqn: Rp=Rc-Nc
!
!**********************************************************************
!
#include "model_macros_f.h"
!
      subroutine nlip_2 ( F_nu , F_nv , F_nt   , F_nc , F_nw , F_nf  , F_nb, &
                          F_u  , F_v  , F_t    , F_s  ,  F_q , F_zd  ,F_fip, &
                          F_rp , F_rc , F_BsPq , F_mu , &
                          DIST_DIM, Nk )
!
      implicit none
!
      integer DIST_DIM, Nk
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk+1)  ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk+1)  ,F_nf   (DIST_SHAPE,Nk+1)  , &
              F_nb   (DIST_SHAPE)       ,F_zd   (DIST_SHAPE,Nk+1)  , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk+1)  ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,0:Nk+1),F_fip  (DIST_SHAPE,0:Nk+1), &
              F_rp   (DIST_SHAPE,Nk)    ,F_rc   (DIST_SHAPE,Nk)    , &
              F_BsPq (DIST_SHAPE,0:Nk+1),F_mu   (DIST_SHAPE,Nk+1)
!
!author
!     Alain Patoine - split from nli.ftn
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_21 - Lee V.            - modifications for LAM version
! v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
!                             remove F_pptt and introduce Ncn
! v3_00 - Qaddouri & Lee    - For LAM, set Nu, Nv values on the boundaries
! v3_00                       of the LAM grid to zeros.
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_21 - Desgagne M.       - Revision OpenMP
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Girard C.         - Open top
! v4_40 - Lee/Qaddouri      - Adjust range of calculation for Yin-Yang
!
!object
!
!arguments
!     see documentation of appropriate comdecks
!
!implicits
#include "glb_ld.cdk"
#include "lam.cdk"
#include "grd.cdk"
#include "ptopo.cdk"

!
      integer i02, in2, j02, jn2, k0

!*
!     __________________________________________________________________
!

      i02=1+pil_w
      in2=l_ni-pil_e
      j02=1+pil_s 
      jn2=l_nj-pil_n 

      k0=1+Lam_gbpil_T
 
      call nlip_2_2     ( F_nu , F_nv , F_nt   , F_nc , F_nw , F_nf  , F_nb, &
                          F_u  , F_v  , F_t    , F_s  ,  F_q , F_zd  ,F_fip, &
                          F_rp , F_rc , F_BsPq , F_mu , &
                          DIST_DIM, Nk, &
                          i02,j02,in2,jn2,k0 )
      return
      end
!
! 2nd stage added for OpenMP
!
      subroutine nlip_2_2(F_nu , F_nv , F_nt   , F_nc , F_nw , F_nf  , F_nb, &
                          F_u  , F_v  , F_t    , F_s  ,  F_q , F_zd  ,F_fip, &
                          F_rp , F_rc , F_BsPq , F_mu , &
                          DIST_DIM, Nk, &
                          i02,j02,in2,jn2,k0 )
!
      implicit none
!
      integer DIST_DIM, Nk,i02,j02,in2,jn2,k0
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk+1)  ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk+1)  ,F_nf   (DIST_SHAPE,Nk+1)  , &
              F_nb   (DIST_SHAPE)       ,F_zd   (DIST_SHAPE,Nk+1)  , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk+1)  ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,0:Nk+1),F_fip  (DIST_SHAPE,0:Nk+1), &
              F_rp   (DIST_SHAPE,Nk)    ,F_rc   (DIST_SHAPE,Nk)    , &
              F_BsPq (DIST_SHAPE,0:Nk+1),F_mu   (DIST_SHAPE,Nk+1)
!
#include "glb_ld.cdk"
#include "grd.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "cori.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "that.cdk"
#include "acid.cdk"
 
!      common/xiln/iln
!      integer iln
!
      integer i, j, k, i0, i0u, in, inu, j0, j0v, jn, jnv, nij  
      real    ndiv             ,w_nt
      real*8  b1,b2,b3,b4, c1,c2,c3, qbar, pr0_8, &
              one, w1,w2,w3, barz, barzp, wk2(DIST_SHAPE)
!
      parameter ( one=1.d0 )
!
      real*8, dimension(i02:in2,j02:jn2) :: xtmp_8, ytmp_8
      real qtop(DIST_SHAPE)
!
      pr0_8=0.d0
      if(Schm_pior_L) pr0_8=one
! --------------------------------------------------------------------
!
      call rpn_comm_xch_halo( F_t   , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_BsPq, LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_zd  , LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
        call rpn_comm_xch_halo( F_mu,LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_fip,LDIST_DIM,l_ni,l_nj,G_nk+2, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
      if (Cori_cornl_L) then
        call rpn_comm_xch_halo( F_u ,LDIST_DIM,l_niu,l_nj,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
        call rpn_comm_xch_halo( F_v ,LDIST_DIM,l_ni,l_njv,G_nk, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif
!
      b1 = one / ( Dcst_grav_8 * Cstv_tau_8 )
      b2 = Ver_gamma_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b3 = one / ( Dcst_cappa_8 * Cstv_tau_8 )
      b4 = one / ( Dcst_cappa_8 * Cstv_tau_8*Cstv_tau_8*Cstv_Tstr_8 )
!
      c1 = Dcst_rgasd_8 / Dcst_rayt_8**2
      c2 = one / Dcst_rayt_8**2
      c3 = Dcst_rayt_8**2 * Ver_epsilon_8
!
!$omp parallel private(xtmp_8, ytmp_8,w_nt,barz,barzp,ndiv,wk2, &
!$omp w1,w2,w3,qbar)

!
!***********************************************************
! The nonlinear deviation of horizontal momentum equations *
!***********************************************************
!
!     Indices
      i0  = 1+pil_w
      i0u = 1+pil_w 
      in  = l_ni -pil_e
      inu = l_niu-pil_e
      j0  = 1+pil_s
      j0v = 1+pil_s
      jn  = l_nj -pil_n
      jnv = l_njv-pil_n
      nij = (in - i0 +1)*(jn - j0 +1)
      if (Grd_yinyang_L) then
          if (l_west)  i0u = i0u-1 
          if (l_east)  inu = inu+1
          if (l_south) j0v = j0v-1
          if (l_north) jnv = jnv+1
      endif
!
!$omp do
      do 100 k=k0,l_nk
!
!     Compute Nu for hydrostatic version 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!     Pressure gradient term: RT' barXZ * dBsPq/dX
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= j0, jn
      do i= i0u, inu
         barz  = Ver_wp_8%m(k)*F_t(i  ,j,k+1) &
                +Ver_wm_8%m(k)*F_t(i  ,j,k)
         barzp = Ver_wp_8%m(k)*F_t(i+1,j,k+1) &
                +Ver_wm_8%m(k)*F_t(i+1,j,k)
         w2 = ( one - intuv_c0xxu_8(i) ) * barz &
                    + intuv_c0xxu_8(i)   * barzp - Cstv_tstr_8
         w3 = ( F_BsPq(i+1,j,k) - F_BsPq(i,j,k) ) * Geomg_invDXu_8(i)
         F_nu(i,j,k) = c1 * ( w2 * w3 )
      end do
      end do
!
      if (Acid_test_L)call acid_stat_nlip_2(F_t,F_BsPq,F_nu,k,1)
!
      if (Cori_cornl_L) then

!        V barY stored in wk2
!        ~~~~~~~~~~~~~~~~~~~~
         do j = j0, jn
         do i = i0u-1, inu+2
            wk2(i,j)  = inuvl_wyvy3_8(j,1) * F_v(i,j-2,k)  &
                      + inuvl_wyvy3_8(j,2) * F_v(i,j-1,k)  &
                      + inuvl_wyvy3_8(j,3) * F_v(i,j  ,k)  &
                      + inuvl_wyvy3_8(j,4) * F_v(i,j+1,k)          
         end do
         end do

!        Coriolis term: - f * V barXY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0u, inu
            F_nu(i,j,k) = F_nu(i,j,k) - Cori_fcoru_8(i,j) * &
           (inuvl_wxxu3_8(i,1)*wk2(i-1,j)+inuvl_wxxu3_8(i,2)*wk2(i  ,j) &
          + inuvl_wxxu3_8(i,3)*wk2(i+1,j)+inuvl_wxxu3_8(i,4)*wk2(i+2,j))
         end do
         end do
      endif
!
      if (Acid_test_L)call acid_stat_nlip_2(F_t,F_BsPq,F_nu,k,2)
!
!     Compute Nv for hydrostatic version 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!     Pressure gradient term: RT' barYZ * dBsPq/dY
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= j0v, jnv
      do i= i0, in
         barz  = Ver_wp_8%m(k)*F_t(i,j  ,k+1) &
                +Ver_wm_8%m(k)*F_t(i,j  ,k)
         barzp = Ver_wp_8%m(k)*F_t(i,j+1,k+1) &
                +Ver_wm_8%m(k)*F_t(i,j+1,k)
         w2 = ( one - intuv_c0yyv_8(j) ) * barz &
                    + intuv_c0yyv_8(j)   * barzp - Cstv_tstr_8
         w3 = ( F_BsPq(i,j+1,k) - F_BsPq(i,j,k) ) * Geomg_invDYv_8(j)
         F_nv(i,j,k) = c1 * ( w2 * w3 )
      end do
      end do
!
      if (Cori_cornl_L) then

!        U barX stored in wk2
!        ~~~~~~~~~~~~~~~~~~~~
         do j = j0v-1, jnv+2
         do i = i0, in
            wk2(i,j)  = inuvl_wxux3_8(i,1)*F_u(i-2,j,k)  &
                      + inuvl_wxux3_8(i,2)*F_u(i-1,j,k)  &
                      + inuvl_wxux3_8(i,3)*F_u(i  ,j,k)  &
                      + inuvl_wxux3_8(i,4)*F_u(i+1,j,k) 
         end do
         end do

!        Coriolis term: + f * U barXY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j = j0v, jnv
         do i = i0, in
            F_nv(i,j,k) =   F_nv(i,j,k) + Cori_fcorv_8(i,j) * &
           (inuvl_wyyv3_8(j,1)*wk2(i,j-1)+inuvl_wyyv3_8(j,2)*wk2(i,j  ) &
          + inuvl_wyyv3_8(j,3)*wk2(i,j+1)+inuvl_wyyv3_8(j,4)*wk2(i,j+2))
         end do
         end do
!
      endif
!
      if (.not. Schm_hydro_L) then
!
!        Add nonhydrostatic contributions to Nu 
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!        Mu term: mu barXZ * dfi'/dX
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0u, inu
            barz  = Ver_wp_8%m(k)*F_mu(i  ,j,k+1) &
                   +Ver_wm_8%m(k)*F_mu(i  ,j,k)
            barzp = Ver_wp_8%m(k)*F_mu(i+1,j,k+1) &
                   +Ver_wm_8%m(k)*F_mu(i+1,j,k)
            w1 = ( one - intuv_c0xxu_8(i) ) * barz &
                       + intuv_c0xxu_8(i)   * barzp
            w2 = ( F_fip(i+1,j,k)-F_fip(i,j,k) ) * Geomg_invDXu_8(i)
            F_nu(i,j,k) = F_nu(i,j,k) + c2 * w1 * w2
         end do
         end do
!
         if (Acid_test_L)call acid_stat_nlip_2(F_t,F_BsPq,F_nu,k,3)
!
!        Add nonhydrostatic contributions to Nv 
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!        Mu term: mu barYZ * dfi'/dY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0v, jnv
         do i= i0, in            
            barz  = Ver_wp_8%m(k)*F_mu(i,j  ,k+1) &
                   +Ver_wm_8%m(k)*F_mu(i,j  ,k)
            barzp = Ver_wp_8%m(k)*F_mu(i,j+1,k+1) &
                   +Ver_wm_8%m(k)*F_mu(i,j+1,k)
            w1 = ( one - intuv_c0yyv_8(j) ) * barz &
                       + intuv_c0yyv_8(j)   * barzp
            w2 = ( F_fip(i,j+1,k) - F_fip(i,j,k) ) * Geomg_invDYv_8(j)
            F_nv(i,j,k) = F_nv(i,j,k) + c2 * w1 * w2
         end do
         end do

      endif
!     
 100  continue      
!$omp enddo
!
!     Set  Nu=0  on the east and west boundaries of the LAM grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
    if (.not.Grd_yinyang_L) then
      if (G_lam) then
         if (l_west) then
!$omp do
             do k=1,l_nk
             do j=1+pil_s,l_nj-pil_n
                F_nu(pil_w,j,k) = 0.
             end do
             enddo
!$omp enddo
         endif
         if (l_east) then
!$omp do
            do k=1,l_nk
            do j=1+pil_s,l_nj-pil_n
               F_nu(l_ni-pil_e,j,k) = 0.
            end do
            enddo
!$omp enddo
         endif
      endif

!     Set  Nv=0  on the north and south boundaries  of the LAM grid
!     and        at the north and south poles       of the GLOBAL grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      if (l_south) then
!$omp do
         do k=1,l_nk
         do i=1+pil_w,l_ni-pil_e
            F_nv(i,pil_s,k) = 0.
         end do
         enddo
!$omp enddo
      endif
      if (l_north) then
!$omp do
         do k=1,l_nk
         do i=1+pil_w,l_ni-pil_e
            F_nv(i,l_nj-pil_n,k) = 0.
         end do
         enddo
!$omp enddo
      endif
!
    endif
      if (Acid_test_L)call acid_stat_nlip_2(F_t,F_BsPq,F_nu,k,4)
!
!
!********************************************************
! The nonlinear deviation of the thermodynamic equation *
!********************************************************
!
!     Compute Nt'
!     ~~~~~~~~~~
!$omp do
      do k=k0,l_nk+1
!
         w1 = one / Cstv_tstr_8
         do j= j0, jn
         do i= i0, in
            xtmp_8(i,j) = F_t(i,j,k) * w1
         end do
         end do
         call vlog ( ytmp_8, xtmp_8, nij )
!
         if(Schm_opentop_L.and.k.eq.k0) then
            do j= j0, jn
            do i= i0, in
               F_nb(i,j) = Cstv_invT_8*ytmp_8(i,j)
            end do
            end do
         endif
!
         w1 = Ver_idz_8%t(k) / Cstv_RTstr_8
         do j= j0, jn
         do i= i0, in
            w2 = ytmp_8(i,j) + w1 * ( F_fip(i,j,k) - F_fip(i,j,k-1) ) &
                                   + Ver_dbdz_8%t(k) * F_s(i,j)
            F_nt(i,j,k) = Cstv_invT_8 * ( w2 - ln_that%t(k) ) + F_zd(i,j,k)*dln_that%t(k)
         end do
         end do
!
      end do
!$omp enddo
!
!************************************
! The nonlinear deviations of the w *
! and calculation of Nt" and Nf"    *
!************************************
!
!$omp do
      do k=k0,l_nk+1
!
         if (.not.Schm_hydro_L) then
!           ~~~~~~~~~~~~~~~
!           non-hydrostatic
!           ~~~~~~~~~~~~~~~
            do j= j0, jn
            do i= i0, in
               qbar=(Ver_wp_8%t(k)*F_q(i,j,k)+Ver_wm_8%t(k)*F_q(i,j,k-1))
!              Compute Nw'
!              ~~~~~~~~~~~
               F_nw(i,j,k) = - Dcst_grav_8 * ( F_mu  (i,j,k) &
                      - Ver_idz_8%t(k) * ( F_q(i,j,k) - F_q(i,j,k-1) ) - pr0_8 * qbar )
              !Finish computing Nt'
               ~~~~~~~~~~~~~~~~~~~~
               F_nt(i,j,k) = F_nt(i,j,k) - Cstv_invT_8 * pr0_8 * qbar
!              Combine Nt' and Nw'
!              ~~~~~~~~~~~~~~~~~~~
               F_nt(i,j,k) = F_nt(i,j,k) + b1 * F_nw(i,j,k)
            end do
            end do
         endif
!
         do j= j0, jn
         do i= i0, in
            w_nt        = F_nt(i,j,k)
!           Compute Nt"
!           ~~~~~~~~~~~
            F_nt(i,j,k) = b2 * w_nt
!           Compute Nf"
!           ~~~~~~~~~~~
            F_nf(i,j,k) = b2 * w_nt
         end do
         end do
!
      end do
!$omp enddo
!
!*******************************************************************
! The nonlinear deviation of the continuity equation               *
! Horizontal Divergence of (Nu,Nv) combined with Nc (stored in Nc) *
!*******************************************************************
!
!$omp single
      call rpn_comm_xch_halo( F_nu, LDIST_DIM,l_niu,l_nj,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_nv, LDIST_DIM,l_ni,l_njv,G_nk, &
                   G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!$omp end single
!
!$omp do
      do k=k0,l_nk
!
!        Compute Nc
!        ~~~~~~~~~~
!
         do j = j0, jn
         do i = i0, in
            xtmp_8(i,j) = one + Ver_dbdz_8%m(k) * F_s(i,j)
         end do
         end do
         call vlog(ytmp_8, xtmp_8, nij)
!
         do j = j0, jn
         do i = i0, in
            w1 = ytmp_8(i,j) - Ver_dbdz_8%m(k) * F_s(i,j)
            F_nc(i,j,k) = Cstv_invT_8 * w1
         enddo
         enddo
!
         if(.not.Schm_hydro_L) then
             do j= j0,jn
             do i= i0,in
                F_nc(i,j,k) = F_nc(i,j,k) - b1 * &
                            ( Ver_wp_8%m(k) * F_nw(i,j,k+1) &
                            + Ver_wm_8%m(k) * F_nw(i,j,k  ) )
             end do
             end do
         endif
!
!        Compute Nc'
!        ~~~~~~~~~~~
!
          do j= j0,jn
          do i= i0,in
              ndiv      = geomg_invcy2_8(j) * ( &
                         (F_nu(i,j,k)-F_nu(i-1,j,k))*geomg_invDX_8(i) &
                       + (F_nv(i,j,k)-F_nv(i,j-1,k))*Geomg_invDY_8(j) )
            F_nc(i,j,k) = ndiv      - Cstv_invT_8 * F_nc(i,j,k)
         end do
         end do
!
      end do
!$omp enddo
!
!**********************************************************
! The full contributions to the RHS of Helmholtz equation * 
!**********************************************************
!
!     Finish computations of NP (combining Nc', Nt", Nf")
!     Substract NP from RP(Rc") and store result(RP-NP) in RP
!
!$omp do
      do k=k0,l_nk
         w1=one + Ver_dz_8%m(k) * Ver_wp_8%m(k)
         w2=one - Ver_dz_8%m(k) * Ver_wm_8%m(k)
         do j= j0, jn 
         do i= i0, in
            F_rp(i,j,k) = Dcst_rayt_8**2 * ( F_rc(i,j,k) &
                             - Ver_dz_8%m(k) * F_nc(i,j,k) &
                             + w1 * F_nt(i,j,k+1) - w2 * F_nt(i,j,k) )
         end do
         end do
         if (.not. Schm_hydro_L) then    
            w3=c3*Ver_dz_8%m(k)
            do j= j0, jn 
            do i= i0, in
               F_rp(i,j,k) = F_rp(i,j,k) + w3 * &
                                ( Ver_wp_8%m(k) * F_nf(i,j,k+1) &
                                + Ver_wm_8%m(k) * F_nf(i,j,k  ) )
            end do
            end do
         endif
      enddo
!$omp enddo
!
!     Apply boundary conditions
!     ~~~~~~~~~~~~~~~~~~~~~~~~~

      if(Schm_opentop_L) then
!$omp do
         do k=1,k0-1
         do j= j0, jn
         do i= i0, in
            F_rp(i,j,k) = 0.0
         end do
         end do
         end do
!$omp enddo
!$omp do
         do j= j0, jn
         do i= i0, in
             F_nb(i,j) = F_nt(i,j,k0)-b3*F_nb(i,j)+b4*F_t(i,j,k0)
         end do
         end do
!$omp enddo
      else
!$omp do
         do j= j0, jn
         do i= i0, in
             F_nb(i,j) = F_nt(i,j,k0)
         end do
         end do
!$omp enddo
      endif
!
!$omp do
      do j= j0, jn 
      do i= i0, in
         F_rp(i,j,k0)   = F_rp(i,j,k0) &
                        + Dcst_rayt_8**2 * Ver_cstp_8 * F_nb(i,j)
         F_rp(i,j,l_nk) = F_rp(i,j,l_nk) &
                        - Dcst_rayt_8**2 * Ver_cssp_8 * F_nt(i,j,l_nk+1)
      end do
      end do
!$omp enddo
!$omp end parallel
!
!     __________________________________________________________________
!
      return
      end

