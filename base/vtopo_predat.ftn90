!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r vtopo_predat - Adjusts boundary conditions to varying orography
!
#include "model_macros_f.h"
!
      subroutine vtopo_predat(nest_t,nest_s, &
        		      DIST_DIM,xi,xa,yi,ya,nk)
!
      implicit none
#include <arch_specific.hf>
      integer :: DIST_DIM,nk,xi,xa,yi,ya
      real, dimension(DIST_SHAPE) :: nest_s
      real, dimension(DIST_SHAPE,nk+1) :: nest_t
!
!author
!     Ron McTaggart-Cowan - RPN - March 2007
!
!revision
! v3_30 - McTaggart-Cowan R.	- initial MPI version
! v4_03 - Lee V.            - Adapt to using new pressure functions
! v4_05 - Lepine M.         - VMM replacement with GMM
!
!object
!     Use the model's current orography field (topo) to re-interpolate
!     the boundary conditions in the vertical.  This is required whenever
!     the orography changes in the model, otherwise the analysis conditions
!     in the blending zone will be invalid.  The current version (v3_30)
!     re-interpolates only the mass field - adjustments to the wind field
!     are assumed to be small since vertical wind shear tends to be locally
!     small.  An extension of this routine would provide full treatment of
!     both the mass and flow fields on appropriately staggered grids.  For
!     additional information, see also 'predat.ftn'.
!
!arguments
!  Name		I/O		Description
!--------------------------------------------------------------------------
! nk		 I	Global z-dimension (G_nk)
! xi		 I	X-dimension computation domain m(i)nimum
! xa		 I	X-dimension computation domain m(a)ximum
! yi		 I	Y-dimension computation domain m(i)nimum
! ya		 I	Y-dimension computation domain m(a)ximum
! nest_q	I/O	Boundary conditions for log pressure (q=ln(p))
! nest_fi	I/O	Boundary conditions for phi (geopotential)
! nest_t	I/O	Boundary conditions for temperature
! nest_pip	 O	Boundary conditions for perturbation pi
! nest_s	 O	Boundary conditions for surface pi (ln (pi_s/z_s))
!--------------------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "geomg.cdk"
#include "p_geof.cdk"
#include "vtx.cdk"
#include "ver.cdk"
!
      integer, external :: get_px
!*
      type(gmm_metadata) :: meta2d
      integer :: k,len_x,len_y,err,gmmstat
      real, allocatable, dimension(:,:,:) :: psrc_3d,lnpsrc_3d,lnpdst_3d,temp_nest_t
      real, allocatable, dimension(:,:) :: ps,temp_ps
!
!     ---------------------------------------------------------------------
!
! Subdomain setup
      len_x = xa - xi + 1; len_y = ya - yi + 1
!
! Retrieve current orography from GMM
      gmmstat = gmm_get(gmmk_fis0_s,fis0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'vtopo_predat ERROR at gmm_get(fis0)'
      gmmstat = gmm_get(gmmk_fis1_s,fis1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'vtopo_predat ERROR at gmm_get(fis1)'
!
! Compute analysis surface pressure for current orography
      allocate(psrc_3d(xi:xa,yi:ya,nk+1),ps(xi:xa,yi:ya), &
           temp_ps(xi:xa,yi:ya),lnpsrc_3d(xi:xa,yi:ya,nk+1), &
           lnpdst_3d(xi:xa,yi:ya,nk+1),temp_nest_t(xi:xa,yi:ya,nk+1))
!     Get pressure on all thermo levels including the surface.
         err = get_px(psrc_3d,nest_s(xi:xa,yi:ya),len_x*len_y, &
           Ver_a_8%t,Ver_b_8%t,nk+1,Ver_code,.false.)
         if (err.lt.0) call handle_error(-1,'vtopo_predat','vtopo_predat:get_px')
!      call glbstat (psrc_3d,'p3d',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)
      call adj_ss2topo(ps,fis0(xi:xa,yi:ya),psrc_3d,fis1(xi:xa,yi:ya), &
           nest_t(xi:xa,yi:ya,:),len_x*len_y,nk+1)
 
!     Les topos valident avec la 3.3.0, le ps valident meteorologiquement.
!      call glbstat (fis0(xi:xa,yi:ya),'fisn',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
!      call glbstat (fis1(xi:xa,yi:ya),'fiso',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
!      call glbstat (ps,'psn',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
!      call glbstat (psrc_3d(xi:xa,yi:ya,nk+1),'pso',1,len_x,1,len_y,1,1,len_x,1,len_y,1,1)
      
      call vslog(lnpsrc_3d,psrc_3d,len_x*len_y*(nk+1))
      call vslog(temp_ps,ps,len_x*len_y)
      temp_ps=temp_ps-Cstv_Zsrf_8
      err = get_px(lnpdst_3d,temp_ps,len_x*len_y,Ver_a_8%t,Ver_b_8%t,nk+1,Ver_code,.true.)
      if (err.lt.0) call handle_error(-1,'vtopo_predat','vtopo_predat:get_px')
!      call glbstat (lnpsrc_3d,'src',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)
!      call glbstat (lnpdst_3d,'dst',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)

!
! Compute temperature profiles for modified orography
!     
      call vte_intvertx(temp_nest_t(xi:xa,yi:ya,:),nest_t(xi:xa,yi:ya,:), &
           lnpsrc_3d,lnpdst_3d,len_x*len_y,nk+1,nk+1,'VT')
!      call glbstat (temp_nest_t(xi:xa,yi:ya,:),'ttn',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)
!      call glbstat (     nest_t(xi:xa,yi:ya,:),'tto',1,len_x,1,len_y,nk+1,1,len_x,1,len_y,1,nk+1)

!      call handle_error(-1,'vtopo_predat','vtopo_predat')

! We do not recompute geopotential since it will be done in rhs.ftn
!
! Update nesting values
!      nest_s(xi:xa,yi:ya) = dlog(exp(nest_q(xi:xa,yi:ya,nk))/Cstv_pisrf_8)
      nest_t(xi:xa,yi:ya,:) = temp_nest_t(xi:xa,yi:ya,:)
!
      deallocate(psrc_3d,ps,temp_ps,lnpsrc_3d,lnpdst_3d,temp_nest_t)
!
! End of subprogram
      return
      end subroutine vtopo_predat
