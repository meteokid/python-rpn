!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r tracers - Establishes final list of tracers for GEMDM

      subroutine tracers ()
      use phy_itf, only: PHY_MAXNAMELENGTH,phymeta,phy_getmeta
      implicit none
#include <arch_specific.hf>

!author
!     Michel Desgagne  -  Sept 2001
!
!revision
! v2_31 - Desgagne M.       - initial version
! v3_21 - Lee V.            - remove Tr2d
! v3_30 - Desgagne M.       - memory calculation for tracers
!
!arguments
!        Tr3d_name_S acquires the list of tracers from itf_phy_inikey
!        In this subroutine, it will acquire what is introduced from
!        Tr3d_username_S (constructed from the entry routine)
!        ie: QC can be filled with either QC or QCT1 or QCT0 from the
!            given analysis (accessed by E_tr3dname_S of gement nml)
!            but this is converted via BMF/BCS/3DF as QC
!        Tracers requested under auto cascade requires only the first
!        2 letters

#include <clib_interface.cdk>
#include "lun.cdk"
#include "tr3d.cdk"

      integer, external :: decode_tracers
      integer i,istat,nmeta
      character(len=PHY_MAXNAMELENGTH) :: varname_S,prefix_S,basename_S,time_S,ext_S
      type(phymeta), dimension(:), pointer :: pmeta
!
!     __________________________________________________________________
!
      nmeta = phy_getmeta(pmeta,' ',F_npath='V',F_bpath='D',F_quiet=.true.)

      do i=1,nmeta
         varname_S = pmeta(i)%vname
         istat = clib_toupper(varname_S)
         if (varname_S(1:3) /= 'TR/') cycle
         call gmmx_name_parts(varname_S,prefix_S,basename_S,time_S,ext_S)
         if (any(Tr3d_name_S(1:Tr3d_ntr) == basename_S)) cycle
         Tr3d_ntr = Tr3d_ntr + 1
         Tr3d_name_S(Tr3d_ntr)= basename_S
         Tr3d_hzd   (Tr3d_ntr)= .false. ; Tr3d_wload(Tr3d_ntr)= pmeta(i)%wload
         Tr3d_mono  (Tr3d_ntr)= 0       ; Tr3d_mass (Tr3d_ntr)= 0
      enddo

      do i=1,MAXTR3D
         istat = decode_tracers (Tr3d_list_s(i))
      end do

      if (.not. any(Tr3d_name_S(1:Tr3d_ntr) == 'HU')) then
         Tr3d_ntr = Tr3d_ntr + 1
         Tr3d_name_S(tr3d_ntr)(1:4) = 'HU  '
         Tr3d_hzd   (Tr3d_ntr)= .false. ; Tr3d_wload(Tr3d_ntr)= .false.
         Tr3d_mono  (Tr3d_ntr)= 0       ; Tr3d_mass (Tr3d_ntr)= 0
      else
         do i=1,Tr3d_ntr
            if (Tr3d_name_S(i)(1:2).eq.'HU') Tr3d_wload(i)= .false.
         end do
      endif   

      if (Lun_out.gt.0) then
         write (Lun_out,1001)
         do i=1,Tr3d_ntr
            write(Lun_out,1002) Tr3d_name_S(i),Tr3d_wload(i),Tr3d_hzd(i),Tr3d_mono(i),Tr3d_mass(i)
         end do
      endif

 1001 format (/' Final liste of tracers:'/3x,' Name   Wload  Hzd   Mono  Mass')
 1002 format (4x,a4,2l6,2i6)
!
!     __________________________________________________________________
!
      return
      end
