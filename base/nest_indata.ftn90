!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r nest_indata - Read and process nesting data during LAM 
!                    integration for LBC.
!
#include "model_macros_f.h"
!
      subroutine nest_indata (F_datev_S)
      implicit none
!
      character*(*) F_datev_S
!author 
!     Michel Desgagne   - Spring 2002
!
!revision
! v3_01 - Desgagne M.     - initial version
! v3_03 - Tanguay M.      - Adjoint Lam configuration
! v3_30 - Lee V.          - Hollow cubes and acid test for LAM
! v4_03 - Lee/Desgagne    - ISST
! v4_05 - Plante A.       - Top nesting
! v4_05 - Lepine M.       - VMM replacement with GMM
! v4_10 - Lee V.          - Remove TRNES on tracers,zd,w 
!
!object
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "vtx.cdk"
#include "lam.cdk"
#include "nest.cdk"
#include "bcsgrds.cdk"
#include "p_geof.cdk"
#include "tr3d.cdk"
#include "ifd.cdk"
#include "bmf.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "lun.cdk"
#include "acid.cdk"
#include "path.cdk"
#include "glb_pil.cdk"
#include "vtopo.cdk"
!
      integer  bcs_ftype,casc_bcs,casc_bcsh,newdate
      external bcs_ftype,casc_bcs,casc_bcsh,newdate
!
      integer err,errbcs1,errbcs2,n,id,k,unf,dat
      real, pointer, dimension(:,:,:) :: tr1
!*
!     ---------------------------------------------------------------
!
      if (Lun_debug_L) write (Lun_out,1000)

      gmmstat = gmm_get(gmmk_nest_u_fin_s ,nest_u_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_u_fin)'
      gmmstat = gmm_get(gmmk_nest_v_fin_s ,nest_v_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_v_fin)'
      gmmstat = gmm_get(gmmk_nest_w_fin_s,nest_w_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_w_fin)'
      gmmstat = gmm_get(gmmk_nest_t_fin_s,nest_t_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_t_fin)'
      gmmstat = gmm_get(gmmk_nest_zd_fin_s,nest_zd_fin,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_zd_fin)'
      gmmstat = gmm_get(gmmk_nest_s_fin_s,nest_s_fin,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_s_fin)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(fiptx)'
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_nest_q_fin_s ,nest_q_fin,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(nest_q_fin)'
      else
         nullify (nest_q_fin)
      endif

      gmmstat = gmm_get(gmmk_fis0_s,fis0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(fis0)'
!
      if ( Vtopo_L) then
         gmmstat = gmm_get(gmmk_dfis_s,dfis,meta2d)
         if (GMM_IS_ERROR(gmmstat)) print *,'nest_indata ERROR at gmm_get(dfis)'
      else
         nullify (dfis)
      endif
!
      Path_ind_S=trim(Path_input_S)//'/BCDS_3D'
!
      unf   = 76
      err   = bcs_ftype (ifd_ftype, F_datev_S, unf)

      if (ifd_ftype.eq.'3DF') then
!
         call casc_3df_dynp2 (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin,nest_zd_fin, &
                              nest_s_fin,nest_q_fin,fis0,dfis, l_minx,l_maxx,         &
                              l_miny,l_maxy,G_ni,G_nj,unf,F_datev_S)
      else
!
         call datp2f   ( dat, F_datev_S )
         err = newdate ( dat, bmf_time1,bmf_time2,-3 )
         call readdyn2 (nest_u_fin,nest_v_fin,nest_w_fin,nest_t_fin,nest_zd_fin, &
                        nest_s_fin,fiptx,fis0,nest_q_fin,dfis, &
                        'NEST/',':F',l_minx,l_maxx,l_miny,l_maxy)
      endif
!
      if ((F_datev_S.eq.Lam_runstrt_S).and.(.not.Ana_zd_L)) &
         call uvs2psd2 (nest_zd_fin,nest_u_fin,nest_v_fin,nest_t_fin,nest_s_fin, &
                                                                 LDIST_DIM,l_nk)
!
!     ---------------------------------------------------------------
!
 205  format (/' PROBLEM WITH LBCS AT: ',a,', PROC#:',i4,' --ABORT--'/)
 1000 format(3X,'GETTING DATA FROM NEST TO BCS: (S/R NEST_INDATA)')
 1001 format (/' WRONG ifd_ftype in nest_indata: --- ABORT ---'/)
      return
      end

