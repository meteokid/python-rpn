!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_prep -
!
#include "model_macros_f.h"
!
      subroutine itf_phy_prep
      implicit none
!
!author
!     Michel Desgagne - June 2009
!
!revision
! v4_06 - Desgagne, M.     - First revision
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "itf_phy_buses.cdk"
#include "itf_cpl.cdk"
!
      integer i,j,lght,indx_n,soit,k0, &
              cpl_mcp,cpl_i7,cpl_tm,cpl_gl,cpl_i8
      real, pointer, dimension(:,:,:) :: tr
      real busdyn
      pointer (pabusdyn,busdyn(*))
!     ________________________________________________________________
!
      do i=1,p_bdyn_top
         nullify (tr)
         gmmstat = gmm_get(dynnm(i),tr,meta3d)
         if (gmmstat.eq.0) then
            call getindx (dynnm(i),  'D', indx_n, lght, soit)
            do j= 1,p_nj
               pabusdyn = loc (Phy_busdyn3D((j-1)*p_bdyn_siz+1))
               if (dynpar(i,3).eq.1) then
                  k0 = 1
                  if (dynpar(i,7).eq.1) k0 = p_nk
                  call itf_phy_fold (busdyn(indx_n), tr(l_minx,l_miny,1),j, &
                                       k0,p_nk,l_minx,l_maxx,l_miny,l_maxy)
               endif
            enddo
         endif
      enddo

      if (C_coupling_L) then

      call getindx ('MCCPL'     ,  'D', cpl_mcp, lght, soit)
      call getindx ('TMICECPL'  ,  'D', cpl_i7 , lght, soit)
      call getindx ('TWATERCPL' ,  'D', cpl_tm , lght, soit)
      call getindx ('GLCPL'     ,  'D', cpl_gl , lght, soit)
      call getindx ('ICEDPCPL'  ,  'D', cpl_i8 , lght, soit)
!
      do j= 1,p_nj
         pabusdyn = loc (Phy_busdyn3D((j-1)*p_bdyn_siz+1))
         call itf_phy_fold ( busdyn(cpl_mcp), atm_local_busin(1,1,1), &
                             j, 1,1, 1,l_ni,1,l_nj )
         call itf_phy_fold ( busdyn(cpl_i7 ), atm_local_busin(1,1,2), &
                             j, 1,1, 1,l_ni,1,l_nj )
         call itf_phy_fold ( busdyn(cpl_tm ), atm_local_busin(1,1,3), &
                             j, 1,1, 1,l_ni,1,l_nj )
         call itf_phy_fold ( busdyn(cpl_gl ), atm_local_busin(1,1,4), &
                             j, 1,1, 1,l_ni,1,l_nj )
         call itf_phy_fold ( busdyn(cpl_i8 ), atm_local_busin(1,1,5), &
                             j, 1,1, 1,l_ni,1,l_nj )
      enddo
      endif
!     ________________________________________________________________
!
      return
      end
