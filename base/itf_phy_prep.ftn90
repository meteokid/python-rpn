!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_prep -
!
#include "model_macros_f.h"
!
      subroutine itf_phy_prep
      implicit none
#include <arch_specific.hf>
!
!author
!     Michel Desgagne - June 2009
!
!revision
! v4_06 - Desgagne, M.     - First revision
!
#include "gmm.hf"
#include "glb_ld.cdk"
#include "itf_phy_buses.cdk"
#include "itf_cpl.cdk"
!
      integer i,j,k0,istat
      real, pointer, dimension (:,:,:) :: tr         => null()
      real, pointer, dimension (:,:  ) :: BUSDYN_3d  => null()
      type(gmm_metadata) :: mymeta
!     ________________________________________________________________
!
      istat = gmm_get ('BUSDYN_3d',BUSDYN_3d,mymeta)

      do i=1,p_bdyn_top
         nullify (tr)
         istat = gmm_get(dynnm(i),tr,mymeta)
         if (istat.eq.0) then
            if (phy_idxdyn(i,3).eq.1) then 
               k0 = 1
               if (phy_idxdyn(i,2).eq.p_ni) k0 = p_nk
               do j= 1,p_nj
                  call itf_phy_fold (BUSDYN_3d(phy_idxdyn(i,1),j), &
                                           tr(l_minx,l_miny,1),j , &
                                k0,p_nk,l_minx,l_maxx,l_miny,l_maxy)
               enddo
            endif
         endif
      enddo

      if (C_coupling_L) then
         do j= 1,p_nj
            call itf_phy_fold ( BUSDYN_3d(cpl_mcp,j), atm_local_busin(1,1,1), &
                                j, 1,1, 1,l_ni,1,l_nj )
            call itf_phy_fold ( BUSDYN_3d(cpl_i7,j) , atm_local_busin(1,1,2), &
                                j, 1,1, 1,l_ni,1,l_nj )
            call itf_phy_fold ( BUSDYN_3d(cpl_tm,j) , atm_local_busin(1,1,3), &
                                j, 1,1, 1,l_ni,1,l_nj )
            call itf_phy_fold ( BUSDYN_3d(cpl_gl,j) , atm_local_busin(1,1,4), &
                                j, 1,1, 1,l_ni,1,l_nj )
            call itf_phy_fold ( BUSDYN_3d(cpl_i8,j) , atm_local_busin(1,1,5), &
                                j, 1,1, 1,l_ni,1,l_nj )
         enddo
      endif
!     ________________________________________________________________
!
      return
      end
