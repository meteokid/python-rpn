!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r diag_var calculate model diagnostic variables
!
#include "model_macros_f.h"
!
      subroutine diag_var(F_BsPq,F_mu,F_s,F_q,i0,in,j0,jn,k0,nk)
!     
      implicit none
#include <arch_specific.hf>
!     
      integer k0,nk
      real F_BsPq(LDIST_SHAPE,0:Nk+1), F_mu(LDIST_SHAPE,Nk+1)
      real F_s(LDIST_SHAPE),           F_q(LDIST_SHAPE,0:Nk+1)
!
!author
!
! Andre Plante july 2006.
!
!revision
!
!object
!       see id section
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_BsPq       O    - perturbation ln(pressure)
! F_mu         O    - 
! F_s          I    - 
! F_q          I    - non-hydro perturbation of log(p)
! i0,in,j0,jn  I    - index over which computation will be made.
!
!implicits
#include "lun.cdk"
#include "dcst.cdk"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "cstv.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "schm.cdk"
!     
!*
      integer i,j,k,i0,in,j0,jn,nij
      real*8 one, xxx, qbar
      parameter(one=1.d0)
      real*8, dimension(i0:in,j0:jn):: xtmp_8, ytmp_8
!
!     ---------------------------------------------------------------
!
      if( &
           i0.lt.1-G_halox   .or. &
           in.gt.l_ni+G_halox.or. &
           j0.lt.1-G_haloy   .or. &
           jn.gt.l_nj+G_haloy &
           )then
         call handle_error(-1,'diag_var','diag_var : dimension error')
      endif
!
      nij = (in - i0 + 1)*(jn - j0 + 1)
!
!
!$omp parallel private (xxx,qbar,xtmp_8,ytmp_8)
!
!$omp do
       do k=k0-1,l_nk+1
         if(k.eq.0) then
            xxx=0.d0
         else
            xxx=Ver_b_8%m(k)
         endif
         do j= j0, jn
         do i= i0, in
            F_BsPq(i,j,k)=xxx*F_s(i,j)
         enddo
         enddo
      enddo
!$omp enddo
!

      if (.not. Schm_hydro_L) then
!$omp do
      do k=k0-1,l_nk+1
         do j= j0, jn
         do i= i0, in
            F_BsPq(i,j,k) = F_BsPq(i,j,k) +  F_q(i,j,k)
         enddo
         enddo
         if(k.gt.k0-1) then
            do j= j0, jn
            do i= i0, in
               xtmp_8(i,j) = one + ver_dbdz_8%t(k)*F_s(i,j)
            enddo
            enddo
            call vrec ( ytmp_8, xtmp_8, nij )
            do j= j0, jn
            do i= i0, in
               F_mu(i,j,k) = Ver_idz_8%t(k)*(F_q(i,j,k)-F_q(i,j,k-1))*ytmp_8(i,j)
            enddo
            enddo
            do j= j0, jn
            do i= i0, in
               qbar = Ver_wp_8%t(k)*F_q(i,j,k)+Ver_wm_8%t(k)*F_q(i,j,k-1)
               xtmp_8(i,j) = qbar
            enddo
            enddo
            call vexp ( ytmp_8, xtmp_8, nij )
            do j= j0, jn
            do i= i0, in
               F_mu(i,j,k) = ytmp_8(i,j)*(F_mu(i,j,k)+one)-one
            enddo
            enddo
         endif
      enddo
!$omp enddo
      endif
!      
!$omp end parallel
!
!     ---------------------------------------------------------------
!
      return
      end
