!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!
!*s/r rhsp_2 - compute the right-hand sides: Ru, Rv, Rc, Rt, Rw, Rf,
!              save the results for next iteration in the o's
!
#include "model_macros_f.h"
!
      subroutine rhsp_3 ( F_oru, F_orv, F_orc,F_ort,F_orw,   F_orf, &
                          F_ruw1,F_rvw1,F_ru, F_rv, F_nest_u,F_nest_v, &
                          F_u,   F_v,   F_w,  F_t,  F_s,     F_zd, &
                          F_q,   F_fis, &
                          DIST_DIM, Nk )
!
      implicit none
#include <arch_specific.hf>
!
      integer DIST_DIM, Nk
!
      real F_oru   (DIST_SHAPE,  Nk)  ,F_orv   (DIST_SHAPE,  Nk)  , &
           F_orc   (DIST_SHAPE,  Nk)  ,F_ort   (DIST_SHAPE,  Nk)  , &
           F_orw   (DIST_SHAPE,  Nk)  ,F_orf   (DIST_SHAPE,  Nk)  , &
           F_ruw1  (DIST_SHAPE,  Nk)  ,F_rvw1  (DIST_SHAPE,  Nk)  , &
           F_ru    (DIST_SHAPE,  Nk)  ,F_rv    (DIST_SHAPE,  Nk)  , &
           F_nest_u(DIST_SHAPE,  Nk)  ,F_nest_v(DIST_SHAPE,  Nk)  , &
           F_u     (DIST_SHAPE,  Nk)  ,F_v     (DIST_SHAPE,  Nk)  , &
           F_w     (DIST_SHAPE,  Nk)  ,F_t     (DIST_SHAPE,  Nk)  , &
           F_s     (DIST_SHAPE)       ,F_zd    (DIST_SHAPE,0:Nk)  , &
           F_q     (DIST_SHAPE,  Nk+1),F_fis   (DIST_SHAPE)
!
!author
!     Alain Patoine
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_21 - Lee V.            - modifications for LAM version
! v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate 
!                             (Change to Rcn)
! v2_31 - Desgagne M.       - remove treatment of hut1 and qct1
! v3_00 - Qaddouri & Lee    - For LAM, Change Ru, Rv values on the boundaries 
! v3_00                       of the LAM grid with values from Nesting data
! v3_02 - Edouard S.        - correct bug in Ru and Rv in the non hydrostatic version
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_40 - Qaddouri/Lee      - Exchange and interp winds between Yin, Yang
!
!object
!     see rhs
!
!arguments
!
!implicits
#include "glb_ld.cdk"
#include "cori.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "lun.cdk"
#include "grd.cdk"
!
      integer i, j, k, km, i0, j0, in, jn, nij
      real*8  c1,c2,c3,c4,c5, tdiv, BsPqbarz, fipbarz, &
              wk1(DIST_SHAPE), wk2(DIST_SHAPE), barz, barzp, &
              xtmp_8(l_ni,l_nj), ytmp_8(l_ni,l_nj),bbarzz(l_nk)
      real, dimension(:,:,:), allocatable :: BsPq, FIp, MU

      real*8, parameter :: one=1.d0
!*
!     __________________________________________________________________
!
      allocate(BsPq(DIST_SHAPE,l_nk+1), FIp(DIST_SHAPE,l_nk+1), MU(DIST_SHAPE,l_nk))
!
!     Common coefficients       
!
      c1  = Cstv_Beta_8 * Dcst_rgasd_8 / ( Dcst_rayt_8 * Dcst_rayt_8 )
      c2  = Cstv_Beta_8 / ( Dcst_rayt_8 * Dcst_rayt_8 )
      c3  = Cstv_Beta_8
      c4  = one / Cstv_Tstr_8
      c5  = one
!
      if (schm_autobar_L)    c5 = 0.d0

      bbarzz(1) = Ver_wp_8%m(1)*(Ver_wp_8%t(1)*Ver_b_8%m(2)  &
                                +Ver_wm_8%t(1)*Ver_b_8%m(1))
      do k=2,G_nk
         bbarzz(k) = Ver_wp_8%m(k)*(Ver_wp_8%t(k  )*Ver_b_8%m(k+1)  &
                                   +Ver_wm_8%t(k  )*Ver_b_8%m(k  )) &
                    +Ver_wm_8%m(k)*(Ver_wp_8%t(k-1)*Ver_b_8%m(k  )  &
                                   +Ver_wm_8%t(k-1)*Ver_b_8%m(k-1))
      enddo
!
!     Exchanging halos for derivatives & interpolation 
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      call rpn_comm_xch_halo( F_u , LDIST_DIM,l_niu,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_v , LDIST_DIM,l_ni,l_njv,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_t , LDIST_DIM,l_ni,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_s , LDIST_DIM,l_ni,l_nj,1, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) then
         call rpn_comm_xch_halo(  F_q, LDIST_DIM,l_ni,l_nj,G_nk+1, &
                     G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      endif 
!
      nij = l_ni*l_nj
!
      call diag_var(BsPq, MU, F_s, F_q, 1,l_ni+1,1,l_nj+1,1,l_nk)
!
      call diag_fi (FIp, F_s, F_t, F_q, F_fis, LDIST_DIM, l_nk, &
                    1,l_ni+1,1,l_nj+1)
!

!$omp parallel private(i,j,i0,j0,jn,in,km,barz,barzp, &
!$omp     BsPqbarz,fipbarz,tdiv,wk1,wk2,xtmp_8,ytmp_8)
!
!$omp do 
      do 1000 k = 1,l_nk 
      km=max(k-1,1)
!
!********************************
! Compute Ru: RHS of U equation *
!********************************

      if (Schm_hydro_L) wk1 = one ! SINCE MU=0

!     Indices to compute Ru
      i0 = 1
      in = l_niu
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west ) i0 = 2
         if (l_east ) in = l_niu-1
         if (l_south) j0 = 3
         if (l_north) jn = l_njv-1
      endif

!     Compute (1 + MU) barXZ in wk1
      if (.not.Schm_hydro_L) then
         do j= j0, jn
         do i= i0, in
            barz  = Ver_wp_8%m(k)*MU(i  ,j,k) &
                   +Ver_wm_8%m(k)*MU(i  ,j,km)
            barzp = Ver_wp_8%m(k)*MU(i+1,j,k) &
                   +Ver_wm_8%m(k)*MU(i+1,j,km)
            wk1(i,j) = one + ( one - intuv_c0xxu_8(i) ) * barz &
                                   + intuv_c0xxu_8(i)   * barzp
         end do
         end do
      endif
!
!     Compute V barX in wk2
!     ~~~~~~~~~~~~~~~~~~~~~
      do j = j0, jn
      do i = i0-1, in+2
         wk2(i,j)  = inuvl_wyvy3_8(j,1) * F_v(i,j-2,k)  &
                   + inuvl_wyvy3_8(j,2) * F_v(i,j-1,k)  &
                   + inuvl_wyvy3_8(j,3) * F_v(i,j  ,k)  &
                   + inuvl_wyvy3_8(j,4) * F_v(i,j+1,k)          
      end do
      end do
 
!     Compute Ru
!     ~~~~~~~~~~
      do j= j0, jn
      do i= i0, in
         barz  = Ver_wp_8%m(k)*F_t(i  ,j,k) &
                +Ver_wm_8%m(k)*F_t(i  ,j,km)
         barzp = Ver_wp_8%m(k)*F_t(i+1,j,k) &
                +Ver_wm_8%m(k)*F_t(i+1,j,km)
         F_oru(i,j,k) = Cstv_invT_8 * F_u(i,j,k) &
                  - c1 * ( ( one - intuv_c0xxu_8(i) )* barz &
                                 + intuv_c0xxu_8(i)  * barzp ) &
                       * ( BsPq(i+1,j,k) - BsPq(i,j,k) ) &
                       * geomg_invDXu_8(i) &
                  - c2 * wk1(i,j) * ( FIp(i+1,j,k) - FIp(i,j,k) ) &
                       * geomg_invDXu_8(i) &
                  + c3 * Cori_fcoru_8(i,j) &
                       * ( inuvl_wxxu3_8(i,1)*wk2(i-1,j) &
                         + inuvl_wxxu3_8(i,2)*wk2(i  ,j) &
                         + inuvl_wxxu3_8(i,3)*wk2(i+1,j) &
                         + inuvl_wxxu3_8(i,4)*wk2(i+2,j) )
      end do
      end do
!
!********************************
! Compute Rv: RHS of V equation *
!********************************
 
!     Indices to compute Rv
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_njv
      if (G_lam) then
         if (l_west ) i0 = 3
         if (l_east ) in = l_niu-1
         if (l_south) j0 = 2
         if (l_north) jn = l_njv-1
      endif
 
!     Compute (1 + MU) barYZ in wk1
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (.not. Schm_hydro_L) then
         do j = j0, jn
         do i = i0, in
            barz  = Ver_wp_8%m(k)*MU(i,j  ,k) &
                   +Ver_wm_8%m(k)*MU(i,j  ,km)
            barzp = Ver_wp_8%m(k)*MU(i,j+1,k) &
                   +Ver_wm_8%m(k)*MU(i,j+1,km)
            wk1(i,j) = one + ( one - intuv_c0yyv_8(j) ) * barz  &
                                   + intuv_c0yyv_8(j)   * barzp
         end do
         end do
      endif
 
!     Compute U barY in wk2
!     ~~~~~~~~~~~~~~~~~~~~~
      do j = j0-1, jn+2
      do i = i0, in
         wk2(i,j)  = inuvl_wxux3_8(i,1)*F_u(i-2,j,k)  &
                   + inuvl_wxux3_8(i,2)*F_u(i-1,j,k)  &
                   + inuvl_wxux3_8(i,3)*F_u(i  ,j,k)  &
                   + inuvl_wxux3_8(i,4)*F_u(i+1,j,k) 
      end do
      end do
!
!     Compute Rv
!     ~~~~~~~~~~
      do j = j0, jn
      do i = i0, in
         barz  = Ver_wp_8%m(k)*F_t(i,j  ,k) &
                +Ver_wm_8%m(k)*F_t(i,j  ,km)
         barzp = Ver_wp_8%m(k)*F_t(i,j+1,k) &
                +Ver_wm_8%m(k)*F_t(i,j+1,km)
         F_orv(i,j,k) = Cstv_invT_8 * F_v(i,j,k) &
                  - c1 *( ( one - intuv_c0yyv_8(j) ) * barz &
                                + intuv_c0yyv_8(j)   * barzp ) &
                       * ( BsPq(i,j+1,k) - BsPq (i,j,k) ) &
                       * geomg_invDYv_8(j) &
                  - c2 * wk1(i,j) * ( FIp(i,j+1,k) - FIp(i,j,k) ) &
                       * geomg_invDYv_8(j) &
                  - c3 * Cori_fcorv_8(i,j) &
                       * ( inuvl_wyyv3_8(j,1)*wk2(i,j-1) &
                         + inuvl_wyyv3_8(j,2)*wk2(i,j  ) &
                         + inuvl_wyyv3_8(j,3)*wk2(i,j+1) &
                         + inuvl_wyyv3_8(j,4)*wk2(i,j+2) )
      end do
      end do
!
!     Indices to compute all fields on mass grid at routine output
      i0 = 1
      j0 = 1
      in = l_ni
      jn = l_nj
      if (G_lam.and.(.not.Grd_yinyang_L)) then
         xtmp_8(:,:)=1.0D0
         if (l_west)  i0 = 4
         if (l_east)  in = l_niu-2
         if (l_south) j0 = 4
         if (l_north) jn = l_njv-2
      endif
!
!********************************************
! Compute Rt: RHS of thermodynamic equation *         
! Compute Rf: RHS of FI equation            *
!********************************************
!
      do j = j0, jn
      do i = i0, in
         xtmp_8(i,j) = F_t(i,j,k) * c4
      end do
      end do
      call vlog( ytmp_8, xtmp_8, nij )
!
      do j= j0, jn
      do i= i0, in
         BsPqbarz = Ver_wp_8%t(k)*BsPq(i,j,k+1)+Ver_wm_8%t(k)*BsPq(i,j,k)
         fipbarz  = Ver_wp_8%t(k)* FIp(i,j,k+1)+Ver_wm_8%t(k)* FIp(i,j,k)
         F_ort (i,j,k) = Cstv_invT_8 * ( ytmp_8(i,j) - c5 * Dcst_cappa_8 * BsPqbarz ) &
                       + Cstv_Beta_8 * Dcst_cappa_8 * F_zd(i,j,k)
         F_orf (i,j,k) = Cstv_invT_8 * fipbarz  &
                       + Cstv_Beta_8 * Cstv_RTstr_8 * F_zd(i,j,k) &
                       + Cstv_Beta_8 * Dcst_grav_8 * F_w(i,j,k)
      end do
      end do         
!
!*********************************
! Compute Rw: RHS of  w equation *
!*********************************
!
      if (.not. Schm_hydro_L) then
         do j= j0, jn
         do i= i0, in
            F_orw(i,j,k) = Cstv_invT_8 * F_w(i,j,k) &
                         + Cstv_Beta_8 * Dcst_grav_8 * MU(i,j,k)
         end do
         end do
      endif 
!
!*****************************************
! Compute Rc: RHS of Continuity equation *
!*****************************************
      do j = j0, jn
      do i = i0, in
         xtmp_8(i,j) = one + Ver_dbdz_8%m(k) * F_s(i,j)
      end do
      end do
      call vlog( ytmp_8, xtmp_8, nij)
!
      do j = j0, jn 
      do i = i0, in 
         tdiv = geomg_invcy2_8(j) * ( &
                (F_u (i,j,k)-F_u (i-1,j,k))*geomg_invDX_8(i) &
              + (F_v (i,j,k)-F_v (i,j-1,k))*geomg_invDY_8(j) )&
              + (F_zd(i,j,k)-F_zd(i,j,k-1))*Ver_idz_8%m(k) &
              + Ver_wp_8%m(k) * F_zd(i,j,k) &
              + Ver_wm_8%m(k) * F_zd(i,j,k-1)
         F_orc (i,j,k) = Cstv_invT_8 * ( c5*bbarzz(k)*F_s(i,j) + ytmp_8(i,j) ) &
                       - Cstv_Beta_8 * tdiv   
      end do
      end do
!
 1000 continue
!$omp enddo

!$omp  end parallel
!
!******************************************************
! Interpolate Ru, Rv from U-, V-grid to G-grid, resp. *
!******************************************************

      if (Grd_yinyang_L) call yyg_rhsuv (F_oru,F_orv,DIST_DIM, G_nk)
!
      call rpn_comm_xch_halo ( F_oru, LDIST_DIM,l_niu,l_nj,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo ( F_orv, LDIST_DIM,l_ni,l_njv,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!

!$omp parallel private(i,j,i0,j0,jn,in)

      i0 = 1
      j0 = 1
      in = l_ni
      jn = l_nj
      if (G_lam.and.(.not.Grd_yinyang_L)) then
         xtmp_8(:,:)=1.0D0
         if (l_west)  i0 = 4
         if (l_east)  in = l_niu-2
         if (l_south) j0 = 4
         if (l_north) jn = l_njv-2
      endif

!$omp do
      do k=1,l_nk
         do j = j0, jn
         do i = i0, in
            F_ruw1(i,j,k) =  inuvl_wxux3_8(i,1) * F_oru(i-2,j,k) &
                           + inuvl_wxux3_8(i,2) * F_oru(i-1,j,k) &
                           + inuvl_wxux3_8(i,3) * F_oru(i  ,j,k) &
                           + inuvl_wxux3_8(i,4) * F_oru(i+1,j,k)
            F_rvw1(i,j,k) =  inuvl_wyvy3_8(j,1) * F_orv(i,j-2,k) &
                           + inuvl_wyvy3_8(j,2) * F_orv(i,j-1,k) &
                           + inuvl_wyvy3_8(j,3) * F_orv(i,j  ,k) &
                           + inuvl_wyvy3_8(j,4) * F_orv(i,j+1,k)         
         end do
         end do
      end do
!$omp enddo
!
!**********************************************
! Apply HORIZONTAL BOUNDARY CONDITIONS if LAM *
!**********************************************
!
      if (G_lam .and. .not.Grd_yinyang_L) then
          if (l_west) then
!$omp do
             do k=1,l_nk
             do j= 1+pil_s, l_nj-pil_n
                F_ru (pil_w,j,k) = Cstv_invT_8 * F_nest_u(pil_w,j,k)
             enddo
             enddo
!$omp enddo
          endif
          if (l_east) then
!$omp do
             do k=1,l_nk
             do j= 1+pil_s, l_nj-pil_n
                F_ru (l_ni-pil_e,j,k) = Cstv_invT_8 * F_nest_u(l_ni-pil_e,j,k)
             enddo
             enddo
!$omp enddo
          endif
          if (l_south) then
!$omp do
             do k=1,l_nk
             do i= 1+pil_w, l_ni-pil_e
                F_rv (i,pil_s,k) = Cstv_invT_8 * F_nest_v(i,pil_s,k)
             enddo
             enddo
!$omp enddo
          endif
          if (l_north) then
!$omp do
             do k=1,l_nk
             do i= 1+pil_w, l_ni-pil_e
                F_rv (i,l_nj-pil_n,k) = Cstv_invT_8 * F_nest_v(i,l_nj-pil_n,k)
             enddo
             enddo
!$omp enddo
          endif
      endif
!
!$omp  end parallel
!

      deallocate(BsPq,FIp,MU)
!
      return
      end
