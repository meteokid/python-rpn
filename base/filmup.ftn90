!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**   fillup field from data in 3DF files
#include "model_macros_f.h"
!
      subroutine filmup ( nomvar,f,n1,n2,n3,n4,nk,unf,ofi,ofj, &
                                        err,ni1,nj1,nk1,nbits )
      implicit none
#include <arch_specific.hf>
!
      character*(*) nomvar
      integer n1,n2,n3,n4,nk,unf,ofi,ofj,err
      integer ni1,nj1,nk1,nbits
      real f(n1:n2,n3:n4,nk)
      
#include "lun.cdk"
!
      integer i,j,k,n,nb
      real tr1(ni1,nj1,nk1)
      real, dimension (:), allocatable :: wkc
!
!-----------------------------------------------------------------------
!
      nb = 0
      err= 1

      if (nbits.ge.32) then
         do k=1,nk1
            read (unf,end=45,err=45) tr1(:,:,k)
         end do
      else
         n = (ni1*nj1*nbits+120+32-1)/32
         allocate (wkc(n))
         do k=1,nk1
            read (unf,end=45,err=45) wkc
            call xxpak (tr1(1,1,k), wkc, ni1, nj1, -nbits, nb, 2)
         end do
         deallocate (wkc)
      endif

      if (nk.ne.nk1) then
          if(Lun_out.gt.0)  &
             write(Lun_out,*) 'Error, filmup ',nomvar(1:4),  &
                     'levels required=',nk,'levels to read=',nk1
      endif

      do k=1,nk
      do j=1,nj1
      do i=1,ni1
         f(ofi+i,ofj+j,k) = tr1(i,j,k)
      end do
      end do
      end do

      err = 0
 45   continue
!
!-----------------------------------------------------------------------
!
      return
      end
