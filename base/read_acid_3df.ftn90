!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r read_acid_3df - Reads self-nested 3DF pilot files for acid test
!
#include "model_macros_f.h"
!
      subroutine read_acid_3df (unf,uun,vvn,zdn,ttn,ssqn,meqn,qqn,wwn,trn, &
              fipn, &
              xxn,yyn,zzn,xxcn,yycn,zzcn, &
              xxhn,yyhn,zzhn,xxchn,yychn,zzchn, &
              trname_a,nvar,ntra,nga,nka_m,nka_t,ofi,ofj,cumerr)
      implicit none
#include <arch_specific.hf>
!
      integer unf,nvar,ntra,nga,nka,nka_m,nka_t,ofi,ofj,cumerr
      character*4 trname_a(ntra)
      
      real  uun(nga,nka_m), vvn (nga,nka_m), &
            zdn(nga,nka_t-1), ttn (nga,nka_t), fipn(nga,nka_t), &
            ssqn(nga,1  )  , meqn(nga,*  ), &
            qqn(nga,nka_m+1), wwn(nga,nka_t-1), &
            trn (nga,nka_t,ntra)
      real  xxn  (nga,nka_m-1), yyn  (nga,nka_m-1), zzn  (nga,nka_m-1), &
            xxcn (nga,nka_m-1), yycn (nga,nka_m-1), zzcn (nga,nka_m-1), &
            xxhn (nga,nka_m-1), yyhn (nga,nka_m-1), zzhn (nga,nka_m-1), &
            xxchn(nga,nka_m-1), yychn(nga,nka_m-1), zzchn(nga,nka_m-1)
!
!author
!     V. Lee       July  2008 (GEM read_acid_3df)
!
!revision
! v3_30 - Lee V.         - initial version for GEMDM
! v3_30 - McTaggart-Cowan R. - implement variable orography
!
#include "glb_ld.cdk"
#include "ifd.cdk"
#include "tr3d.cdk"
#include "lun.cdk"
#include "bcsgrds.cdk"
#include "acid.cdk"
#include "schm.cdk"
!
      character*4  nomvar
      integer i,j,k,ntr,n,err,ni1,nj1,nk1,nbits,takeit
      logical s_L,gz_L,tt_L,fip_L,uu_L,vv_L,w_L,zd_L,q_L
      logical xth_L,yth_L,zth_L,xcth_L,ycth_L,zcth_L
      logical xthh_L,ythh_L,zthh_L,xchh_L,ychh_L,zchh_L
!
!-----------------------------------------------------------------------
!
      print *,'read_acid_3df ntra=',ntra, 'nvar=',nvar
      cumerr=0
      uun = 0.0
      vvn = 0.0
      zdn = 0.0
      ttn = 0.0
      fipn=0.0
      ssqn= 0.0
      qqn = 0.0
      wwn = 0.0
      trn = 0.0
      ntr = 0
      s_L=.false.
      gz_L=.false.
      tt_L=.false.
      fip_L=.false.
      uu_L=.false.
      vv_L=.false.
      w_L=.false.
      zd_L=.false.
      q_L=.false.
      ana_zd_L=.false.
      ana_w_L=.false.
      ana_q_L=.false.
      xxn = 0.0
      yyn = 0.0
      zzn = 0.0
      xxcn = 0.0
      yycn = 0.0
      zzcn = 0.0
      xxhn = 0.0
      yyhn = 0.0
      zzhn = 0.0
      xxchn = 0.0
      yychn = 0.0
      zzchn = 0.0
      xth_L  = .false.
      yth_L  = .false.
      zth_L  = .false.
      xcth_L  = .false.
      ycth_L  = .false.
      zcth_L  = .false.
      xthh_L  = .false.
      ythh_L  = .false.
      zthh_L  = .false.
      xchh_L  = .false.
      ychh_L  = .false.
      zchh_L  = .false.

! read the fields
      do 500 k=1,nvar+ntra
          read (unf,end=44,err=44) nomvar,ni1,nj1,nk1,nbits

          print*, nomvar,ni1,nj1,nk1,nbits

          if (nomvar.eq.'S   ') then
              s_L=.true.
              call filmup (nomvar,ssqn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'GZ  ') then
              gz_L=.true.
              call filmup (nomvar,meqn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'TT  ') then
              tt_L=.true.
              call filmup (nomvar,ttn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_t,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'FITX') then
              fip_L=.true.
              call filmup (nomvar,fipn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_t,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'UU  ') then
              uu_L=.true.
              call filmup (nomvar,uun,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_m,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'VV  ') then
              vv_L=.true.
              call filmup (nomvar,vvn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_m,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'W   ') then
              w_L=.true.
              call filmup (nomvar,wwn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_t-1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'ZD  ') then
              zd_L=.true.
              call filmup (nomvar,zdn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_t-1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'Q   ') then
              q_L=.true.
              call filmup (nomvar,qqn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nka_m+1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (ntra.gt.0) then
! check for tracers
              takeit=-1 
              do n=1,Tr3d_ntr
                 if (nomvar.eq.Tr3d_name_S(n)) takeit=n
              enddo
              if (takeit.gt.0) then
                  ntr=ntr+1
                  trname_a(ntr)=Tr3d_name_S(takeit)
                  call filmup (trname_a(ntr),trn(1,1,ntr),ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                 nka_t,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
              endif
          endif
          if (nomvar.eq.'XTH ') then
              xth_L=.true.
              call filmup (nomvar,xxn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'YTH ') then
              yth_L=.true.
              call filmup (nomvar,yyn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'ZTH ') then
              zth_L=.true.
              call filmup (nomvar,zzn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'XCTH') then
              xcth_L=.true.
              call filmup (nomvar,xxcn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'YCTH') then
              ycth_L=.true.
              call filmup (nomvar,yycn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'ZCTH') then
              zcth_L=.true.
              call filmup (nomvar,zzcn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'XTHH') then
              xthh_L=.true.
              call filmup (nomvar,xxhn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'YTHH') then
              ythh_L=.true.
              call filmup (nomvar,yyhn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'ZTHH') then
              zthh_L=.true.
              call filmup (nomvar,zzhn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'XCHH') then
              xchh_L=.true.
              call filmup (nomvar,xxchn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'YCHH') then
              ychh_L=.true.
              call filmup (nomvar,yychn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
          if (nomvar.eq.'ZCHH') then
              zchh_L=.true.
              call filmup (nomvar,zzchn,ifd_niad,ifd_niaf,ifd_njad,ifd_njaf, &
                                nk1,unf,ofi,ofj,cumerr,ni1,nj1,nk1,nbits )
          endif
 500  continue

      if (.not.(s_L.and.tt_L.and.uu_L.and.vv_L.and.gz_L.and.zd_L.and.w_L)) then
          if (Lun_out.gt.0) then
              write(Lun_out,*) 'ESSENTIAL variables are missing in 3df file:'
              write(Lun_out,*) 'S =',s_L
              write(Lun_out,*) 'TT=',tt_L
              write(Lun_out,*) 'UU=',uu_L
              write(Lun_out,*) 'VV=',vv_L
              write(Lun_out,*) 'GZ=',gz_L
              write(Lun_out,*) 'ZD=',zd_L
              write(Lun_out,*) 'W=',w_L
          endif
          call handle_error(-1,'read_acid_3df','read_3df')
      endif
      If (Schm_hydro_L.and.q_L.or.(.not.Schm_hydro_L.and..not.q_L)) then
          if (Lun_out.gt.0) write(Lun_out,*)'Acid test: Schm_hydro_L=',Schm_hydro_L,' qt1 found=',q_L
          call handle_error(-1,'read_acid_3df','read_3df')
      endif
      if (.not.(xth_L  .and.yth_L  .and. zth_L  .and. &
                xcth_L .and.ycth_L .and. zcth_L )) then
          if (Lun_out.gt.0) then
              write(Lun_out,*) 'XTH =',xth_L,' YTH=',yth_L,' ZTH=',zth_L
              write(Lun_out,*) 'XCTH =',xcth_L,' YCTH=',yth_L,' ZCTH=',zth_L
          endif
          Acid_skippospers_L = .false.
      else
          Acid_skippospers_L = .true.
      endif
!
 44   return
!44   call handle_error(-1,'read_acid_3df','read_acid_3df')
 1000 format( &
      3X,'READING DATA IN (S/R read_acid_3df)')
      end
