!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r hzd_exhrdif - applies horizontal explicit diffusion
!
#include "model_macros_f.h"
      subroutine hzd_exhrdif (F_f2hzd, F_grd_S, NK)
      implicit none
#include <arch_specific.hf>
!
      character*(*) F_grd_S
      integer       DIST_DIM, Nk
      real          F_f2hzd (*)
!
!AUTHORs    C. Girard & M. Desgagne
!
!revision
! v3_21 - Desgagne M.    - initial MPI version
! v3_30 - Desgagne M.    - openMP precision in shared variables
! v4_15 - Desgagne M.    - refonte majeure
!
#include "glb_ld.cdk"
#include "hzd.cdk"
#include "lctl.cdk"
#include "cstv.cdk"
#include "lun.cdk"
!
      integer i,j,k, nn, mm, ni, nj, nij, i0,in,j0,jn, stag_x,stag_y
      integer lnr_deb,lnr_fin
      real wk1(LDIST_SHAPE,Nk),rnr,pwr
      real*8 pt25,nu_dif,epsilon,lnr,visco(nk),lnr_min,lnr_max,pente,b,hh

      parameter (epsilon = 1.0d-12, pt25=0.25d0)
!     __________________________________________________________________
!
!      lnr_deb= 72
!      lnr_fin= 120
!      lnr_min= Hzd_lnr
!      lnr_max= 5*Hzd_lnr
!      pente= (lnr_max-lnr_min)/dble(lnr_fin-lnr_deb)
!      b    = lnr_min - pente*dble(lnr_deb)
!      hh   = Lctl_step*Cstv_dt_8/3600.00
!      rnr  = log(1. - min(lnr_max,max(lnr_min,pente*hh + b)))

      rnr = log(1.- Hzd_lnR)
      pwr = Hzd_pwr

      if (F_grd_S.eq.'S_THETA') then
         rnr = log(1.- Hzd_lnR_theta)
         pwr = Hzd_pwr_theta
      endif
      if (F_grd_S.eq.'S_TR') then
         rnr = log(1.- Hzd_lnR_tr)
         pwr = Hzd_pwr_tr
      endif

      if ((F_grd_S.eq.'S_THETA').or.(F_grd_S.eq.'S_TR')) then

         lnr    = 1.0d0 - exp(rnr)
         nu_dif = 0.0d0
         if (pwr.gt.0) nu_dif = pt25*lnr**(2.d0/pwr)
         nu_dif = min ( nu_dif, pt25-epsilon )
         visco  = min ( nu_dif, pt25 )
         if (nu_dif.lt.1.0e-10) return

      else

         do k=1,nk
            rnr    = log(1.- Hzd_visco_8(k))
            lnr    = 1.0d0 - exp(rnr)
            nu_dif = 0.0d0
            if (Hzd_del(k).gt.0) nu_dif = pt25*lnr**(2.d0/Hzd_del(k))
            nu_dif  = min ( nu_dif, pt25-epsilon )
            visco(k)= min ( nu_dif, pt25 )
            if (nu_dif.lt.1.0e-10) return
         end do

      endif

      i0 = Minx
      in = Maxx
      j0 = Miny
      jn = Maxy
      nij= (in-i0+1)*(jn-j0+1)
      nn = pwr/2
      
      stag_x = 0
      stag_y = 0
      ni=l_ni
      nj=l_nj
      if (F_grd_S.eq.'U')then
         stag_x = 1
         ni=l_niu
      endif
      if (F_grd_S.eq.'V')then
         stag_y = 1
         nj=l_njv
      endif

      call rpn_comm_xch_halo ( F_f2hzd, LDIST_DIM, ni,nj, Nk, &
                       G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      do mm=1,nn

         call hzd_nudeln (F_f2hzd, wk1, LDIST_DIM, Nk, visco, stag_x,stag_y, mm,nn)

         if (mm.ne.nn) call rpn_comm_xch_halo( wk1, LDIST_DIM, ni,nj, Nk, &
                                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      end do

!     __________________________________________________________________
!
      return
      end
