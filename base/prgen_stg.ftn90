!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r prgen_stg - interpolation (general) on a given pressure level
!
#include "model_macros_f.h"
!
      subroutine prgen_stg (F_out,F_in_top,F_in,F_in_bot,F_deriv, &
           F_wlnph_top,F_wlnph,F_wlnph_bot, &
           F_pres, Nkout, F_cubic_L, DIST_DIM, Nk)
!
      implicit none
!
      integer DIST_DIM,Nk,Nkout
      logical F_cubic_L
      real    F_pres(Nkout), F_out(DIST_SHAPE,Nkout), &
              F_in_top(DIST_SHAPE),F_in(DIST_SHAPE,Nk), &
              F_in_bot(DIST_SHAPE),F_deriv(DIST_SHAPE,Nk), &
              F_wlnph_top(DIST_SHAPE),F_wlnph(DIST_SHAPE,Nk), &
              F_wlnph_bot(DIST_SHAPE)
!
!author
!     Andre Plante after prgen alain patoine
!
!revision
!
!object
!     see id section
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_out        O    - output field on the requested pressure level
! F_in_top     I    - input field at top
! F_in         I    - input field on eta levels inside the domaine
! F_in_top     I    - input field at bottom
! F_deriv      I    - vertical derivative of input field with respect
!                     to log of hydrostatic pressure (in the domaine)
! F_wlnph_top  I    - log of hydrostatic pressure at top
! F_wlnph      I    - log of hydrostatic pressure on the eta levels of
! F_wlnph_top  I    - log of hydrostatic pressure at bottom
! F_pres       I    - pressure level requested
! F_cubic_L    I    - .true.  for cubic interpolation
!                   - .false. for linear interpolation
!
! Note : It is assumed that F_wlnph_top < F_wlnph(*,1) and 
!                           F_wlnph_bot > F_wlnph(*,Nk) 
!
!implicits
#include "glb_ld.cdk"
!
!*
      integer i, j, k, kk,pnk, pnkm, pnindex(l_ni), ind
      real    prlprso, prd, pre, prr, prfm0, prfm1, prfm2, prfm3, prfl2
      real    local_deriv
      real*8  invprd
!
!     ---------------------------------------------------------------
!
!$omp parallel private(i,k,kk,pnk,pnkm,pnindex,prlprso, &
!$omp  prd,pre,prr,prfm0,prfm1,prfm2,prfm3,prfl2,invprd,local_deriv)
!$omp do
      do 600 j= 1, l_nj
      do 500 kk=1, Nkout
      prlprso = log(F_pres(kk))
!
      do i= 1, l_ni
         pnindex(i) = 0
      enddo
!
      do k=1,l_nk
      do i= 1, l_ni
         if ( prlprso .gt. F_wlnph(i,j,k) ) pnindex(i) = k
      enddo
      enddo
!
      do i= 1, l_ni
!********************************************************************
!                                                                   *
! If:    output pressure   <   hydrostatic pressure on the          *
!                              first level of the model             *
!                                                                   *
! Then: upward extrapolation from level 2 and top if above top layer*
!       or interpolation between top and level 1 if inside top layer*
!                                                                   *
!********************************************************************
         if ( pnindex(i) .eq. 0 ) then
!
            if ( prlprso .ge. F_wlnph_top(i,j))then
!              In top layer               
               ind=1
            else
!              Above model top
               ind=2
            endif            
            local_deriv=(   F_in_top(i,j)-   F_in(i,j,ind)) / &
                        (F_wlnph_top(i,j)-F_wlnph(i,j,ind))
            prd = prlprso - F_wlnph(i,j,ind)
            F_out(i,j,kk) = F_in(i,j,ind) + prd*local_deriv
            
!
!********************************************************************
!                                                                   *
! If:    output pressure   >   hydrostatic pressure on the          *
!                              last level of the model              *
!                                                                   *
! Then: interpolation between last level and bottom if inside layer * 
!       or downward extrapolation if below bottom level             *
!                                                                   *
! We put in F_out the value of F_in on the lowest level of the model*
!                                                                   *
!********************************************************************
         else if (pnindex(i) .eq. l_nk ) then
!
            if ( prlprso .lt. F_wlnph_bot(i,j))then
!              In bottom layer
               local_deriv=(   F_in(i,j,l_nk)-   F_in_bot(i,j)) / &
                           (F_wlnph(i,j,l_nk)-F_wlnph_bot(i,j))
               prd = prlprso - F_wlnph(i,j,l_nk)
               F_out(i,j,kk) = F_in(i,j,l_nk) + prd*local_deriv               
            else
!              Below bottom layer               
               F_out(i,j,kk)= F_in(i,j,l_nk)
            endif
!********************************************************************
!                                                                   *
! Else, interpolate between appropriate levels.                     *
!                                                                   *
!********************************************************************
!
         else
            pnk = pnindex(i) + 1
            pnkm= pnindex(i)
!
            prd = F_wlnph(i,j,pnk) - F_wlnph(i,j,pnkm)
            invprd = prd
            invprd = 1.0/invprd
!     
            pre = prlprso - 0.5 * (F_wlnph(i,j,pnk) + F_wlnph(i,j,pnkm))
!     
            prfm0 = 0.5 * ( F_in(i,j,pnk) + F_in(i,j,pnkm) )
!     
            prfm1 = ( F_in(i,j,pnk) - F_in(i,j,pnkm) ) * invprd
!     
            if ( F_cubic_L ) then
!     
               prr = 0.125 * prd*prd - 0.5 * pre*pre
!     
               prfm2 = ( F_deriv(i,j,pnk) - F_deriv(i,j,pnkm) ) * invprd
!     
               prfm3 = F_deriv(i,j,pnk) + F_deriv(i,j,pnkm)
               prfm3 = ( prfm3 - prfm1 - prfm1 ) * invprd*invprd
!     
               prfl2 = prfm2 + 2.0 * pre * prfm3
!     
               F_out(i,j,kk)= prfm0 + pre * prfm1 - prr * prfl2
!     
            else
!     
               F_out(i,j,kk)= prfm0 + pre * prfm1
!
            endif
!
         endif
!
      end do
!
!     ---------------------------------------------------------------
!
 500  enddo
 600  enddo
!$omp enddo
!$omp end parallel

      return
      end
