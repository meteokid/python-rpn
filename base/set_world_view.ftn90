!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r set_world_view
!
#include "model_macros_f.h"
!
      subroutine set_world_view
!
      implicit none
!
!author
!     Michel Desgagne
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_10 - Lee V.            - added watch_pid mechanism (returnpid)
! v2_10 - Desgagne M.       - Add partitioning checks
! v2_20 - Desgagne M.       - remove watch_dog (MPISUSPEND=ON)
! v2_21 - Dugas B.          - possibly initialize convip
! v2_21 - Lee V.            - modifications for LAM version and slab outputs
! v2_30 - Dugas B.          - add call to gemtim
! v2_30 - Desgagne M.       - entry vertical interpolator in gemdm
! v2_32 - Desgagne M.       - option for FST2000 encoding of ip1
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_03 - Desgagne M.       - new procedure for call to set_dcst8
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_11 - Lee V.            - place output in local PE directory
! v3_21 - Desgagne M.       - using RMNLIB to access constants
! v3_30 - Desgagne M.       - Cleaner approach to model startup
! v3_30 - Desgagne & Winger - Initialize variable for VMM files
! v4_04 - Tanguay M.        - Williamson's cases
! v4_05 - Plante A.         - Open top
! v4_10 - Lepine M.         - VMM replacement with GMM
!
!object
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "lun.cdk"
#include "cst_lis.cdk"
#include "dcst.cdk"
#include "ptopo.cdk"
#include "grd.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "path.cdk"
#include "vmmlist.cdk"
#include "itf_phy_config.cdk"
#include "itf_cpl.cdk"
#include "acid.cdk"
#include "wil_williamson.cdk"
#include "wil_nml.cdk"
#include <clib_interface.cdk>
#include "glb_pil.cdk"
!
      logical  set_dcst_8
      integer  gem_nml,v4d_nml,v4d_config,gemdm_config,grid_nml, &
               itf_cpl_nml,series_nml,adw_nml,adw_config,rpn_comm_init_multigrid
      external pe_zero_topo, set_dcst_8, gem_nml, v4d_nml, &
               v4d_config, gemdm_config, grid_nml, itf_cpl_nml,  &
               series_nml,adw_nml,adw_config,rpn_comm_init_multigrid
!*
      integer ierr,cte_ok,f1,f2,f3,f4,f5,f6,mydomain,ndomains
      character(len=256) :: msg_S,my_dir
!
!-------------------------------------------------------------------
!
! Initializing domain and working directory
!
      call rpn_comm_mydomain ('UM_EXEC_NDOMAINS', mydomain, ndomains)

      write(my_dir,'(a,i4.4)') 'cfg_',mydomain

      call base_dir_env (trim(my_dir))
!
! Initializing MPI and processor topology (pe_zero_topo on PE #0 only)
!
      f1 = rpn_comm_init_multigrid (pe_zero_topo,Ptopo_myproc, Ptopo_numproc,&
                                          Ptopo_npex  , Ptopo_npey, ndomains )

      call msg_set_can_write(Ptopo_myproc == 0)

      call handle_error (clib_isdir(Path_input_S),'set_world_view','task_input')
!
! Continue initialization steps
!
      call pe_all_topo

      cte_ok = 0
      if ( .not. set_dcst_8 ( Dcst_cpd_8,liste_S,cnbre, &
                              Lun_out,Ptopo_numproc ) ) cte_ok=-1
      call handle_error(cte_ok,'set_world_view','set_dcst_8')
!
      if ( Schm_theoc_L ) then
!
         call theo_cfg
!
      else
!
! Initializes physical constants
!
!
! Read namelist gem_cfgs, var4d, coupling and series from file Path_nml_S
!
         f1 = grid_nml    (Path_nml_S)
         G_lam = Grd_typ_S(1:1).eq.'L'
         f2 = gem_nml     (Path_nml_S)
         f3 = itf_cpl_nml (Path_nml_S)
         f4 = v4d_nml     (Path_nml_S)
         f5 = series_nml  (Path_nml_S)
         f6 = adw_nml     (Path_nml_S)
         write(msg_S,'(a,6I4)') 'Error Reading nml - ',f1,f2,f3,f4,f5,f6
         call handle_error(min(f1,f2,f3,f4,f5,f6),'set_world_view',msg_S)

      endif
!
! Establish final configuration
!
      f1 = gemdm_config ( )
      f2 = adw_config   ( )
      f3 = v4d_config   ( )
      call handle_error(min(f1,f2,f3),'set_world_view','')
!
      ierr = grid_nml    ('print')
      ierr = gem_nml     ('print')
      ierr = itf_cpl_nml ('print') 
      ierr = v4d_nml     ('print')
      ierr = series_nml  ('print')

      call adw_nml_print ()

      if (Williamson_case.ne.0.and.Lun_out.gt.0) write (Lun_out, nml=williamson) 

      if(Acid_test_L)call acid_check()
!
      call gemtim3 ( Lun_out )
!
! Establish domain decomposition (mapping subdomains and processors)
!
      call domain_decomp
!
! Initializes schemes control comdeck
!
      call set_schm
!
! Initializes GMM
!
      call set_gmm
!
!-------------------------------------------------------------------
!
      return
      end
