!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r sol_main - Envelope for the memory management of the 
!                 Linear Helmholtz solver
!
#include "model_macros_f.h"
!
      subroutine sol_main (iln)
      implicit none
!
      integer iln
!
!author 
!     Michel Roch - rpn - nov 1993
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_40 - Lee/Qaddouri      - for LAM version
! v3_00 - Desgagne & Lee    - Lam configuration
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_03 - Tanguay M.        - Williamson's cases
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_40 - Qaddouri A.       - initialize wk1,wk2 to 0.0 for LAM/Yin-Yang
!
!object
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lam.cdk"
#include "ldnh.cdk"
#include "lun.cdk"
#include "vtx.cdk"
#include "rhsc.cdk"
#include "trp.cdk"
#include "ptopo.cdk"
#include "lctl.cdk"
#include "schm.cdk"
#include "wil_williamson.cdk"
!
      integer i,j,k,dim,longueur
      real*8 pdwrd(2)
      real   prwrd(2)
!      
      real*8, dimension ((ldnh_maxx-ldnh_minx+1)*(ldnh_maxy-ldnh_miny+1)*l_nk) :: rhs,sol,wk1,wk2
      real*8 fdg1((ldnh_maxy -ldnh_miny +1)*(trp_12smax-trp_12smin+1)*(G_ni+Ptopo_npex))
      real*8 fdg2((trp_12smax-trp_12smin+1)*(trp_22max -trp_22min +1)*(G_nj+Ptopo_npey))
      real*8 fdwfft((ldnh_maxy -ldnh_miny +1)*(trp_12smax-trp_12smin+1)*(G_ni+2+Ptopo_npex))
!
!     ---------------------------------------------------------------
!
      if (Schm_autobar_L.and.Williamson_case.eq.1) return
!*
      if (Lun_debug_L) write(Lun_out,1000)
!
!     Get needed fields in memory
!
      gmmstat = gmm_get(gmmk_rhsp_s,rhsp,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'sol_main ERROR at gmm_get(rhsp)'
      gmmstat = gmm_get(gmmk_fiptx_s,fiptx,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'sol_main ERROR at gmm_get(fiptx)'
!
! Transfering rhsp (real*4 with halo) into rhs (real*8 without halo)

      call sol_trsf (rhs,rhsp,ldnh_minx,ldnh_maxx,ldnh_miny,ldnh_maxy, &
                                                    LDIST_DIM,l_nk, 1)
!
! Computing elliptic problem solution (sol)
      call tmg_start0 (40, 'SOL_0    ' )
! Initialize work vectors because LAM does not use full range
! lazy code ===> should be fixed
      wk1(:)=0.0
      wk2(:)=0.0
      call sol_hcr  (sol,rhs,wk1,wk2,fdg1,fdg2,fdwfft,iln, &
                      ldnh_minx,ldnh_maxx, &
                      ldnh_miny,ldnh_maxy,ldnh_ni,ldnh_nj,l_nk)

      call tmg_stop0(40)
!
! Transfering sol (real*8 without halo) into fiptx (real*4 with halo)
      call sol_trsf (sol,fiptx(l_minx,l_miny,1), &
                     ldnh_minx,ldnh_maxx,ldnh_miny,ldnh_maxy, &
                     LDIST_DIM,l_nk,-1)
!
      if (Lam_acidtest_L) call acid_solver
!
 1000 format( &
      5X,'SOLVING LINEAR HELMHOLTZ PROBLEM: (S/R SOL_MAIN)')
!
!     ---------------------------------------------------------------
!
      return
      end


