!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r sol_main - Envelope for the memory management of the 
!                 Linear Helmholtz solver
!
      subroutine sol_main ( F_rhs_sol, F_lhs_sol, F_ni, F_nj, F_nk, iln )
      implicit none
#include <arch_specific.hf>
!
      integer F_ni,F_nj,F_nk,iln
      real*8 F_rhs_sol (F_ni,F_nj,F_nk), F_lhs_sol (F_ni,F_nj,F_nk)
!
!author 
!     Michel Roch - rpn - nov 1993
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_40 - Lee/Qaddouri      - for LAM version
! v3_00 - Desgagne & Lee    - Lam configuration
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_03 - Tanguay M.        - Williamson's cases
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_40 - Qaddouri A.       - initialize wk1,wk2 to 0.0 for LAM/Yin-Yang
!
#include "glb_ld.cdk"
#include "grd.cdk"
#include "lam.cdk"
#include "ldnh.cdk"
#include "lun.cdk"
#include "trp.cdk"
#include "ptopo.cdk"
#include "schm.cdk"
#include "wil_williamson.cdk"
#include "sol.cdk"
#include "orh.cdk"
#include "opr.cdk"

      logical print_conv
      integer i,j,k,offi,offj,ni,nij,iter
      real linfini
      real*8, dimension (ldnh_maxx,ldnh_maxy,l_nk) :: wk1,wk2,wk3
      real*8 fdg1  ((ldnh_maxy -ldnh_miny +1)*(trp_12smax-trp_12smin+1)*(G_ni+Ptopo_npex  ))
      real*8 fdg2  ((trp_12smax-trp_12smin+1)*(trp_22max -trp_22min +1)*(G_nj+Ptopo_npey  ))
      real*8 fdwfft((ldnh_maxy -ldnh_miny +1)*(trp_12smax-trp_12smin+1)*(G_ni+2+Ptopo_npex))
!
!     ---------------------------------------------------------------
!
      if (Schm_autobar_L.and.Williamson_case.eq.1) return

      if (Lun_debug_L) write(Lun_out,1000)

      print_conv = (iln.eq.Schm_itnlh   ) .and. &
                   (Orh_icn.eq.Schm_itcn) .and. &
                   (Ptopo_couleur.eq.0  ) .and. &
                   (Lun_out.gt.0)

      offi = Ptopo_gindx(1,Ptopo_myproc+1)-1
      offj = Ptopo_gindx(3,Ptopo_myproc+1)-1
      ni   = ldnh_ni-pil_w-pil_e
      nij  = (ldnh_maxy-ldnh_miny+1)*(ldnh_maxx-ldnh_minx+1)
      wk1=0.0 ; wk2=0.0

!$omp parallel private (i,j,k) shared (offi,offj,ni,nij)
!$omp do
      do j=1+pil_s,ldnh_nj-pil_n
         call dgemm ('N','N', ni, G_nk, G_nk, 1.0D0, F_rhs_sol(1+pil_w,j,1), &
                     nij, Opr_lzevec_8, G_nk, 0.0d0, wk1(1+pil_w,j,1), nij)
         do k=1,Schm_nith
            do i = 1+pil_w, ldnh_ni-pil_e
               wk1(i,j,k)= Opr_opsxp0_8(G_ni+offi+i) * &
                           Opr_opsyp0_8(G_nj+offj+j) * wk1(i,j,k) 
            enddo
         end do
      end do
!$omp enddo
!$omp end parallel 

      if (G_lam) then

         if (Grd_yinyang_L) then
            wk3 = wk1
            do iter=1, Sol_yyg_maxits
               call sol_lam (wk2, wk1, fdg1, fdg2, fdwfft, iln, Lun_debug_L,&
                                                           F_ni, F_nj, F_nk )
               wk1 = wk3
               call yyg_rhs_scalbc(wk1, wk2, ldnh_minx, ldnh_maxx,&
                         ldnh_miny, ldnh_maxy, l_nk, iter, linfini)
               if (Lun_debug_L.and.print_conv) write(Lun_out,1001) linfini,iter
               if ((iter.gt.1).and.(linfini.lt.Sol_yyg_eps)) goto 999
            end do
999         if (print_conv) then
               write(Lun_out,1002) linfini,iter
               if (linfini.gt.Sol_yyg_eps) write(Lun_out,9001) Sol_yyg_eps
            endif
         else
            call sol_lam (wk2, wk1, fdg1, fdg2, fdwfft, iln, print_conv, &
                                       F_ni, F_nj, F_nk)
         endif

      else

         call sol_global (wk2, wk1, fdg1, fdg2, fdwfft, F_ni, F_nj, F_nk)

      endif

!$omp parallel private (j) shared ( g_nk )
!$omp do
      do j=1+pil_s,ldnh_nj-pil_n
         call dgemm ('N','T', ni, G_nk, G_nk, 1.0D0, wk2(1+pil_w,j,1), &
                      nij, Opr_zevec_8, G_nk, 0.0d0, F_lhs_sol(1+pil_w,j,1), nij)
      enddo
!$omp enddo
!$omp end parallel

      if (Lam_acidtest_L) call acid_solver

 1000 format( 5X,'SOLVING LINEAR HELMHOLTZ PROBLEM: (S/R SOL_MAIN)')
 1001 format (3x,'Iterative YYG    solver convergence criteria: ',1pe14.7,' at iteration', i3)
 1002 format (3x,'Final YYG    solver convergence criteria: ',1pe14.7,' at iteration', i3)
 9001 format (3x,'WARNING: iterative YYG solver DID NOT converge to requested criteria:: ',1pe14.7)
!
!     ---------------------------------------------------------------
!
      return
      end


