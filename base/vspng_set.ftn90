!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r vspng_set - Vertical sponge using a vertical modulation of 
!                  the factorized del-2 horizontal diffusion for non-LAM
!                  and 9 point filter for LAM.
!
#include "model_macros_f.h"
!
      subroutine vspng_set
!
      implicit none
#include <arch_specific.hf>
!
!
!author    
!     Michel Desgagne  -  November 2000
!
!revision
! v2_11 - Desgagne M.       - initial version
! v3_02 - Lee V.            - add setup for LAM vertical sponge
! v3_22 - Spacek L.         - add Vspng_zmean_L
! v3_30 - Spacek L./m.Roch  - add zmean for Grd_gauss_L 
! v3_32 - Lee V.            - stop run if LAM Vspng_nutop is undefined
!
!object
!       
!arguments
!     none
!
!implicits
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "lun.cdk"
#include "vspng.cdk"
#include "grd.cdk"
#include "type.cdk"
#include "ver.cdk"
!      
      integer i,j,k,istat
      real*8, dimension(:), allocatable :: weigh
      real*8 pis2_8,pbot_8,wh_8,delp_8,TWO_8,c_8,nutop
      parameter (TWO_8 = 2.0)
!*
!     ---------------------------------------------------------------
!
      if (Lun_out.gt.0) write (Lun_out,1001)

      if (Vspng_nk.le.0) return

      istat = 0
      if(Vspng_zmean_L.and.(.not.Grd_gauss_L))then
         if(G_lam.or.Grd_roule.or..not.Grd_uniform_L)then
            if (Lun_out.gt.0) write (Lun_out,9001)
            istat = -1
         endif
      endif

      if (Vspng_coeftop.lt.0.) then
         if (Lun_out.gt.0) write (Lun_out,9002) Vspng_coeftop, Vspng_nk
         istat = -1
      endif
      call handle_error(istat,'vspng_set','')

      Vspng_nk = min(G_nk,Vspng_nk)
      pis2_8   = Dcst_pi_8/TWO_8

      pbot_8 = exp(Ver_z_8%m(Vspng_nk+1))
      delp_8 = pbot_8 - exp(Ver_z_8%m(1))
      allocate (weigh(Vspng_nk))

      do k=1,Vspng_nk
         weigh(k) = (sin(pis2_8*(pbot_8-exp(Ver_z_8%m(k)))/(delp_8)))**2
      end do

      i=G_ni/2
      j=G_nj/2
      c_8 = min ( G_xg_8(i+1) - G_xg_8(i), G_yg_8(j+1) - G_yg_8(j) )

      nutop = Vspng_coeftop*Cstv_dt_8/(Dcst_rayt_8*c_8)**2
      Vspng_niter = int(4.d0*nutop+0.9999999)
      if (.not.G_lam) Vspng_niter = -1

      if (Lun_out.gt.0) then
         write (Lun_out,2002) Vspng_coeftop,Vspng_nk,nutop,Vspng_niter
         write (Lun_out,3001) 
      endif

      if (G_lam) then

         wh_8  = nutop/max(1.,float(Vspng_niter))
         allocate (Vspng_nu_8(Vspng_nk))
         do k=1,Vspng_nk
            Vspng_nu_8(k) = weigh(k) * wh_8
            if (Lun_out.gt.0) &
            write (Lun_out,2005) &
               weigh(k)*Vspng_coeftop/max(1.,float(Vspng_niter)),&
               Vspng_nu_8(k),exp(Ver_z_8%m(k)),k
         end do

      else

         allocate (Vspng_coef_8(Vspng_nk))
         do k=1,Vspng_nk
            Vspng_coef_8(k) = weigh(k) * Vspng_coeftop
            if (Lun_out.gt.0) &
            write (Lun_out,2005) Vspng_coef_8(k),&
               Vspng_coef_8(k)*Cstv_dt_8/(Dcst_rayt_8*c_8)**2,&
               exp(Ver_z_8%m(k)),k

            Vspng_coef_8(k) = Vspng_coef_8(k) &
                             *Cstv_dt_8/(Dcst_rayt_8*Dcst_rayt_8)
         end do

         if (Lun_out.gt.0) write (Lun_out,2007) Vspng_zmean_L

      endif

      if (Lun_out.gt.0) print*

 1001 format(/,'INITIALIZATING SPONGE LAYER PROFILE ',  &
               '(S/R VSPNG_SET)',/,51('='))
 2002 format('  SPONGE LAYER PROFILE BASED ON: Vspng_coeftop=',1pe10.2, &
             '  m**2 AND Vspng_nk=',i3/'  Nu_top=',1pe14.6, &
             '  Vspng_niter=',i4)
 2005 format(1pe14.6,1pe14.6,f11.2,i8)
 2007 format('  SPONGE LAYER Vspng_zmean_L =',l2)
 3001 format('     Coef           Nu            Pres      Level')
 9001 format('Vspng_zmean_L works ONLY with GAUSS or Global Uniform unrotated grid')
 9002 format('  Vspng_coeftop=',f10.2,/,'  Must set Vspng_coeftop > 0.0 when Vspng_nk>=1')
!
!     ---------------------------------------------------------------
      return
      end
