!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!s/r wrrstrt_phy - Write the restart file restart_BUSPER_$date
!
#include "model_macros_f.h"
!
      subroutine wrrstrt_phy (F_spin_L)
      implicit none
!
      logical F_spin_L
!author
!     M. Desgagne - Mars 2008
!
!revision
! v3_31 - Desgagne M.       - initial MPI version
! v4_14 - Dugas B.          - account for increment forcing data
!
!implicits
#include "lun.cdk"
#include "lctl.cdk"
#include "itf_phy_buses.cdk"
#include "grd.cdk"
#include "cstv.cdk"
#include "init.cdk"
#include "rstr.cdk"
#include "modconst.cdk"
#include "out.cdk"
#include "clim.cdk"
#include "cfld.cdk"
!
!
!modules
      integer  fnom,fclos
      external fnom,fclos
!
      character*512  fn
      character*16   datev
      integer dim,unf,ier,ibuf(4),datstp,adr
      real   rbuf(6)
      real*8 dayfrac, sec_in_day
      parameter (sec_in_day=86400.0d0)
!
!     ---------------------------------------------------------------
!
      dim = p_bper_siz*p_nj
      if (dim.le.0) return
!
      unf = 0
!
      dayfrac = dble(Lctl_step) * Cstv_dt_8 / sec_in_day
      call incdatsd (datev,Mod_runstrt_S,dayfrac)
      call datp2f (datstp,datev)
!
      fn='restart_BUSPER'
      if (F_spin_L) then
         fn= trim(Out_dirname_S)// '/' //'BUSPER4spinphy_'//trim(datev)
         Out_diruse_L = .true.
      endif
!
      ier = fnom  (unf,fn,'RND',0)
      call waopen (unf)
!
      if (Lun_out.gt.0) write(Lun_out,2000) Lctl_step,trim(fn)
!
      ibuf(1) = datstp
      ibuf(2) = dim
      ibuf(3) = Grd_ni
      ibuf(4) = Grd_nj
!
      rbuf(1) = Grd_dx
      rbuf(2) = Grd_dy
      rbuf(3) = Grd_xlon1
      rbuf(4) = Grd_xlat1
      rbuf(5) = Grd_xlon2
      rbuf(6) = Grd_xlat2
!
      call wawrit (unf,ibuf        , 1,  4)
      call wawrit (unf,rbuf        , 5,  6)
!
      call wawrit( unf,Clim_inincr_L, 11, 1 )
      if (Clim_inincr_L) then
         call wawrit( unf,Cfld_nbr  , 12, 1 )
         if (Cfld_nbr > 0) then
            call wawrit( unf,Cfld_date, 13,           Cfld_nbr )
            call wawrit( unf,Cfld_levs, 13+  Cfld_nbr,Cfld_nbr )
            call wawrit( unf,Cfld_list, 13+2*Cfld_nbr,Cfld_nbr )
         endif
         adr = 13+3*Cfld_nbr
      else
         adr = 12
      endif
!
      call wawrit (unf,Phy_busper3D,adr,dim)
      adr = adr + dim
      if ( Init_balgm_L .and. .not.Rstri_idon_L .and. Rstri_half_L) then
         call wawrit (unf,.true.,adr,1)
         adr = adr + 1
         call wawrit (unf,Phy_busper3D_digf,adr,dim)
      else
         call wawrit (unf,.false.,adr,1)
      endif
!
      call waclos(unf)
      ier = fclos(unf)  
!
 2000 format(/,'WRITING A PHYSICS RESTART FILE AT TIMESTEP #',I8,x,a, &
             /,'============================================')
!
!     ---------------------------------------------------------------
!      
      return
      end
