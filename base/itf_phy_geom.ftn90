!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

#include "model_macros_f.h"
#include "msg.h"

!/**
subroutine itf_phy_geom(F_dest, n1,n2, F_nomvar_S, F_indx, F_err)
   implicit none
   !@objective
   !@arguments
   character(len=*),intent(in) :: F_nomvar_S
   integer,intent(in) :: n1,n2,F_indx
   real,intent(inout) :: F_dest(n1,n2)
   integer,intent(out) :: F_err
   !@author Michel Desgagne    -   Spring 2011
   !**/
#include <rmnlib_basics.hf>
#include <gmm.hf>
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "geomn.cdk"
#include "p_geof.cdk"
#include "dcst.cdk"
#include "itf_phy_buses.cdk"

   real*8,parameter :: one_8 = 1.D0
   real*8,parameter :: clxxx_8 = 180.D0

   integer :: i,j,istat
   real, allocatable :: wrk1(:,:)
   real*8 :: deg2rad_8
   type(gmm_metadata) :: mymeta
   !---------------------------------------------------------------
   F_err = RMN_ERR
   if (n2 /= p_nj)  then
      call msg(MSG_ERROR,'itf_phy_geom - inconsistent dimensions')
      return
   endif

   allocate(wrk1(l_ni,l_nj),stat=istat)
   if (istat /= 0) return
   deg2rad_8 = acos(-one_8)/clxxx_8

   select case(trim(F_nomvar_S))

   case('DLAT')
      wrk1 = deg2rad_8*Geomn_latrx
      do j = 1,p_nj
         call itf_phy_fold(F_dest(F_indx,j), wrk1, j, 1,1, 1,l_ni,1,l_nj)
      end do
      F_err = RMN_OK

   case('DLON')
      where(Geomn_lonrx >= 0)
         wrk1 = deg2rad_8*Geomn_lonrx
      elsewhere
         wrk1 = deg2rad_8*(Geomn_lonrx+360.)
      endwhere
      do j = 1,p_nj
         call itf_phy_fold(F_dest(F_indx,j), wrk1, j, 1,1, 1,l_ni,1,l_nj)
      end do
      F_err = RMN_OK

   case('MF')
      istat = gmm_get(gmmk_fis0_s,fis0,mymeta)
      if (RMN_IS_OK(istat)) then
         wrk1(1:l_ni,1:l_nj) = fis0(1:l_ni,1:l_nj) / Dcst_grav_8
         do j = 1,p_nj
            call itf_phy_fold(F_dest(F_indx,j), wrk1, j, 1,1, 1,l_ni,1,l_nj)
         end do
         F_err = RMN_OK
      endif

   case('DXDY')
      do j = 1,l_nj
         do i = 1,l_ni
            wrk1(i,j) = geomg_hxu_8(i-1)*geomg_hyv_8(j-1)*     &
                 Dcst_rayt_8*Dcst_rayt_8*geomg_cy_8(j)
         end do
      end do
      do j = 1,p_nj
         call itf_phy_fold(F_dest(F_indx,j), wrk1, j, 1,1, 1,l_ni,1,l_nj)
      end do
      F_err = RMN_OK

   case('EPONMOD')
      call itf_phy_vlsp(wrk1, l_ni, l_nj)
      do j = 1,p_nj
         call itf_phy_fold(F_dest(F_indx,j), wrk1, j, 1,1, 1,l_ni,1,l_nj)
      end do
      F_err = RMN_OK

   end select

   if (RMN_IS_OK(F_err)) then
      print '(a,i3,x,a4,a,a10,a,i6,a,1pe14.6,1pe14.6)','(itf_phy_geom)',1,' ',' => ',trim(F_nomvar_S),' : ',F_indx,'P',minval(wrk1),maxval(wrk1)
   endif

   deallocate(wrk1,stat=istat)
   !---------------------------------------------------------------
   return
end subroutine itf_phy_geom
