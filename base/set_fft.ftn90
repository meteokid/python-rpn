!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r set_fft - determine if fast fourier transforms is needed and
!                if so, initialize and prepare the FFT projector
!
#include "model_macros_f.h"
!
      subroutine set_fft
!
      implicit none
!
!author 
!     michel roch - rpn - june 1993
!
!revision
! v2_00 - Lee V.            - initial MPI version (from setfft v1_03)
! v2_40 - Qaddouri A.       - adjust for LAM version
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_30 - Tanguay M.        - Abort if LAM adjoint not FFT 
!
!object
!     See above id.
!	
!arguments
!	none
!
!implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "dcst.cdk"
#include "fft.cdk"
#include "sol.cdk"
#include "grd.cdk"
#include "lun.cdk"
       include "v4dg.inc"
!
!*
      real*8 two
      parameter ( two  = 2.0 )
!
      integer i
!     ---------------------------------------------------------------
!
      if (Lun_out.gt.0) write(Lun_out,1000)
      Fft_fast_L = .false.
!
!C       1.    test if grid is uniform in x
!              ----------------------------
      if ( .not. sol_fft_L ) then
         if (Lun_out.gt.0)  &
         write(Lun_out,*)'Fft_fast_L = .false. ====> sol_fft_L=.f.'
         goto 999
      endif
!
      if ( Grd_ni .ne. Grd_nila ) then
         if (Lun_out.gt.0)  &
         write(Lun_out,*)'Fft_fast_L = .false. ====> non-uniform grid'
         goto 999
      endif
!
!C       2.    test grid factorization
!              -----------------------
      i = G_ni-Lam_pil_w-Lam_pil_e
      call ngfft ( i )
      if ( i.ne.G_ni-Lam_pil_w-Lam_pil_e ) then
         if (Lun_out.gt.0)  &
         write(Lun_out,3001) G_ni-Lam_pil_w-Lam_pil_e,i
         goto 999
      endif
!
      Fft_fast_L = .true.
      if (Lun_out.gt.0) write(Lun_out,*) 'Fft_fast_L = ',Fft_fast_L
!
!C       3.    calculate inverse projector in Fourier space 'Fft_pri_8'
!              --------------------------------------------------------
      if (G_lam) then
         call setscqr(i, 'QCOS' )
         i=G_ni-Lam_pil_w-Lam_pil_e
         Fft_pri_8 = dble(i)/(G_xg_8(G_ni-Lam_pil_e)-G_xg_8(Lam_pil_w))
      else
         call setfft8 ( Grd_ni )
         Fft_pri_8 = dble(Grd_ni) / (  two * Dcst_pi_8 )
      endif
!
      if (Lun_out.gt.0) write(Lun_out,*) 'Fft_pri_8 = ',Fft_pri_8
!
 999  if (V4dg_conf.ne.0.and.G_lam.and..not.Fft_fast_L) then
         if (Lun_out.gt.0) write(Lun_out,*) 'ABORT: LAM adjoint not FFT'
         call handle_error(-1,'set_fft','LAM adjoint non FFT')
      endif
!
 1000 format( &
      /,'COMMON INITIALIZATION AND PREPARATION FOR FFT (S/R SET_FFT)', &
      /,'===========================================================')
 3001 format ('Fft_fast_L = .false. ====> NI = ',i6,' NOT FACTORIZABLE' &
              /'NEXT FACTORIZABLE G_NI = ',i6)
!
!     ---------------------------------------------------------------
!
      return
      end
