!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r equatorial_sponge - apply vertical diffusion at and near the model top on u and v
!
#include "model_macros_f.h"
subroutine equatorial_sponge(F_u,F_v,DIST_DIM,Nk)
   !
   implicit none
#include <arch_specific.hf>
   !
   integer DIST_DIM, Nk
   real F_u(DIST_SHAPE,Nk), F_v(DIST_SHAPE,Nk)
   !
   !author
   !     Claude Girard - Andre Plante
   !
   !revision
   !
   !arguments
   !______________________________________________________________________
   !        |                                             |           |   |
   ! NAME   |             DESCRIPTION                     | DIMENSION |I/O|
   !--------|---------------------------------------------|-----------|---|
   ! F_u    | x component of velocity                     | 3D (Nk)   |i/o|
   ! F_v    | y component of velocity                     | 3D (Nk)   |i/o|
   !________|_____________________________________________|___________|___|
   !
   !    There are nlev levels that will be diffused.
   !    There are nlev-1 coefficent passed in namelist by user.
   !
   !    The boundary conditions are flux=0. This is achieved by
   !    putting coef=0 at boundaries (see drawing below).
   !    Also the index km and kp make the wind derivatives zero
   !    at boundary.
   !
   !    ---- this u equals u(1) (see km in loop)   \
   !                                               |
   !    ==== coef(1)=0, Top boundary.              | this derivative = 0
   !                                               |
   !    ---- u(1) first levels diffused            /
   !
   !    ==== coef(2)=first coef passed by user
   !
   !    ---- u(2)
   !
   !        ...
   !
   !    ---- u(nlev-1)
   ! 
   !    ==== coef(nlev)=last coef passed by user
   !
   !    ---- u(nlev) last level diffused           \
   !                                               |
   !    ==== coef(nlev+1)=0, Bottom boundary.      | this derivative = 0
   !                                               |
   !    ---- this u equal u(nlev) (see kp in loop) /
   !
   !_____________________________________________________________________
   !
   !implicits
#include "lun.cdk"
#include "glb_ld.cdk"
#include "eq.cdk"
#include "step.cdk"
#include "ver.cdk"
   !
   ! Local variables
   !
   real :: Href2 !=(16000./log(10.))**2 ! (~6950 m)**2   
   real, dimension(:,:,:), pointer :: uu,vv
   real,save, dimension(:,:), pointer :: eponmod
   real,save, dimension(:), pointer :: coef,cm,cp
   integer, save :: nlev
   integer :: i,j,k,km,kp
   logical, save :: done_L = .false.
   !
   Href2 = (16000./log(10.))**2 ! (~6950 m)**2   
   if(all(Eq_sponge<epsilon(Eq_sponge(1))))return
   !
   if (Lun_debug_L) write (Lun_out,1000)
   !
   if(.not.done_L)then
      !
      done_L=.true.
      !
      nlev=0
      !
      ! Check stability criteria and count level to diffuse.
      !
      do k=1,size(Eq_sponge)
         if(Eq_sponge(k)>epsilon(Eq_sponge(k)))then         
            if(Step_dt*Eq_sponge(k)/(Href2*Ver_dz_8%m(k)*Ver_dz_8%m(k))>.25)then
               call handle_error(-1,'equatorial_sponge', &
                    'Selected diffusion coeficients is making the scheme unsatable, aborting')
            endif
            nlev=nlev+1
         else
            exit
         endif
      enddo
      nlev=nlev+1
      !
      allocate(coef(1:nlev+1),cm(nlev),cp(nlev))
      coef(1)=0.
      coef(nlev+1)=0.
      coef(2:nlev)=Eq_sponge(1:nlev-1)
      !
      do k=1,nlev
         cp(k)=Step_dt*coef(k+1)/(Href2*Ver_dz_8%m(k)*Ver_dz_8%t(k+1))
         cm(k)=Step_dt*coef(k  )/(Href2*Ver_dz_8%m(k)*Ver_dz_8%t(k  ))
      enddo
      !
      allocate(eponmod(l_ni,l_nj))
      call itf_phy_vlsp (eponmod,l_ni,l_nj)
      !
   endif
   !
   allocate(uu(l_ni,l_nj,nlev),vv(l_ni,l_nj,nlev))
   !
   ! nlev is generally small (about 10) so we do the parallel section on j.
   !
   !$omp parallel private(kp,km)
   !$omp do
   do j=1,l_nj  
      do k=1,nlev
         kp=min(nlev,k+1)
         km=max(1,k-1)
         do i=1,l_ni
            uu(i,j,k)=F_u(i,j,k)+eponmod(i,j)*(cp(k)*(F_u(i,j,kp)-F_u(i,j,k )) &
                                              -cm(k)*(F_u(i,j,k )-F_u(i,j,km)))
            vv(i,j,k)=F_v(i,j,k)+eponmod(i,j)*(cp(k)*(F_v(i,j,kp)-F_v(i,j,k )) &
                                              -cm(k)*(F_v(i,j,k )-F_v(i,j,km)))
         enddo
      enddo
      F_u(1:l_ni,j,1:nlev)=uu(1:l_ni,j,1:nlev)
      F_v(1:l_ni,j,1:nlev)=vv(1:l_ni,j,1:nlev)
   enddo
   !$omp enddo
   !$omp end parallel
   !
   deallocate(uu,vv)
   !     __________________________________________________________________
   !
   if (Lun_debug_L) write (Lun_out,1000)
   !
1000 format(3X,'APPLY EQUATORIAL SPONGE: (S/R EQUATORIAL_SPONGE)')
   !
   !     __________________________________________________________________
   !
   return
end subroutine equatorial_sponge
