!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!/**
      subroutine itf_phy_update3 (F_apply_L)
      implicit none

   !@objective
   !@arguments
   logical,intent(in) :: F_apply_L
   !@author  Michel Desgagne  -  SUmmer 2013
   !**/

#include <arch_specific.hf>
#include <gmm.hf>
#include "glb_ld.cdk"
#include "tr3d.cdk"

      character(len=GMM_MAXNAMELENGTH) :: trname_S
      integer nelements, init, busidx, istat,k
      real, pointer :: data3d(:,:,:), minus(:,:,:)
!
!-----------------------------------------------------------------
!
   APPLY: if (F_apply_L) then

      do k=1, Tr3d_ntr
         trname_S = 'TR/'//trim(Tr3d_name_S(k))//':P'
         istat = gmm_get(trim(trname_S),data3d)
         call phy_unfold (data3d, trim(trname_S), 'D', 1, l_nk, &
                          l_minx, l_maxx, l_miny, l_maxy, l_nk)
      enddo

      istat = gmm_get ('PW_UU:P',data3d)
      call phy_unfold (data3d, 'PW_UU:P', 'D', 1, l_nk, &
                       l_minx, l_maxx, l_miny, l_maxy, l_nk)

      istat = gmm_get ('PW_VV:P',data3d)
      call phy_unfold (data3d, 'PW_VV:P', 'D', 1, l_nk, &
                       l_minx, l_maxx, l_miny, l_maxy, l_nk)

      istat = gmm_get ('PW_TT:P',data3d)
      call phy_unfold (data3d, 'PW_TT:P', 'D', 1, l_nk, &
                       l_minx, l_maxx, l_miny, l_maxy, l_nk)

      call itf_phy_apply2 ()

   else

      !# Note: Secial case at step=0, tracers are not updated at surface
      do k=1, Tr3d_ntr
         if (trim(Tr3d_name_S(k)) == 'HU' .or. &
             any(Tr3d_username_S(1:Tr3d_userntr) == trim(Tr3d_name_S(k))) ) cycle
         trname_S = 'TR/'//trim(Tr3d_name_S(k))//':P'
         istat = gmm_get(trim(trname_S),data3d)
         call phy_unfold (data3d, trim(trname_S), 'D', 1, l_nk, &
                          l_minx, l_maxx, l_miny, l_maxy, l_nk)
         trname_S = 'TR/'//trim(Tr3d_name_S(k))//':M'
         istat = gmm_get(trim(trname_S),minus)
         minus = data3d
      end do
      
   endif APPLY
!
!-----------------------------------------------------------------
!
      return
      end subroutine itf_phy_update3
