!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r  bac - backsubstitution ( memory management and call to bacp_2 )
!
#include "model_macros_f.h"
!
      subroutine bac( Itr, Itnlh )
!
      implicit none
#include <arch_specific.hf>
!
      integer Itr, Itnlh
!
!author
!     Alain Patoine - Gabriel Lemay
!
!revision
! v2_00 - Desgagne M.       - initial MPI version 
! v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
! v2_31 - Desgagne M.       - removed treatment of Hu and Qc
! v3_00 - Desgagne & Lee    - Lam configuration
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Girard            - Open top
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_40 - Qaddouri/Lee      - Yin-Yang, to exchange ZD, winds
!
!object
!******************************************************************************
! Back subtitution see :
! GEMergo4.doc by Claude Girard
!******************************************************************************
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
!  Itr          I           current nonlinear iteration number 
!  Itnlh        I           total number of nonlinear iterations
!----------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "vt0.cdk" 
#include "vtx.cdk" 
#include "lctl.cdk"
#include "nest.cdk"
#include "wil_williamson.cdk"
#include "grd.cdk"
!*
      type(gmm_metadata) :: mymeta
      integer :: istat
!     __________________________________________________________________
!
      if (Schm_autobar_L.and.Williamson_case.eq.1) return
!
      if (Lun_debug_L) write(Lun_out,1000)

      istat = gmm_get(gmmk_rhsu_s,rhsu,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(rhsu)'
      istat = gmm_get(gmmk_rhsv_s,rhsv,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(rhsv)'
      istat = gmm_get(gmmk_rhst_s,rhst,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(rhst)'
      istat = gmm_get(gmmk_rhsf_s,rhsf,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(rhsf)'
      istat = gmm_get(gmmk_rhsb_s,rhsb,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(rhsb)'
      istat = gmm_get(gmmk_wt0_s,wt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(wt0)'
      istat = gmm_get(gmmk_tt0_s,tt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(tt0)'
      istat = gmm_get(gmmk_st0_s,st0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(st0)'
      istat = gmm_get(gmmk_zdt0_s,zdt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(zdt0)'
      istat = gmm_get(gmmk_fiptx_s,fiptx,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(fiptx)'
      if (.not. Schm_hydro_L) then
         istat = gmm_get(gmmk_rhsw_s,rhsw,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(rhsw)'
      endif

      istat = gmm_get(gmmk_fis0_s,fis0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(fis0)'
      istat = gmm_get(gmmk_ut0_s,ut0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(ut0)'
      istat = gmm_get(gmmk_vt0_s,vt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(vt0)'
      istat = gmm_get(gmmk_wt0_s,wt0,mymeta)

      nullify(qt0,nest_q)
      if (.not. Schm_hydro_L) then
         istat = gmm_get(gmmk_qt0_s,qt0,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(qt0)'
         if (Schm_opentop_L) then
           istat = gmm_get(gmmk_nest_q_s,nest_q,mymeta)
           if (GMM_IS_ERROR(istat)) print *,'bac ERROR at gmm_get(nest_q)'
         endif
      endif
!
      call  bacp_2 (   Itr  , Itnlh , fiptx ,  fis0 , &
                       ut0  ,   vt0 ,   wt0 ,   tt0 , &
                       st0  ,  zdt0 ,   qt0 , fiptx , nest_q, &
                       rhsu ,  rhsv ,  rhst ,  rhsw ,  rhsf , rhsb , &
                       nl_u ,  nl_v ,  nl_t ,  nl_w ,  nl_f , nl_b , &
                       LDIST_DIM, l_nk )
!
      if (Grd_yinyang_L) call yyg_bacwinds (ut0,vt0,zdt0,LDIST_DIM,l_nk)
!
1000  format (5X,'BACK SUBSTITUTION: (S/R BAC)')
!     __________________________________________________________________
!
      return
      end

