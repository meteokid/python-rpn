!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_rdfile -- Reading a file for the physics package
!
#include "model_macros_f.h"
!
      subroutine itf_phy_rdfile (F_fichier_S,F_read_cb,F_messg_s,mode)
      implicit none
#include <arch_specific.hf>
!
      character* (*) F_fichier_S, F_messg_s
      integer mode
      external F_read_cb
!
!author
!     M. Desgagne  (Spring 2008)
!
!revision
! v3_31 - Desgagne M.       - initial version
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_fichier_S   I      file name of input file
! F_read_cb     I      read call back routine (from physics)
!
#include "ptopo.cdk"
#include "path.cdk"

      character*1024 filename
      logical found_L
      integer iun,ilir,inbr,status,ierr,max_ndim
      parameter (max_ndim=1000)
      integer dim(max_ndim)
      integer fnom,fstouv,fstopc,fstfrm,fclos,wkoffit,bufnml(1000000)
      real, dimension (:), allocatable :: rbuf
!-----------------------------------------------------------------
!
      status = 0
!
      filename = trim(Path_input_S)//'/'//trim(F_fichier_S)

      if (Ptopo_myproc.eq.0) then
!
         inquire (FILE=filename,EXIST=found_L)
!
         if (found_L) then
            ilir = wkoffit(filename)
            if (  (ilir.eq.1) .or.(ilir.eq.2).or. &
                  (ilir.eq.33).or.(ilir.eq.34) ) then
               write (6,1001) trim(F_messg_s),mode,trim(filename)
            else
               print*, ' FILE ',trim(filename)
               print*, ' NOT FST FILE FORMAT -- ABORT --'
               status = -1
            endif
         else
            print*
            print *,'********************************************'
            print *,'   CAN NOT FIND FILE: ',trim(filename)
            print *,'********************************************'
            status = -1
         endif

      endif
!
      call handle_error(status,'itf_phy_rdfile','itf_phy_rdfile')
!
      select case (mode)

         case (1)

            if (Ptopo_myproc.gt.0) inbr = fstopc ('MSGLVL','SYSTEM',.false.)
            iun    = 0
            ilir   = fnom    (iun,filename,'STD+RND+OLD+R/O',0)
            ilir   = fstouv  (iun,'RND')
            status = 200
            call F_read_cb (iun,rbuf,dim,status)
            if (status.lt.0) goto 9988
            allocate (rbuf(dim(2)))
            status = 300
            call F_read_cb (iun,rbuf,dim,status)
            inbr   = fstfrm  (iun)
            inbr   = fclos   (iun)
            deallocate (rbuf) 

         case (2)

            if (Ptopo_myproc.eq.0) then
               call array_from_file(bufnml,size(bufnml),filename)
            else
               inbr = fstopc ('MSGLVL','SYSTEM',.false.)
            endif
            call RPN_COMM_bcast(bufnml,size(bufnml),"MPI_INTEGER",0, &
                                                       "grid",ierr )
            filename=trim(F_fichier_S)
            call array_to_file (bufnml,size(bufnml),filename)

            iun  = 0
            ilir = fnom (iun,filename,'STD+RND+OLD+R/O',0)
            ilir = fstouv (iun,'RND')

            status = 200
            call F_read_cb (iun,rbuf,dim,status)
            if (status.lt.0) goto 9988
            allocate (rbuf(dim(2)))
            status = 300
            call F_read_cb (iun,rbuf,dim,status)

            inbr = fstfrm (iun)
            inbr = fclos  (iun)    
            deallocate (rbuf) 
          
         case (3)

            status = 0
            if (Ptopo_myproc.eq.0) then
               iun  = 0
               ilir = fnom    (iun,filename,'STD+RND+OLD+R/O',0)
               ilir = fstouv  (iun,'RND')

               status = 200
               call F_read_cb (iun,rbuf,dim,status)
               if (status.lt.0) goto 9977
               allocate (rbuf(dim(2)))
               status = 250
               call F_read_cb (iun,rbuf,dim,status)
               inbr = fstfrm  (iun)
               inbr = fclos   (iun)    
            endif

 9977       call handle_error(status,'itf_phy_rdfile','itf_phy_rdfile')
            call RPN_COMM_bcast (dim,max_ndim,"MPI_INTEGER",0,"grid",ierr)
            if (Ptopo_myproc.gt.0) allocate (rbuf(dim(2)))
            call RPN_COMM_bcast (rbuf,dim(2),"MPI_REAL",0,"grid",ierr)
            status = 400
            call F_read_cb (iun,rbuf,dim,status)
            deallocate (rbuf) 

         case DEFAULT

 	    if (Ptopo_myproc.eq.0) print*,  &
            'itf_phy_rdfile: make up your mind'

      end select
!
 9988 call handle_error(status,'itf_phy_rdfile','itf_phy_rdfile')
!
      inbr = fstopc ('MSGLVL','INFORM',.false.)

 1001 format (/'READING ',a,' FILE in MODE ',i1,' from:'/a)
!
!-----------------------------------------------------------------
!
      return
      end
