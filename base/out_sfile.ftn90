!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!opyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
!**s/r Out_sfile - to open new output file
!
#include "model_macros_f.h"
!
      subroutine out_sfile (clostep_int,stepno,F_ip3,F_ext_S)
      implicit none
!
      character*(*) F_ext_S
      integer clostep_int,stepno,F_ip3
!
!AUTHOR   Michel Desgagne     September   2003 (MC2)
!
!REVISION
! v3_20 - Lee V.            - Adapted for GEMDM
! v3_30 - Dugas B.          - 1) Climate mode dm,dp and pm files are sent to directory
!                             ../../output/current_last_step/Out_myblocx-Out_myblocy
!                             2) Do not use Out_endstepno in climate mode
! v3_30 - McTaggart-Cowan R.- Use existing Out_etik_S string instead of namelist value
! v3_31 - Winger K.         - correction to size in ypq(Out_nisg) to Out_njsg
! v4_03 - Lee V.            - ISST + modification of Out_etik_S in out_sgrid only
!
!ARGUMENTS
!    NAMES       I/O  TYPE  DESCRIPTION
!
#include "clim.cdk"
#include "out.cdk"
#include "path.cdk"
!
      integer  prog_filename,fnom,fstouv,fstopc
      external prog_filename,fnom,fstouv,fstopc
!
      character*1024 out_filename_s
      character*15   datev,startindx
      character*3    ros 
      logical flag_post
      integer prognum,err,i,indx
      integer clostep,date,hour
      real, parameter :: eps=1.e-12
      real*8 sec_clostep,ONE, OV_day, OV_hour, OV_min, dayfrac, sec_in_day
      parameter ( ONE = 1.0d0, OV_day = ONE/86400.0d0, &
                  OV_hour = ONE/3600.0d0, OV_min = ONE/60.0d0, &
                  sec_in_day=86400.0d0 )
      data ros /'RND'/
!*
!----------------------------------------------------------------------
!
!     Note that fstopc will set the warning level for FST calls. The
!     false value means to set the Message Level to the type indicated
!     whereas the true value means to obtain the message level - ask Mario.
!     MSGLVL INFORM will inform the write and read messages
!     MSGLVL SYSTEM will indicate if there are errors only.

      if (Out_debug_L) then
          err = fstopc('MSGLVL','INFORM',.false.)
      else
          err = fstopc('MSGLVL','SYSTEM',.false.)
      endif

      Out_npas = stepno
!
      if ((Out_blocme.eq.0).and.(Out_nisl.gt.0).and.(Out_njsl.gt.0)) then
!
         if (clostep_int.le.0) then
            clostep = stepno
         else
            if (mod(stepno,clostep_int).eq.0) then
               clostep = stepno
               if (stepno.eq.0) clostep = clostep_int
            else
               clostep = (stepno/clostep_int + 1) * clostep_int
            endif
         endif
         if (.not.Clim_climat_L) clostep = min(clostep,Out_endstepno)
         sec_clostep  = dble(clostep)*dble(Out_deet)
         Out_ip2 = int (dble(stepno) * Out_deet / 3600. + eps)
         Out_ip3 = F_ip3
         call newdate (Out_dateo, date, hour,-3)
         hour=hour/1000000
!        Out_unit_S=H or blank:
         prognum = ceiling(sec_clostep *OV_hour - eps)
         if (Out_unit_S.eq.'P') prognum = clostep
         if (Out_unit_S.eq.'D') prognum = ceiling(sec_clostep * OV_day - eps)
         if (Out_unit_S.eq.'M') prognum = ceiling(sec_clostep * OV_min - eps)
         if (Out_unit_S.eq.'S') prognum = ceiling(sec_clostep - eps)
!
         err = prog_filename (Out_filename_S,Out_prefix_S,date,hour,-1,-1, &
                              Out_myblocx,Out_myblocy,prognum,Out_ndigits, &
                              Out_unit_S)
!
         Out_filename_S = trim(Out_dirname_S)//'/'//trim(Out_filename_S)//trim(F_ext_S)
!
         if (Out_unf.eq.0) then
             err = fnom (Out_unf, trim(Out_filename_S),'STD+'//ros,0)
             err = fstouv(Out_unf ,ros)
             if (Out_debug_L) &
             write (6,101) Out_unf,trim(Out_filename_S)
         endif
!
      endif
!
 101  format (' FST FILE UNIT=',i3,' FILE = ',a,' IS OPENED')
!----------------------------------------------------------------------
      return
      end
!
      subroutine out_cfile
      implicit none
!
#include "out.cdk"
!
      integer  fstfrm
      external fstfrm
!
      integer err
!----------------------------------------------------------------------
!
      if ((Out_blocme.eq.0).and.(Out_unf.gt.0)) then
         err = fstfrm(Out_unf)
         call fclos(Out_unf)
         Out_unf = 0
      endif
!
 102  format (' FST FILE UNIT=',i3,' FILE = ',a,' IS CLOSED')
!----------------------------------------------------------------------
      return
      end
