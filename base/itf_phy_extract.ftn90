!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_extract
!
#include "model_macros_f.h"
!
      subroutine itf_phy_extract ( F_busent, F_busper, F_busvol, F_obusval, &
                                   F_step, F_jdo, nk )
      implicit none
#include <arch_specific.hf>
!
      integer F_step, F_jdo, nk
      real F_busent(*), F_busper(*), F_busvol(*), F_obusval(*)
!
!author 
!     Michel Desgagne  -  Spring 2010
!
!revision
! v4_14 - Desgagne M.       - initial version
!
!object
!	Extract physics output from buses
!
#include "glb_ld.cdk"
#include "itf_cpl.cdk"
#include "obus.cdk"
!
      integer n,offbo,offbb
!
!     ---------------------------------------------------------------
!
!     Extract physic output
!
      !TODO: use bus_unfold
      do n=1,Obus_top
         offbo = (obus_offset(n)-1)*l_ni*l_nj + 1
         offbb =  obus_addr(n)
         if (obus_bus_S(n).eq.'E' .and. F_step == 0) &
         call itf_phy_unfold_td ( F_obusval(offbo), F_busent(offbb), &
                                  n, F_jdo, l_ni, l_nj)
         if (obus_bus_S(n).eq.'P') &
         call itf_phy_unfold_td ( F_obusval(offbo), F_busper(offbb), &
                                  n, F_jdo, l_ni, l_nj)
         if (obus_bus_S(n).eq.'V') &
         call itf_phy_unfold_td ( F_obusval(offbo), F_busvol(offbb), &
                                  n, F_jdo, l_ni, l_nj)
      end do
!
!C  Prepare surface variables for the coupling
!
      if (C_coupling_L) call itf_cpl_getbus (F_busper, F_busvol, F_jdo)
!
!     ---------------------------------------------------------------
!
      return
      end
