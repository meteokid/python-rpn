!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r prepoic - prepare projection matrix, solve eigenvalue problem
!
      subroutine prepoic( F_eval_8, F_evec_8, F_wk1_8, F_wk2_8,  &
                  F_xnor_8, F_ordr_8, F_case, F_i0, F_ni, NIS )
!
      implicit none
#include <arch_specific.hf>
!
      character*1 F_case
      integer F_ni, F_i0, NIS
      real*8 F_eval_8(*), F_evec_8(NIS,*), F_wk1_8(NIS,*)
      real*8 F_wk2_8(*), F_xnor_8, F_ordr_8
!
!author jean cote - sept 1995, from prepois
!
!revision
! v2_00 - Desgagne/Lee      - initial MPI version (from prepoic v1_03)
! v3_00 - Desgagne & Lee    - Lam configuration
! v4_40 - Qaddouri A.       - Check for Dirichlet case
!
!object
!     Prepare projection matrix in East-West direction for Poisson problem
!     Solve eigenvalue problem A X = lambda B X
!                        where A = d2/dx2 and B = projector

!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_eval_8     O    - eigenvalues
! F_evec_8     I/O  - input: A  (A = d2/dx2)
!                     output:eigenvectors of generalized problem AX = lambda BX
! F_wk1_8      I/O  - input: B  (projector)
!                   - output: work field
! F_wk2_8      I/O  - work field
! F_xnor_8     I    - normalized value of constant mode in E-W direction
! F_ordr_8     I    - < 0 if eigenvalues in decreasing order
! F_case       I    - 'P'eriodic, 'D'irichlet ou 'N'eumann
! F_i0         O    - index of constant mode
! F_ni         I    - number of points in x-direction
!
!*
      integer i, j,pnn
!
      pnn=F_ni
!     NOTE: geneigl may change pnn
 
      call geneigl ( F_eval_8, F_evec_8, F_wk1_8, F_wk2_8, F_ordr_8, 1, pnn, &
                     NIS, 3*pnn-1 )
 
      if ( F_ordr_8 .gt. 0.0 ) then
         F_i0 = F_ni
      else
         F_i0 = 1
      endif

      if ( F_xnor_8 .gt. 0.0 .and. F_case .ne. 'D' ) then

         F_eval_8(F_i0) = 0.0d0
         do i = 1, F_ni
            F_evec_8(i,F_i0) = F_xnor_8
         enddo

      endif

      return
      end
