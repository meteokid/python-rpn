!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r int_near_lag - to do YY nearest interpolation for scalar
!
       SUBROUTINe int_near_lag(FF,F,Imx,Imy,Ni,Nj,Nx,Ny,Xi, &
                                            Yi,x,y,h1,h2) 

       implicit none
!
!author
!           Abdessamad Qaddouri - October 2009
!
       integer Ni,Nj,Imx(Ni,Nj),Imy(Ni,Nj),Nx,Ny
       integer k,i,j,Mx(Ni,Nj),My(Ni,Nj)
       real*8  W1,W2,W3,W4,X1,XX,X2,X3,X4 
       integer Im, Jm
       real*8 YY,y1,y2,y3,y4,FF(Ni,Nj),Fi(Ni*Nj)
       real*8 F(Nx,Ny),x(*),y(*)
       real*8 Xi(Ni,Nj),Yi(Ni,Nj),h1,h2
       real*8 betax,betax1,betay,betay1
!
       Do j=1, Nj
	Do i = 1, Ni
	   Im = imx(i,j)
	   Jm = imy(i,j)
	   betax= ( Xi(i,j)-x(Im))/h1
           betax1= (1.0-betax)
           if (betax.le.betax1) then
             betax=0.0d0
             betax1=1.0d0
           else
             betax=1.0d0
             betax1=0.0d0
           endif
           betay=(Yi(i,j)-y(Jm))/h2
           betay1=1.0-betay
           if (betay.le.betay1) then
             betay=0.0d0
             betay1=1.0d0
           else
             betay=1.0d0
             betay1=0.0d0
           endif
           FF(i,j)= betay1*(betax1*F(Im,Jm)+betax*F(Im+1,Jm))+ &
                    betay*(betax1*F(Im,Jm+1)+betax*F(Im+1,Jm+1))

	Enddo
      Enddo

      return
      end 
