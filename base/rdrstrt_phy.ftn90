!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!s/r rdrstrt_phy - Read the restart file restart_BUSPER_$date
!
#include "model_macros_f.h"
!
      subroutine rdrstrt_phy ()
!
      implicit none
#include <arch_specific.hf>
!
!author
!     M. Desgagne - Mars 2008
!
!revision
! v3_31 - Desgagne M.       - initial version
! v4_14 - Dugas B.          - account for increment forcing data
!
!implicits
#include "gmm.hf"
#include "lun.cdk"
#include "lctl.cdk"
#include "itf_phy_buses.cdk"
#include "grd.cdk"
#include "cstv.cdk"
#include "lam.cdk"
#include "init.cdk"
#include "schm.cdk"
#include "rstr.cdk"
#include "modconst.cdk"
#include "path.cdk"
#include "ptopo.cdk"
#include "clim.cdk"
#include "cfld.cdk"
#include <clib_interface.cdk>
!
!modules
      integer  fnom,fclos
      external fnom,fclos
!
      character*512 fn
      character*16 datev,datev_infile,startindx
      logical spin_L
      integer dim,dim_infile,unf,ier,yela,tousla,ibuf(4),gmmstat
      real   rbuf(6)
      real*8 dayfrac, sec_in_day
      parameter (sec_in_day=86400.0d0)
      type(gmm_metadata) :: meta_busper
!
!     ---------------------------------------------------------------
!
      if ( .not. Schm_phyms_L ) return
!
      itf_phy_busper_init_L = .false.
!
      unf = 0
      dayfrac = dble(Lctl_step) * Cstv_dt_8 / sec_in_day
      call incdatsd (datev,Mod_runstrt_S,dayfrac)
!
      write (startindx,'((i3.3),a1,(i3.3))') Ptopo_mycol,'-',Ptopo_myrow
      fn  = '../busper/'//trim(startindx)//'/BUSPER4spinphy_'//trim(datev)
!
      yela = clib_fileexist (trim(fn))
      call rpn_comm_ALLREDUCE (yela,tousla,1,"MPI_INTEGER","MPI_SUM","grid",ier)
      if (tousla .eq. -Ptopo_numproc) then
         fn  = 'restart_BUSPER'
         yela= clib_fileexist (trim(fn))
         call rpn_comm_ALLREDUCE (yela,tousla,1,"MPI_INTEGER","MPI_SUM","grid",ier)
         if (tousla .eq. -Ptopo_numproc) then
            return
         else
            if (tousla .ne. Ptopo_numproc) then
               if (Lun_out.gt.0) write(Lun_out,2005) 'BUSPER4spinphy_'//trim(datev)
               return
            endif
         endif
      else
         if (tousla .ne. Ptopo_numproc) then
            if (Lun_out.gt.0) write(Lun_out,2005) 'BUSPER4spinphy_'//trim(datev)
            return
         endif
      endif
!
      ier = fnom ( unf,fn,'SEQ+UNF+OLD',0 )

      if (Lun_out.gt.0) write(Lun_out,2000) Lctl_step,trim(fn)

      read (unf) spin_L

      if (spin_L) then
         read (unf) ibuf,rbuf

         call datf2p (datev_infile,ibuf(1))
         dim_infile = ibuf(2)

         gmmstat = gmm_get ('BUSPER_3d',BUSPER_3d,meta_busper)
         dim = (meta_busper%l(1)%high-meta_busper%l(1)%low+1)*&
               (meta_busper%l(2)%high-meta_busper%l(2)%low+1)

         if ( (datev_infile .ne.  datev      )   .or.  &
              (dim_infile   .ne.  dim        )   .or. &
              (ibuf(3)      .ne.  Grd_ni     )   .or. &
              (ibuf(4)      .ne.  Grd_nj     )   .or. &
              (rbuf(1)      .ne.  Grd_dx     )   .or. &
              (rbuf(2)      .ne.  Grd_dy     )   .or. &
              (rbuf(3)      .ne.  Grd_xlon1  )   .or. &
              (rbuf(4)      .ne.  Grd_xlat1  )   .or. &
              (rbuf(5)      .ne.  Grd_xlon2  )   .or. &
              (rbuf(6)      .ne.  Grd_xlat2  )  ) then
            if (Lun_out.gt.0) write(Lun_out,2006) 'BUSPER4spinphy_'//trim(datev)
!            goto 999
         endif

         read (unf) BUSPER_3d
      endif
!
!      if (Clim_inincr_L) then
!         call waread (unf, Cfld_nbr, adr, 1)
!         adr = adr + 1
!         if (Cfld_nbr > 0) then
!            Allocate ( Cfld_date(Cfld_nbr), Cfld_levs(Cfld_nbr), &
!                       Cfld_list(Cfld_nbr), stat=ier )
!            call waread (unf, Cfld_date, adr,            Cfld_nbr )
!            call waread (unf, Cfld_levs, adr+  Cfld_nbr, Cfld_nbr )
!            call waread (unf, Cfld_list, adr+2*Cfld_nbr, Cfld_nbr )
!         endif
!         adr = adr+3*Cfld_nbr
!      endif
!
      itf_phy_busper_init_L = .true.
!
      ier = fclos(unf)  
!
 2000 format(/,'READING A PHYSICS RESTART FILE AT TIMESTEP #',I8,x,a, &
             /,'============================================')
 2005 format(/,'INCOMPLETE SET OF PHYSICS RESTART FILE: ',a/ &
               'WILL TRY TO CONTINUE WITHOUT'/)
 2006 format(/,'INCONSISTENT SET OF PHYSICS RESTART FILE: ',a/ &
               'WILL TRY TO CONTINUE WITHOUT'/)
!
!     ---------------------------------------------------------------
!      
      return
      end
