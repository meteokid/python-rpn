!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r hzd_hoffld - applies 1D or 2D horizontal diffusion on a given field 
!                   according to its grid (based on HZD_HOF, A.Qaddouri)
!
#include "model_macros_f.h"
!
      subroutine hzd_hoffld (F, DIST_DIM, Nk, grid) 
!
      implicit none
#include <arch_specific.hf>
!
      integer DIST_DIM, Nk, grid 
!
      real F(DIST_SHAPE,Nk)
!
!author
!    M.Tanguay
!
!revision
! v3_20 - Tanguay M.        - initial version
!
!object
!     see id section
!
!arguments
!  Name        I/O              Description
!----------------------------------------------------------------
!  F           I/0             field to diffuse 
!  grid        I               type of grid
!----------------------------------------------------------------
!
!implicits
#include "fft.cdk"
#include "glb_ld.cdk"
#include "trp.cdk"
#include "hzd.cdk"
#include "opr.cdk"
#include "geomg.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
!
      integer i, j, k, dpwr
      real*8 wk1_8
!     __________________________________________________________________
!
      if (.not.( Hzd_ho_L .and. Fft_fast_L .and. .not.G_lam))  &
         call handle_error(-1,'hzd_hoffld','HZD_HOFFLD not done for those options')
!
!     __________________________________________________________________
!
      dpwr = Hzd_pwr / 2
      if (Lun_debug_L) write(Lun_out,1000) Hzd_pwr, grid 
!
!     ------------
!     2D diffusion
!     ------------
      if ( .not.Hzd_1d_L ) then 
!
          if ( Hzd_cdiff .gt. 0.0 ) then
!
             if ( grid.eq.1 ) then
             call hzd_solfft (F, wk1_8, Fft_pri_8, &
                         Hzd_au_8,Hzd_cu_8,Hzd_deltau_8, &
                         trp_12dmin,trp_12dmax,trp_22min,trp_22max, &
                         trp_12dn,trp_22n,G_nj, dpwr,l_minx,  &
                         l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj, &
                         trp_12dn,Hzd_xp0_8,Opr_opsyp0_8, Hzd_cdiff, &
                         Ptopo_npex,Ptopo_npey)
!
             elseif ( grid.eq.2 ) then
             call hzd_solfft (F, wk1_8, Fft_pri_8 , &
                         Hzd_av_8,Hzd_cv_8,Hzd_deltav_8, &
                         trp_12dmin,trp_12dmax,trp_22min,trp_22max, &
                         trp_12dn,trp_22n,G_nj, dpwr,l_minx, &
                         l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj,  &
                         trp_12dn,Opr_opsxp0_8,Hzd_yp0_8, Hzd_cdiff, &
                         Ptopo_npex,Ptopo_npey)
!
             elseif ( grid.eq.3 ) then
             call hzd_solfft (F, wk1_8, Fft_pri_8 , &
                         Hzd_as_8,Hzd_cs_8,Hzd_deltas_8, &
                         trp_12dmin,trp_12dmax,trp_22min,trp_22max, &
                         trp_12dn,trp_22n,G_nj, dpwr,l_minx, &
                         l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj, &
                         trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff, &
                         Ptopo_npex,Ptopo_npey)
             endif
!
          endif
!
!     ------------
!     1D diffusion
!     ------------
      else
!
          if ( Hzd_cdiff .gt. 0.0 ) then
!
             if ( grid.eq.1 ) then
             call hzd_solfft_1d (F, wk1_8, Fft_pri_8, &
                         Hz1d_deltau_8, &
                         trp_12dmin,trp_12dmax,trp_22min,trp_22max, &
                         trp_12dn,trp_22n,G_nj, dpwr,l_minx, &
                         l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj, &
                         trp_12dn,Hzd_xp0_8,Opr_opsyp0_8, Hzd_cdiff, &
                         Ptopo_npex,Ptopo_npey)
!     
             elseif ( grid.eq.2 ) then
             call hzd_solfft_1d (F, wk1_8, Fft_pri_8 , &
                         Hz1d_deltav_8, &
                         trp_12dmin,trp_12dmax,trp_22min,trp_22max, &
                         trp_12dn,trp_22n,G_nj, dpwr,l_minx, &
                         l_maxx,l_miny,l_maxy,Nk,G_ni,l_ni,l_nj, &
                         trp_12dn,Opr_opsxp0_8,Hzd_yp0_8, Hzd_cdiff, &
                         Ptopo_npex,Ptopo_npey)
!
             elseif ( grid.eq.3 ) then
             call hzd_solfft_1d (F, wk1_8, Fft_pri_8 , &
                         Hz1d_deltas_8, &
                         trp_12dmin,trp_12dmax,trp_22min,trp_22max, &
                         trp_12dn,trp_22n,G_nj, dpwr,l_minx, &
                         l_maxx, l_miny, l_maxy,Nk,G_ni,l_ni,l_nj, &
                         trp_12dn,Opr_opsxp0_8,Opr_opsyp0_8, Hzd_cdiff, &
                         Ptopo_npex,Ptopo_npey)
             endif
!
          endif
!
      endif
!
 1000 format(/, &
        3X,'PERFORM DEL-',i1,' FFT HORIZONTAL DIFFUSION ON A GIVEN FIELD : (S/R HZD_HOFFLD) GRID=',i2)
!     __________________________________________________________________
!
      return
      end
