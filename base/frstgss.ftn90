!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r frstgss - Copy data from time level t1 that will be used as a
!                first guess at time level t0
!
#include "model_macros_f.h"
!
      subroutine frstgss ()
!
      implicit none
!
!author 
!     Michel Roch - rpn - nov 1993
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v3_21 - Tanguay M.        - Revision Openmp
! v4_05 - Lepine M.         - VMM replacement with GMM
!
!object
!    See above id
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "cori.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
!
      character*16 tr_name
      integer i, j, k, kk
      real, pointer, dimension(:,:,:) :: tr0,tr1
!*
!     ---------------------------------------------------------------
!
      if (Lun_debug_L) write (Lun_out,1000)
!

! For humidity
      tr_name = 'TR/HU:M'
      gmmstat = gmm_get(tr_name,tr0,meta3d)
      tr_name = 'TR/HU:P'
      gmmstat = gmm_get(tr_name,tr1,meta3d)
      do j= 1 , l_nj
      do i= 1 , l_ni
         tr0 (i,j,l_nk+2) = tr1 (i,j,l_nk+2)
      enddo
      enddo

      gmmstat = gmm_get(gmmk_tt0_s,tt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(tt0)'
      gmmstat = gmm_get(gmmk_st0_s,st0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(st0)'
      gmmstat = gmm_get(gmmk_zdt0_s,zdt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(zdt0)'
      gmmstat = gmm_get(gmmk_tt1_s,tt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(tt1)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(st1)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_wt0_s,wt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(wt0)'
      gmmstat = gmm_get(gmmk_wt1_s,wt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(wt1)'

!$omp parallel
!
!$omp do
      do k=1,l_nk+1
      do j= 1, l_nj
      do i= 1, l_ni
         tt0 (i,j,k) = tt1 (i,j,k)
         zdt0(i,j,k) = zdt1(i,j,k)
         wt0 (i,j,k) = wt1 (i,j,k)
      end do
      end do
      end do
!$omp end do

!$omp do
      do j= 1 , l_nj
      do i= 1 , l_ni
         tt0 (i,j,l_nk+2) = tt1 (i,j,l_nk+2)
         st0(i,j)   =  st1(i,j)
      end do
      end do
!$omp end do
!
!$omp end parallel
!
      if ( Cori_cornl_L ) then
         gmmstat = gmm_get(gmmk_ut0_s,ut0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(ut0)'
         gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(ut1)'
         gmmstat = gmm_get(gmmk_vt0_s,vt0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(vt0)'
         gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(vt1)'
!$omp parallel do
         do k=1,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            ut0(i,j,k)  =  ut1(i,j,k)
            vt0(i,j,k)  =  vt1(i,j,k)
         end do
         end do
         end do
!$omp end parallel do
      endif
!
      if ( .not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_qt0_s,qt0,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(qt0)'
         gmmstat = gmm_get(gmmk_qt1_s,qt1,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'frstgss ERROR at gmm_get(qt1)'
!$omp parallel do
         do k=0,l_nk+1
         do j= 1 , l_nj
         do i= 1 , l_ni
            qt0(i,j,k)  = qt1(i,j,k)
         end do
         end do
         end do
!$omp end parallel do
      endif
!
!     if (Acid_test_L) tplt0
!    $call glbstat (tpt0,'tpt0',LDIST_DIM,G_nk,8+acid_i0,G_ni-8-acid_in,
!    $                                          8+acid_j0,G_nj-8-acid_jn,1,G_nk)

1000  format(3X,'FIRST GUESS: (S/R FRSTGSS)')

      return
      end


