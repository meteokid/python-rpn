!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r e_target3df - defines destination grids for 3df files
!
      subroutine e_target3df (F_grda_S,F_nia,F_nja,F_ig1a, F_ig2a, F_ig3a, F_ig4a)
      implicit none
#include <arch_specific.hf>
!
      character*1 F_grda_S
      integer F_nia,F_nja,F_ig1a, F_ig2a, F_ig3a, F_ig4a
!author 
!    Michel Desgagne -   Winter 2012
!
!revision
! v4_50 - Desgagne M.      - initial version
!
#include "e_anal.cdk"
#include "e_grids.cdk"
#include "pilot.cdk"
#include "hgc.cdk"
#include "e_grdc.cdk"

      integer, external :: cascindx, ezgdef_fmem, gdrls

      integer i,err
      real,   dimension(:), allocatable :: xpx,xpxu,ypx,ypxv
      real*8  dx_8, dy_8, debut_8, pos_8, deg2rad_8
!
! ---------------------------------------------------------------------
!
      if (Pil_bmf_L .or. (.not.LAM)) return

      call e_3dfreso ( F_grda_S, dx_8,dy_8, F_nia,F_nja, &
                       F_ig1a,F_ig2a,F_ig3a,F_ig4a )

      F_nia = (xfi(nifi) - xfi(1))/dx_8 + 13
      F_nja = (yfi(njfi) - yfi(1))/dy_8 + 13

      deg2rad_8 = acos( -1.0d0 )/180.0d0

      allocate (xpx(F_nia),ypx(F_nja),xpxu(F_nia-1),ypxv(F_nja-1))
      if (associated( xg_8)) deallocate( xg_8)
      if (associated( yg_8)) deallocate( yg_8)
      if (associated(ygv_8)) deallocate(ygv_8)
      allocate (xg_8(F_nia), yg_8(F_nja), ygv_8(F_nja-1))

      debut_8= xfi(1) - dx_8*5.0
      do i=1,F_nia
         pos_8  = debut_8 + (i-1)*dx_8
         xpx (i)= pos_8
         xg_8(i)= pos_8 * deg2rad_8
      end do

      debut_8= yfi(1) - dy_8*5.0
      do i=1,F_nja
         pos_8  = debut_8 + (i-1)*dy_8
         ypx (i)= pos_8
         yg_8(i)= pos_8 * deg2rad_8
      end do

      do i=1,F_nia-1
         xpxu(i)= 0.5 * ( xpx(i) + xpx(i+1) )
      enddo
      do i=1,F_nja-1
         ypxv(i)= 0.5 * ( ypx(i) + ypx(i+1) )
         ygv_8(i) = ypxv(i) * deg2rad_8
      enddo

      err = cascindx ( e_grdc_gid,e_grdc_gif,e_grdc_gjd,e_grdc_gjf,&
                       xfi,yfi,nifi,njfi,xpx,ypx,F_nia,F_nja )

      e_grdc_ni = e_grdc_gif-e_grdc_gid+1
      e_grdc_nj = e_grdc_gjf-e_grdc_gjd+1

      err = gdrls(dstf_gid)
      err = gdrls(dstu_gid)
      err = gdrls(dstv_gid)
      dstf_gid = ezgdef_fmem (e_grdc_ni  , e_grdc_nj  , 'Z', 'E', Hgc_ig1ro, &
           Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro, xpx (e_grdc_gid), ypx (e_grdc_gjd))
      dstu_gid = ezgdef_fmem (e_grdc_ni-1, e_grdc_nj  , 'Z', 'E', Hgc_ig1ro, &
           Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro, xpxu(e_grdc_gid), ypx (e_grdc_gjd))
      dstv_gid = ezgdef_fmem (e_grdc_ni  , e_grdc_nj-1, 'Z', 'E', Hgc_ig1ro, &
           Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro,  xpx(e_grdc_gid), ypxv(e_grdc_gjd))

      deallocate(xpx,ypx,xpxu,ypxv,stat=err)
!
! ---------------------------------------------------------------------
!
      return
      end subroutine e_target3df
