!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r sergset - initialization of the physics variables for the
!                time series extraction and memory allocation.
!
#include "model_macros_f.h"
!
      subroutine sergset
!
      implicit none
#include <arch_specific.hf>
!
!author 
!     Andre Methot - cmc - mai 1994 - v0_14
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_11 - Lee V.            - add logic for memory allocation
! v2_31 - Desgagne M.       - bugfixe to call to sersetm
! v3_11 - A. Plante         - Adjust code for LAM time-series
! v3_30 - K. Winger         - Add time series version 'TSVER'
!                             and output intervals 'TSMOYHR','SRWRI'
! v4_14 - Spacek L.         - intruduce P_runlgt
!
!object
!               This routine initializes the physics variables
!      related to time series extraction: variable names to
!      extract (profil:3D, surface:2D), grid point indicies where
!      to extract from, number or vertical levels...
!
!      It also performs memory allocation for buffers based
!      on: the number of 2D and 3D variables, the number of
!      vertical level and the number of grid point where to
!      extract from.
!	
!arguments
!	none
!
!implicits
#include "glb_ld.cdk"
#include "p_serg.cdk"
#include "lctl.cdk"
#include "lun.cdk"
#include "grd.cdk"
#include "rstr.cdk"
#include "xst.cdk"
#include "xstb.cdk"
#include "ptopo.cdk"
#include "itf_phy_buses.cdk"
#include "clim.cdk"
#include "itf_phy_config.cdk"
#include "cstv.cdk"
!
      integer serdim
      external serdim
      integer pnerr, pnmxsrf, i, j
      integer iold, jold, inew, jnew, nelem, p_nmp
!
!     ---------------------------------------------------------------
!
      if (lun_out.gt.0) write (Lun_out,1000)
!
      pnmxsrf = max( CNSRGEO , P_serg_srsrf )
!
!     extracted variables at each station is written to disk
!     once every "P_serg_srwri" time step.
!     serallc does memory allocation for buffer containing one
!     timestep information to be written on the disk.
!
      p_nmp = 0
      if (G_lam) p_nmp = 3
      xst_nstatl = 0
      do i = 1, Xst_nstat
         if (  (Xst_stn(i)%i.ge.Ptopo_gindx(1,Ptopo_myproc+1)).and. &
               (Xst_stn(i)%i.le.Ptopo_gindx(2,Ptopo_myproc+1)).and. &
               (Xst_stn(i)%j.ge.Ptopo_gindx(3,Ptopo_myproc+1)).and. &
               (Xst_stn(i)%j.le.Ptopo_gindx(4,Ptopo_myproc+1)) ) then
            xst_nstatl = xst_nstatl + 1
            Xst_stn(xst_nstatl)%lclsta = i
            Xst_stn(xst_nstatl)%stcori = Xst_stn(i)%i -  &
                                     Ptopo_gindx(1,Ptopo_myproc+1) + 1 &
                                     - pil_w + p_nmp*west
            Xst_stn(xst_nstatl)%stcorj = Xst_stn(i)%j -  &
                                     Ptopo_gindx(3,Ptopo_myproc+1) + 1 &
                                     - pil_s + p_nmp*south
         endif
      end do
!
      Xst_dimsers = max(1,serdim (Xst_nstat,pnmxsrf,1))
      Xst_dimserp = max(1,serdim (Xst_nstat,P_serg_srprf,p_nk))
      call hpalloc(Xstb_sers_  ,Xst_dimsers,pnerr,1) 
      call hpalloc(Xstb_serp_  ,Xst_dimserp,pnerr,1) 
      call hpalloc(Xstb_sersx_ ,Xst_dimsers,pnerr,1) 
      call hpalloc(Xstb_serpx_ ,Xst_dimserp,pnerr,1)       
      call serallc2 (Xstb_sers,Xstb_serp,p_ni,p_nj,p_nk)
!
!     initializes number of vertical levels
!
      call serset  ('ISTAT',Xst_stn(:)%i,Xst_nstat ,pnerr)
      do j= 1, p_nj 
         call sersetm('KA', j, p_nk)
      end do
!
!     add surface pressure if profiles are requested
!
      if (P_serg_srprf > 0) then
         P_serg_srsrf = P_serg_srsrf+1
         P_serg_srsrf_s(P_serg_srsrf) = 'P0'
      endif
!
!     P_runlgt
!
      if (P_runlgt > 0) then
         do i = 1, Xst_nstat
            iold=Xst_stn(i)%stcori
            jold=Xst_stn(i)%stcorj
!
            nelem=(jold-1)*p_doni + iold
            jnew=nelem/p_ni
            if (p_ni*jnew < nelem) then
               jnew=jnew+1
            endif
            inew=nelem-(jnew-1)*p_ni
!
            Xst_stn(i)%stcori=inew
            Xst_stn(i)%stcorj=jnew
         end do
      endif
!
!     initialize station identities
!
      call serset  ('ISTAT'  ,Xst_stn(:)%stcori,xst_nstatl,pnerr)
      call serset  ('JSTAT'  ,Xst_stn(:)%stcorj,xst_nstatl,pnerr)
      call serset  ('STATION',Xst_stn(:)%lclsta,xst_nstatl,pnerr)
      call sersetc ('NAME'   ,Xst_stn(:)%name,xst_nstat,pnerr)
      call serset  ('ISTAT_G',Xst_stn(:)%i,Xst_nstat,pnerr)
      call serset  ('JSTAT_G',Xst_stn(:)%j,Xst_nstat,pnerr)
!
!     initializes name of SURFACE type variables (2D variables)
!
      call sersetc('SURFACE', P_serg_srsrf_s, P_serg_srsrf, pnerr)
!
!     initializes name of PROFILE type variables (3D variables)
!
      call sersetc('PROFILS', P_serg_srprf_s, P_serg_srprf, pnerr)
!
!     initializes the frequency of extraction
!
      call serset('SERINT', P_serg_srwri, 1, pnerr)
!
!     initializes output unit number
!
      call serset('NOUTSER', Lun_tsrs, 1, pnerr)
!
!     initializes model and time series output time step
!     and time series version
!
      call serset('TSMOYHR', P_out_moyhr, 1, pnerr)
      call serset('SRWRI', int(P_serg_srwri*Cstv_dt_8), 1, pnerr)
!
!     initializes buffers to zero
!
      call serdbu ()
!
 1000 format(/,'INIT OF EXTRACTORS FOR TIME SERIES (S/R SERGSET)', &
             /,'================================================')
!
!     ---------------------------------------------------------------
!
      return
      end
