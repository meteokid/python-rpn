!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r set_schm - initialize the parameters controlling the
!                 schemes used in the model
!

!
      subroutine set_schm
      implicit none
#include <arch_specific.hf>
!
!author
!     M. Desgagne - V. Lee ( after version v1_03 of setschm )
!
!revision
! v2_00 - Desgagne/Lee       - initial MPI version
! v2_10 - Desgagne M.        - removed MITH (not used)
! v2_30 - Desgagne M.        - entry vertical interpolator in gemdm
! v2_30 - Desgagne M.        - entry vertical interpolator in gemdm
! v3_11 - Gravel S.          - modify for theoretical cases
! v3_30 - Desgagne M.        - simplification
!
!object
!
!arguments
!       none
!	

#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "type.cdk"
#include "ver.cdk"
!
!notes
!
!*
      integer :: istat
!    _________________________________________________________________
!
      if (lun_out.gt.0) write(lun_out,1000)

! 1.2 Validate and correct Schm_xwvt3 if necessary

      istat = 0
      if ( (Schm_xwvt3 .lt. 0) .or. (Schm_xwvt3 .gt. 2) ) then
         if (lun_out.gt.0) write(lun_out,1200)
         istat = -1
      elseif ( (Schm_modcn .eq. 1) .and. (Schm_xwvt3 .ne. 0) ) then
         if (lun_out.gt.0) write(lun_out, 1201)
         if (lun_out.gt.0) write(lun_out, 1202)
         Schm_xwvt3=0
      endif
      call handle_error(istat,'set_schm','')

! 1.3 Set the number of vertical modes treated implicitly

      Schm_nith = G_nk
!
 1000 format( &
      /,'INITIALIZE SCHEMES CONTROL PARAMETERS (S/R SET_SCHM)', &
      /,'===================================================')
 1200 format( &
      'THE TYPE OF EXTRAPOLATION TO OBTAIN WIND AT TIME Th MUST BE ', &
      'EITHER 0, 1 or 2,', &
      /,'CORRECT THE VALUE OF Schm_xwvt3 IN THE DRIVER.')
 1201 format( &
      'SINCE THE CRANK-NICHOLSON PROCEDURE IS REQUESTED AT EACH EVERY ', &
      'TIMESTEP (Schm_modcn=1),')
 1202 format( &
      'THE PARAMETER CONTROLING THE TYPE OF WIND EXTRAPOLATION IS ', &
      'VOID (Schm_xwvt3) AND WILL THEN BE RESET TO 0.')
!
!    _________________________________________________________________
!
      return
      end
