!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r nlip   - compute non-linear terms:  Nu, Nv, Nt, Nc, Nw, Nf,
!             - compute full right-hand side of Helmholtz eqn: Rp=Rc-Nc
!
!**********************************************************************
!
#include "model_macros_f.h"
      subroutine nli ( F_nu , F_nv , F_nt   , F_nc , F_nw , F_nf  , &
                       F_u  , F_v  , F_t    , F_s  , F_q  ,         &
                       F_rhs, F_rc , F_fis, F_nb   , DIST_DIM, Nk , &
                       ni,nj, i0,j0,in,jn,k0 )
      implicit none
#include <arch_specific.hf>

      integer DIST_DIM, Nk,ni,nj,i0,j0,in,jn,k0
      real    F_nu   (DIST_SHAPE,Nk)    ,F_nv   (DIST_SHAPE,Nk)    , &
              F_nt   (DIST_SHAPE,Nk)    ,F_nc   (DIST_SHAPE,Nk)    , &
              F_nw   (DIST_SHAPE,Nk)    ,F_nf   (DIST_SHAPE,Nk)    , &
              F_u    (DIST_SHAPE,Nk)    ,F_v    (DIST_SHAPE,Nk)    , &
              F_t    (DIST_SHAPE,Nk)    ,F_s    (DIST_SHAPE)       , &
              F_q    (DIST_SHAPE,2:Nk+1),F_rc   (DIST_SHAPE,Nk)    , &
              F_fis  (DIST_SHAPE)       ,F_nb   (DIST_SHAPE)
      real*8  F_rhs  (ni,nj,Nk)

!author
!     Alain Patoine - split from nli.ftn
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_21 - Lee V.            - modifications for LAM version
! v2_30 - Edouard S.        - adapt for vertical hybrid coordinate
!                             remove F_pptt and introduce Ncn
! v3_00 - Qaddouri & Lee    - For LAM, set Nu, Nv values on the boundaries
! v3_00                       of the LAM grid to zeros.
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_21 - Desgagne M.       - Revision OpenMP
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Girard C.         - Open top
! v4_40 - Lee/Qaddouri      - Adjust range of calculation for Yin-Yang
! v4.70 - Gaudreault S.     - Reformulation in terms of real winds (removing wind images)
!                           - Explicit integration of metric terms (optional)

#include "glb_ld.cdk"
#include "grd.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "geomg.cdk"
#include "cori.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "lun.cdk"

      integer i, j, k, km,kq, i0u, inu, j0v, jnv, nij, k0t, onept
      real    w_nt
      real*8  a1,a2,b1,b2,b3,b4,c1,c2,c3,qbar,ndiv, &
              w1,w2,w3,w4,w5,barz, barzp, wk2(DIST_SHAPE)
      real*8  u_interp, v_interp, inv_rayt, explicit
      real*8, parameter :: zero=0.d0, one=1.d0
!
      real*8, dimension(i0:in,j0:jn) :: xtmp_8, ytmp_8
      real, dimension(:,:,:), allocatable :: BsPq, FI, MU
!     __________________________________________________________________
!
      if (Lun_debug_L)  write(Lun_out,1000)
!
      allocate ( BsPq(DIST_SHAPE,l_nk+1), FI(DIST_SHAPE,l_nk+1), &
                 MU  (DIST_SHAPE,l_nk) )
!
      call rpn_comm_xch_halo( F_u   ,LDIST_DIM,l_niu,l_nj ,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_v   ,LDIST_DIM,l_ni ,l_njv,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_t   ,LDIST_DIM,l_ni ,l_nj ,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_s   ,LDIST_DIM,l_ni ,l_nj ,1   , &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      if (.not. Schm_hydro_L) &
           call rpn_comm_xch_halo( F_q,LDIST_DIM,l_ni,l_nj,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
!
      a1 = Dcst_cappa_8 / Cstv_RTstr_8
      a2 = Ver_epsilon_8 / Cstv_RTstr_8
!
      b1 = one / ( Dcst_grav_8 * Cstv_tau_8 )
      b2 = Ver_gamma_8 / ( Dcst_cappa_8 * Cstv_tau_8 )
      b3 = one / ( Dcst_cappa_8 * Cstv_tau_8 )
      b4 = one / ( Dcst_cappa_8 * Cstv_tau_8*Cstv_tau_8*Cstv_Tstr_8 )
!
      c1 = Dcst_rayt_8**2 * Ver_epsilon_8
      c2 = one / Cstv_RTstr_8
      c3 = Dcst_cappa_8 / Cstv_RTstr_8
      inv_rayt = one / Dcst_rayt_8

      k0t=k0
      if(Schm_opentop_L) k0t=k0-1
      nij = (in - i0 +1)*(jn - j0 +1)

      onept= 0
      if(Grd_yinyang_L) onept=1

      explicit= 0.d0
      if (Schm_angular_displacement_L) explicit= one
!
!
!***********************************************************
! The nonlinear deviation of horizontal momentum equations *
!***********************************************************
!
!     Indices

      i0u = i0-1
      j0v = j0-1
      inu = l_niu-pil_e
      jnv = l_njv-pil_n

      if (l_west.and.G_lam) i0u=i0 -onept
      if (l_south)          j0v=j0 -onept
      if (l_east )          inu=inu+onept
      if (l_north)          jnv=jnv+onept
!
      call diag_fi (FI, F_s, F_t, F_q, F_fis, LDIST_DIM, l_nk, &
                    i0u,inu+1,j0v,jnv+1)

      if ( .not.Schm_hydro_L ) then
          call diag_mu( MU, F_q, F_s, LDIST_DIM, l_nk, &
                        i0u,inu+1,j0v,jnv+1)
      endif

!$omp parallel private(km,kq,xtmp_8,ytmp_8,w_nt,barz,barzp,ndiv,wk2, &
!$omp w1,w2,w3,w4,w5,qbar)
!
!$omp do
       do k=k0t,l_nk+1
         kq=max(2,k)
         do j=j0v,jnv+1
         do i=i0u,inu+1
            BsPq(i,j,k) = Ver_b_8%m(k) * F_s(i,j)
            BsPq(i,j,k) = BsPq(i,j,k) + F_q(i,j,kq)*Ver_onezero(k)
         enddo
         enddo
      enddo
!$omp enddo
!
!$omp do
      do k=k0,l_nk
      km=max(k-1,1)
!
!     Compute Nu for hydrostatic version
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!     Pressure gradient term: RT' barXZ * dBsPq/dX
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (G_lam) then

         do j= j0, jn
            do i= i0u, inu
               barz  = Ver_wp_8%m(k)*F_t(i  ,j,k) &
                     +Ver_wm_8%m(k)*F_t(i  ,j,km)
               barzp = Ver_wp_8%m(k)*F_t(i+1,j,k) &
                     +Ver_wm_8%m(k)*F_t(i+1,j,km)
               w2 = ( one - intuv_c0xxu_8(i) ) * barz &
                          + intuv_c0xxu_8(i)   * barzp - Cstv_tstr_8
               w3 = ( BsPq(i+1,j,k) - BsPq(i,j,k) ) * Geomg_invDXu_8(i,j)
               F_nu(i,j,k) = Dcst_rgasd_8 * ( w2 * w3 )
            end do
         end do

      else

         do j= j0, jn
            do i= i0u, inu
               barz  = Ver_wp_8%m(k)*F_t(i  ,j,k) &
                     +Ver_wm_8%m(k)*F_t(i  ,j,km)
               barzp = Ver_wp_8%m(k)*F_t(i+1,j,k) &
                     +Ver_wm_8%m(k)*F_t(i+1,j,km)
               w2 = ( one - intuv_c0xxu_8(i) ) * barz &
                          + intuv_c0xxu_8(i)   * barzp - Cstv_tstr_8
               w3 = ( BsPq(i+1,j,k) - BsPq(i,j,k) ) * Geomg_invDXu_8(i,j) * (geomg_cy_8(j) * Dcst_rayt_8)
               F_nu(i,j,k) = (Dcst_rgasd_8 / Dcst_rayt_8**2) * ( w2 * w3 )
            end do
         end do

      end if
!
!     V barY stored in wk2
!     ~~~~~~~~~~~~~~~~~~~~
      do j = j0, jn
      do i = i0u-1, inu+2
         wk2(i,j) = inuvl_wyvy3_8(j,1) * F_v(i,j-2,k) &
                  + inuvl_wyvy3_8(j,2) * F_v(i,j-1,k) &
                  + inuvl_wyvy3_8(j,3) * F_v(i,j  ,k) &
                  + inuvl_wyvy3_8(j,4) * F_v(i,j+1,k)
      end do
      end do

!     Coriolis term & metric terms: - (f + u/a * tan(phi)) * V barXY
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j= j0, jn
      do i= i0u, inu
         v_interp = inuvl_wxxu3_8(i,1) * wk2(i-1,j) &
           + inuvl_wxxu3_8(i,2)*wk2(i  ,j) &
           + inuvl_wxxu3_8(i,3)*wk2(i+1,j) &
           + inuvl_wxxu3_8(i,4)*wk2(i+2,j)

         F_nu(i,j,k) = F_nu(i,j,k) - (Cori_fcoru_8(i,j) + explicit * f_u(i,j,k)* inv_rayt * dtan(geomg_y_8(j))) * v_interp
      end do
      end do
!
!     Compute Nv for hydrostatic version
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!     Pressure gradient term: RT' barYZ * dBsPq/dY
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      if (G_lam) then

         do j= j0v, jnv
            do i= i0, in
               barz  = Ver_wp_8%m(k)*F_t(i,j  ,k) &
                     +Ver_wm_8%m(k)*F_t(i,j  ,km)
               barzp = Ver_wp_8%m(k)*F_t(i,j+1,k) &
                     +Ver_wm_8%m(k)*F_t(i,j+1,km)
               w2 = ( one - intuv_c0yyv_8(j) ) * barz &
                          + intuv_c0yyv_8(j)   * barzp - Cstv_tstr_8
               w3 = ( BsPq(i,j+1,k) - BsPq(i,j,k) ) * Geomg_invDYv_8(j)
               F_nv(i,j,k) = Dcst_rgasd_8 * ( w2 * w3 )
            end do
         end do

      else

         do j= j0v, jnv
            do i= i0, in
               barz  = Ver_wp_8%m(k)*F_t(i,j  ,k) &
                      +Ver_wm_8%m(k)*F_t(i,j  ,km)
               barzp = Ver_wp_8%m(k)*F_t(i,j+1,k) &
                      +Ver_wm_8%m(k)*F_t(i,j+1,km)
               w2 = ( one - intuv_c0yyv_8(j) ) * barz &
                          + intuv_c0yyv_8(j)   * barzp - Cstv_tstr_8
               w3 = ( BsPq(i,j+1,k) - BsPq(i,j,k) ) * Geomg_invDYv_8(j) * (geomg_cyv_8(j) * Dcst_rayt_8)
               F_nv(i,j,k) = (Dcst_rgasd_8 / Dcst_rayt_8**2) * ( w2 * w3 )
            end do
         end do

      end if
!
!     U barX stored in wk2
!     ~~~~~~~~~~~~~~~~~~~~
      do j = j0v-1, jnv+2
      do i = i0, in
         wk2(i,j) = inuvl_wxux3_8(i,1)*F_u(i-2,j,k) &
                  + inuvl_wxux3_8(i,2)*F_u(i-1,j,k) &
                  + inuvl_wxux3_8(i,3)*F_u(i  ,j,k) &
                  + inuvl_wxux3_8(i,4)*F_u(i+1,j,k)
      end do
      end do

!     Coriolis term & metric terms: + f * U barXY + (U barXY)^2/a * tan(phi)
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      do j = j0v, jnv
      do i = i0, in
         u_interp = inuvl_wyyv3_8(j,1) * wk2(i,j-1) &
                  + inuvl_wyyv3_8(j,2) * wk2(i,j  ) &
                  + inuvl_wyyv3_8(j,3) * wk2(i,j+1) &
                  + inuvl_wyyv3_8(j,4) * wk2(i,j+2)
         F_nv(i,j,k) = F_nv(i,j,k) + (Cori_fcorv_8(i,j) + explicit * u_interp * inv_rayt * dtan(geomg_yv_8(j))) * u_interp
      end do
      end do
!
      if (.not. Schm_hydro_L) then
!
!        Add nonhydrostatic contributions to Nu
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         if (G_lam) then

!        Mu term: mu barXZ * dfi'/dX
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0u, inu
            barz  = Ver_wp_8%m(k)*MU(i  ,j,k) &
                   +Ver_wm_8%m(k)*MU(i  ,j,km)
            barzp = Ver_wp_8%m(k)*MU(i+1,j,k) &
                   +Ver_wm_8%m(k)*MU(i+1,j,km)
            w1 = ( one - intuv_c0xxu_8(i) ) * barz &
                       + intuv_c0xxu_8(i)   * barzp
            w2 = ( FI(i+1,j,k)-FI(i,j,k) ) * Geomg_invDXu_8(i,j)
            F_nu(i,j,k) = F_nu(i,j,k) + w1 * w2
         end do
         end do
!
!        Add nonhydrostatic contributions to Nv
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!        Mu term: mu barYZ * dfi'/dY
!        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0v, jnv
         do i= i0, in
            barz  = Ver_wp_8%m(k)*MU(i,j  ,k) &
                   +Ver_wm_8%m(k)*MU(i,j  ,km)
            barzp = Ver_wp_8%m(k)*MU(i,j+1,k) &
                   +Ver_wm_8%m(k)*MU(i,j+1,km)
            w1 = ( one - intuv_c0yyv_8(j) ) * barz &
                       + intuv_c0yyv_8(j)   * barzp
            w2 = ( FI(i,j+1,k) - FI(i,j,k) ) * Geomg_invDYv_8(j)
            F_nv(i,j,k) = F_nv(i,j,k) + w1 * w2
         end do
         end do

         else

!           Mu term: mu barXZ * dfi'/dX
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            do j= j0, jn
               do i= i0u, inu
                  barz  = Ver_wp_8%m(k)*MU(i  ,j,k) &
                         +Ver_wm_8%m(k)*MU(i  ,j,km)
                  barzp = Ver_wp_8%m(k)*MU(i+1,j,k) &
                         +Ver_wm_8%m(k)*MU(i+1,j,km)
                  w1 = ( one - intuv_c0xxu_8(i) ) * barz &
                             + intuv_c0xxu_8(i)   * barzp
                  w2 = ( FI(i+1,j,k)-FI(i,j,k) ) * Geomg_invDXu_8(i,j) * (geomg_cy_8(j) * Dcst_rayt_8)
                  F_nu(i,j,k) = F_nu(i,j,k) + (one / Dcst_rayt_8**2) * w1 * w2
               end do
            end do
!
!           Add nonhydrostatic contributions to Nv
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!           Mu term: mu barYZ * dfi'/dY
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            do j= j0v, jnv
               do i= i0, in
                  barz  = Ver_wp_8%m(k)*MU(i,j  ,k) &
                         +Ver_wm_8%m(k)*MU(i,j  ,km)
                  barzp = Ver_wp_8%m(k)*MU(i,j+1,k) &
                         +Ver_wm_8%m(k)*MU(i,j+1,km)
                  w1 = ( one - intuv_c0yyv_8(j) ) * barz &
                             + intuv_c0yyv_8(j)   * barzp
                  w2 = ( FI(i,j+1,k) - FI(i,j,k) ) * Geomg_invDYv_8(j) * (geomg_cyv_8(j) * Dcst_rayt_8)
                  F_nv(i,j,k) = F_nv(i,j,k) + (one / Dcst_rayt_8**2) * w1 * w2
               end do
            end do

         end if

      endif
!
      end do
!$omp enddo
!
!     Set  Nu=0  on the east and west boundaries of the LAM grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
    if (.not.Grd_yinyang_L) then
      if (G_lam) then
         if (l_west) then
!$omp do
             do k=1,l_nk
             do j=j0,jn
                F_nu(pil_w,j,k) = 0.
             end do
             enddo
!$omp enddo
         endif
         if (l_east) then
!$omp do
            do k=1,l_nk
            do j=j0,jn
               F_nu(l_ni-pil_e,j,k) = 0.
            end do
            enddo
!$omp enddo
         endif
      endif

!     Set  Nv=0  on the north and south boundaries  of the LAM grid
!     and        at the north and south poles       of the GLOBAL grid
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      if (l_south) then
!$omp do
         do k=1,l_nk
         do i=i0,in
            F_nv(i,pil_s,k) = 0.
         end do
         enddo
!$omp enddo
      endif
      if (l_north) then
!$omp do
         do k=1,l_nk
         do i=i0,in
            F_nv(i,l_nj-pil_n,k) = 0.
         end do
         enddo
!$omp enddo
      endif
!
    endif
!
!$omp do
      do k=k0t,l_nk
         kq=max(2,k)
!
!**********************************
!   The nonlinear deviation of    *
! the thermodynamic equation: Nt' *
!**********************************
!
         w1 = one / Cstv_tstr_8
         do j= j0, jn
         do i= i0, in
            xtmp_8(i,j) = F_t(i,j,k) * w1
         end do
         end do
         call vlog ( ytmp_8, xtmp_8, nij )
!
         if(Schm_opentop_L.and.k.eq.k0t) then
            do j= j0, jn
            do i= i0, in
               F_nb(i,j) = Cstv_invT_8*ytmp_8(i,j)
            end do
            end do
         endif
!
         w1 = Ver_idz_8%t(k) / Cstv_RTstr_8
         do j= j0, jn
         do i= i0, in
            w2 = ytmp_8(i,j) + w1 * ( FI(i,j,k+1) - FI(i,j,k) ) &
                                   + Ver_dbdz_8%t(k) * F_s(i,j)
!           Compute Nt'
!           ~~~~~~~~~~
            F_nt(i,j,k) = Cstv_invT_8 * w2
            F_nf(i,j,k) = 0.0
         end do
         end do
!
!**************************************
!     The nonlinear deviation of      *
! the vertical momentum equation: Nw' *
!   and calculation of Nt" and Nf"    *
!**************************************
!
         if (.not.Schm_hydro_L) then
!           ~~~~~~~~~~~~~~~
!           non-hydrostatic
!           ~~~~~~~~~~~~~~~
            do j= j0, jn
            do i= i0, in
               qbar=(Ver_wp_8%t(k)*F_q(i,j,k+1)+Ver_wm_8%t(k)*F_q(i,j,kq)*Ver_onezero(k))
!              Compute Nw'
!              ~~~~~~~~~~~
               F_nw(i,j,k) = - Dcst_grav_8 * ( MU  (i,j,k) &
                      - Ver_idz_8%t(k) * ( F_q(i,j,k+1) - F_q(i,j,kq)*Ver_onezero(k) ) - qbar )
              !Finish computing Nt'
               ~~~~~~~~~~~~~~~~~~~~
               F_nt(i,j,k) = F_nt(i,j,k) - Cstv_invT_8 * qbar
!              Combine Nt' and Nw'
!              ~~~~~~~~~~~~~~~~~~~
               F_nt(i,j,k) = F_nt(i,j,k) + b1 * F_nw(i,j,k)
            end do
            end do
         endif
!
         do j= j0, jn
         do i= i0, in
            w_nt        = F_nt(i,j,k)
!           Compute Nt"
!           ~~~~~~~~~~~
            F_nt(i,j,k) = b2 * ( w_nt + a2 * F_nf(i,j,k) )
!           Compute Nf"
!           ~~~~~~~~~~~
            F_nf(i,j,k) = b2 * ( w_nt - a1 * F_nf(i,j,k) )
         end do
         end do
!
      end do
!$omp enddo
!
!***************************************
!     The nonlinear deviation of       *
!   the continuity equation: Nc and    *
! the horizontal Divergence of (Nu,Nv) *
!   combined with Nc (stored in Nc)    *
!***************************************
!
!$omp do
      do k=k0,l_nk
!
!        Compute Nc
!        ~~~~~~~~~~
!
         do j = j0, jn
         do i = i0, in
            xtmp_8(i,j) = one + Ver_dbdz_8%m(k) * F_s(i,j)
         end do
         end do
         call vlog(ytmp_8, xtmp_8, nij)
!
         do j = j0, jn
         do i = i0, in
            F_nc(i,j,k) = Cstv_invT_8 * &
                          ( ytmp_8(i,j) - Ver_dbdz_8%m(k) * F_s(i,j) )
         enddo
         enddo
!
         if(.not.Schm_hydro_L) then
         km=max(k-1,1)
         w4=Ver_wm_8%m(k)
         if(k.eq.1) w4=zero
            do j= j0,jn
            do i= i0,in
               F_nc(i,j,k) = F_nc(i,j,k) - b1 * &
                             ( Ver_wp_8%m(k) * F_nw(i,j,k ) &
                             +      w4       * F_nw(i,j,km) )
            end do
            end do
         endif
!
!        Compute Nc'
!        ~~~~~~~~~~~
          if (G_lam) then

          do j= j0,jn
          do i= i0,in
              ndiv = (F_nu(i,j,k)-F_nu(i-1,j,k)) * geomg_invDX_8(i,j) &
                   + (F_nv(i,j,k)*geomg_cyv_8(j) - F_nv(i,j-1,k)*geomg_cyv_8(j-1)) * Geomg_invDY_8(j) * geomg_invcy_8(j)
            F_nc(i,j,k) = ndiv      - Cstv_invT_8 * F_nc(i,j,k)
         end do
         end do

         else

            do j= j0,jn
               do i= i0,in
                  ndiv      = geomg_invcy2_8(j) * ( &
                              (F_nu(i,j,k)-F_nu(i-1,j,k))*geomg_invDX_8(i,j) * (geomg_cy_8(j) * Dcst_rayt_8) &
                            + (F_nv(i,j,k)-F_nv(i,j-1,k))*Geomg_invDY_8(j) * (geomg_cy_8(j) * Dcst_rayt_8) )
                  F_nc(i,j,k) = ndiv      - Cstv_invT_8 * F_nc(i,j,k)
               end do
            end do

         end if

      end do
!$omp enddo
!
!
!**********************************************************
! The full contributions to the RHS of Helmholtz equation *
!**********************************************************
!
!     Finish computations of NP (combining Nc', Nt", Nf")
!     Substract NP from RP(Rc") and store result(RP-NP) in RP
!
!$omp do
      do k=k0,l_nk
         w1=one + Ver_dz_8%m(k) * Ver_wp_8%m(k)
         w2=one - Ver_dz_8%m(k) * Ver_wm_8%m(k)
         w3=c1*Ver_dz_8%m(k)
         w4=Ver_wm_8%m(k)
         km=max(k-1,1)
         if(k.eq.1)then
            w2=zero
            w4=zero
         endif
         do j= j0, jn
         do i= i0, in
            w5 =  Dcst_rayt_8**2 * ( F_rc(i,j,k) &
                 - Ver_dz_8%m(k) *   F_nc(i,j,k) &
                 + w1 * F_nt(i,j,k) - w2 * F_nt(i,j,km) )
            F_rhs(i,j,k) = w5 + w3 * ( Ver_wp_8%m(k) * F_nf(i,j,k  ) &
                              + w4 * F_nf(i,j,km ) )
         enddo
         enddo
      enddo
!$omp enddo
!
!     Apply boundary conditions
!     ~~~~~~~~~~~~~~~~~~~~~~~~~

      if(Schm_opentop_L) then
         F_rhs(:,:,1:(k0-1)) = 0.0
!$omp do
         do j= j0, jn
         do i= i0, in
            F_nb(i,j)    = F_nt(i,j,k0-1)-b3*F_nb(i,j)+b4*F_t(i,j,k0-1)
            F_rhs(i,j,k0)= F_rhs(i,j,k0) &
                           + Dcst_rayt_8**2 * Ver_cstp_8 * F_nb(i,j)
         end do
         end do
!$omp enddo
      endif
!
!$omp do
      do j= j0, jn
      do i= i0, in
         F_rhs(i,j,l_nk) = F_rhs(i,j,l_nk) &
                           - Dcst_rayt_8**2 * Ver_cssp_8 * F_nt(i,j,l_nk)
      end do
      end do
!$omp enddo
!$omp end parallel
!
1000 format(/,5X,'COMPUTE NON-LINEAR RHS: (S/R NLI)')
!     __________________________________________________________________
!
      deallocate(BsPq,FI,MU)
!
      return
      end

