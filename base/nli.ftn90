!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r nli - compute nonlinear portion of governing & derived equations
!
#include "model_macros_f.h"
!
      subroutine nli (F_rhs_sol,Ni,Nj,Nk)
      implicit none
#include <arch_specific.hf>
!
      integer Ni,Nj,Nk
      real*8  F_rhs_sol (Ni,Nj,Nk)
!authors
!      Alain Patoine & Gabriel Lemay
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
!                             add Ncn
! v3_00 - Desgagne & Lee    - Lam configuration
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Girard C.         - Open top
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_41 - Plante & Girard   - scope on diag_var for top piloting (lid nesting)
!
!object
!******************************************************************************
!
!arguments
!       none
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "vt0.cdk" 
#include "vtx.cdk" 
#include "ptopo.cdk"
#include "lctl.cdk"
#include "lam.cdk"

      type(gmm_metadata) :: mymeta
      integer :: istat, i0, in, j0, jn, k0
!     __________________________________________________________________
!
      if (Lun_debug_L)  write(Lun_out,1000)

      istat = gmm_get(gmmk_rhsc_s,rhsc,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(rhsc)'
      istat = gmm_get(gmmk_ut0_s,ut0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(ut0)'
      istat = gmm_get(gmmk_vt0_s,vt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(vt0)'
      istat = gmm_get(gmmk_tt0_s,tt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(tt0)'
      istat = gmm_get(gmmk_st0_s,st0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(st0)'
      istat = gmm_get(gmmk_fis0_s,fis0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(fis0)'
      istat = gmm_get(gmmk_fiptx_s,fiptx,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(fiptx)'
      istat = gmm_get(gmmk_qt0_s,qt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'nli ERROR at gmm_get(qt0)'
      
      i0=1   +pil_w
      in=l_ni-pil_e
      j0=1   +pil_s 
      jn=l_nj-pil_n 

      k0=1+Lam_gbpil_T

      call nlip ( nl_u, nl_v, nl_t , nl_c, nl_w, nl_f    , &
           ut0 , vt0 , tt0(l_minx,l_miny,2), st0  , &
           qt0(l_minx,l_miny,1), F_rhs_sol, rhsc  , &
           fis0, nl_b, LDIST_DIM, l_nk, ni, nj, i0,j0,in,jn,k0 )

 1000 format(/,5X,'COMPUTE NON-LINEAR RHS: (S/R NLI)')
!
!     __________________________________________________________________
!
      return
      end

