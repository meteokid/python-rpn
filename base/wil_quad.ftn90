!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r wil_quad
!
      SUBROUTINE WIL_QUAD(A,B,F,RESULT,EPSIL,NPTS,K,IER)
!
      implicit none
#include <arch_specific.hf>
!
      real A,B,F,RESULT(8),EPSIL
      integer NPTS,K,IER
!
!author Jacob et al. 1992 
!
!revision
! v4_04 - Jacob et al.     - initial version QUAD 
! v4_04 - Tanguay M.       - Williamson's cases
!
!object
! --------------------------------------------------------------------
!     SUBROUTINE QUAD(A,B,F,RESULT,EPSIL,NPTS,K,IER)
!
! DIMENSION OF           RESULT(8)
! ARGUMENTS
!
! PURPOSE                TO CALCULATE AUTOMATICALLY THE INTEGRAL OF F(X)
!                        OVER THE FINITE INTERVAL (A,B) WITH RELATIVE
!                        ERROR LESS THAN EPSIL.
!
! USAGE                  CALL QUAD (A,B,F,RESULT,EPSIL,NPTS,K,IER)
!
! ARGUMENTS
!
! ON INPUT               A
!                          LOWER LIMIT OF INTEGRATION.
!
!                        B
!                          UPPER LIMIT OF INTEGRATION.
!
!                        F
!                          F(X) IS USER WRITTEN FUNCTION TO CALCULATE
!                          THE INTEGRAND.  F MUST BE DECLARED EXTERNAL
!                          IN THE CALLING PROGRAM.
!
!                        EPSIL
!                          REQUIRED RELATIVE ERROR OF THE INTEGRAL.
!                          THIS SHOULD BE LESS THAN .001.
!
! ON OUTPUT              RESULT
!                          ARRAY IN WHICH ARE RETURNED THE RESULTS OF
!                          APPLYING 1,3,7,15,31,63,127, AND
!                          255-POINT FORMULAE SUCCESSIVELY.  THE NUMBER
!                          OF FORMULAE ACTUALLY USED WILL DEPEND UPON
!                          EPSIL.  THE DIMENSION OF RESULT IN THE
!                          CALLING PROGRAM SHOULD BE AT LEAST 8.
!
!                        NPTS
!                          NUMBER OF INTEGRAND EVALUATIONS PERFORMED.
!
!                        K
!                          RESULT(K) CONTAINS THE VALUE OF THE INTEGRAL
!                          TO THE REQUIRED ACCURACY.  K IS DETERMINED
!                          FROM THE CONVERGENCE CRITERION:
!                            ABS(RESULT(K)-RESULT(K-1)) .LE.
!                            EPSIL*ABS(RESULT(K))
!
!                        IER
!                          ERROR PARAMETER
!                          = 0  REQUIRED ACCURACY ACHIEVED.
!                          = 1  REQUIRED ACCURACY NOT ACHIEVED AFTER
!                               WORKING THROUGH ALL EIGHT FORMULAE.
!
! TIMING                 IN ALL BUT THE MOST TRIVIAL EXAMPLES, THE
!                        TIMING IS DETERMINED BY THE TIME, T, NEEDED FOR
!                        AN INTEGRAND EVALUATION BY THE USER PROVIDED
!                        FUNCTION F(X).  THE TOTAL NUMBER, NPTS, OF
!                        INTEGRAND EVALUATIONS DEPENDS CRITICALLY UPON
!                        THE BEHAVIOR OF F(X) WITHIN THE INTERVAL (A,B)
!                        AND MAY RUN INTO THOUSANDS FOR PATHOLOGICAL
!                        CASES.  THE TOTAL TIME IS APPROXIMATELY NPTS*T.
!
! METHOD                 QUAD IMPLEMENTS THE BASIC ALGORITHM WHICH
!                        INTEGRATES OVER THE WHOLE INTERVAL USING A
!                        SEQUENCE OF INTERLEAVING 1, 3, 7, 15, 31, 63,
!                        127 AND 255-POINT EXTENDED GAUSS-TYPE
!                        QUADRATURE FORMULAE.  SINCE EACH SUCCESSIVE
!                        FORMULA EMPLOYS ALL POINTS USED BY ITS
!                        PREDECESSOR, NO INTEGRAND VALUES ARE WASTED
!                        WHEN THE ORDER OF THE INTEGRATION FORMULA IS
!                        INCREASED.  THE PROCESS IS DEEMED TO CONVERGE
!                        WHEN THE RELATIVE DIFFERENCE BETWEEN VALUES
!                        OF THE INTEGRAL OBTAINED FROM TWO SUCCESSIVE
!                        FORMULAE IS LESS THAN EPSIL.
!
!implicits
#include "wil_lun.cdk"
! --------------------------------------------------------------------
!
      INTEGER I,J,IOLD,INEW
      REAL SUM,DIFF,FZERO,ACUM,X,FUNCT(127)
!
      REAL P
      COMMON /ADQD1/ P(381)
#include "wil_aqdat.cdk"
!
!CC   LOGICAL Q8Q4
!CC   SAVE Q8Q4
!CC   DATA Q8Q4 /.TRUE./
!
! --------------------------------------------------------------------
!
!CC   IF (Q8Q4) THEN
!CC       CALL Q8QST4('LOCLIB','ADQUAD','QUAD','VERSION 13')
!CC       Q8Q4 = .FALSE.
!CC   ENDIF
!
      IER = 0
!
!     CHECK FOR TRIVIAL CASE
!     ----------------------
      IF (A .EQ. B) GO TO 107
!
!     SCALE FACTORS
!     -------------
      SUM = (B+A)/2.0
      DIFF = (B-A)/2.0
!
!     1-POINT FORMULA
!     --------------- 
      FZERO = F(SUM)
      RESULT(1) = 2.0*FZERO*DIFF
      I = 0
      IOLD = 0
      INEW = 1
      K = 2
      ACUM = 0.0
      GO TO 103
  101 CONTINUE
      IF (K .EQ. 8) GO TO 105
      K = K+1
      ACUM = 0.
!
!     CONTRIBUTION FROM FUNCTION VALUES ALREADY COMPUTED
!     -------------------------------------------------- 
      DO 102 J=1,IOLD
         I = I+1
         ACUM = ACUM+P(I)*FUNCT(J)
  102 CONTINUE
!
!     CONTRIBUTION FROM NEW FUNCTION VALUES
!     ------------------------------------- 
  103 CONTINUE
      IOLD = IOLD+INEW
      DO 104 J=INEW,IOLD
         I = I+1
         X = P(I)*DIFF
         FUNCT(J) = F(SUM+X)+F(SUM-X)
         I = I+1
         ACUM = ACUM+P(I)*FUNCT(J)
  104 CONTINUE
      INEW = IOLD+1
      I = I+1
      RESULT(K) = (ACUM+P(I)*FZERO)*DIFF
!
!     CHECK FOR CONVERGENCE
!     ---------------------
      IF (ABS(RESULT(K)-RESULT(K-1))-ABS(EPSIL*RESULT(K))) &
          106,106,101
!
!     CONVERGENCE NOT ACHIEVED
!     ------------------------
  105 CONTINUE
      IER = 1
      IF (EPSIL .LT. 0.) GO TO 106
         if (Wil_Lun_out.gt.0) WRITE(Wil_Lun_out,108)
  108    FORMAT(/,' QUAD: REQUIRED ACCURACY NOT ACHIEVED')
!CC   CALL ULIBER (IER,36H QUAD-REQUIRED ACCURACY NOT ACHIEVED,36)
!
!     NORMAL TERMINATION
!     ------------------
  106 CONTINUE
      NPTS = INEW+IOLD
      RETURN
!
!     TRIVIAL CASE
!     ------------
  107 CONTINUE
      K = 2
      RESULT(1) = 0.0
      RESULT(2) = 0.0
      NPTS = 0
      RETURN
      END
