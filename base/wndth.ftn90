!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r wndth - Compute an average wind valid at time t0-dt/2 (th)
!
#include "model_macros_f.h"
!
      subroutine wndth
!
      implicit none
#include <arch_specific.hf>
!
!author 
!     Michel Roch - rpn - oct 1993
!
!revision
! v2_00 - Desgagne M.       - initial MPI version 
! v3_20 - Tanguay M.        - 1d higher order diffusion operator 
! v3_21 - Tanguay M.        - do filtering at t=0 in v4d_predat
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_30 - Tanguay M.        - Revision
!
!object
!	
!arguments
!	none
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt0.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "hzd.cdk"
#include "lctl.cdk"
#include "schm.cdk"
#include "ver.cdk"
#include "lam.cdk"
!
      type(gmm_metadata) :: mymeta
      integer i, j, k,istat,istatg
!
!     ---------------------------------------------------------------
!
      if (Lun_debug_L) write (Lun_out,1000)
!
      istat = gmm_get(gmmk_uth_s, uth ,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(uth)'
      istatg = istat
!
      istat = gmm_get(gmmk_vth_s, vth ,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(vth)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_zdth_s,zdth,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(zdth)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_ut1_s,ut1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(ut1)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_ut0_s,ut0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(ut0)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_vt1_s,vt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(vt1)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_vt0_s,vt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(vt0)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_zdt1_s,zdt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(zdt1)'
      istatg = min(istat,istatg)
!
      istat = gmm_get(gmmk_zdt0_s,zdt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'wndth ERROR at gmm_get(zdt0)'
      istatg = min(istat,istatg)
!
      call handle_error_l(.not.GMM_IS_ERROR(istatg),'wndth','See gmm_get error(s) above.')
!
!     Filtering
!     ---------
      if (Hzd_t0_0_L) call hzd_hoffld (ut0,   LDIST_DIM, G_nk, 1)
      if (Hzd_t0_0_L) call hzd_hoffld (vt0,   LDIST_DIM, G_nk, 2)
      if (Hzd_t0_0_L) call hzd_hoffld (zdt0, LDIST_DIM, G_nk+1, 3)
!
!C       1.    Perform the averaging
!              ---------------------
!
!$omp parallel
!
!$omp do
      do k=1,l_nk
         do j= 1, l_nj
         do i= 1, l_niu
              uth(i,j,k) = 0.5*ut0(i,j,k)+0.5*ut1(i,j,k)
         end do
         end do
         do j= 1, l_njv
         do i= 1, l_ni
            vth(i,j,k)   = 0.5*vt0(i,j,k)+0.5*vt1(i,j,k)
         end do
         end do
      end do
!$omp enddo
!$omp do
      do k=1,l_nk+1
         do j= 1, l_nj
         do i= 1, l_ni
            zdth(i,j,k) = 0.5 * ( zdt0(i,j,k) + zdt1(i,j,k) )
         end do
         end do
      end do      
!$omp enddo
!$omp end parallel
!
      if (Lam_acidtest_L) then
         call sol_from_file (uth ,LDIST_DIM,1,l_nk  )
         call sol_from_file (vth ,LDIST_DIM,1,l_nk  )
         call sol_from_file (zdth,LDIST_DIM,1,l_nk+1)
      endif
!
 1000 format( &
      / /,'AVERAGE WINDS t0-dt/2 (th): (S/R WNDTH)', &
       /,'========================================',/ /)
!
!     ---------------------------------------------------------------
!
      return
      end
