!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r out_outdir - Establishes output directory base on Lctl_step and Out3_postfreq
!
#include "model_macros_f.h"
      subroutine out_outdir (current_step, upperlimit)
      implicit none
!
      integer current_step,upperlimit
!
!AUTHOR   Michel Desgagne  - Summer 2010
!
!REVISION
! v4_14 - Desgagne M.      - Initial version
!
#include "grd.cdk"
#include "out.cdk"
#include "out3.cdk"
#include "ptopo.cdk"
#include "lun.cdk"
#include "path.cdk"
#include <clib_interface.cdk>
!
      character*10 postjob_S
      character*7  blocxy_S
      logical flag
      integer err,last_step_post,flag_step_post,stepno
!
!----------------------------------------------------------------------
!
      write (blocxy_S ,'(I3.3,"-",I3.3)') Out_myblocx, Out_myblocy

      stepno = max(current_step,1)
      if (Out3_postfreq .gt. 0) then
         last_step_post = stepno / Out3_postfreq
         last_step_post = (last_step_post+min(1,mod(stepno, Out3_postfreq))) * Out3_postfreq
      else
         last_step_post = upperlimit
      endif

      stepno = stepno + 1
      if (Out3_postfreq .gt. 0) then
         flag_step_post = stepno / Out3_postfreq
         flag_step_post = (flag_step_post+min(1,mod(stepno, Out3_postfreq))) * Out3_postfreq
      else
         flag_step_post = upperlimit
      endif

      Out_post_L     = (flag_step_post.gt.last_step_post)

      last_step_post = min(last_step_post,upperlimit)
      write (postjob_S,'(i10.10)') last_step_post

      Out_laststep_S = 'laststep_'//postjob_S
      Out_dirname_S  = trim(Path_output_S)//'/'//Out_laststep_S

      flag= .false.
      if (Ptopo_blocme.eq.0) then
         if (clib_isdir(trim(Out_dirname_S)) .le. 0) then
            if (Grd_yinyang_L) then 
               if ( trim(Grd_yinyang_S) .eq. 'YIN' ) then
                  err= clib_mkdir (trim(Out_dirname_S))
                  if (Lun_out.gt.0) write (6,1001) trim(Out_laststep_S),current_step
               endif
            else
               err= clib_mkdir ( trim(Out_dirname_S) )
               if (Lun_out.gt.0) write (6,1001) trim(Out_laststep_S),current_step
            endif
            flag= .true.
         endif
      endif

      call rpn_comm_Barrier("world", err)

      if (Ptopo_blocme.eq.0) then
         if (flag) then
            if (Grd_yinyang_L) then 
               Out_dirname_S = trim(Out_dirname_S)//'/'//trim(Grd_yinyang_S)
               err= clib_mkdir ( trim(Out_dirname_S) )
            endif
            Out_dirname_S = trim(Out_dirname_S)//'/'//blocxy_S
            err= clib_mkdir ( trim(Out_dirname_S) )
         else
            Out_dirname_S = trim(Out_dirname_S)//'/'//trim(Grd_yinyang_S)//'/'//blocxy_S
         endif
      endif

 1001 format (' OUT_OUTDIR: DIRECTORY output/',a,' was created at timestep: ',i9)
!
!----------------------------------------------------------------------
!
      return
      end
