!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r e_intpoly - computes interpolation polynomials (coefficients)
!
      subroutine e_intpoly ( frc0, frc1, frc2, &
                            frdel, frhh, frhm, frhp, fllag )
!
      implicit none
#include <arch_specific.hf>
!
      logical fllag
      real*8   frc0, frc1, frc2, frdel, frhh, frhm, frhp
!
!author jean cote - rpn - sept 95 - setint3
!
!revision
! v1_95 - alain patoine          - split from e_intpoly.ftn
!
!language
!	fortran 77
!
!object
!       see above ID
!	
!arguments
!______________________________________________________________________
!                    |                                                 |
! NAME               | DESCRIPTION                                     |
!--------------------|-------------------------------------------------|
! frc0               | normalized relative coordinate                  |
! frc1               | polynomial of second derivative/difference      |
!                    | in interpolation formula                        |
! frc2               | polynomial of second derivative/difference      |
!                    | in interpolation formula                        |
! frdel              | relative coordinate                             |
! frhh               | grid interval where the interpolation point     |
!                    | lies                                            |
! frhm               | grid interval left of where the                 |
!                    | interpolation point lies (fllag=.true.)         |
! frhp               | grid interval right of where the                |
!                    | interpolation point lies (fllag=.true.)         |
! fllag              | .true.  for cubic lagrange interpolation        |
!                    | .false. for cubic spline interpolation          |
! ---------------------------------------------------------------------
!
!implicits
!
!note
!     For an interpolation point x such that x1 < x2 < x < x3 < x4 then
!     frdel = x - x2, frhh = x3 - x2, frhm = x2 - x1, frhp = x4 - x3 and
!     the interpolation using f2 = f(x2), f3 = f(x3) and s2 = s(x2), s3 = s(x3)
!     the function and the second derivative/difference values at x2 and x3
!     respectively is written as
!
!     f(x) = ( 1.0 - frc0 ) * f2 + frc0 * f3 + frc1 * s2 + frc2 * s3
!
!*
!     ---------------------------------------------------------------
      real*8 one, six
      parameter( one  = 1.0 )
      parameter( six  = 6.0 )
!
      frc0 = frdel/frhh
      frc1 = one - frc0
      if ( fllag ) then
         frc2 = ( frhh * frhh )/( frhm + frhh + frhp )
         frc2 = - ( frc1 * frc0 * frc2 )
         frc1 =     frc2 * (  frc1 * frhh + frhp )
         frc2 =     frc2 * ( frc0 * frhh + frhm )
      else
         frc2 = frhh * frhh / six
         frc2 = - ( frc1 * frc0 * frc2 )
         frc1 =     frc2 * (  frc1 + one )
         frc2 =     frc2 * ( frc0 + one )
      endif
      return
      end

