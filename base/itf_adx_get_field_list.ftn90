!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#include <model_macros_f.h>

!/**
subroutine itf_adx_get_field_list (F_fields_lbl,F_fields_type_L,F_nfields,F_nb_fields_max)
   implicit none
#include <arch_specific.hf>
!
   !@objective
!
   !@arguments
   character(len=*), dimension(2,F_nb_fields_max), intent(out) :: F_fields_lbl
   logical         , dimension(2,F_nb_fields_max), intent(out) :: F_fields_type_L
   integer, intent(in)  :: F_nb_fields_max
   integer, intent(out) :: F_nfields
!**/

#include "glb_ld.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "rhsc.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"

      integer, parameter :: FIELD_IN  = 1
      integer, parameter :: FIELD_OUT = 2
      integer, parameter :: IS_MOM    = 1
      integer, parameter :: IS_WIND   = 2

      integer :: n

      !---------------------------------------------------------------------

      !TODO: these quantities should be placed in gmm metadata...
      F_fields_type_L(IS_MOM,:)    = .true.
      F_fields_type_L(IS_WIND,:)   = .false.

      F_nfields = 1
      F_fields_lbl(FIELD_IN  ,F_nfields)  = gmmk_ruw1_s
      F_fields_lbl(FIELD_OUT ,F_nfields)  = gmmk_ruw2_s
      F_fields_type_L(IS_WIND,F_nfields)  = .true.

      F_nfields = F_nfields + 1
      F_fields_lbl(FIELD_IN  ,F_nfields)  = gmmk_rvw1_s
      F_fields_lbl(FIELD_OUT ,F_nfields)  = gmmk_rvw2_s
      F_fields_type_L(IS_WIND,F_nfields)  = .true.

      F_nfields = F_nfields + 1
      F_fields_lbl(FIELD_IN ,F_nfields)   = gmmk_orhsc_s
      F_fields_lbl(FIELD_OUT,F_nfields)   = gmmk_rhsc_s


      F_nfields = F_nfields + 1
      F_fields_type_L(IS_MOM,F_nfields:)  = .false.

      F_fields_lbl(FIELD_IN ,F_nfields)   = gmmk_orhst_s
      F_fields_lbl(FIELD_OUT,F_nfields)   = gmmk_rhst_s

      F_nfields = F_nfields + 1
      F_fields_lbl(FIELD_IN ,F_nfields)   = gmmk_orhsf_s
      F_fields_lbl(FIELD_OUT,F_nfields)   = gmmk_rhsf_s

      if (.not. Schm_hydro_L) then
         F_nfields = F_nfields + 1
         F_fields_lbl(FIELD_IN ,F_nfields)= gmmk_orhsw_s
         F_fields_lbl(FIELD_OUT,F_nfields)= gmmk_rhsw_s
      endif

      if (Schm_zdotmid_L) then
         F_nfields = F_nfields + 1
         F_fields_lbl(FIELD_IN, F_nfields)= gmmk_zdt1_s
         F_fields_lbl(FIELD_OUT,F_nfields)= gmmk_zdup_s
      endif

      if (Orh_icn == Schm_itcn) then
         do n=1,Tr3d_ntr
            F_nfields = F_nfields + 1
            F_fields_lbl(FIELD_IN ,F_nfields) = 'TR/'//trim(Tr3d_name_S(n))//':P'
            F_fields_lbl(FIELD_OUT,F_nfields) = 'TR/'//trim(Tr3d_name_S(n))//':M'
         end do
      endif

!      call handle_error_l (F_nfields <= F_nb_fields_max, 'itf_adx_main', &
!                                         'Too many field for advection')

      !---------------------------------------------------------------------

   return
end subroutine itf_adx_get_field_list

