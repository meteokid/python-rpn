!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r yyg_iauexhange - YY exchange for IAU increments
!
#include "model_macros_f.h"
!
      subroutine yyg_iauexchange ( F_s, F_t, F_hu, F_u, F_v, DIST_DIM, Nk )
      implicit none
#include <arch_specific.hf>
!
      integer  DIST_DIM, Nk 
! 
      real     F_u  (DIST_SHAPE,  Nk)  ,  F_v (DIST_SHAPE,  Nk), &
               F_hu (DIST_SHAPE,  Nk)
      real     F_t  (DIST_SHAPE,  Nk)  ,F_s (DIST_SHAPE)
!
!author
!     McTaggart-Cowan  - Sept 2013
!
!revision
!
!object
! Exchange the Yin-Yang boundary conditions for S,T,HU,U,V increments
!
!arguments: F_s (st0), F_t (tt0), F_hu (tr/hut0), F_u (ut0), F_v (vt0)
!
!implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "lun.cdk"
!
      integer i, j, k
!     temp variables to manipulate winds for Yin-Yang
      real temps   (DIST_SHAPE       )
      real tempt   (DIST_SHAPE,  l_nk)
      real temphu  (DIST_SHAPE,  l_nk)
!
!     __________________________________________________________________
!
      if (Lun_debug_L) write(Lun_out,1000)

      call yyg_nestuv(F_u,F_v,DIST_DIM,l_nk)

      temps = 0. 
      temps(1:l_ni,1:l_nj) = F_s(1:l_ni,1:l_nj)

      tempt = 0.
      temphu = 0.
!$omp parallel private(i,j)
!$omp do
      do k= 1,l_nk
         do j= 1, l_nj
         do i= 1, l_ni
            tempt(i,j,k)=F_t (i,j,k)
         enddo
         enddo
         
         do j= 1, l_nj
         do i= 1, l_ni
            temphu(i,j,k)=F_hu (i,j,k)
         enddo
         enddo
      enddo
!$omp enddo
!$omp end parallel

      call rpn_comm_xch_halo(temps,LDIST_DIM,l_ni,l_nj,1, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call yyg_scalbc(F_s,temps,LDIST_DIM,1)
      call rpn_comm_xch_halo(F_s,LDIST_DIM,l_ni,l_nj,1, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      call rpn_comm_xch_halo(tempt,LDIST_DIM,l_ni,l_nj,l_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call yyg_scalbc(F_t,tempt,LDIST_DIM,l_nk)
      call rpn_comm_xch_halo(F_t,LDIST_DIM,l_ni,l_nj,l_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      call rpn_comm_xch_halo(temphu,LDIST_DIM,l_ni,l_nj,l_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call yyg_scalbc(F_hu,temphu,LDIST_DIM,l_nk)
      call rpn_comm_xch_halo(F_hu,LDIST_DIM,l_ni,l_nj,l_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

!     __________________________________________________________________
!
1000  format (5X,'IAU APPLICATION: (S/R YYG_IAUEXCHANGE)')
!
      return
      end


