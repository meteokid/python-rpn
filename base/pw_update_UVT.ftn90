!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r pw_update - Update physical quantities
!
#include "model_macros_f.h"
!
      subroutine pw_update_UVT (pom)
      implicit none
!
      character*1 pom
!
!author
!     Michel Desgagne - May 2010
!
!revision
! v4_14 - Desgagne, M.     - Initial revision
!
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "dcst.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "pw.cdk"
#include "geomn.cdk"
!
      integer i, j, k, km1
      real con(YDIST_SHAPE)
      real*8 r0,ONE_8,CLXXX_8,deg2rad_8
      parameter( ONE_8   = 1.0, CLXXX_8 = 180.0 )
      real, pointer, dimension (:,:,:) :: pw_uu  => null()
      real, pointer, dimension (:,:,:) :: pw_vv  => null()
      real, pointer, dimension (:,:,:) :: pw_tt  => null()
      real, pointer, dimension (:,:,:) :: uu     => null()
      real, pointer, dimension (:,:,:) :: vv     => null()
!     ________________________________________________________________
!
      deg2rad_8 = acos( -ONE_8 )/CLXXX_8
      con(:)    = 1.0/cos(geomg_y_8(:)) * Dcst_rayt_8
!
      if (pom.eq."P") then
         gmmstat = gmm_get (gmmk_pw_uplus_s, pw_uu, meta3d)
         gmmstat = gmm_get (gmmk_pw_vplus_s, pw_vv, meta3d)
         gmmstat = gmm_get (gmmk_pw_tplus_s, pw_tt, meta3d)
         gmmstat = gmm_get (gmmk_ut1_s, uu, meta3d)
         gmmstat = gmm_get (gmmk_vt1_s, vv, meta3d)
      else
         gmmstat = gmm_get (gmmk_pw_umoins_s, pw_uu, meta3d)
         gmmstat = gmm_get (gmmk_pw_vmoins_s, pw_vv, meta3d)
         gmmstat = gmm_get (gmmk_pw_tmoins_s, pw_tt, meta3d)
         gmmstat = gmm_get (gmmk_ut0_s, uu, meta3d)
         gmmstat = gmm_get (gmmk_vt0_s, vv, meta3d)
      endif
!
      do k=1,l_nk+2
         km1=max(k-1,1)
         pw_uu (1:l_ni,1:l_nj,k) = uu (1:l_ni,1:l_nj,km1)
         pw_vv (1:l_ni,1:l_nj,k) = vv (1:l_ni,1:l_nj,km1)
      end do

      call itf_phy_uvgridscal (pw_uu , pw_vv , LDIST_DIM, l_nk+2, .true.)

      do k= 1, l_nk+2
      do j= 1, l_nj
         pw_uu (1:l_ni,j,k) = pw_uu (1:l_ni,j,k) * con(j)
         pw_vv (1:l_ni,j,k) = pw_vv (1:l_ni,j,k) * con(j)
      enddo
      enddo
!
!     Compute temperature from virtual temperature
!     --------------------------------------------
!
      call tt2virt (pw_tt, .false., pom)
!
!     ________________________________________________________________
!
      return
      end
