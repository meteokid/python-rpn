!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r pw_update - Update physical quantities
!
#include "model_macros_f.h"
!
      subroutine pw_update_UVT (pom)
      implicit none
#include <arch_specific.hf>
!
      character*1 pom
!
!author
!     Michel Desgagne - May 2010
!
!revision
! v4_14 - Desgagne, M.     - Initial revision
!
#include "gmm.hf"
#include "glb_ld.cdk"
#include "geomg.cdk"
#include "dcst.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "pw.cdk"
#include "geomn.cdk"
#include "cstv.cdk"
!
      real*8, parameter :: ONE_8   = 1.d0
      real*8, parameter :: CLXXX_8 = 180.d0

      type(gmm_metadata) :: mymeta
      integer i, j, k, km1,istat
      real con(YDIST_SHAPE)
      real*8 r0,deg2rad_8,idt
      real, pointer, dimension (:,:,:) :: pw_uu  => null()
      real, pointer, dimension (:,:,:) :: pw_vv  => null()
      real, pointer, dimension (:,:,:) :: pw_ww  => null()
      real, pointer, dimension (:,:,:) :: pw_tt  => null()
      real, pointer, dimension (:,:,:) :: uu     => null()
      real, pointer, dimension (:,:,:) :: vv     => null()
      real, pointer, dimension (:,:,:) :: ww     => null()
      real, dimension(l_ni,l_nj,l_nk+2) :: uprev,vprev,wprev,tprev
      logical, save :: initialized=.false.
!     ________________________________________________________________
!
      deg2rad_8   = acos( -ONE_8 )/CLXXX_8
      con(1:l_nj) = 1.0/cos(geomg_y_8(1:l_nj)) * Dcst_rayt_8
!
      if (pom == "P") then
         nullify(pw_uu_dyn,pw_vv_dyn,pw_ww_dyn,pw_tt_dyn)
         istat = gmm_get (gmmk_pw_uu_plus_s, pw_uu, mymeta)
         istat = gmm_get (gmmk_pw_vv_plus_s, pw_vv, mymeta)
         istat = gmm_get (gmmk_pw_ww_plus_s, pw_ww, mymeta)
         istat = gmm_get (gmmk_pw_tt_plus_s, pw_tt, mymeta)
         istat = gmm_get (gmmk_ut1_s, uu, mymeta)
         istat = gmm_get (gmmk_vt1_s, vv, mymeta)
         istat = gmm_get (gmmk_wt1_s, ww, mymeta)
         istat = gmm_get (gmmk_pw_uu_dyn_s, pw_uu_dyn, mymeta)
         istat = gmm_get (gmmk_pw_vv_dyn_s, pw_vv_dyn, mymeta)
         istat = gmm_get (gmmk_pw_ww_dyn_s, pw_ww_dyn, mymeta)
         istat = gmm_get (gmmk_pw_tt_dyn_s, pw_tt_dyn, mymeta)

!$omp parallel
!$omp do
         do k= 1, l_nk+2
         do j= 1, l_nj
            uprev (1:l_ni,j,k) = pw_uu (1:l_ni,j,k)
            vprev (1:l_ni,j,k) = pw_vv (1:l_ni,j,k)
            wprev (1:l_ni,j,k) = pw_ww (1:l_ni,j,k)
            tprev (1:l_ni,j,k) = pw_tt (1:l_ni,j,k)
         enddo
         enddo
!$omp enddo
!$omp end parallel
      else
         istat = gmm_get (gmmk_pw_uu_moins_s,pw_uu, mymeta)
         istat = gmm_get (gmmk_pw_vv_moins_s,pw_vv, mymeta)
         istat = gmm_get (gmmk_pw_ww_moins_s,pw_ww, mymeta)
         istat = gmm_get (gmmk_pw_tt_moins_s,pw_tt, mymeta)
         istat = gmm_get (gmmk_ut0_s, uu, mymeta)
         istat = gmm_get (gmmk_vt0_s, vv, mymeta)
         istat = gmm_get (gmmk_wt0_s, ww, mymeta)
      endif
!
!$omp parallel private(km1)
!$omp do
      do k=1,l_nk+2
         km1=max(k-1,1)
         pw_uu (1:l_ni,1:l_nj,k) = uu (1:l_ni,1:l_nj,km1)
         pw_vv (1:l_ni,1:l_nj,k) = vv (1:l_ni,1:l_nj,km1)
         pw_ww (1:l_ni,1:l_nj,k) = ww (1:l_ni,1:l_nj,k  )
      end do
!$omp enddo
!$omp end parallel

      call itf_phy_uvgridscal (pw_uu , pw_vv , LDIST_DIM, l_nk+2, .true.)

!$omp parallel
!$omp do
      do k= 1, l_nk+2
      do j= 1, l_nj
         pw_uu (1:l_ni,j,k) = pw_uu (1:l_ni,j,k) * con(j)
         pw_vv (1:l_ni,j,k) = pw_vv (1:l_ni,j,k) * con(j)
      enddo
      enddo
!$omp enddo
!$omp end parallel
!
!     Compute temperature from virtual temperature
!     --------------------------------------------
!
      call tt2virt (pw_tt, .false., pom)
!
!     Keep a running total of tendencies for this timestep
!     ----------------------------------------------------
      if (pom == 'P' .and. initialized) then
         idt = 1d0/Cstv_dt_8
!$omp parallel
!$omp do  
         do k= 1, l_nk+2
         do j= 1, l_nj
            pw_uu_dyn (1:l_ni,j,k) = pw_uu_dyn (1:l_ni,j,k) + idt * ( pw_uu (1:l_ni,j,k) - uprev (1:l_ni,j,k) )
            pw_vv_dyn (1:l_ni,j,k) = pw_vv_dyn (1:l_ni,j,k) + idt * ( pw_vv (1:l_ni,j,k) - vprev (1:l_ni,j,k) )
            pw_ww_dyn (1:l_ni,j,k) = pw_ww_dyn (1:l_ni,j,k) + idt * ( pw_ww (1:l_ni,j,k) - wprev (1:l_ni,j,k) )
            pw_tt_dyn (1:l_ni,j,k) = pw_tt_dyn (1:l_ni,j,k) + idt * ( pw_tt (1:l_ni,j,k) - tprev (1:l_ni,j,k) )
         enddo
         enddo
!$omp enddo
!$omp end parallel
      endif
!
!     Initial update has been completed
      initialized = .true.
!     ________________________________________________________________
!
      return
      end
