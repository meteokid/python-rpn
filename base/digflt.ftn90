!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r digflt -  Compute digitally filtered fields
!
#include "model_macros_f.h"
!
     subroutine digflt
!
      implicit none
!
!author
!     Alain Patoine - march 94
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_30 - Edouard  S.       - remove pi' at the top
! v2_31 - Desgagne M.       - re-introduce tracers
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_21 - Lee V.            - Remove Tr2d
! v3_30 - Desgagne M.       - Removed phy memcore option
! v4    - Girard-Plante     - Staggered version
! v4_05 - Lepine M.         - VMM replacement with GMM
! v1_11 - Plante A.         - Add diag var on vertical scope
!                             Move w out of non-hydrostatic section

#include <arch_specific.hf>
#include <gmm.hf>
#include "glb_ld.cdk"
#include "init.cdk"
#include "step.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "vta.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
!
      integer i, j, k, n, err,istat
      real dfcoef
      real, pointer, dimension(:,:,:) :: tr,tra
      real, pointer, dimension(:,:) :: BUSPER_3d,BUSPER_3d_digf
      type(gmm_metadata) :: meta_busper,mymeta
!     __________________________________________________________________
!
      dfcoef = Init_dfco( abs( (Init_dfnp-1)/2 - Step_kount ) )
!
      istat = gmm_get(gmmk_uta_s,uta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(uta)'
      istat = gmm_get(gmmk_ut1_s,ut1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(ut1)'
      istat = gmm_get(gmmk_vta_s,vta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(vta)'
      istat = gmm_get(gmmk_vt1_s,vt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(vt1)'
      istat = gmm_get(gmmk_tta_s,tta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(tta)'
      istat = gmm_get(gmmk_tt1_s,tt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(tt1)'
      istat = gmm_get(gmmk_zdta_s,zdta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(zdta)'
      istat = gmm_get(gmmk_zdt1_s,zdt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(zdt1)'
      istat = gmm_get(gmmk_sta_s,sta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(sta)'
      istat = gmm_get(gmmk_st1_s,st1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(st1)'
      istat = gmm_get(gmmk_wta_s,wta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(wta)'
      istat = gmm_get(gmmk_wt1_s,wt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(wt1)'
      istat = gmm_get(gmmk_qt1_s,qt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(qt1)'
      istat = gmm_get(gmmk_qta_s,qta,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'digflt ERROR at gmm_get(qta)'
!
      do k= 1, l_nk
      do j= 1, l_nj 
      do i= 1, l_ni 
         tta (i,j,k)   =  tta(i,j,k)   + dfcoef *  tt1(i,j,k)
         uta (i,j,k)   =  uta(i,j,k)   + dfcoef *  ut1(i,j,k)
         vta (i,j,k)   =  vta(i,j,k)   + dfcoef *  vt1(i,j,k)
         zdta(i,j,k)   = zdta(i,j,k)   + dfcoef * zdt1(i,j,k)
         wta (i,j,k)   =  wta(i,j,k)   + dfcoef *  wt1(i,j,k)
         qta (i,j,k+1) =  qta(i,j,k+1) + dfcoef *  qt1(i,j,k+1)
      end do
      end do
      end do
!
      do j= 1, l_nj
      do i= 1, l_ni
         sta (i,j)        = sta(i,j)        + dfcoef * st1(i,j)
      end do
      end do

!***************************************************************
!     Passive tracers (no passive tracers in linear model)
!***************************************************************

      do n=1,Tr3d_ntr

         istat = gmm_get('DIGF_'//trim(Tr3d_name_S(n))      , tra, mymeta)
         istat = gmm_get('TR/'  //trim(Tr3d_name_S(n))//':P', tr , mymeta)

         if ( Init_dftr_L ) then
            do k=1,G_nk
            do j=1,l_nj
            do i=1,l_ni
               tra(i,j,k) = tra(i,j,k) + dfcoef * tr(i,j,k)
            end do
            end do
            end do
         elseif ( Step_kount .eq. (Init_dfnp-1)/2 ) then
            tra(1:l_ni,1:l_nj,1:G_nk) = tr(1:l_ni,1:l_nj,1:G_nk)
         endif

      end do

!**********************************************************************
! Physics fields at half span are saved to be used after initialisation
!**********************************************************************

      if ( Step_kount .eq. (Init_dfnp-1)/2 .and. Schm_phyms_L ) then
         nullify(BUSPER_3d,BUSPER_3d_digf)
         istat = gmm_get ('BUSPER_3d'     ,BUSPER_3d     ,meta_busper)
         istat = gmm_create ('BUSPER_3d_digf', BUSPER_3d_digf ,meta_busper,&
                                GMM_FLAG_RSTR+GMM_FLAG_INAN)
         istat = gmm_get ('BUSPER_3d_digf',BUSPER_3d_digf,meta_busper)
         BUSPER_3d_digf = BUSPER_3d
      endif
!     __________________________________________________________________
!
      return
      end

