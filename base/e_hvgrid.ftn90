!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r e_hvgrid -
!
      subroutine e_hvgrid (F_var_S, F_datev, F_unit, F_ni,F_nj,F_nk,&
                                   F_grd_S, F_ig1,F_ig2,F_ig3,F_ig4,&
                                                     F_list,F_nlist )
      implicit none
#include <arch_specific.hf>
!
      character* (*) F_var_S,F_grd_S
      integer F_datev,F_unit,F_ni,F_nj,F_nk, &
              F_ig1,F_ig2,F_ig3,F_ig4,F_nlist
      integer F_list(F_nlist)
!author 
!    Michel Desgagne - Fall 2012

      integer,external :: fstinf,fstprm,fstinl
      character*1   tva,grda, grd
      character*4   var
      character*12  labanl
      character*504 msg
      integer nia,nja,nka,g1a,g2a,g3a,g4a,istat,k
      integer key,ni1,nj1,nk1,list(F_nlist),err
      integer dte, det, ipas, p1, p2, p3, g1, g2, g3, g4, bit, &
              dty, swa, lng, dlf, ubc, ex1, ex2, ex3
!
! ---------------------------------------------------------------------
!
      key= fstinf (F_unit,nia,nja,nk1,F_datev,' ',-1,-1,-1,' ',F_var_S)

      if (key.ge.0) then
         err= fstprm (key, dte, det, ipas, nia, nja, nk1, bit, dty,&
                 p1,p2,p3, tva, var, labanl, grda, g1a,g2a,g3a,g4a,&
                                  swa,lng, dlf, ubc, ex1, ex2, ex3 )
         key= fstinl (F_unit, nia, nja, nk1, F_datev, labanl, -1, &
                            p2, p3, tva, var, list, nka, F_nlist)
      else
         nka = 0
      endif

      istat = 0
      do k = 1, nka
         err= fstprm (list(k), dte, det, ipas, ni1, nj1, nk1, bit, dty,&
                         p1, p2, p3, tva, var, labanl, grd, g1, g2, g3,&
                                 g4, swa, lng, dlf, ubc, ex1, ex2, ex3 )
         if (nia.ne.ni1 .or. nja.ne.nj1) then
            msg= 'DIMENSION MISMATCH for '//trim(F_var_S)
            istat = -1
            exit
         elseif (grda.ne.grd .or. g1a.ne.g1 .or. g2a.ne.g2 .or. &
                g3a .ne.g3  .or. g4a .ne.g4) then
            msg= 'GRID MISMATCH for '//trim(F_var_S)
            istat = -1
            exit
         endif
      enddo

      if (F_ni.le.0) then
         if (nka.gt.0) then
            if (F_ni.lt.0) then
               F_ni   = nia  ; F_nj = nja
               F_grd_S= grda ; F_ig1= g1a
               F_ig2  = g2a  ; F_ig3= g3a ; F_ig4= g4a
            endif
         else
            istat = -1
            msg= 'DID NOT FIND '//trim(F_var_S)
         endif
      else
         if (nka.gt.0) then
         if ((F_ni   .ne.nia ) .or. (F_nj .ne.nja) .or. &
             (F_grd_s.ne.grda) .or. (F_ig1.ne.g1a) .or. &
             (F_ig2  .ne.g2a ) .or. (F_ig3.ne.g3a) .or. &
             (F_ig4  .ne.g4a )  ) then
            msg= 'NOT SAME HORIZONTAL GRID for '//trim(F_var_S)
            istat = -1
         endif
         endif
      endif

      if (F_nk.le.0) then
         if (nka.gt.0) then
            F_nk          = nka
         else
            istat = -1
            msg= 'DID NOT FIND '//trim(F_var_S)
         endif
      else
         if (nka.gt.0) then
         if (F_nk .ne. nka ) then
            msg= 'NOT SAME VERTICAL GRID for '//trim(F_var_S)
            istat = -1
         endif
         endif
      endif

      F_list(1:nka) = list(1:nka)

      call handle_error(istat,'e_hvgrid',trim(msg))
!
! ---------------------------------------------------------------------
!
      return
      end
