!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r iniobus - sets up the physics output bus
!
#include "model_macros_f.h"
!
      subroutine iniobus (siz)
!
!implicits
!
      implicit none
!
!author 
!     Desgagne/Lee
!
!revision
! v3_30 - Desgagne M. - new physics interface
!
!object
!	See above
!
!arguments
!       None
!
!implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "dimout.cdk"
#include "lun.cdk"
#include "lctl.cdk"
#include "dcst.cdk"
#include "itf_phy_buses.cdk"
#include "obus.cdk"
#include "outp.cdk"
!
!modules
      integer  doout
      external doout
!*
      integer dostep(MAXSET),dostep_max,siz
      integer i,j,k,m,cnt,bigk,idx
      character*4 udolist_S(maxbus)
      integer udolist_max
!
!------------------------------------------------------------------
!
!  Determine if any output requested at this timestep
!
      siz = 1
      dostep_max = doout(dostep,2)
      Obus_top=0
!
      if (dostep_max.le.0) return
!
!     Build short list of possible outputs on this timestep only
      cnt = 0
      do k=1, Outp_sets
         Outp_dostep_L(k) = .false.
         do m=1, dostep_max
            if ( Outp_step(k).eq. dostep(m) ) then
                 Outp_dostep_L(k) = .true.
               do j=1,Outp_var_max(k)
                  cnt = cnt+1
                  udolist_S(cnt) =  Outp_var_S(j,k)
                  do i=1,cnt-1
                     if (udolist_S(cnt).eq.udolist_S(i)) exit
                  enddo
                  if (i.le.cnt-1) cnt=cnt-1
               enddo
            endif
         enddo
      enddo

!   Determine the number of variables to be outputted from each bus 
!   bigk counts the number of ni rows in the output bus.
!
      k=0
      bigk = 1
      do i = 1, P_bper_out
         idx=p_bper_idx(i)
         do j=1,cnt
            if (udolist_S(j).eq.peron(idx)(1:4)) then
                k=k+1
                obus_var_S(k)=peron(idx)(1:4)
                obus_bus_S(k)='P'
                obus_offset(k)=bigk
                obus_idx(k)=idx
                obus_addr(k)=perpar(idx,1)
                obus_stag(k)=perpar(idx,4)
                obus_mult(k)=perpar(idx,6)
                obus_mul(k)=1.0
                obus_add(k)=0.0
                if (perpar(idx,5).gt.p_ni) then
                    obus_shp(k)= G_nk+2
                else
                    obus_shp(k)= 1
                endif
                if (peron(idx)(1:4).eq.'LA') obus_mul(k)=180./Dcst_pi_8
                if (peron(idx)(1:4).eq.'SD') obus_mul(k)=100.
!               Should use flag from Dynamics to determine obus_add(long)
                if (peron(idx)(1:4).eq.'LO') then
                    obus_mul(k)=180./Dcst_pi_8
                endif
                bigk = bigk + obus_shp(k)*obus_mult(k)
            endif
         enddo
      enddo

      do i = 1, P_bvol_out
         idx=p_bvol_idx(i)
         do j=1,cnt
            if (udolist_S(j).eq.volon(idx)(1:4)) then
                k=k+1
                obus_var_S(k)=volon(idx)(1:4)
                obus_bus_S(k)='V'
                obus_offset(k)=bigk
                obus_idx(k)=idx
                obus_addr(k)=volpar(idx,1)
                obus_stag(k)=volpar(idx,4)
                obus_mult(k)=volpar(idx,6)
                obus_mul(k)=1.0
                obus_add(k)=0.0
                if (volpar(idx,5).gt.p_ni) then
                    obus_shp(k)= G_nk+2
                else
                    obus_shp(k)= 1
                endif
                bigk = bigk + obus_shp(k)*obus_mult(k)
            endif
         enddo
      enddo

      Obus_top=k
      siz = bigk
      if (Obus_top.eq.0) Outp_dostep_L(1:Outp_sets) = .false.
!
      return
      end
