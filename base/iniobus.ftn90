!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r iniobus - sets up the physics output bus
!
#include "model_macros_f.h"
!
      subroutine iniobus (siz)
!
!implicits
!
      implicit none
!
!author 
!     Desgagne/Lee
!
!revision
! v3_30 - Desgagne M. - new physics interface
! v4_40 - Lee V.      - add mosaic tiles structure
!
!object
!	See above
!
!arguments
!       None
!
!implicits
#include <arch_specific.hf>
#include <rmnlib_basics.hf>
#include <clib_interface.cdk>
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "dimout.cdk"
#include "lun.cdk"
#include "lctl.cdk"
#include "dcst.cdk"
#include "obus.cdk"
#include "outp.cdk"
!
!modules
      integer,external :: doout,phy_getindx3

      integer,parameter :: MAXBUS = 1000
      integer,parameter :: BUSPAR_I0=1
      integer,parameter :: BUSPAR_NIK=2
      integer,parameter :: BUSPAR_INIT=3
      integer,parameter :: BUSPAR_STAG=4
      integer,parameter :: BUSPAR_ESP=5
      integer,parameter :: BUSPAR_FMUL=6
      integer,parameter :: BUSPAR_NK=7
      integer,parameter :: BUSPAR_MOSAIC=8
      integer,parameter :: BUSPAR_MAXPAR=8

      integer dostep(MAXSET),dostep_max,siz
      integer i,j,k,m,cnt,bigk,idx
      character(len=4) :: udolist_S(MAXBUS)
      character(len=32) :: varname_S,outname_S,inname_S,bus_S
      integer :: istat,index,param(BUSPAR_MAXPAR)
!
!------------------------------------------------------------------
!
!  Determine if any output requested at this timestep
!
      siz = 1
      dostep_max = doout(dostep,2)
      Obus_top=0
!
      if (dostep_max.le.0) return
!
!     Build short list of possible outputs on this timestep only
      cnt = 0
      do k=1, Outp_sets
         Outp_dostep_L(k) = .false.
         do m=1, dostep_max
            if ( Outp_step(k).eq. dostep(m) ) then
                 Outp_dostep_L(k) = .true.
               do j=1,Outp_var_max(k)
                  cnt = cnt+1
                  udolist_S(cnt) =  Outp_var_S(j,k)
                  do i=1,cnt-1
                     if (udolist_S(cnt).eq.udolist_S(i)) exit
                  enddo
                  if (i.le.cnt-1) cnt=cnt-1
               enddo
            endif
         enddo
      enddo

!   Determine the number of variables to be outputted from each bus 
!   bigk counts the number of ni rows in the output bus.
!
      k=0
      bigk = 1

      do j=1,cnt
         varname_S = ' '
         outname_S = udolist_S(j)
         inname_S = ' '
         bus_S = ' '
         istat = phy_getindx3(varname_S,outname_S,inname_S,bus_S,index,param,BUSPAR_MAXPAR)
         if (.not.RMN_IS_OK(istat)) cycle
         istat = clib_toupper(bus_S)
         if (Lctl_step.ne.0 .and. bus_S=='E') cycle
         k=k+1
         obus_var_S(k) = udolist_S(j)(1:4)
         obus_bus_S(k) = bus_S(1:1)
         obus_offset(k) = bigk
         obus_idx(k) = index
         obus_addr(k) = param(BUSPAR_I0)
         obus_stag(k) = param(BUSPAR_STAG)
         obus_mult(k) = param(BUSPAR_FMUL)
         obus_shp(k) = param(BUSPAR_NK)
         obus_mosaic(k) = param(BUSPAR_MOSAIC)
         obus_mul(k) = 1.0
         obus_add(k) = 0.0
         if (udolist_S(j)(1:4).eq.'LA  ') obus_mul(k)=180./Dcst_pi_8
         if (udolist_S(j)(1:4).eq.'LO  ') obus_mul(k)=180./Dcst_pi_8
         if (udolist_S(j)(1:4).eq.'SD  ') obus_mul(k)=100.
         bigk = bigk + obus_shp(k)*obus_mult(k)*(obus_mosaic(k)+1)
      enddo

      Obus_top=k
      siz = bigk
      if (Obus_top.eq.0) Outp_dostep_L(1:Outp_sets) = .false.
!
      return
      end
