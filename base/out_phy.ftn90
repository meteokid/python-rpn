!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!opyright (C) 2001  MSC-RPN COMM  %%%MC2%%%
!**s/r out_phy
#include "model_macros_f.h"
!
      subroutine out_phy ( bus_o, F_ni, F_nj, stepno )
      use out_vref_mod, only: out_vref

      implicit none
!
      integer F_ni,F_nj,ni,nj,stepno
      real bus_o(F_ni*F_nj,*)
!
!AUTHOR     Michel Desgagne                July 2004 (MC2)
!
!REVISION
! v3_20 - Lee V.            -  initial GEMDM version
! v3_21 - Lee V.            -  bugfix for LAM output
! v3_30 - McTaggart-Cowan R.-  allow for user-defined domain tag extensions
! v3_31 - Lee V.            - kind is set to 2 (press) for 2D fields, not -1
! v4_03 - Lee V.            - modification of Out_etik_S in out_sgrid only
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_06 - Lee V.            - out_sgrid,out_href interface changed
! v4_40 - Lee V.            - add mosaic output, pressure output
!
!
!OBJECT
!    Gather the index of physics variables to write on disk 
!    for the current timestep.
!
!ARGUMENTS
!    NAMES     I/O  TYPE  A/S        DESCRIPTION
!
!   fni         I    I    S    folded dimension along X
!   fnj         I    I    S    folded dimension along Y
!   l_ni        I    I    S    computational hor. dimension along X
!   l_nj        I    I    S    computational hor. dimension along Y
!   ni          I    I    S    regular dimension along X
!   nj          I    I    S    regular dimension along Y
!   stepno      I    I    S    step number
!
!IMPLICIT
#include "gmm.hf"
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "dcst.cdk"
#include "lctl.cdk"
#include "lun.cdk"
#include "out3.cdk"
#include "geomn.cdk"
#include "init.cdk"
#include "rstr.cdk"
#include "out.cdk"
#include "itf_phy_buses.cdk"
#include "obus.cdk"
#include "grd.cdk"
#include "grid.cdk"
#include "level.cdk"
#include "outp.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "vt1.cdk"
#include "cstv.cdk"
#include "schm.cdk"
!
!*
      type(gmm_metadata) :: mymeta
      character*4 ext_S
      character*6 etikadd_S
      character*15 datev,pdate
      character*1024 filen
      integer i,j,k,mult,mosaic,cnt,nko,nko_t,levset,ii,jj,kk,ip3,ig1,gridset
      integer, dimension (:), allocatable :: indo,indo_t,irff
      integer key,err,bcs_ext,unf,cobussiz,offbo,kind,istat
      integer grille_x0,grille_x1,grille_y0,grille_y1
      logical periodx_L
      real wlnpi_m(l_ni,l_nj,0:G_nk+1), wlnpi_t(l_ni,l_nj,G_nk+2)
      real px_m(l_ni,l_nj,G_nk+1),px_t(l_ni,l_nj,G_nk+2)
      real p0(l_ni,l_nj),st1o(l_ni,l_nj)
      real, dimension(:), allocatable::prprlvl,rff 
      real, dimension(:,:), allocatable :: cobusval
      real, dimension(:,:,:), allocatable :: buso_pres
      real*8 dayfrac
      real*8, parameter :: sec_in_day = 86400.0d0
!----------------------------------------------------------------------
!
      if (Obus_top.le.0) then
         if (Lun_out.gt.0) write(Lun_out,7002) Lctl_step
         goto 887
      else
         if (Lun_out.gt.0) write(Lun_out,7001) Lctl_step,trim(Out_laststep_S)
      endif
!
!     setup of ip3 and modifs to label
!
      call tmg_start0(67, 'OUT_PHY  ')
      ip3=0
      etikadd_S = ' '
      ext_S=""
      if (Out3_ip3.eq.-1) ip3 = stepno
      if (Out3_ip3.gt.0 ) ip3 = Out3_ip3

      call v4d_out_ipext (ip3, ext_S, etikadd_S)

!     setup of filename extension if needed
      if ( ((Init_balgm_L).and.(.not.Rstri_idon_L)).and. &
           ((stepno.gt.(Init_dfnp-1)/2)) ) &
             ext_S = '_dgf'

!     get st1 for reference field output
      istat = gmm_get(gmmk_st1_s,st1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'out_phy ERROR at gmm_get(st1)'
      p0(1:l_ni,1:l_nj) = exp(st1(1:l_ni,1:l_nj))*Cstv_pref_8
!        Log-pressure on momentum and thermo levels,
!        with extra momentum levels at top (k=0) and surface (k=G_nk+1)
!        and with an extra thermo level at surface (k=G_nk+2)
!
      wlnpi_m(:,:,0)= Cstv_Ztop_8
      do k=1,G_nk+1
         do j=1,l_nj
         do i=1,l_ni
            wlnpi_m(i,j,k) = Ver_a_8%m(k) + Ver_b_8%m(k)*st1(i,j)
            wlnpi_t(i,j,k)=.5d0*(wlnpi_m(i,j,k)+wlnpi_m(i,j,k-1))
          enddo
          enddo
      enddo
      wlnpi_t (:,:,G_nk+2) = wlnpi_m (:,:,G_nk+1)
!
      if (Schm_autobar_L)  wlnpi_t(:,:,1) = Cstv_ztop_8


!########## REGULAR OUTPUT #######################################
!
!     ON sortie_p sets
!

      allocate (rff(Outp_multxmosaic),irff(Outp_multxmosaic))

      do 120 kk=1,Outp_sets
         if ( Outp_dostep_L(kk) )then
         periodx_L=.false.
         gridset = Outp_grid(kk)
         levset= Outp_lev(kk)
         if (.not.G_lam .and. (Grid_x1(gridset)-Grid_x0(gridset)+1).eq. G_ni ) periodx_L= .true.
         ig1 = Grid_ig1(gridset)
         bcs_ext = 0
         if (G_lam) bcs_ext = Grd_bsc_ext1
         grille_x0 = max( 1   +bcs_ext, Grid_x0(gridset) )
         grille_x1 = min( G_ni-bcs_ext, Grid_x1(gridset) )
         grille_y0 = max( 1   +bcs_ext, Grid_y0(gridset) )
         grille_y1 = min( G_nj-bcs_ext, Grid_y1(gridset) )
         if (G_lam .and. &
              ( grille_x0.ne.Grid_x0(gridset).or. &
              grille_x1.ne.Grid_x1(gridset).or. &
              grille_y0.ne.Grid_y0(gridset).or. &
              grille_y1.ne.Grid_y1(gridset) ) ) &
              ig1=Grid_ig1(gridset)+100
         call out_sgrid(grille_x0,grille_x1,grille_y0,grille_y1, &
              ig1,Grid_ig2(gridset), &
              periodx_L, Grid_stride(gridset), &
              Grid_etikext_s(gridset),etikadd_S )
         Out_prefix_S(1:1) = 'p'
         Out_prefix_S(2:2) = Level_typ_S(levset)

         call out_sfile (Out3_closestep,stepno,ip3,ext_S)

         call out_href(Geomn_longs,Geomn_latgs)


         if (Level_typ_S(levset).eq.'M') then
! Preparation for Model level output
             call out_vref(p0,l_minx,l_maxx,l_miny,l_maxy,ig1=ig1)
         else
! Preparation for Pressure output
             call out_vref(Level(1:Level_max(levset),levset),ig1=ig1)
         endif

!_________________________________________________________________
!
!     2.0    Output 2D variables
!_________________________________________________________________
!     output solo 2D fields on 0mb (pressure)

!     multiple 2D fields and mosaic tiles are stored in
!     slices of NI where the order is as follows:
!     Example is for Mult=3, mosaic = 3
!     1 (multiple 1)
!     2 (multiple 2)
!     3 (multiple 3)
!     1.01 (aggregate of tile 1 for multiple 1
!     2.01 (aggregate of tile 1 for multiple 2
!     3.01 (aggregate of tile 1 for multiple 3
!     1.02 (aggregate of tile 2 for multiple 1
!     2.02 (aggregate of tile 2 for multiple 2
!     3.02 (aggregate of tile 2 for multiple 3
!     1.03 (aggregate of tile 2 for multiple 1
!     2.03 (aggregate of tile 2 for multiple 2
!     3.03 (aggregate of tile 2 for multiple 3

         do 30  ii=1, Outp_var_max(kk)
         do 20 j=1,Obus_top
            if ( Outp_var_S(ii,kk).eq. Obus_var_S(j) ) then
               if (obus_shp(j).eq.1) then
!                  2D field - on 0mb
                   if ( obus_mult(j).eq.1.and.obus_mosaic(j).eq.0) then
!                     2d non multiple, non mosaic field, 0mb field,kind=2
                      call ecris_fst2(bus_o(1,obus_offset(j)), &
                          1,l_ni,1,l_nj,0.0,obus_var_s(j), &
                          Obus_mul(j),Obus_add(j),2,1,1,1,  &
                          Outp_nbit(ii,kk) )
                   else
!                     2D (multiple) field - on arbitrary levels,kind=3
                      do mult=1,obus_mult(j)
                         rff(mult)= mult
                         irff(mult)=mult 
                      enddo
                      cnt=obus_mult(j)
                      if(obus_mosaic(j).gt.0) then
!                     Add to output if Mosaic field found
                         do mosaic=1,obus_mosaic(j)
                         do mult=1,obus_mult(j)
                               cnt=cnt+1
                               rff(cnt)=mult*1.0 + mosaic/100.
                               irff(cnt)=cnt
                         enddo
                         enddo
                      endif
                      call ecris_fst2(bus_o(1,obus_offset(j)), &
                           1,l_ni,1,l_nj,rff,obus_var_s(j), &
                           Obus_mul(j),Obus_add(j),3, cnt, &
                           irff,cnt, Outp_nbit(ii,kk) )
                   endif
               endif
            endif
   20    continue
   30    continue

! 3D output only
         if (Level_typ_S(levset).eq.'M') then
!_______________________________________________________________________
!
!     3.0a    Output of 3D Physics Variables on Eta levels
!_______________________________________________________________________
             allocate (indo_t( min(Level_max(levset),Level_thermo) ))
             allocate (indo( min(Level_max(levset),Level_momentum) ))
             call out_slev(Level(1,levset), Level_max(levset), &
                        Level_thermo,indo_t,nko_t)
             call out_slev(Level(1,levset), Level_max(levset), &
                        Level_momentum,indo,nko)
! For 3D field 
             kind=Level_kind_ip1
             do 50  ii=1, Outp_var_max(kk)
             do 40 j=1,Obus_top
               if ( Outp_var_S(ii,kk).eq. Obus_var_S(j) ) then
!
                    if (obus_shp(j).gt.1) then
!                   3D field
                       if (obus_stag(j).eq.1) then ! thermo
                           call ecris_fst2(bus_o(1,obus_offset(j)), &
                             1,l_ni,1,l_nj,Ver_hyb%t,obus_var_s(j), &

                             Obus_mul(j),Obus_add(j),kind,G_nk+2,indo_t,nko_t, &
                             Outp_nbit(ii,kk) )
                       else  ! momentum
                        call ecris_fst2(bus_o(1+(l_ni*l_nj),obus_offset(j)), &
                            1,l_ni,1,l_nj,Ver_hyb%m,obus_var_s(j), &
                            Obus_mul(j),Obus_add(j),kind,G_nk+1,indo,nko, &
                            Outp_nbit(ii,kk) )
                       endif
                    endif
               endif
   40        continue
   50        continue
             deallocate(indo,indo_t)
         elseif (Level_typ_S(levset).eq.'P') then
!_______________________________________________________________________
!
!     7.0B   Output UU,VV,UV on PRESSURE levels
!_______________________________________________________________________
!
!            Set kind to 2 for pressure output
             kind=2
             nko=Level_max(levset)
             allocate(indo(nko),buso_pres(l_ni,l_nj,nko),prprlvl(nko) ) 
             do i = 1, nko
                indo(i)=i
                prprlvl(i) = level(i,levset) * 100.0
             enddo
! pressure output
             do 70 ii=1, Outp_var_max(kk)
             do 60 j=1,Obus_top
                if ( Outp_var_S(ii,kk).eq. Obus_var_S(j) ) then

                   if (Obus_shp(j).gt.1) then
!                          Found 3D field 
                           offbo = Obus_offset(j)
                        if (Obus_stag(j).eq.1 ) then
!                          Found 3D field on thermo
!                          Calculate vertical derivative of the
!                          current array with respect to lnph
!
                           call verder( px_t,bus_o(1,offbo),           &
                                wlnpi_t,2.0,2.0, 1,l_ni,1,l_nj,G_nk+2, &
                                p_offi+1,p_offi+p_ni,                  &
                                p_offj+1,p_offj+p_nj)
                           call prgen( buso_pres,bus_o(1,offbo),      &
                                px_t,wlnpi_t,prprlvl,nko,Out3_cubzt_L,     &
                                1,l_ni,1,l_nj,G_nk+2,                  &
                                p_offi+1,p_offi+p_ni,                  &
                                p_offj+1,p_offj+p_nj)
!
                           call ecris_fst2(buso_pres,1,l_ni,1,l_nj,    &
                               level(1,levset),Obus_var_s(j),          &
                               Obus_mul(j),Obus_add(j),kind,       &
                               nko,indo,nko,Outp_nbit(ii,kk) )
!
                        else
!                          Found 3D field on momentum
!                          Calculate vertical derivative of the
!                          current array with respect to lnph
!
                           call verder( px_m,bus_o(1+(l_ni*l_nj),offbo),     &
                                wlnpi_m(1,1,1),2.0,2.0, 1,l_ni,1,l_nj,G_nk+1, &
                                p_offi+1,p_offi+p_ni,                  &
                                p_offj+1,p_offj+p_nj)
                           call prgen( buso_pres,bus_o(1+(l_ni*l_nj),offbo),  &
                                px_m,wlnpi_m(1,1,1),prprlvl,nko,Out3_cubzt_L, &
                                1,l_ni,1,l_nj,G_nk+1,                  &
                                p_offi+1,p_offi+p_ni,                  &
                                p_offj+1,p_offj+p_nj)
!
                           call ecris_fst2(buso_pres,1,l_ni,1,l_nj,    &
                               level(1,levset),Obus_var_s(j),          &
                               Obus_mul(j),Obus_add(j),kind,       &
                               nko,indo,nko,Outp_nbit(ii,kk) )

                        endif
                   endif
                endif
 60          continue
 70          continue
             deallocate(buso_pres)
             deallocate(indo,prprlvl)
         endif
!
         call out_cfile
         endif !dostep
!
  120 continue
      deallocate(rff,irff)

      call tmg_stop0(67)

 887  continue
!
 7001 format(/,' OUT_PHY- WRITING PHYSICS OUTPUT FOR STEP (',I8,') in directory: ',a)
 8001 format(/,' OUT_PHY- WRITING CASCADE OUTPUT FOR STEP (',I8,') in directory: ',a)
 7002 format(/,' OUT_PHY- NO PHYSICS OUTPUT FOR STEP (',I8,')')
!!
!----------------------------------------------------------------------
!
 999  return
      end


