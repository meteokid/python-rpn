!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r psadj - Adjust surface pressure (FOR CLIMATE APPLICATIONS)
!
      subroutine psadj
      implicit none
#include <arch_specific.hf>

!author
!     Andre Plante from hzd_main      
!
!revision
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4.5  - Qaddouri-PLante   - YY version
!

#include "gmm.hf"
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "grd.cdk"
#include "lctl.cdk"

      logical, save :: done_L=.false.
      integer err, nlod, key1(2), i, j, istat, isize
      integer offi, offj, ierr, status 
      real wk0(l_minx:l_maxx,l_miny:l_maxy), wk1(l_minx:l_maxx,l_miny:l_maxy) 
      real*8 :: bbb_8,avg_8(3)
      real*8, save :: savg_8(3)
      real*8, parameter ::  ZERO_8 = 0.0, ONE_8 = 1.d0
!     _________________________________________________________________
!
      if (.not.Schm_psadj_L) return

      istat= gmm_get(gmmk_st0_s,st0)
      istat= gmm_get(gmmk_st1_s,st1)
      if (Grd_yinyang_L) istat= gmm_get(gmmk_p00_s,p00)

      if (Lun_debug_L) write(Lun_out,1001)

!     Note : Lctl_step.eq.1 and .not.done_L are true for the first time step
!            In addition .not.done_L will be true for first step in restart

!$omp parallel private(i)
      if(Lctl_step.eq.1.or.(.not.Grd_yinyang_L))then
!$omp do
         do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            wk0(i,j)= (exp(st1(i,j)) - 1.) * Cstv_pref_8
         end do
         end do
!$omp enddo
      endif
!$omp do
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e 
         wk1(i,j)= (exp(st0(i,j)) - 1.) * Cstv_pref_8
      end do
      end do
!$omp enddo
!$omp end parallel

      if (Grd_yinyang_L) then

         offi = Ptopo_gindx(1,Ptopo_myproc+1)-1
         offj = Ptopo_gindx(3,Ptopo_myproc+1)-1
         
         avg_8 = ZERO_8
         do j=1+pil_s,l_nj-pil_n
         do i=1+pil_w,l_ni-pil_e
            avg_8(1)= avg_8(1) + Geomg_area_8(i,j)*Geomg_mask_8(i,j)*wk1(i,j)
         enddo
         enddo
         isize=1
         if(.not.done_L)then
            isize=2
            do j=1+pil_s,l_nj-pil_n
            do i=1+pil_w,l_ni-pil_e
               avg_8(2)= avg_8(2) + Geomg_area_8(i,j)*Geomg_mask_8(i,j)
            enddo
            enddo
         endif
         if(Lctl_step.eq.1)then
            isize=3
            do j=1+pil_s,l_nj-pil_n
            do i=1+pil_w,l_ni-pil_e
               avg_8(3)= avg_8(3) + Geomg_area_8(i,j)*Geomg_mask_8(i,j)*wk0(i,j)
            enddo
            enddo
         endif

         call RPN_COMM_allreduce(avg_8,savg_8,isize,&
              "MPI_DOUBLE_PRECISION","MPI_SUM","MULTIGRID",ierr)

         if (Lctl_step.eq.1) p00(1)= savg_8(3)/savg_8(2)
         avg_8(1)= savg_8(1)/savg_8(2)
         bbb_8   = p00(1) - avg_8(1)

         call RPN_COMM_bcast(bbb_8,1,'MPI_DOUBLE_PRECISION',0,'GRID',ierr)

         done_L=.true.

      else
         call horwavg ( bbb_8, wk0, wk1, l_minx,l_maxx,l_miny,l_maxy)
      endif

!     Redistribute the average mass loss at the surface, ...

!$omp parallel private(i)
!$omp do
      do j= 1+pil_s, l_nj-pil_n 
      do i= 1+pil_w, l_ni-pil_e
         st0(i,j)= log(ONE_8+ (wk1(i,j) + bbb_8) / Cstv_pref_8)
      end do
      end do
!$omp enddo
!$omp end parallel
    
 1001 format(/,3X,'ADJUST SURFACE PRESSURE TO FORCE MASS CONSERVATION')
!     _________________________________________________________________
!
      return
      end
