!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r psadj - Adjust surface pressure (FOR CLIMATE APPLICATIONS)
!
#include "model_macros_f.h"
!
      subroutine psadj
!
      implicit none
!
!author
!     Andre Plante from hzd_main
!
!revision
! v4_05 - Lepine M.         - VMM replacement with GMM
!
!object
!	
!arguments
!     none
!
!implicits
#include "gmm.hf"
#include "var_gmm.cdk"
#include "glb_ld.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "vt0.cdk"
#include "vt1.cdk"
!
      integer err, nlod, key1(2), i, j
      real wk0(LDIST_SHAPE), wk1(LDIST_SHAPE)
      real*8  ONE_8, bbb_8
      parameter( ONE_8 = 1. )
!*
!     _________________________________________________________________
!

      if(.not.Schm_psadj_L)return

      gmmstat = gmm_get(gmmk_st0_s,st0,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'psadj ERROR at gmm_get(st0)'
      gmmstat = gmm_get(gmmk_st1_s,st1,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'psadj ERROR at gmm_get(st1)'
!
      if (Lun_debug_L) write(Lun_out,1001)
!
!$omp parallel
!$omp do
      do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            wk0(i,j) = st0(i,j)
            wk1(i,j) = st1(i,j)
         end do
         call vsexp (wk0(1+pil_w,j),wk0(1+pil_w,j),(l_ni-pil_e-pil_w))
         call vsexp (wk1(1+pil_w,j),wk1(1+pil_w,j),(l_ni-pil_e-pil_w))
         do i= 1+pil_w, l_ni-pil_e 
            wk0(i,j) = (wk0(i,j)-1.)*Cstv_pref_8
            wk1(i,j) = (wk1(i,j)-1.)*Cstv_pref_8
         end do
      end do
!$omp enddo
!
!$omp single
      call horwavg ( bbb_8, wk0, wk1, LDIST_DIM )
!$omp end single
!
!     Redistribute the average mass loss at the surface, ...
!
!$omp do
      do j= 1+pil_s, l_nj-pil_n 
         do i= 1+pil_w, l_ni-pil_e 
            wk1(i,j) = wk1(i,j) + bbb_8
         end do
         do i= 1+pil_w, l_ni-pil_e
            st1(i,j)= log(ONE_8+dble(wk1(i,j)/Cstv_pref_8))
         end do
      end do
!$omp enddo
!
!$omp end parallel
!     
 1001 format(/,3X,'ADJUST SURFACE PRESSURE TO FORCE MASS CONSERVATION')
!
      return
      end
