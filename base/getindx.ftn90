!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r getindx2
!
      subroutine getindx2 ( F_vn_S, F_bus_S, F_deb, F_nm, F_init )
      implicit none
#include <arch_specific.hf>
!
      character*(*) F_vn_S
      character*(*) F_bus_S
      integer F_deb,F_nm,F_init
!
!author   
!     Michel Desgagne       Nov   1995
!
!revision
! v2_31 - Desgagne M.     - initial version (from MC2 v4.9.1)
! v3_30 - Desgagne M.     - new physics interface
!
!object
!     Obtain starting index "F_deb", length "F_nm" and init requirement
!     "F_init" for variable "F_vn_S" on bus "F_bus_S".
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
!  F_vn_S       I            Name of the variable
!  F_bus_S      I            F_bus_S (D,P,V,G)
!  F_deb        O            Starting index on F_bus_S
!  F_nm         O            Length of variable F_vn_S
!  init         O            Initialysation requirement (1=yes)
!----------------------------------------------------------------
!
!*
#include <clib_interface.cdk>

      integer,external :: phy_getindx3
      integer,parameter :: MAX_PARAMS = 8
      integer,parameter :: BUSPAR_I0=1
      integer,parameter :: BUSPAR_NIK=2
      integer,parameter :: BUSPAR_INIT=3

      character(len=32) :: varname_S
      character(len=4) :: outname_S,bus_S,bus0_S,inname_S
      integer :: busidx,params(MAX_PARAMS),istat
!-------------------------------------------------------------------
!
      F_deb  = -1
      F_nm   =  0
      F_init = -1

      bus0_S = adjustl(F_bus_S)
      istat = clib_tolower(bus0_S)

      varname_S = F_vn_S
      outname_S = ' '
      inname_S = ' '
      istat = phy_getindx3(varname_S,outname_S,inname_S,bus_S,busidx,params,MAX_PARAMS)

      if (istat >= 0) then
         istat = clib_tolower(bus_S)
         if (bus0_S(1:1)==bus_S(1:1) .or. bus0_S=='any') then
            F_deb   = params(BUSPAR_I0)
            F_nm    = params(BUSPAR_NIK)
            F_init  = params(BUSPAR_INIT)
         endif
      endif

      if ((F_deb <= 0).and.(bus0_S.ne.'any')) then
         write (6,910) F_vn_S,'BUS'//trim(F_bus_S)
         call flush(6)
      endif

 910  format (/1x,'===> ABORT IN GETINDX: COULD NOT FIND'/ &
               1x,"     VARIABLE '",a8,"' ON '",a6,"'."/)
!
!-------------------------------------------------------------------
!
 701  return
      end
  
      subroutine getindx ( F_vn_S, F_bus_S, F_deb, F_nm, F_init )
      implicit none
!
      character*(*) F_vn_S
      character*(*) F_bus_S
      integer F_deb,F_nm,F_init
!
      call stop_mpi(-1,'getindx','getindx has been replaced by getindx2')
!
      return
      end
