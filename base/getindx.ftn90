!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r getindx2
!
#include "model_macros_f.h"
!
      subroutine getindx2 ( F_vn_S, F_bus_S, F_deb, F_nm, F_init )
      implicit none
!
      character*(*) F_vn_S
      character*(*) F_bus_S
      integer F_deb,F_nm,F_init
!
!author   
!     Michel Desgagne       Nov   1995
!
!revision
! v2_31 - Desgagne M.     - initial version (from MC2 v4.9.1)
! v3_30 - Desgagne M.     - new physics interface
!
!object
!     Obtain starting index "F_deb", length "F_nm" and init requirement
!     "F_init" for variable "F_vn_S" on bus "F_bus_S".
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
!  F_vn_S       I            Name of the variable
!  F_bus_S      I            F_bus_S (D,P,V,G)
!  F_deb        O            Starting index on F_bus_S
!  F_nm         O            Length of variable F_vn_S
!  init         O            Initialysation requirement (1=yes)
!----------------------------------------------------------------
!
!implicites
#include "itf_phy_buses.cdk"
!
!*
      integer i,init
!-------------------------------------------------------------------
!
      F_deb  = -1
      F_nm   =  0
      F_init = -1

      if ((F_bus_S.eq.'ENT').or.(F_bus_S.eq.'ANY')) then
         do i=1,p_bent_top
            if (F_vn_S.eq.entnm(i)) then
               F_deb   = entpar(i,1)
               F_nm    = entpar(i,2)
               F_init  = entpar(i,3)
               F_bus_S = 'ENT'
               goto 701
            endif
         end do
         if ((F_deb .le. 0).and.(F_bus_S.ne.'ANY')) &
         write (6,910) F_vn_S,'BUSENT'
      endif

      if ((F_bus_S.eq.'DYN').or.(F_bus_S .eq. 'ANY')) then
         do i=1,p_bdyn_top
            if (F_vn_S.eq.dynnm(i)) then
               F_deb   = dynpar(i,1)
               F_nm    = dynpar(i,2)
               F_init  = dynpar(i,3)
               F_bus_S = 'DYN'
               goto 701
            endif
         end do
         if ((F_deb .le. 0).and.(F_bus_S .ne. 'ANY')) &
         write (6,910) F_vn_S,'BUSDYN'
      endif

      if ((F_bus_S.eq.'PER').or.(F_bus_S .eq. 'ANY')) then
         do i=1,p_bper_top
            if (F_vn_S.eq.pernm(i)) then
               F_deb   = perpar(i,1)
               F_nm    = perpar(i,2)
               F_init  = perpar(i,3)
               F_bus_S = 'PER'
               goto 701
            endif
         end do
         if ((F_deb .le. 0).and.(F_bus_S .ne. 'ANY')) &
         write (6,910) F_vn_S,'BUSPER'
      endif

      if ((F_bus_S.eq.'VOL').or.(F_bus_S .eq. 'ANY')) then
         do i=1,p_bvol_top
            if (F_vn_S.eq.volnm(i)) then
               F_deb   = volpar(i,1)
               F_nm    = volpar(i,2)
               F_init  = volpar(i,3)
               F_bus_S = 'VOL'
               goto 701
            endif
         end do
         if ((F_deb .le. 0).and.(F_bus_S .ne. 'ANY')) &
         write (6,910) F_vn_S,'BUSVOL'
      endif
!
 910  format (/1x,'===> ABORT IN GETINDX: COULD NOT FIND'/ &
               1x,"     VARIABLE '",a8,"' ON '",a6,"'."/)
!
!-------------------------------------------------------------------
!
 701  return
      end
  
      subroutine getindx ( F_vn_S, F_bus_S, F_deb, F_nm, F_init )
      implicit none
!
      character*(*) F_vn_S
      character*(*) F_bus_S
      integer F_deb,F_nm,F_init
!
      call stop_mpi(-1,'getindx','getindx has been replaced by getindx2')
!
      return
      end
