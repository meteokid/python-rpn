!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/p set_xst - compute the time-series grid points
!
#include "model_macros_f.h"
!
      subroutine set_xst 
!
      implicit none
!
!
!author     V. Lee - May 2000 - (from e_gridgef,M.Roch)
!
!revision
! v2_00 - Desgagne/Lee       - initial MPI version
! v2_20 - Lee V.             - converted x,y arrays to real*8
! v2_30 - Dugas B.           - model coordinate calculation are now performed
! v2_30                        with real*8 matrices and cartesian coordinates
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_11 - Lee V.             - inlined function ISORT (for IBM)
!
!object
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
!  F_x_8        I          longitudes in the non-rotated coordinate 
!                          system for PHI grid
!  F_y_8        I          latitudes in the non-rotated coordinate 
!                          system for PHI grid
!----------------------------------------------------------------
!
!implicits
#include "glb_ld.cdk"
#include "lun.cdk"
#include "grd.cdk"
#include "geomn.cdk"
#include "dcst.cdk"
#include "xst.cdk"
!
!*
      integer ni,nj,nstat,ij,oldij,i,j,k,m,n,numi,numj,ierr
      integer, dimension(1) :: pos
      integer wk(MAXSTAT)
      real lat((G_ni+1)*G_nj),lon((G_ni+1)*G_nj), &
           slat(MAXSTAT),slon(MAXSTAT),x(G_ni+1),y(G_nj)
      real*8 cart(3*(G_ni+1)*G_nj),carot(3*(G_ni+1)*G_nj),ri_8(3,3)
      type(station), dimension(:), allocatable :: stn_tmp
!*
!     ---------------------------------------------------------------
!
      ni=G_ni+1
      if (G_lam) ni=G_ni
      nj=G_nj
      if (Lun_out.gt.0) write(Lun_out,1001)
!
!---------------------------------------------------------------
!  Process the time series grid points
!  -------------------------------------------------------------
!
!  1- Determine if the user has specified any stations and whether
!     they are in lat,lon or in gridpoints i,j
!
      Xst_nstat = 0
      nstat = 0
      j = 1
      do while ( (Xst_stn_ij(j)%i .ne. STN_MISSING) .and. &
                 (Xst_stn_ij(j)%j .ne. STN_MISSING) )
         Xst_stn(nstat+1)%i = Xst_stn_ij(j)%i
         Xst_stn(nstat+1)%j = Xst_stn_ij(j)%j
         Xst_stn(nstat+1)%lat = real(STN_MISSING)
         Xst_stn(nstat+1)%lon = real(STN_MISSING)
         Xst_stn(nstat+1)%name = Xst_stn_ij(j)%name
         j = j + 1
         nstat = nstat + 1
      enddo
      j = 1
      do while ( min(abs(Xst_stn_latlon(j)%lat-real(STN_MISSING)),  &
           abs(Xst_stn_latlon(j)%lon-real(STN_MISSING))) > epsilon(1.))
         Xst_stn(nstat+1)%i = STN_MISSING
         Xst_stn(nstat+1)%j = STN_MISSING
         Xst_stn(nstat+1)%lat = Xst_stn_latlon(j)%lat
         Xst_stn(nstat+1)%lon = Xst_stn_latlon(j)%lon
         Xst_stn(nstat+1)%name = Xst_stn_latlon(j)%name
         j = j + 1
         nstat    = nstat + 1
      enddo
!
      if (nstat.le.0) then
!         NO STATIONS ARE REQUESTED
          if (Lun_out.gt.0) write(Lun_out,914)
          return
      endif
!   
      if (Lun_out.gt.0) write(Lun_out,915) nstat
!
!       If any stations are requested, proceed with the next few steps:
!     2- Compute latitudes and longitudes of the original grid
!        on the earth
!
      if (Grd_roule) then
!         ( rotated coordinate system...)
          do i=1,ni
             x(i) = Geomn_longs(i) 
          enddo
          do j=1,nj
             y(j) = Geomn_latgs(j)
          enddo
          call llacar( cart, x, y, ni, nj)
          do i=1,3
          do j=1,3
             ri_8(i,j) = Grd_rot_8(j,i)
          end do
          end do
          call mxma8 (ri_8,1,3,cart,1,3,carot,1,3, 3,3,ni*nj)
          call cartall( lon, lat, carot, ni*nj)
          do i=1,ni*nj
             lon(i) = amod(lon(i) + 360.0,360.0)
          enddo
      else
!         ( not a rotated coordinated system...)
          do j=1,nj
          do i=1,ni
             lon((j-1)*ni+i) = Geomn_longs(i) 
             lat((j-1)*ni+i) = Geomn_latgs(j)
          enddo
          enddo
      endif
!
!     3a- Convert the stations from lat-lon to grid nearest points I-J
!
      call cllaij(lon,lat,nstat,ni,nj)
!
!     3b- Compute the exact lat-lon for the stations corresponding
!     to the given grid points of the time-series stations.
!     Thus, if the user gives the stations in lat-lon, the final
!     stations may or may not be exactly where the user wants
!     but it will be the closest grid point of the model grid.
!
      do n = 1,nstat
         Xst_stn(n)%lat = lat((Xst_stn(n)%j-1)*ni+Xst_stn(n)%i)
         Xst_stn(n)%lon = lon((Xst_stn(n)%j-1)*ni+Xst_stn(n)%i)
      enddo
      Xst_nstat = nstat
!
!     4- Put the stations in increasing order of index in a list
!
      if (nstat > 1) then
         do k=1,nstat
            Xst_stn(k)%index = Xst_stn(k)%i+(Xst_stn(k)%j-1)*ni
         enddo
         allocate(stn_tmp(nstat),stat=ierr)
         if (ierr /= 0) then
            write(Lun_out,1000) 'stn_tmp'
            call handle_error(-1,'set_xst','set_xst')
         endif
         i = 1
         do k=1,nstat
            pos = minloc(Xst_stn(1:nstat)%index)
            stn_tmp(i) = Xst_stn(pos(1))
            Xst_stn(pos(1))%index = ni*nj+1
            i = i+1
         enddo
         Xst_stn(1:nstat) = stn_tmp(1:nstat)
         deallocate(stn_tmp)
      endif
!
! 4-  Re-index the stations after the sorting
!
      if (.not.G_lam) then
         do n=1,nstat
            if ( Xst_stn(n)%i .eq. (ni) ) then
                 Xst_stn(n)%j = 1
                 if (Lun_out.gt.0) write(Lun_out,970)
            endif
         enddo
      endif
!
! 5-  Compute the exact lat-lon for the stations corresponding
!     to the given grid points of the time-series stations.
!     Thus, if the user gives the stations in lat-lon, the final
!     stations may or may not be exactly where the user wants
!     but it will be the closest grid point of the model grid.
!
!
      if (Lun_out.gt.0) then
          write(Lun_out,910)
          do n = 1,nstat
           write(Lun_out,912) n,Xst_stn(n)%name,Xst_stn(n)%i,Xst_stn(n)%j, &
                              Xst_stn(n)%lat,Xst_stn(n)%lon
          enddo
          write(Lun_out,901)
      endif
!
 901  format(' __________________________________________________________________'//)
 910  format(' __________________________________________________________________', &
           /,'  Reordered grid points with ACTUAL lat-lon values and short names', &
           /,' __________________________________________________________________', &
           /,'    N    |        NAME        |   I    |   J    |  LAT   |  LON   |' &
           /,' __________________________________________________________________')
 912  format(1x,I5,'    ',a18,'   ',I5,'    ',I5,'    ',f8.3,' ',f8.3,' ')
 914  format(/,' NO POINTS ARE REQUESTED FOR TIME SERIES.')
 915  format(/,I5,' POINTS ARE SPECIFIED FOR TIME SERIES.')
 950  format('Redundancy NOTED FOR Station: I,J= ',I5,',',I5)
 970  format(/'WARNING (non-LAM GRID): Station I index is G_ni+1 so',  &
           /,' index is then reset to 1.')
 1000 format('Unable to allocate space for ',a)
 1001 format(//,'PROCESSING TIME-SERIES GRID POINTS (S/R SET_XST)', &
              /,'================================================')
!     ---------------------------------------------------------------
!
      return
      end
