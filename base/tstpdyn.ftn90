!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r tstpdyn -  Performs a dynamical timestep of the model
!
#include "model_macros_f.h"
!
      subroutine tstpdyn ( F_fnitraj )
!
      implicit none
#include <arch_specific.hf>
!
      integer F_fnitraj
!
!author
!     Alain Patoine ( after version v1_93 of tstpdyn2 )
!
!revision
! v2_00 - Desgagne M.       - initial MPI version
! v2_10 - Tanguay M.        - store TRAJ for 4D-Var 
! v2_30 - Edouard S.        - introduce Ncn 
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_03 - Tanguay M.        - Adjoint NoHyd configuration
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_20 - Tanguay M.        - Option of storing instead of redoing TRAJ
! v3_21 - Desgagne M.       - introduce new timing routines
! v4_04 - Tanguay M.        - Staggered version TL/AD
! v4_05 - Girard C.         - Added boundary condition for top piloting
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!    
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_fnitraj     I         number of iterations to compute upstream 
!                         positions  
!----------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "schm.cdk"
#include "orh.cdk"
#include "ldnh.cdk"
#include "nl.cdk"
#include "lctl.cdk"
#include "p_geof.cdk" 
#include "vtopo.cdk"

      type(gmm_metadata) :: meta2d
      integer gmmstat, ni, nj, iln
      real dth
      real*8, dimension (:,:,:), allocatable :: rhs_sol, lhs_sol
!
!     ---------------------------------------------------------------
!C    rhs:	Compute rhs of the governing equations
!C    int:	Perform Semi-Lagrangian advection
!C    pre:	Compute non-linear Helmholtz problem (invariant part)
!C    nli:	Compute non-linear components of the r.h.s. of the 
!C              Helmholtz problem and linear and nonlinear components 
!C              of the r.h.s. of the Helmholtz equation
!C    solver:	Linear Helmholtz solver
!C    bac:	Backsubtitution
!     ---------------------------------------------------------------
!
      dth =  Cstv_dt_8/2.

      if (Lun_debug_L) write(Lun_out,1000)
 
      if ( Orh_icn .eq. 1 ) then       ! Compute RHS
     
         call timing_start ( 20, 'RHS      ' )
         call rhs ()
         call timing_stop (20)

      endif

      call timing_start(21, 'ADW      ')
      call itf_adx_main (F_fnitraj)    ! SL Advection
      call timing_stop(21)

      call timing_start(22, 'PRE      ')

      if ( Orh_crank_L .and. Orh_icn.eq.1 ) then
         if (Vtopo_L .and. (Lctl_step .ge. Vtopo_start)) then
            gmmstat = gmm_get(gmmk_fis0_s,fis0,meta2d)
            call var_topo2 (fis0, real(Lctl_step), LDIST_DIM)
            call rpn_comm_xch_halo (fis0,LDIST_DIM,l_ni,l_nj,1,&
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0)
         endif
      endif

      call pre ()
      call timing_stop (22)

      if ( Lun_debug_L ) write (Lun_out,1005) Schm_itnlh

      ni = l_maxx-l_minx+1
      nj = l_maxy-l_miny+1
      allocate (nl_u(ni,nj,l_nk),nl_v(ni,nj,l_nk),nl_t(ni,nj,l_nk), &
                nl_c(ni,nj,l_nk),nl_f(ni,nj,l_nk),nl_b(ni,nj))
      if (.not.Schm_hydro_L) allocate (nl_w(ni,nj,l_nk))

      ni = ldnh_maxx-ldnh_minx+1
      nj = ldnh_maxy-ldnh_miny+1
      allocate ( rhs_sol(ni,nj,l_nk), lhs_sol(ni,nj,l_nk) )

      do iln=1,Schm_itnlh

         call timing_start ( 23, 'NLI      ' )
         call nli (rhs_sol,ni,nj,l_nk)
         call timing_stop (23)

         call timing_start ( 24, 'SOL      ' )
         call sol_main (rhs_sol,lhs_sol,ni,nj, l_nk, iln)
         call timing_stop (24)

         call timing_start ( 25, 'BAC      ' )
         call bac ( lhs_sol, ni,nj,l_nk, iln, Schm_itnlh )

         call timing_stop (25)

      end do

      deallocate (nl_u,nl_v,nl_t,nl_c,nl_f,nl_b,rhs_sol,lhs_sol)
      if (.not.Schm_hydro_L) deallocate (nl_w)
!
!     ---------------------------------------------------------------
!
 1000 format( &
       3X,'PERFORM A DYNAMICAL STEP: (S/R TSTPDYN)', &
      /3X,'========================================',/)
 1005 format( &
       3X,'ITERATING SCHM_ITNLH=',I3,' TIMES TO SOLVE NON-LINEAR ', &
          'HELMHOLTZ PROBLEM')
      return
      end
