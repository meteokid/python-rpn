!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r nest_init -- Initializes nesting data for LAM configuration
!
#include "model_macros_f.h"
!
      subroutine nest_init ()
      implicit none
#include <arch_specific.hf>
!
!author   M. Desgagne - April 2002
!
!revision
! v3_00 - Desgagne M.  - initial version
! v3_03 - Tanguay M.   - Adjoint Lam configuration
! v3_30 - Tanguay M.   - adapt to bcs
! v4_05 - Plante A.    - Top nesting
! v4_05 - Lepine M.    - VMM replacement with GMM
! v4_50 - Lee V.       - Yin-Yang border exchange and cubic mono interp for TR
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "grd.cdk"
#include "vt1.cdk"
#include "tr3d.cdk"
#include "nest.cdk"
#include "geomg.cdk"
#include "lam.cdk"
#include "step.cdk"
#include "lun.cdk"
#include "ptopo.cdk"
!
      character(len=GMM_MAXNAMELENGTH) :: tr_name
      integer i,j,k,n,id,yy,mo,dd,hh,mm,ss,dum,istat
      real, pointer, dimension(:,:,:) :: tr1,trf
!
!     ---------------------------------------------------------------
!
      if (Lun_debug_L) write(Lun_out,1000)

      istat = gmm_get(gmmk_ut1_s , ut1 )
      istat = gmm_get(gmmk_vt1_s , vt1 )
      istat = gmm_get(gmmk_wt1_s , wt1 )
      istat = gmm_get(gmmk_tt1_s , tt1 )
      istat = gmm_get(gmmk_zdt1_s, zdt1)
      istat = gmm_get(gmmk_st1_s , st1 )
      istat = gmm_get(gmmk_qt1_s , qt1 )
      istat = gmm_get(gmmk_nest_q_fin_s, nest_q_fin)
      istat = gmm_get(gmmk_nest_q_s    , nest_q    )
!
!     copying values from UT1 to nest_u variables
!
      if (.not. Lam_ctebcs_L) then

         istat = gmm_get(gmmk_nest_u_fin_s , nest_u_fin )
         istat = gmm_get(gmmk_nest_v_fin_s , nest_v_fin )
         istat = gmm_get(gmmk_nest_w_fin_s , nest_w_fin )
         istat = gmm_get(gmmk_nest_t_fin_s , nest_t_fin )
         istat = gmm_get(gmmk_nest_zd_fin_s, nest_zd_fin)
         istat = gmm_get(gmmk_nest_s_fin_s , nest_s_fin )
         nest_u_fin  = ut1
         nest_v_fin  = vt1
         nest_w_fin  = wt1
         nest_t_fin  = tt1
         nest_s_fin  = st1
         nest_zd_fin = zdt1
         nest_q_fin  = qt1

         do n=1,Tr3d_ntr
            tr_name = 'TR/'//trim(Tr3d_name_S(n))//':P'
            istat = gmm_get(tr_name, tr1)
            tr_name = 'NEST/'//trim(Tr3d_name_S(n))//':F'
      	    istat = gmm_get(tr_name, trf)
            trf = tr1
         end do

      else if (Grd_yinyang_L) then

         istat = gmm_get(gmmk_nest_s_s ,nest_s )
         istat = gmm_get(gmmk_nest_t_s ,nest_t )
         istat = gmm_get(gmmk_nest_w_s ,nest_w )
         istat = gmm_get(gmmk_nest_zd_s,nest_zd)
         istat = gmm_get(gmmk_nest_u_s ,nest_u )
         istat = gmm_get(gmmk_nest_v_s ,nest_v )
         nest_s  = st1
         nest_t  = tt1
         nest_w  = wt1
         nest_zd = zdt1
!     Exchange halos, interpolate and get scalar data for Yin, Yang bcs
         call rpn_comm_xch_halo(nest_s, LDIST_DIM,l_ni,l_nj,1,      &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call yyg_scalbc(st1,nest_s,LDIST_DIM,1)
         call rpn_comm_xch_halo(nest_t, LDIST_DIM,l_ni,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call yyg_scalbc(tt1,nest_t,LDIST_DIM,G_nk)
         call rpn_comm_xch_halo(nest_w, LDIST_DIM,l_ni,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call yyg_scalbc(wt1,nest_w,LDIST_DIM,G_nk)
         call rpn_comm_xch_halo(nest_zd, LDIST_DIM,l_ni,l_nj,G_nk,&
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call yyg_scalbc(zdt1,nest_zd,LDIST_DIM,G_nk)
         nest_q=qt1
         call rpn_comm_xch_halo(nest_q, LDIST_DIM,l_ni,l_nj,G_nk,&
              G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call yyg_scalbc(qt1,nest_q,LDIST_DIM,G_nk)

!        Convert wind to real orientation
!$omp parallel private(i,j)
!$omp do
         do k= 1, G_nk
         do j= 1, l_nj
         do i= 1, l_niu
             ut1   (i,j,k)= ut1 (i,j,k)*Geomg_invcy_8(j)
             nest_u(i,j,k)= ut1 (i,j,k)
         enddo
         enddo
         do j= 1, l_njv
         do i= 1, l_ni
             vt1   (i,j,k)= vt1 (i,j,k)*Geomg_invcyv_8(j)
             nest_v(i,j,k)= vt1 (i,j,k)
         enddo
         enddo
      enddo
!$omp enddo
!$omp end parallel

!        Exchange halos, interpolate and get U,V for Yin, Yang bcs
         call rpn_comm_xch_halo(nest_u,LDIST_DIM,l_niu,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call rpn_comm_xch_halo(nest_v,LDIST_DIM,l_ni,l_njv,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
         call  yyg_vecbc1(ut1,nest_u,nest_v,LDIST_DIM,G_nk)
         call  yyg_vecbc2(vt1,nest_v,nest_u,LDIST_DIM,G_nk)

!        Convert the wind back
!$omp parallel private(i,j)
!$omp do
         do k= 1, G_nk
         do j= 1, l_nj
         do i= 1, l_niu
            ut1(i,j,k) =  ut1(i,j,k)*Geomg_cy_8 (j)
         enddo
         enddo
         do j= 1, l_njv
         do i= 1, l_ni
            vt1(i,j,k) =  vt1(i,j,k)*Geomg_cyv_8(j)
         enddo
         enddo
         enddo
!$omp enddo
!$omp end parallel

!        Tracers in Yin-Yang
         do n=1,Tr3d_ntr
            tr_name = 'TR/'//trim(Tr3d_name_S(n))//':P'
            istat = gmm_get(tr_name, tr1)
            tr_name = 'NEST/'//trim(Tr3d_name_S(n))//':C'
      	    istat = gmm_get(tr_name, trf)
            trf (1:l_ni,1:l_nj,1:G_nk) = tr1(1:l_ni,1:l_nj,1:G_nk)
            call rpn_comm_xch_halo(trf, LDIST_DIM,l_ni,l_nj,G_nk, &
                  G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
            call yyg_scalbc_mono(tr1,trf,LDIST_DIM,G_nk)
         end do
  
      else

!     Ordinary LAM
         istat = gmm_get(gmmk_nest_u_s ,nest_u )
         istat = gmm_get(gmmk_nest_v_s ,nest_v )
         istat = gmm_get(gmmk_nest_w_s ,nest_w )
         istat = gmm_get(gmmk_nest_t_s ,nest_t )
         istat = gmm_get(gmmk_nest_zd_s,nest_zd)
         istat = gmm_get(gmmk_nest_s_s ,nest_s )
         nest_u  = ut1
         nest_v  = vt1
         nest_w  = wt1
         nest_t  = tt1
         nest_s  = st1
         nest_zd = zdt1
         nest_q  = qt1

         do n=1,Tr3d_ntr
            tr_name = 'TR/'//trim(Tr3d_name_S(n))//':P'
            istat = gmm_get(tr_name, tr1)
            tr_name = 'NEST/'//trim(Tr3d_name_S(n))//':C'
            istat = gmm_get(tr_name, trf)
            trf = tr1
         end do

      endif

      Lam_previous_S= ''
      Lam_current_S = Step_runstrt_S
      call prsdate   (yy,mo,dd,hh,mm,ss,dum,Lam_current_S)
      call pdfjdate2 (Lam_tfin, yy,mo,dd,hh,mm,ss)
      Lam_tdeb      = Lam_tfin
!
!     ---------------------------------------------------------------
!
 1000 format (3X,'NESTING INITIALIZATION (NEST_INIT)')
      return
      end
