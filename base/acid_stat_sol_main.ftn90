!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r acid_stat_sol_main - gblstat for acid test

#include "model_macros_f.h"
!
      subroutine acid_stat_sol_main(F_rhsp,F_fiptx,F_flag)
!
      implicit none
!
      real F_rhsp(LDIST_SHAPE,G_nk),F_fiptx(LDIST_SHAPE,0:G_nk+1)
!
      integer F_flag
!
!author
!     Andre Plante
!     
!revision
!
!language
!     fortran 77
!
!object
!     glbstat for LAM acid test
!     Note : the acid test is conducted with one CPU.
!
!implicits
#include "lun.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "lctl.cdk"
#include "grdc.cdk"
#include "acid.cdk"
!     
      if(F_flag.eq.1)then
!        RHSP should be identical to the the piloting run
         if (Lun_out.gt.0)then
            write(Lun_out,*)'RHSP for solver should be the same as piloting run'
         endif
         call glbstat (f_rhsp,'RHSP',LDIST_DIM,G_nk, &
              9+acid_i0,G_ni-8-acid_in, &
              9+acid_j0,G_nj-8-acid_jn, &
              1,G_nk)
!        Solution should be close to the last digit of the piloting run
         if (Lun_out.gt.0)then
            write(Lun_out,*)'P from solver is very close to piloting run'
         endif
         call glbstat (F_fiptx,'P',LDIST_DIM,G_nk+2, &
              8+acid_i0,G_ni-7-acid_in, &
              8+acid_j0,G_nj-7-acid_jn, &
              1,G_nk+2)
         if (Acid_pilot_L.and.Grdc_start.ge.0 &
              .and.Lctl_step.gt.Grdc_start) then
            if (Lun_out.gt.0)then
               write(Lun_out,*)'ACID BIT TEST: writing solver solution'
            endif
            call writlam(F_fiptx,LDIST_DIM,G_nk+2, &
                 8+acid_i0,G_ni-7-acid_in, &
                 8+acid_j0,G_nj-7-acid_jn, &
                 1,G_nk+2,50)
         endif
         if (Acid_readsol_L) then
            if (Lun_out.gt.0)then
               write(Lun_out,*)'ACID BIT TEST: reading solver solution'
            endif
            call readlam(F_fiptx,LDIST_DIM,G_nk+2, &
                 8+acid_i0,G_ni-7-acid_in, &
                 8+acid_j0,G_nj-7-acid_jn, &
                 1,G_nk+2,50)
            call glbstat (F_fiptx,'P',LDIST_DIM,G_nk+2, &
                 8+acid_i0,G_ni-7-acid_in, &
                 8+acid_j0,G_nj-7-acid_jn, &
                 1,G_nk+2)
         else
            call glbstat (F_fiptx,'P',LDIST_DIM,G_nk+2, &
                 8+acid_i0,G_ni-7-acid_in, &
                 8+acid_j0,G_nj-7-acid_jn, &
                 1,G_nk+2)
         endif
      else
         print*,'flag=',F_flag
         call handle_error(-1,'acid_stat_sol_main','acid_stat_sol_main : error with flag')
      endif
      
      return
      
      end
