!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!*s/r out_href - output horizontal coordinate tags
!
#include "model_macros_f.h"
!
      subroutine out_href(F_xpos,F_ypos)
!
      implicit none
!
      real F_xpos(*),F_ypos(*)
!
!author
!     v.lee - rpn march 2008
!
!revision
! v4_03 - Lee V.            - initial MPI version (from wrhref MC2)
!
!object
!     See above id.
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_st1        I    - array containing log pressure on the surface
! 
!implicits

#include "glb_ld.cdk"
#include "out.cdk"
!
!
      integer fstinl,fstecr
      external fstinl,fstecr
      integer i,err,lislon,indx,nrec,nlis,n1,n2,n3
      parameter (nlis = 1024)
      integer liste (nlis)
      real xpos(Out_nisg), ypos(Out_njsg),xpq(Out_nisg),ypq(Out_njsg)
!
      Out_xpos_ = loc(F_xpos(1))
      Out_ypos_ = loc(F_ypos(1))
      if ((Out_blocme.eq.0).and.(Out_nisl.gt.0).and.(Out_njsl.gt.0)) then
         nrec= fstinl (Out_unf,n1,n2,n3,' ',' ',Out_ig1,Out_ig2,0, &
                                       ' ','>>',liste,lislon,nlis)
         if ((lislon.lt.1).and.(.not.Out_flipit_L)) then
            if ( Out_stride .le. 1 ) then
               Out_rgridi0 = max(Out_bloci0,Out_gridi0)
               Out_rgridj0 = max(Out_blocj0,Out_gridj0)
               err=fstecr(Out_xpos(Out_gridi0),xpq,-32,Out_unf,Out_dateo,0,0, &
                          Out_nisg,1, &
                          1,Out_ig1,Out_ig2,0,'X', '>>',Out_etik_S,Out_gridtyp_S, &
                          Out_ixg(1), Out_ixg(2), Out_ixg(3), Out_ixg(4), &
                          5, .true.)
               err=fstecr(Out_ypos(Out_gridj0),ypq,-32,Out_unf,Out_dateo,0,0, &
                          1, Out_njsg, &
                          1,Out_ig1,Out_ig2,0,'X', '^^',Out_etik_S,Out_gridtyp_S, &
                          Out_ixg(1), Out_ixg(2), Out_ixg(3), Out_ixg(4), &
                          5, .true.)
            else
               Out_rgridi0=Out_blocin
               do i=1,Out_nisg
                  indx = Out_gridi0+(i-1)*Out_stride
                  xpos(i) = Out_xpos(indx)
                  if (indx.ge.Out_bloci0) Out_rgridi0= min(Out_rgridi0,max(Out_bloci0,indx))
               end do
               Out_rgridj0=Out_blocjn
               do i=1,Out_njsg
                  indx = Out_gridj0+(i-1)*Out_stride
                  ypos(i) = Out_ypos(indx)
                  if (indx.ge.Out_blocj0) Out_rgridj0= min(Out_rgridj0,max(Out_blocj0,indx))
               end do
               err= fstecr (xpos,xpq,-32,Out_unf,Out_dateo,0,0,Out_nisg,1,1, &
                        Out_ig1,Out_ig2,0,'X', '>>',Out_etik_S,Out_gridtyp_S, &
                            Out_ixg(1), Out_ixg(2), Out_ixg(3), Out_ixg(4), &
                            5, .true.)
               err= fstecr (ypos,ypq,-32,Out_unf,Out_dateo,0,0,1,Out_njsg,1, &
                        Out_ig1,Out_ig2,0,'X', '^^',Out_etik_S,Out_gridtyp_S, &
                            Out_ixg(1), Out_ixg(2), Out_ixg(3), Out_ixg(4), &
                            5, .true.)
            endif
         endif
      endif

      return
      end
