!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r sergini - Prepares "first record" output for time series.
!
#include "model_macros_f.h"
!
      subroutine sergini
!
      implicit none
#include <arch_specific.hf>
!
!author 
!     Andre Methot - cmc - june 1994 v0_14
!
!revision
! v2_00 - Desgagne M.     - initial MPI version
! v2_20 - Lee V.          - extract geophysical fields for time-series 
! v2_20                     from physics permanent bus,not VMM variables
! v3_11 - A. Plante       - Adjust code for LAM time-series
! v3_20 - Winger K.       - correct time series handling in climate mode
! v3_30 - Winger K.       - Change serset to serset8 for HEURE
! v3_30 - Desgagne M.     - Remove Mem_phyncore_L
!
!object
!               This subroutine is part of time serie's package
!      initialisation. It extracts and produce output of constant
!      fields to be used by the unwrapper.
!	
!arguments
!	none
!
!notes
!     This code is done once per model's run.
!
!     The method used here is similar to SEF or RFE equivalent.
!     The constraint here is to perform extractions and output
!     of header and a hardcoded list of geophysical variables
!     using the same calls as a real time serie's variable.
!
!     The user's given list of time serie's variables is then
!     temporarly overwritten by the list of constant fields.
!
!     The constant fields are then loaded, and extracted.
!
!     Finally, the user's given list of time serie's variables is
!     re-initialised.
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "dcst.cdk"
#include "p_serg.cdk"
#include "lun.cdk"
#include "rstr.cdk"
#include "xst.cdk"
#include "itf_phy_buses.cdk"
#include "clim.cdk"
!
      character (len=SERG_STRING_LENGTH) ptgeonm(CNSRGEO), ptbidon
      character (len=256) :: msg
      character (len=3  ) :: bus
      integer pnsurf, i, j, m, pnerr, soit,lght,gmmstat
      integer dlat,dlon,z0,mg,lhtg,alvis,snodp,twater,tsoil,glsea,wsoil
      real prcon,w1(p_ni),w2(p_ni),w3(p_ni)
      type(gmm_metadata) :: meta_busper
!*
!     ---------------------------------------------------------------
!
!        -----------------------------------------------------------
!C    1- skip this subroutine if in non-climate restart mode or 
!        if no time series are requested
!        -----------------------------------------------------------
!
      if ( .not. Clim_climat_L .and. Rstri_rstn_L ) goto 500
      if ( Xst_nstat .le. 0 ) goto 500
!
      if (lun_out.gt.0) write(Lun_out,1001)
!
!        ---------------------------------------------------------------
!C   3- Building of a list of variable names for geophysical fields
!        ---------------------------------------------------------------
!
      ptgeonm(1) = 'MA'
      ptgeonm(2) = 'LA'
      ptgeonm(3) = 'LO'
      ptgeonm(4) = 'ZP'
      ptgeonm(5) = 'MG'
      ptgeonm(6) = 'LH'
      ptgeonm(7) = 'AL'
      ptgeonm(8) = 'SD'
      ptgeonm(9) = 'TM'
      ptgeonm(10) = 'TP'
      ptgeonm(11) = 'GL'
      ptgeonm(12) = 'HS'
      pnsurf =  12
      if (pnsurf.gt.CNSRGEO) then
         write(msg,'(a,i7,a,i7)') 'Dimension for ptgeonm TOO SMALL (change it in p_serg.cdk), CNSRGEO= ',CNSRGEO,' should be > ',pnsurf
         call handle_error(-1,'sergini',msg)
      endif
!
!        ---------------------------------------------------------------
!C    4- Temporarily over-writing the user time serie's variable list
!        with a list of geophysical variables
!        ---------------------------------------------------------------
!
      call sersetc('SURFACE', ptgeonm, pnsurf, pnerr)
      call sersetc('PROFILS', ptbidon,      0, pnerr)
      call serset('KOUNT', 0,  1, pnerr)
      call serset8('HEURE', 0.d0, 1, pnerr)
      call serdbu
!
!        ---------------------------------------------------------------
!C    5- Extract time-series values for geophysical variables
!        ---------------------------------------------------------------
!
      prcon = 180./Dcst_pi_8
!
      bus = 'PER'
      call getindx2 ('DLAT'   ,  bus, dlat  , lght, soit)
      call getindx2 ('DLON'   ,  bus, dlon  , lght, soit)
      call getindx2 ('Z0'     ,  bus, z0    , lght, soit)
      call getindx2 ('MG'     ,  bus, mg    , lght, soit)
      call getindx2 ('LHTG'   ,  bus, lhtg  , lght, soit)
      call getindx2 ('ALVIS'  ,  bus, alvis , lght, soit)
      call getindx2 ('SNODP'  ,  bus, snodp , lght, soit)
      call getindx2 ('TWATER' ,  bus, twater, lght, soit)
      call getindx2 ('TSOIL'  ,  bus, tsoil , lght, soit)
      call getindx2 ('GLSEA'  ,  bus, glsea , lght, soit)
      call getindx2 ('WSOIL'  ,  bus, wsoil , lght, soit)
!
      gmmstat = gmm_get ('BUSPER_3d',BUSPER_3d,meta_busper)

      w1 = 1.
      do 35 j= 1, p_nj
!
         w2(1:p_ni) = BUSPER_3d (dlat:dlat+p_ni-1,j) * prcon
         do i= 1, p_ni
            w3(i) = BUSPER_3d (dlon+i-1,j) * prcon
            if (w3(i).lt.0) w3(i)=360.+w3(i)
         end do
!
         call serxst(             w1(1), 'MA',j, p_ni, 0.0, 1.0, -1)
         call serxst(             w2(1), 'LA',j, p_ni, 0.0, 1.0, -1)
         call serxst(             w3(1), 'LO',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d   (z0,j), 'ZP',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d   (mg,j), 'MG',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d (lhtg,j), 'LH',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d(alvis,j), 'AL',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d(snodp,j), 'SD',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d(twater,j),'TM',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d(tsoil,j), 'TP',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d(glsea,j), 'GL',j, p_ni, 0.0, 1.0, -1)
         call serxst(BUSPER_3d(wsoil,j), 'HS',j, p_ni, 0.0, 1.0, -1)
 35   continue

      call sergout(.true.)
!
!        ---------------------------------------------------------------
!C    7- Reset to extracting fields for the user time serie's variable list
!        ---------------------------------------------------------------
!
      call sersetc('SURFACE', P_serg_srsrf_s, P_serg_srsrf, pnerr)
      call sersetc('PROFILS', P_serg_srprf_s, P_serg_srprf, pnerr)
      call serdbu
      if(Lun_out.gt.0)then
         write(Lun_out,*)'TIME SERIES VARIABLES REQUESTED BY USER :'
         write(Lun_out,*)'NUMBER OF SURFACE VARIABLES=',P_serg_srsrf
         write(Lun_out,*)'LISTE OF SURFACE VARIABLES :', &
              (trim(P_serg_srsrf_s(i))//' ',i=1,P_serg_srsrf)
         write(Lun_out,*)'NUMBER OF PROFILE VARIABLES=',P_serg_srprf
         write(Lun_out,*)'LISTE OF PROFILE VARIABLES :', &
              (trim(P_serg_srprf_s(i))//' ',i=1,P_serg_srprf)
      endif
!
 1001 format( &
      /,'INITIALISATION OF TIME SERIES PACKAGE (S/R SERGINI)', &
      /,'===================================================')
!
 500  continue
!
!     ---------------------------------------------------------------
!
      return
      end
