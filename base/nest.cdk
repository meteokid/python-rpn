
#if defined (DOC)
!
!**comdeck nest.cdk
!
! v4_10 - Tanguay M.        - Adjust digital filter when LAM
!
!______________________________________________________________________
!                                                                      |
!  VARIABLES ASSOCIATED WITH NESTING for current timestep              |
!  For Nest_uf,Nest_vf - used for future timesteps with one extra level|
!______________________________________________________________________|
!                    |                                                 |
! NAME               | DESCRIPTION                                     |
!--------------------|-------------------------------------------------|
! Nest_u             | x component of velocity                         |
! Nest_v             | y component of velocity                         |
! Nest_t             | T (temperature)                                 |
! Nest_zd            |                                                 |
! Nest_s             | ln (dpi/dpi*)                                   |
!--------------------|-------------------------------------------------|
! Nest_w             | z component of velocity                         |
! Nest_q             |                                                 |
!--------------------|-------------------------------------------------|
! Nest_tr            | tracer 3d variables                             |
!----------------------------------------------------------------------|
!
#endif
      real, pointer, dimension (:,:,:) :: nest_u_deb  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_v_deb  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_t_deb  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_zd_deb => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:  ) :: nest_s_deb  => null() ! effective dimensions are (LDIST_SHAPE         )
      real, pointer, dimension (:,:,:) :: nest_w_deb  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_q_deb  => null() ! effective dimensions are (LDIST_SHAPE,0:l_nk+1)

      real, pointer, dimension (:,:,:) :: nest_u      => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_v      => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_t      => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_zd     => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:  ) :: nest_s      => null() ! effective dimensions are (LDIST_SHAPE         )
      real, pointer, dimension (:,:,:) :: nest_w      => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_q      => null() ! effective dimensions are (LDIST_SHAPE,0:l_nk+1)

      real, pointer, dimension (:,:,:) :: nest_u_fin  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_v_fin  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_t_fin  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_zd_fin => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:  ) :: nest_s_fin  => null() ! effective dimensions are (LDIST_SHAPE         )
      real, pointer, dimension (:,:,:) :: nest_w_fin  => null() ! effective dimensions are (LDIST_SHAPE,  l_nk+1)
      real, pointer, dimension (:,:,:) :: nest_q_fin  => null() ! effective dimensions are (LDIST_SHAPE,0:l_nk+1)

      real, pointer, dimension (:,:,:) :: nest_weightm=> null() ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_weightu=> null() ! effective dimensions are (LDIST_SHAPE,  l_nk+2)
      real, pointer, dimension (:,:,:) :: nest_weightv=> null() ! effective dimensions are (LDIST_SHAPE,  l_nk+2)

#if !defined(GMM_IS_OK)
#define GMM_IS_OK(errcode) (errcode >= 0)
      integer, parameter :: GMM_MAXNAMELENGTH    =  32
#endif

      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_u_deb_s  , gmmk_nest_v_deb_s , gmmk_nest_t_deb_s
      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_zd_deb_s , gmmk_nest_s_deb_s , gmmk_nest_w_deb_s , gmmk_nest_q_deb_s
      common /nest_n_gmm/ gmmk_nest_u_deb_s  , gmmk_nest_v_deb_s , gmmk_nest_t_deb_s
      common /nest_n_gmm/ gmmk_nest_zd_deb_s , gmmk_nest_s_deb_s , gmmk_nest_w_deb_s , gmmk_nest_q_deb_s

      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_u_s  , gmmk_nest_v_s , gmmk_nest_t_s
      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_zd_s , gmmk_nest_s_s , gmmk_nest_w_s , gmmk_nest_q_s
      common /nest_n_gmm/ gmmk_nest_u_s  , gmmk_nest_v_s , gmmk_nest_t_s
      common /nest_n_gmm/ gmmk_nest_zd_s , gmmk_nest_s_s , gmmk_nest_w_s , gmmk_nest_q_s


      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_u_fin_s , gmmk_nest_v_fin_s, gmmk_nest_t_fin_s
      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_zd_fin_s, gmmk_nest_s_fin_s, gmmk_nest_w_fin_s, gmmk_nest_q_fin_s
      common /nest_n_gmm/ gmmk_nest_u_fin_s , gmmk_nest_v_fin_s, gmmk_nest_t_fin_s
      common /nest_n_gmm/ gmmk_nest_zd_fin_s, gmmk_nest_s_fin_s, gmmk_nest_w_fin_s, gmmk_nest_q_fin_s

      character(len=GMM_MAXNAMELENGTH) :: gmmk_nest_weightm_s,gmmk_nest_weightu_s,gmmk_nest_weightv_s
      common /nest_n_gmm/ gmmk_nest_weightm_s,gmmk_nest_weightu_s,gmmk_nest_weightv_s
