!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r acid_stat_rhs - gblstat for acid test

#include "model_macros_f.h"
!
      subroutine acid_stat_rhs(F_fipt1,F_orhsu,F_ruw1,F_orhst,F_orhsc,F_flag)
!
      implicit none
!
      real F_fipt1(LDIST_SHAPE,0:G_nk+1),F_orhsu(LDIST_SHAPE,G_nk), &
           F_ruw1(LDIST_SHAPE,G_nk),F_orhst(LDIST_SHAPE,G_nk+1), &
           F_orhsc(LDIST_SHAPE,G_nk)
!
      integer F_flag
!
!author
!     Andre Plante
!     
!revision
!
!language
!     fortran 77
!
!object
!     glbstat for LAM acid test
!     Note : the acid test is conducted with one CPU.
!
!implicits
#include "lun.cdk"
#include "schm.cdk"
#include "glb_ld.cdk"
#include "acid.cdk"
!     
      if(F_flag.eq.1)then
         call glbstat (F_fipt1,'FIP1',LDIST_DIM,G_nk, &
              1+acid_i0,G_ni-acid_in, &
              1+acid_j0,G_nj-acid_jn, &
              1,G_nk)
      elseif(F_flag.eq.2)then
         If (Lun_out.gt.0) write(Lun_out,*) 'After rhsp_2, computed area'
         call glbstat(F_orhsu,'RU0',LDIST_DIM,G_nk,8+acid_i0, &
              G_ni-8-acid_in, &
              8+acid_j0,G_nj-7-acid_jn, &
              1,G_nk)
         call glbstat(F_ruw1,'RUW1',LDIST_DIM,G_nk, &
              6+acid_i0,G_ni-5-acid_in, &
              5+acid_j0,G_nj-4-acid_jn, &
              1,G_nk)
         call glbstat(F_orhst,'RT',LDIST_DIM,G_nk, &
              8+acid_i0,G_ni-7-acid_in, &
              8+acid_j0,G_nj-7-acid_jn, &
              1,G_nk)
!        Rc0 will not match to the piloting run because it includes boundary conditions.
         If (Lun_out.gt.0)  &
              write(Lun_out,*) 'Rc0 will not match due to boundary conditions:'
         call glbstat (F_orhsc,'Rc0',LDIST_DIM,G_nk, &
              1+acid_i0,G_ni-acid_in, &
              1+acid_j0,G_nj-acid_jn, &
              1,G_nk)
         If (Lun_out.gt.0)  &
              write(Lun_out,*) 'Rc0 without boundary conditions:'
         call glbstat (F_orhsc,'Rc0',LDIST_DIM,G_nk, &
              1+acid_i0+pil_w,G_ni-acid_in-pil_e, &
              1+acid_j0+pil_s,G_nj-acid_jn-pil_n, &
              1,G_nk)
      else
         print*,'flag=',F_flag
         call handle_error(-1,'acid_stat_rhs','acid_stat_rhs : error with flag')
      endif

      return
      
      end
