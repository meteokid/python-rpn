!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r itf_phy_main - Main controller for the physics interface
!
#include "model_macros_f.h"
!
      subroutine itf_phy_main (F_stepno)
!
      implicit none
#include <arch_specific.hf>
!
      integer F_stepno
!
!author 
!     Michel Desgagne - Mars 2000
!
!revision
! v3_30 - Desgagne M.       - initial version
!      
!object
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_stepno      I           step number
!----------------------------------------------------------------
!
!implicits
#include "glb_ld.cdk"
#include "lctl.cdk"
#include "cstv.cdk"
#include "dimout.cdk"
#include "xst.cdk"
#include "rstr.cdk"
#include "init.cdk"
#include "itf_phy_buses.cdk"
       include "v4dg.inc"
!
      logical boot_L
      integer ier,dostep(MAXSET),dostep_max
      integer   doout
      external  doout
      real prip2
      save boot_L
      data boot_L /.true./
!
!     ---------------------------------------------------------------
!
      call timing_start ( 40, 'PHYSTEP')

      if (F_stepno.eq.1) then

         if (.not. itf_phy_busper_init_L) then
            Lctl_step = 0
            call itf_phy_step (0)
            if (V4dg_conf.eq.0) call out_qc0()
            if((Init_balgm_L) .and. (.not. Rstri_idon_L) ) then
               call wlog('IOUT')
            else
               call wlog('FOUT')
            endif
            Lctl_step = 1
         endif

      endif
!
      if (boot_L) then
         if (Xst_nstat.gt.0) then
            call sergset ()
            if (F_stepno.eq.1) call sergini ()
         endif
         call zongopr( 1,0 )
         boot_L = .false.
      endif
!
      call sergoff()
      call serset('KOUNT', F_stepno, 1,  ier)
      prip2 = float(F_stepno)*Cstv_dt_8/3600.
      call serset('HEURE',  prip2,  1,  ier)      
!
      call zongopr( +2,0 )
!
      call itf_phy_step (F_stepno)
!
      call zongopr( -2,0 )
!     
      if (Xst_nstat.gt.0) call sergout( F_stepno.eq.1 )
!
      call timing_stop ( 40, 'PHY      ' )
!
!     ---------------------------------------------------------------
!
      return
      end
