!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r out_phycasc - to save PERBUS variables in obus for cascade output
!
#include "model_macros_f.h"
!
      subroutine  out_phycasc ( F_cpu, F_step, F_obusval )
      implicit none
!
      integer F_cpu, F_step
      real F_obusval(*)
!
!author 
!     Vivian Lee  - rpn - Oct  2006
!
!revision
! v3_30 - Lee V             - Removed Mem_phyncore
!
#include "glb_ld.cdk"
#include "lun.cdk"
#include "cstv.cdk"
#include "itf_phy_buses.cdk"
!
      integer jdo, i, j, k, n, indx, err,idx
      integer busaddr,offbo,offbb,mult,cnt,shp,bigk
      real dt
!
      real busper, busper2(max(1,p_bper_siz))
      pointer (pabusper,busper(*))
!
!     ---------------------------------------------------------------
!
      if ((Lun_out.gt.0).and.(F_cpu.eq.1)) write(Lun_out,1000)
!
      dt  = Cstv_dt_8
      jdo = 0
!
 100  continue
!
      jdo  = jdo + 1
      if ( jdo .le. p_nj ) then
         pabusper = loc (Phy_busper3D((jdo-1)*p_bper_siz+1))
      else
         goto 650
      endif

      j = jdo + p_offj
!
!     Perform physic slices output

      bigk = 1

      do idx=1,p_bper_top
         offbo=(bigk-1)*l_ni*l_nj
         offbb=perpar(idx,1)
         if (perpar(idx,5).gt.p_ni) then
            shp=l_nk+2
         else
            shp=1
         endif
         do mult=1,perpar(idx,6)
         do k=1,shp
         do i=1,p_ni
            F_obusval(offbo+(k*mult-1)*l_ni*l_nj + &
                         (j-1)*l_ni + i+ p_offi)= &
            busper(offbb+(k*mult-1)*p_ni + i - 1)
         enddo
         enddo
         enddo
         bigk = bigk + shp*perpar(idx,6)
      enddo
!
      goto 100
!
 650  continue     
!
 1000 format(/'PERFORM A PHYSICS CASC: CMC/RPN PHYSICS (S/R OUT_PHYCASC)' &
             /55('='))
!
!     ---------------------------------------------------------------
!
      return
      end
