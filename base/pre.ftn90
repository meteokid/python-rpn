!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!
!**s/r prep - Add metric corrections to r.h.s. of momentum equations.
!               Compute advective contributions on geopotential grid.
!               Interpolate advection contribution from geopotential
!               grid to wind grids. Update r.h.s with advective
!               contributions.
!               Combine some rhs obtaining Rt", Rf" and Rc", the linear
!               contributions to the rhs of Helmholtz equation
!

!
      subroutine pre ( F_ru  ,F_rv  ,F_ruw1 ,F_ruw2 ,F_rvw1 ,F_rvw2, &
                       F_xct1,F_yct1,F_zct1 ,F_fis  ,F_rc   ,F_rt  , &
                       F_rw  ,F_rf  ,F_oru  ,F_orv  ,F_rb ,F_nest_t, &
                       Minx,Maxx,Miny,Maxy, ni, nj, Nk )
!
      implicit none
#include <arch_specific.hf>
!
      integer Minx,Maxx,Miny,Maxy, ni, nj, Nk
      real F_ru    (Minx:Maxx,Miny:Maxy,Nk)  ,F_rv    (Minx:Maxx,Miny:Maxy,Nk)  , &
           F_ruw1  (Minx:Maxx,Miny:Maxy,Nk)  ,F_ruw2  (Minx:Maxx,Miny:Maxy,Nk)  , &
           F_rvw1  (Minx:Maxx,Miny:Maxy,Nk)  ,F_rvw2  (Minx:Maxx,Miny:Maxy,Nk)  , &
           F_xct1  (ni,nj,Nk)       ,F_yct1  (ni,nj,Nk)       , &
           F_zct1  (ni,nj,Nk)       ,F_fis   (Minx:Maxx,Miny:Maxy)     , &
           F_rc    (Minx:Maxx,Miny:Maxy,Nk)  ,F_rt    (Minx:Maxx,Miny:Maxy,Nk), &
           F_rw    (Minx:Maxx,Miny:Maxy,Nk)  ,F_rf    (Minx:Maxx,Miny:Maxy,Nk), &
           F_oru   (Minx:Maxx,Miny:Maxy,Nk)  ,F_orv   (Minx:Maxx,Miny:Maxy,Nk)  , &
           F_rb    (Minx:Maxx,Miny:Maxy)     ,F_nest_t(Minx:Maxx,Miny:Maxy,Nk)
!
!author
!     Alain Patoine
!
!revision
! v2_00 - Desgagne M.       - initial MPI version (from rhs v1_03)
! v2_21 - Lee V.            - modification for LAM version
! v2_31 - Desgagne M.       - remove stkmemw and switch to adw_*
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_11 - Gravel S.         - modify for theoretical cases
! v4_00 - Plante & Girard   - Log-hydro-pressure coord on Charney-Phillips grid
! v4_05 - Girard C.         - Open top
! v4_40 - Qaddouri/Lee      - expand range of calculation for Yin-Yang only
! v4.70 - Gaudreault S.     - Reformulation in terms of real winds (removing wind images)

#include "glb_ld.cdk"
#include "lun.cdk"
#include "lam.cdk"
#include "cstv.cdk"
#include "dcst.cdk"
#include "grd.cdk"
#include "geomg.cdk"
#include "schm.cdk"
#include "intuv.cdk"
#include "inuvl.cdk"
#include "type.cdk"
#include "ver.cdk"
#include "ptopo.cdk"

      integer i, j, k, km, i0, i0u, j0, j0v, k0, k0t, in, inu, jn, jnv, onept
      real*8  x, y, z, cx, cy, cz, rx, ry, rz, mumu, rdiv, cosy_d, secy_d, &
              w1,w2,w3,w4
      real    w_rt
      real*8, parameter :: zero=0.d0, one=1.d0
!
!     ---------------------------------------------------------------
!  
      if (Lun_debug_L) write (Lun_out,1000)
!
      k0 = 1+Lam_gbpil_T
      k0t= k0
      if(Schm_opentop_L)k0t=k0-1
      onept=0
      if (Grd_yinyang_L) onept=1

!*****************************************************************
! Metric corrections to the RHS of horizontal momentum equations *
!*****************************************************************
!
!     Indices to compute metric corrections
      i0 = 1
      in = l_ni
      j0 = 1
      jn = l_nj
      if (G_lam) then
         if (l_west)  i0= pil_w - onept
         if (l_east)  in= l_niu - pil_e + 2 + onept
         if (l_south) j0= pil_s - onept
         if (l_north) jn= l_njv - pil_n + 2 + onept
      endif

!$omp parallel private(x,y,z,rz,ry,rx,cx,cy,cz,&
!$omp   mumu,cosy_d,secy_d,rdiv,w1,w2,w3,w4,w_rt)

      if (G_lam) then
         if (Schm_angular_displacement_L) then
!$omp do
            do k= k0, l_nk
               do j= j0, jn
                  do i= i0, in

   !                 Compute advective contributions on G-grid
   !                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     F_ruw2(i,j,k) = F_ruw2(i,j,k) - F_ruw1(i,j,k)
                     F_rvw2(i,j,k) = F_rvw2(i,j,k) - F_rvw1(i,j,k)

                  end do
               end do
            end do
!$omp enddo
         else
!$omp do
            do k= k0, l_nk
               do j= j0, jn
                  do i= i0, in

   !                 Compute components of r(t0) and put in x, y, z
   !                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     x = geomg_cx_8(i) * geomg_cy_8(j)
                     y = geomg_sx_8(i) * geomg_cy_8(j)
                     z = geomg_sy_8(j)

   !                 Compute (Rx, Ry, Rz) = (rx, ry, rz)
   !                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     cosy_d = sqrt(one - F_zct1(i,j,k)*F_zct1(i,j,k))
                     secy_d = 0.
                     if (cosy_d .GT. zero) secy_d = one / cosy_d

                     rx = -secy_d * (F_yct1(i,j,k)*F_ruw2(i,j,k)+ &
                                     F_xct1(i,j,k)*F_zct1(i,j,k)*F_rvw2(i,j,k))
                     ry = secy_d * (F_xct1(i,j,k)*F_ruw2(i,j,k)- &
                                    F_yct1(i,j,k)*F_zct1(i,j,k)*F_rvw2(i,j,k))
                     rz = cosy_d * F_rvw2(i,j,k)

   !                 Compute components of c and put in cx, cy, cz
   !                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     cx = x + Cstv_Beta_8*F_xct1(i,j,k)
                     cy = y + Cstv_Beta_8*F_yct1(i,j,k)
                     cz = z + Cstv_Beta_8*F_zct1(i,j,k)

   !                 Compute mu and modify (Rx,Ry,Rz)
   !                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     mumu = - ( x*rx + y*ry + z*rz )/( x*cx + y*cy + z*cz )
                     rx = rx + mumu*cx
                     ry = ry + mumu*cy
                     rz = rz + mumu*cz

   !                 Compute advective contributions on G-grid
   !                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     F_ruw2(i,j,k) = (x*ry - y*rx)*geomg_invcy_8(j) - F_ruw1(i,j,k)
                     F_rvw2(i,j,k) = rz*geomg_invcy_8(j) - F_rvw1(i,j,k)
               end do
            end do
         end do
!$omp enddo
      endif

   else

!$omp do
      do k= k0, l_nk
         do j= j0, jn
            do i= i0, in

!                 Compute components of r(t0) and put in x, y, z
!                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  x = geomg_cx_8(i) * geomg_cy_8(j)
                  y = geomg_sx_8(i) * geomg_cy_8(j)
                  z = geomg_sy_8(j)

!                 Compute (Rx, Ry, Rz) = (rx, ry, rz)
!                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  mumu = ( one + F_zct1(i,j,k) )*( one - F_zct1(i,j,k) )
                  if (mumu .GT. zero) mumu = one / mumu

                  rz = F_rvw2(i,j,k)
                  ry =  mumu * (F_xct1(i,j,k)*F_ruw2(i,j,k)- &
                                F_yct1(i,j,k)*F_zct1(i,j,k)*rz)
                  rx = -mumu * (F_yct1(i,j,k)*F_ruw2(i,j,k)+ &
                                F_xct1(i,j,k)*F_zct1(i,j,k)*rz)

!                 Compute components of c and put in cx, cy, cz
!                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  cx = x + Cstv_Beta_8*F_xct1(i,j,k)
                  cy = y + Cstv_Beta_8*F_yct1(i,j,k)
                  cz = z + Cstv_Beta_8*F_zct1(i,j,k)

!                 Compute mu and modify (Rx,Ry,Rz)
!                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  mumu = - ( x*rx + y*ry + z*rz )/( x*cx + y*cy + z*cz )
                  rx = rx + mumu*cx
                  ry = ry + mumu*cy
                  rz = rz + mumu*cz

!                 Compute advective contributions on G-grid
!                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  F_ruw2(i,j,k) = x*ry - y*rx - F_ruw1(i,j,k)
                  F_rvw2(i,j,k) = rz - F_rvw1(i,j,k)
         end do
      end do
   end do
!$omp enddo

   end if

!
!$omp single
      call rpn_comm_xch_halo( F_ruw2, l_minx,l_maxx,l_miny,l_maxy, l_ni,l_nj,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo( F_rvw2, l_minx,l_maxx,l_miny,l_maxy, l_ni, l_nj,G_nk, &
                    G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

!     Indices to compute Right-Hand Sides
      i0  = 1    +pil_w
      j0  = 1    +pil_s
      in  = l_ni -pil_e
      jn  = l_nj -pil_n
!
      i0u = i0-1
      j0v = j0-1
      inu = l_niu-pil_e
      jnv = l_njv-pil_n

      if (l_west.and.G_lam) i0u=i0-onept
      if (l_south)          j0v=j0-onept
      if (l_east )          inu=inu+onept
      if (l_north)          jnv=jnv+onept

      F_rv(:,0   ,:) = 0.
      F_rv(:,l_nj,:) = 0.
!
      if(Schm_hydro_L) F_rw = 0.
!
!$omp end single
!
!*********************************************************
! Final form of the RHS of horizontal momentum equations *
!*********************************************************
!$omp do
      do k=k0,l_nk

!     Add advective contributions to Ru & Rv
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         do j= j0, jn
         do i= i0u, inu
            F_ru(i,j,k) =  F_oru(i,j,k) + &
                         inuvl_wxxu3_8(i,1)*F_ruw2(i-1,j,k) &
                       + inuvl_wxxu3_8(i,2)*F_ruw2(i  ,j,k) &
                       + inuvl_wxxu3_8(i,3)*F_ruw2(i+1,j,k) &
                       + inuvl_wxxu3_8(i,4)*F_ruw2(i+2,j,k)
         end do
         end do
!
         do j= j0v, jnv
         do i= i0, in
            F_rv(i,j,k) =  F_orv(i,j,k) + &
                         inuvl_wyyv3_8(j,1)*F_rvw2(i,j-1,k) &
                       + inuvl_wyyv3_8(j,2)*F_rvw2(i,j  ,k) &
                       + inuvl_wyyv3_8(j,3)*F_rvw2(i,j+1,k) &
                       + inuvl_wyyv3_8(j,4)*F_rvw2(i,j+2,k)
         end do
         end do
!
!*************************************
! Combination of governing equations *
!*************************************
!
         km=max(k-1,1)
         w1= Ver_igt_8*Ver_wp_8%m(k)
         w2= Ver_igt_8*Ver_wm_8%m(k)*Ver_onezero(k)
         do j= j0, jn
         do i= i0, in
!
!           Combine continuity & w equations
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            F_rc(i,j,k) = F_rc(i,j,k) - w1*F_rw(i,j,k ) - w2*F_rw(i,j,km)
!
!           Compute the divergence of the RHS of momentum equations
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            rdiv  = (F_ru(i,j,k)-F_ru(i-1,j,k))*geomg_invDXM_8(i,j) &
                  + (F_rv(i,j,k)*geomg_cyM_8(j)-F_rv(i,j-1,k)*geomg_cyM_8(j-1))*geomg_invDYM_8(j)
!
!           Combine divergence & continuity equations : Rc'
!           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            F_rc(i,j,k) = rdiv - F_rc(i,j,k) / Cstv_tau_8
         end do
         end do

      end do
!$omp enddo
!
      if (Schm_opentop_L) then
!$omp do
         do j= j0, jn
         do i= i0, in
            F_rb(i,j) = F_rt(i,j,k0-1)
         end do
         end do
!$omp enddo
      endif
!
!$omp do
      do k=k0t,l_nk
!
!        Compute Rt" & Rf"
!        ~~~~~~~~~~~~~~~~~
!
         w1 = Dcst_cappa_8 / Dcst_Rgasd_8 / Ver_Tstr_8%t(k)
         w2 = Cstv_invT_8 / ( Dcst_cappa_8 + Ver_epsi_8(k) )
         do j= j0, jn
         do i= i0, in
!           Combine Rt and Rw
!           ~~~~~~~~~~~~~~~~~
            F_rt(i,j,k) = F_rt(i,j,k) + Ver_igt_8 * F_rw(i,j,k)
!
            w_rt        = F_rt(i,j,k)
!           Compute Rt"
!           ~~~~~~~~~~~
            F_rt(i,j,k) = w2 * ( w_rt + Ver_igt2_8 * F_rf(i,j,k) )
!           Compute Rf"
!           ~~~~~~~~~~~
            F_rf(i,j,k) = w2 * ( w_rt - w1 * F_rf(i,j,k) )
         end do
         end do
!
      enddo
!$omp enddo
!
!************************************************************
! The linear contributions to the RHS of Helmholtz equation *
!************************************************************
!
!     Finish computations of RP(Rc"), combining Rc', Rt", Rf"
!
!$omp do
      do k=k0,l_nk
         km=max(k-1,1)
         w1= one + Ver_dz_8%m(k) * Ver_wp_8%m(k)
         w2=(one - Ver_dz_8%m(k) * Ver_wm_8%m(k))*Ver_onezero(k)
         w3=Ver_dz_8%m(k)*Ver_wp_8%m(k)*Ver_epsi_8(k)
         w4=Ver_dz_8%m(k)*Ver_wm_8%m(k)*Ver_epsi_8(km)*Ver_onezero(k)
         do j= j0, jn
         do i= i0, in
            F_rc(i,j,k) = Ver_dz_8%m(k) * ( F_rc(i,j,k) - Cstv_bar0_8 * F_fis(i,j) ) &
                           - w1 * F_rt(i,j,k) + w2 * F_rt(i,j,km) &
                           - w3 * F_rf(i,j,k) - w4 * F_rf(i,j,km)
         end do
         end do
      end do
!$omp enddo
!
!     Apply lower and upper boundary conditions
!
      if (Schm_opentop_L) then
         w1=Cstv_invT_8/Ver_Tstr_8%t(k0t)
!$omp do
         do j= j0, jn
         do i= i0, in
            F_rb(i,j) = F_rt(i,j,k0t) - Ver_ikt_8*(F_rb(i,j) + w1*F_nest_t(i,j,k0t))
            F_rc(i,j,k0  ) = F_rc(i,j,k0  ) - Ver_cstp_8 * F_rb(i,j)
         end do
         end do
!$omp enddo
      endif
!
      w1 = Cstv_invT_8**2 / ( Dcst_Rgasd_8 * Ver_Tstr_8%t(l_nk) )
!$omp do
      do j= j0, jn
      do i= i0, in
         F_rt(i,j,l_nk) = F_rt(i,j,l_nk) - w1 * F_fis(i,j)
         F_rc(i,j,l_nk) = F_rc(i,j,l_nk) + Ver_cssp_8 * F_rt(i,j,l_nk)
      end do
      end do
!$omp enddo
!
!$omp end parallel

1000  format(3X,'PRE-COMPUTATION FOR THE HELMHOLTZ PROBLEM: (S/R PRE)')
!
!     ---------------------------------------------------------------
!  
      return
      end
