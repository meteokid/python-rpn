!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r wil_shtrns_w
!
#include "model_macros_f.h"
!
      SUBROUTINE WIL_SHTRNS_W(L3D,LV,ITYPE,X,SCOEF,CEVEN,CODD,REVEN,RODD)                
!
      implicit none
!
#include "wil_glb_ld.cdk"
!
      INTEGER L3D,LV,ITYPE
!
      REAL X(G_nlon+2,G_nlat,L3D)
      COMPLEX SCOEF(G_NALP)
!
!author Jacob et al. 1992 
!
!revision
! v4_04 - Jacob et al.     - initial version SHTRNS_W 
! v4_04 - Tanguay M.       - Williamson's cases
!                                                                              
!object
!     THIS SUBROUTINE PERFORMS SPHERICAL HARMONIC TRANSFORMS AND INVERSE  
!     TRANFORMS OF ARBITRARY SCALAR DATA USING THE GAUSSIAN GRID (SEE           
!     THE GUASSIAN LATITUDES AND WEIGHTS) AND THE ASSOCIATED LEGENDRE           
!     POLYNOMIALS AND DERIVATIVES SPECIFIED IN COMMON BLOCK TRNSFM.             
!     IT USES THE LIBRARY ROUTINE FFT991 FOR IN-PLACE FAST FOURIER
!     TRANSFORMS.
!
!      LV:
!          -1 => FORWARD TRANSFORM X -> SCOEF
!          +1 => INVERSE TRANSFORM SCOEF -> X
!                                                                              
!implicits
#include "wil_fft.cdk"
#include "wil_init2.cdk"
!------------------------------------------------------------------
      COMPLEX   CEVEN(G_NFC,G_NLATB2), CODD(G_NFC,G_NLATB2)            
      REAL      REVEN(G_nlon+2,G_NLATB2), RODD(G_nlon+2,G_NLATB2)
!
      integer i,j,ERR
      INTEGER JM, JN, IS, ULB
!
      REAL WEIGHT
!
!     LATITUDE INDICES
!     ----------------
      INTEGER NL, SL
!------------------------------------------------------------------
!
!     FIRST CHECK FOR VALID ARGUMENTS; INVALID ARGUMENTS=>FATAL ERROR           
!     -------------------------------------------------------------
      IF ((ITYPE .NE. +1) .AND. (ITYPE .NE. -1)) THEN                           
         WRITE (0,900) ITYPE                                                    
  900    FORMAT(/,' STSWM: FATAL ERROR IN SUBROUTINE WIL_SHTRNS:',/, &
                  ' UNKNOWN TYPE OF TRANSFORM SPECIFIED',/,  &
                ' ITYPE = ',I3)                                              
         STOP                                                                   
      ENDIF                                                                     
!
      IF (ITYPE .EQ. -1) THEN                                                   
!                                                                               
!        FORWARD TRANSFORM FROM PHYSICAL TO WAVENUMBER SPACE (ITYPE=-1)         
!        --------------------------------------------------------------
!                                                                               
!        IN PLACE FFT FOR ALL LATITUDES OF TIMELEVEL LV
!        ----------------------------------------------
         CALL FFT771(X(1,1,LV),FFTWS2,TRIGS,IFAX,1,G_nlon+2, &
                        G_nlon,G_nlat,-1)              
!
!        --------------------------------------------------------------
!        PROCEDURE FOR FORWARD GAUSS-LEGENDRE TRANSFORM.                        
!        VARY M AND N SO THAT PROCEDURE MOVES ALONG DIAGONALS DENOTED           
!        BY INDEX JN.  M IS GIVEN BY (JM-1) WHILE N IS GIVEN BY (JN+M).         
!        SINCE NUMBER OF GAUSSIAN LATITUDES IS EVEN, TAKE ADVANTAGE OF          
!        THE SYMMETRIC CHARACTER OF THE ASSOCIATED LEGENDRE POLYNOMIALS         
!        --------------------------------------------------------------
!      
!        TO SAVE MEMORY, THE SYMMETRIC (N-M EVEN) COEFFICIENTS ARE
!        STORED OVER THE FOURIER COEFFICIENTS JM=1,NLAT/2, AND THE
!        ANTISYMMETRIC (N-M ODD) COEFFICIENTS ARE STORED IN REVERSE
!        ORDER JM=NLAT,NLAT/2
!        --------------------------------------------------------------
         DO 40 NL=1,G_NLATB2   
            SL = G_nlat-NL+1
            WEIGHT = WTS(NL)
!
!           COMBINE SYMMETRIC AND ANTISYMMETRIC COEFFICIENTS
!           ------------------------------------------------
            DO 30 JM=1,2*(G_MM+1)
               REVEN(JM,NL) = (X(JM,NL,LV)+X(JM,SL,LV))*WEIGHT
               RODD(JM,NL)  = (X(JM,NL,LV)-X(JM,SL,LV))*WEIGHT
   30       CONTINUE
   40    CONTINUE
!
!        EVEN N-M WAVES FIRST
!        --------------------
         DO 100 JN=0,G_NN,2
            IS = LDIAG(JN,2)
            ULB = LDIAG(JN,1)
!
            DO 90 NL=1,G_NLATB2
!
!           EVEN WAVENUMBERS
!           FIRST ITERATION (TO SAVE INITIALIZATION WITH 0)
!           -----------------------------------------------
            IF (NL .EQ. 1) THEN
               DO 45 JM=1,ULB
                  SCOEF(IS+JM) = ALP_0(IS+JM,NL) * CEVEN(JM,NL)
   45          CONTINUE
!
!           REMAINING LATITUDES CONTRIBUTING TO SUM
!           ---------------------------------------
!
            ELSE
!
               DO 70 JM=1,ULB
                  SCOEF(IS+JM) =  SCOEF(IS+JM) &
                               + ALP_0(IS+JM,NL) * CEVEN(JM,NL)
   70          CONTINUE
!
            ENDIF
   90       CONTINUE
  100    CONTINUE
!
!        ODD N-M WAVENUMBERS NEXT
!        ------------------------
         DO 200 JN=1,G_NN,2
            IS = LDIAG(JN,2)
            ULB = LDIAG(JN,1)
!
            DO 95 NL=1,G_NLATB2
!
!           FIRST ITERATION (TO SAVE INITIALIZATION WITH 0)
!           -----------------------------------------------
            IF (NL .EQ. 1) THEN
!                                                                               
               DO 55 JM=1,ULB
                  SCOEF(IS+JM) = ALP_0(IS+JM,NL) * CODD(JM,NL)
   55          CONTINUE                                                      
!
!           REMAINING LATITUDES CONTRIBUTING TO SUM
!           ---------------------------------------
!
            ELSE
!
               DO 85 JM=1,ULB
                  SCOEF(IS+JM) = SCOEF(IS+JM)  &
                              + ALP_0(IS+JM,NL) * CODD(JM,NL)
   85          CONTINUE                                                         
            ENDIF
! 
   95       CONTINUE
  200    CONTINUE
!
!        TRANSFORMATION TO WAVENUMBER SPACE (FORWARD TRANSFORM) COMPLETE        
!        ---------------------------------------------------------------
!
      ELSE                                                                      
!                                                                               
!        --------------------------------------------------------------
!        INVERSE TRANSFORM FROM WAVENUMBER TO PHYSICAL SPACE (ITYPE=+1)         
!        DETERMINE FOURIER COEFFICIENTS BY INVERSE LEGENDRE TRANSFORM.          
!        VARY M AND N SO PROCEDURE MOVES ALONG DIAGONALS DENOTED BY             
!        INDEX JN.  M IS GIVEN BY (JM-1) WHILE N IS GIVEN BY (JN+M).            
!        FIRST ACCUMULATE EVEN WAVENUMBER CONTRIBUTION                          
!        --------------------------------------------------------------
!                                                                               
         DO 215 JM=1,G_MM+1
!
!           FIRST ACCUMULATE EVEN WAVENUMBER CONTRIBUTION
!           ---------------------------------------------
!
            DO 180 JN=0,G_NN,2   
               IS = LDIAG(JN,2)   
               ULB = LDIAG(JN,1)
!                                                                               
!           THIS DETOUR HELPS AVOID THE NEED TO SEPARATELY ZERO CEVEN           
!           ---------------------------------------------------------
            IF (JN .EQ. 0) THEN 
               DO 140 NL=1,G_NLATB2                                            
                  CEVEN(JM,NL) = SCOEF(IS+JM)*ALP_0(IS+JM,NL)               
  140          CONTINUE                                                      
!                                                                               
            ELSE                                                               
!                                                                               
               IF (JM .LE. ULB) THEN
                  DO 160 NL=1,G_NLATB2 
                     CEVEN(JM,NL) = CEVEN(JM,NL) +   &
                                   SCOEF(IS+JM)*ALP_0(IS+JM,NL)                
  160             CONTINUE 
               ENDIF
            ENDIF
  180       CONTINUE
!                                                                               
!           NEXT ACCUMULATE ODD WAVENUMBER CONTRIBUTION 
!           -------------------------------------------
            DO 210 JN=1,G_NN,2  
               IS = LDIAG(JN,2)  
               ULB = LDIAG(JN,1)
!                                                                               
!           THIS DETOUR HELPS AVOID THE NEED TO SEPARATELY ZERO CODD            
!           --------------------------------------------------------
!                                                                               
            IF (JN .EQ. 1) THEN    
               IF (JM .LE. ULB) THEN
                  DO 185 NL=1,G_NLATB2                                            
                     CODD(JM,NL) = SCOEF(IS+JM)*ALP_0(IS+JM,NL)               
  185             CONTINUE                                                      
!                                                                               
!              -------------------------------------------------------
!              ACCOUNT FOR THE FACT THAT THE FIRST ODD DIAGONAL MAY BE    
!              SHORTER THAN THE FIRST EVEN DIAGONAL (PART OF THE GAME  
!              TO AVOID EXPLICITLY ZEROING THE ENTIRE CODD ARRAY) 
!              -------------------------------------------------------
!                                                                               
               ELSE
                  DO 195 NL=1,G_NLATB2                                         
                     CODD(JM,NL) =  CMPLX(0.0,0.0)  
  195             CONTINUE                                                   
!                                                                               
               ENDIF                                                            
            ELSE                                                               
!                                                                               
               IF (JM .LE. ULB) THEN
                  DO 205 NL=1,G_NLATB2 
                     CODD(JM,NL) = CODD(JM,NL) +   &
                                   SCOEF(IS+JM)*ALP_0(IS+JM,NL)                
  205             CONTINUE  
               ENDIF
!
            ENDIF
  210       CONTINUE
!
  215    CONTINUE
!
!        COMBINE CONTRIBUTIONS OF EVEN AND ODD WAVENUMBERS TO OBTAIN            
!        COMPLEX FOURIER COEFFICIENTS, FOLLOWED BY INVERSE FFT                  
!        -----------------------------------------------------------
         DO 250 NL=1,G_NLATB2
            SL = G_nlat-NL+1
            DO 220 JM=1,2*(G_MM+1)
               X(JM,NL,LV) = REVEN(JM,NL) + RODD(JM,NL) 
               X(JM,SL,LV) = REVEN(JM,NL) - RODD(JM,NL)
  220       CONTINUE                                                         
!                                                                               
!           ZERO THE TAIL OF THE COMPLEX COEFFICIENT SPECTRUM                   
!           -------------------------------------------------
            DO 235 JM=2*(G_MM+1)+1,G_nlon+2
               X(JM,NL,LV) = 0.0
               X(JM,SL,LV) = 0.0
  235       CONTINUE                                                         
  250    CONTINUE
!
!        INVERSE FAST FOURIER TRANSFORM FOR EACH LATITUDE 
!        AND TIMELEVEL LV
!        ------------------------------------------------
         CALL FFT771(X(1,1,LV),FFTWS2,TRIGS,IFAX,1,G_nlon+2, &
                        G_nlon,G_nlat,+1)              
!
!        TRANSFORMATION TO PHYSICAL SPACE (INVERSE TRANSFORM) COMPLETE          
!        -------------------------------------------------------------
!                                                                               
      ENDIF                                                                     
!                                                                               
      RETURN
!
      END                                                                       
