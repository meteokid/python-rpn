!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!
!**s/r prgen - interpolation (general) on a given pressure level
!
#include "model_macros_f.h"
!
      subroutine prgen (F_outp , F_inp  , F_deriv , F_wlnph, &
                        F_pres, Nkout, F_cubic_L, DIST_DIM, &
                        F_Nk,F_i0,F_in,F_j0,F_jn)
!
      implicit none
#include <arch_specific.hf>
!
      integer DIST_DIM,F_Nk,Nkout
      logical F_cubic_L
      real    F_pres(Nkout), F_outp(DIST_SHAPE,Nkout), F_inp(DIST_SHAPE,F_Nk), &
              F_deriv(DIST_SHAPE,F_Nk), F_wlnph(DIST_SHAPE,F_Nk)
!implicits
#include "glb_ld.cdk"
!
!author
!     alain patoine - after intfev (efr)
!
!revision
! v2_00 - Lee V.            - initial MPI version (from prgen v1_03)
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_21 - Lee V.            - Output Optimization
! v4_40 - Lee V. & B. Dugas - change in argument call to adapt for
!                             variable shape for the physics pressure output
!
!object
!     see id section
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
! F_outp       O    - output field on the requested pressure level
! F_inp        I    - input field on eta levels
! F_deriv      I    - vertical derivative of input field with respect
!                     to log of hydrostatic pressure
! F_wlnph      I    - log of hydrostatic pressure on the eta levels of
!                     the model
! F_pres       I    - pressure level requested
! F_cubic_L    I    - .true.  for cubic interpolation
!                   - .false. for linear interpolation
! F_i0         I    - starting index on I
! F_in         I    - ending index on I
! F_j0         I    - starting index on J
! F_jn         I    - ending index on J

!
!*
      integer i, j, k, kk,pnk, pnkm, pnindex(l_ni),F_in,F_i0,F_jn,F_j0
      real    logpres(Nkout)
      real    prlprso, prd, pre, prr, prfm0, prfm1, prfm2, prfm3, prfl2
      real*8  invprd

      do kk=1,Nkout
      logpres(kk) = log(F_pres(kk))
      enddo
!
!$omp parallel private(i,k,kk,pnk,pnkm,pnindex,prlprso, &
!$omp   prd,pre,prr,prfm0,prfm1,prfm2,prfm3,prfl2,invprd) &
!$omp shared(logpres)
!$omp do
      do 600 j= F_j0, F_jn
      do 500 kk=1, Nkout
      prlprso = logpres(kk)
!
      do i= F_i0, F_in
         pnindex(i) = 0
      enddo
!
      do k=1,F_nk
      do i= F_i0, F_in
         if ( prlprso .gt. F_wlnph(i,j,k) ) pnindex(i) = k
      enddo
      enddo
!
      do i= F_i0, F_in
!********************************************************************
!                                                                   *
! If:    output pressure   <   hydrostatic pressure on the          *
!                              first level of the model             *
!                                                                   *
! Then:  upward extrapolation                                       *
!                                                                   *
!********************************************************************
         if ( pnindex(i) .eq. 0 ) then
!
            prd = prlprso - F_wlnph(i,j,1)
!
            F_outp(i,j,kk) = F_inp(i,j,1) + prd * F_deriv(i,j,1)
!
!********************************************************************
!                                                                   *
! If:    output pressure   >   hydrostatic pressure on the          *
!                              last level of the model              *
!                                                                   *
! Then:  downward extrapolation                                     *
!                                                                   *
! We put in F_outp the value of F_inp 1on the lowest level of the model*
!                                                                   *
!********************************************************************
         else if (pnindex(i) .eq. F_nk ) then
!
            F_outp(i,j,kk)= F_inp(i,j,F_nk)
!********************************************************************
!                                                                   *
! Else, interpolate between appropriate levels.                     *
!                                                                   *
!********************************************************************
!
         else
            pnk = pnindex(i) + 1
            pnkm= pnindex(i)
!
            prd = F_wlnph(i,j,pnk) - F_wlnph(i,j,pnkm)
            invprd = prd
            invprd = 1.0/invprd
!     
            pre = prlprso - 0.5 * (F_wlnph(i,j,pnk) + F_wlnph(i,j,pnkm))
!     
            prfm0 = 0.5 * ( F_inp(i,j,pnk) + F_inp(i,j,pnkm) )
!     
            prfm1 = ( F_inp(i,j,pnk) - F_inp(i,j,pnkm) ) * invprd
!     
            if ( F_cubic_L ) then
!     
               prr = 0.125 * prd * prd - 0.5 * pre * pre
!     
               prfm2 = ( F_deriv(i,j,pnk) - F_deriv(i,j,pnkm) ) * invprd
!     
               prfm3 = F_deriv(i,j,pnk) + F_deriv(i,j,pnkm)
               prfm3 = ( prfm3 - prfm1 - prfm1 ) * invprd *invprd
!     
               prfl2 = prfm2 + 2.0 * pre * prfm3
!     
               F_outp(i,j,kk)= prfm0 + pre * prfm1 - prr * prfl2
!     
            else
!     
               F_outp(i,j,kk)= prfm0 + pre * prfm1
!
            endif
!
         endif
!
      end do
!
!     ---------------------------------------------------------------
!
 500  enddo
 600  enddo
!$omp enddo
!$omp end parallel

      return
      end
