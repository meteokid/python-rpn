!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r sol_fft8_3 - parallel direct solution of horizontal Helmholtz
!                   problem with ffft8
!
#include "model_macros_f.h"
!
      subroutine sol_fft8_3( sol, Rhs                      , &
                             Minx, Maxx, Miny, Maxy, njl   , &
                             Minz, Maxz, Nk, Nkl, Gni, Gnj , &
                                       Minij, Maxij, L_nij , &
                             minx1, maxx1, minx2, maxx2,nx3, &
                             F_npex1, F_npey1, ai, bi, ci  , &
                             fdg2,fdwfft,F_lam_L )
      implicit none
#include <arch_specific.hf>
!
      logical F_lam_L
      integer Minx, Maxx, Miny, Maxy, njl
      integer Minz, Maxz, Nk, Nkl, Gni, Gnj
      integer Minij, Maxij, L_nij
      integer minx1, maxx1, minx2, maxx2,nx3
      integer F_npex1, F_npey1

      real*8  Sol(Minx:Maxx,Miny:Maxy,Nk), Rhs(Minx:Maxx,Miny:Maxy,Nk)
      Real*8  ai(minx1:maxx1,minx2:maxx2,nx3), &
              bi(minx1:maxx1,minx2:maxx2,nx3), &
              ci(minx1:maxx1,minx2:maxx2,nx3)
      real*8  fdwfft(Miny:Maxy,Minz :Maxz ,Gni+2+F_npex1)
      real*8  fdg2  (Minz:Maxz,Minij:Maxij,Gnj  +F_npey1)
!
!author    Abdessamad Qaddouri- JULY 1999
!
!revision
! v1_96 - alain patoine            - rename sol_fft8, sol_fft8_2 (calling sequence changed)
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
!
!arguments
!   o      - Sol     - result
!   i      - Rhs     - r.h.s. of elliptic equation
!   i      - Gni     - number of points in x-direction
!   i      - Gnj     - number of points in y-direction
!
#include "ptopo.cdk"

      integer i, j, k, ki, jw, jr
      integer kkii, ki0, kin, kitotal, kilon
      real*8 pri
      real*8, parameter :: zero=0.0
!     __________________________________________________________________
!
      if (F_lam_L) then
         call sol_fft8_lam2( sol, Rhs                      , &
                             Minx, Maxx, Miny, Maxy, njl   , &
                             Minz, Maxz, Nk, Nkl, Gni, Gnj , &
                                       Minij, Maxij, L_nij , &
                             minx1, maxx1, minx2, maxx2,nx3, &
                             F_npex1, F_npey1, ai, bi, ci  , &
                             fdg2, fdwfft, F_lam_L )
         return
      endif

      call itf_fft_set ( Gni, 'PERIODIC', pri )

      call rpn_comm_transpose( Rhs, Minx, Maxx, Gni, (Maxy-Miny+1), &
                               Minz, Maxz, Nk, fdwfft, 1, 2 )

!     projection ( wfft = x transposed * g )

!$omp parallel private(ki0,kin,kkii,jr) shared(kitotal,kilon,ai,bi,ci)

!$omp do
      do i= 1,Gni
         fdwfft(njl+1:Maxy,  Minz:nkl ,i)= zero
         fdwfft( Miny:Maxy, Nkl+1:Maxz,i)= zero
      enddo
!$omp enddo
!
!$omp do
      do k=1,Nkl
         call itf_fft_drv (fdwfft(Miny,k,1),(Maxy-Miny+1)*(Maxz-Minz+1), &
                                          1,(Maxy-Miny+1), -1 )
      enddo
!$omp enddo

!$omp do
      do k = 1, Nkl
         do i = 0, (Gni)/2
            do jw = 1, (Maxy-Miny+1)
               fdwfft(jw,k,2*i+1) = pri * fdwfft(jw,k,2*i+1)
               fdwfft(jw,k,2*i+2) = pri * fdwfft(jw,k,2*i+2)
            enddo
         enddo
         fdwfft(1:Maxy-Miny+1,k,Gni+2) = zero
         fdwfft(1:Maxy-Miny+1,k,    2) = fdwfft(1:Maxy-Miny+1,k,1)
      enddo
!$omp enddo

!
!$omp single
      call rpn_comm_transpose &
           ( fdwfft(1,1,2), Miny, Maxy, Gnj, (Maxz-Minz+1), &
                           Minij, Maxij, Gni, fdg2, 2, 2 )
!$omp end single
!
      kitotal = (Maxz-Minz+1)*L_nij
      kilon = (kitotal + Ptopo_npeOpenMP)/Ptopo_npeOpenMP

!$omp do
      do kkii = 1,Ptopo_npeOpenMP
          j =1
          ki0 = 1 + kilon*(kkii-1)
          kin = min(kitotal, kilon*kkii)
         
          do ki= ki0, kin
             fdg2(ki,1,j) = bi(ki,1,j)*fdg2(ki,1,j)
          enddo

          do j =2, Gnj
            jr =  j - 1
            do ki= ki0,kin
               fdg2(ki,1,j) = bi(ki,1,j)*fdg2(ki,1,j) - ai(ki,1,j) &
                                                * fdg2(ki,1,jr)
            enddo
          enddo

          do j = Gnj-1, 1, -1
             jr =  j + 1
             do ki= ki0, kin
                fdg2(ki,1,j) = fdg2(ki,1,j) - ci(ki,1,j) * fdg2(ki,1,jr)
             enddo
          enddo
      enddo
!$omp enddo
!
!$omp single
      call rpn_comm_transpose &
           ( fdwfft(1,1,2), Miny, Maxy, Gnj, (Maxz-Minz+1), &
                           Minij, Maxij, Gni, fdg2,- 2, 2 )
!$omp end single

!$omp do
      do k = 1, Nkl
         fdwfft(1:Maxy-Miny+1,k,1)     = fdwfft(1:Maxy-Miny+1,k,2)
         fdwfft(1:Maxy-Miny+1,k,2)     = zero
         fdwfft(1:Maxy-Miny+1,k,Gni+2) = zero
      enddo
!$omp enddo

!     inverse projection ( r = x * w )

!$omp do
      do k=1, Nkl
         call itf_fft_drv (fdwfft(Miny,k,1),(Maxy-Miny+1)*(Maxz-Minz+1), &
                                          1,(Maxy-Miny+1), +1 )
      enddo
!$omp enddo

!$omp end parallel
!
      call rpn_comm_transpose( Sol, Minx, Maxx, Gni, (Maxy-Miny+1), &
                                    Minz, Maxz, Nk, fdwfft, -1, 2 )
!     __________________________________________________________________
!
      return
      end
