!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r hzd_main - applies horizontal diffusion on a given set of fields
!
#include "model_macros_f.h"
!
      subroutine hzd_main 
      implicit none
#include <arch_specific.hf>
!
!author
!     Joseph-Pierre Toviessi ( after version v1_03 of dif )
!
!revision
! v2_00 - Desgagne M.       - initial MPI version 
! v2_10 - Qaddouri&Desgagne - higher order diffusion operator
! v2_21 - Desgagne M.       - new call to horwavg
! v2_30 - Edouard  S.       - adapt for vertical hybrid coordinate
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_01 - Toviessi J. P.    - add call hzd_ho_parite
! v3_02 - Desgagne M.       - correction for non-hydrostatic version
! v3_10 - Corbeil & Desgagne & Lee - AIXport+Opti+OpenMP
! v3_20 - Tanguay M.        - Introduce Hzd_hzdmain_n_L
! v3_21 - Desgagne M.       - added explicit horiz diff.
! v4_xx - Gravel, S.        - adapt to vertical staggering
! v3_30 - Tanguay M.        - activate Hzd_type_S='HO_EXP' 
! v4_04 - Girard-Plante     - Diffuse only real winds, zdot and theta.
!                           - Move psadj code in new s/r psadj
! v4_05 - Plante A.         - Diffusion of w all the time
! v4_05 - Lepine M.         - VMM replacement with GMM
! v4_15 - Desgagne M.       - refonte majeure
! v4_40 - Plante A.         - Equatorial_sponge
! v4_50 - Desgagne M.       - New control switches
!

#include "gmm.hf"
#include "glb_ld.cdk"
#include "hzd.cdk"
#include "vspng.cdk"
#include "schm.cdk"
#include "eq.cdk"
#include "vt1.cdk"

      type(gmm_metadata) :: mymeta
      logical switch_on_hzd, switch_on_vrtspng, switch_on_eqspng, &
              switch_on_theta, switch_on_psadj, mustrwnd, pwupdate
      integer i,istat
      real, pointer, dimension(:,:,:) :: tr
!     _________________________________________________________________
!
      switch_on_hzd     = Hzd_ho_L 
      switch_on_theta   = Hzd_lnr_theta.lt.0.
      switch_on_vrtspng = Vspng_nk.ge.1
      switch_on_eqspng  = Eq_nlev .gt.1
      switch_on_psadj   = Schm_psadj_L

      mustrwnd= switch_on_hzd.or.switch_on_vrtspng.or.switch_on_eqspng
      pwupdate= switch_on_hzd.or.switch_on_vrtspng.or.switch_on_theta

      istat = gmm_get(gmmk_ut1_s,ut1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'hzd_main ERROR at gmm_get(ut1)'
      istat = gmm_get(gmmk_vt1_s,vt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'hzd_main ERROR at gmm_get(vt1)'
      istat = gmm_get(gmmk_zdt1_s,zdt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'hzd_main ERROR at gmm_get(zdt1)'
      istat = gmm_get(gmmk_tt1_s,tt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'hzd_main ERROR at gmm_get(tt1)'
      istat = gmm_get(gmmk_wt1_s,wt1,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'hzd_main ERROR at gmm_get(wt1)'

      call itf_ens_hzd ( ut1, vt1, tt1, LDIST_DIM, G_nk+1 )
!     
!**************************************
!  3. Horizontal diffusiion on theta  *
!**************************************
!
      if ( switch_on_theta ) call hzd_theta

      if (mustrwnd) call iw2rwnd ( ut1, vt1, LDIST_DIM, G_nk, 1 )
!
!***************************
!  1. Horizontal diffusion *
!***************************
!
      if ( switch_on_hzd ) then
         call timing_start ( 60, 'HORDIFF' )

         call hzd_ctrl3 ( ut1, 'U', G_nk  )
         call hzd_ctrl3 ( vt1, 'V', G_nk  )
         
         call hzd_ctrl3 (zdt1, 'S', G_nk+1)
         call hzd_ctrl3 ( wt1, 'S', G_nk+1)

         do i=1, Hzd_tr3d_ntr
            nullify (tr)
            istat = gmm_get('TR/'//trim(Hzd_tr3d_name_S(i))//':P',tr,mymeta)
            if (istat.eq.0) &
                 call hzd_ctrl3 (tr, 'S_TR', G_nk+1)
         end do

         call timing_stop ( 60 )
      endif
!     
!***********************
!  2. Vertical sponge  *
!***********************
!
      if ( switch_on_vrtspng ) then
         call timing_start ( 65, 'V_SPNG' )
         call vspng_drv3 (ut1,vt1,zdt1,wt1,tt1,LDIST_DIM,G_nk)
         call timing_stop ( 65 )
      endif
!     
!*************************
!  3. Equatorial sponge  *
!*************************
!
      if ( switch_on_eqspng ) then
         call timing_start ( 68, 'EQUA_SPNG')
         call eqspng_drv (ut1,vt1,LDIST_DIM,G_nk)
         call timing_stop ( 68 )
      endif

      if (mustrwnd) call iw2rwnd ( ut1, vt1, LDIST_DIM, G_nk, 2 )

      if ( switch_on_psadj ) call psadj

      call itf_ens_hzd ( ut1, vt1, tt1, LDIST_DIM, G_nk+1 )

      if (pwupdate .or. switch_on_psadj ) call pw_update_GPW
      if (pwupdate .or. switch_on_eqspng) call pw_update_UVT ('P')
!
!     _________________________________________________________________
!
      return
      end
