!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r out_fstecr
!
!!#include "model_macros_f.h"
!
      subroutine out_fstecr ( fa,lminx,lmaxx,lminy,lmaxy,rf,nomvar,mul,  &
                              add,kind,nkfa,ind_o,nk_o,nbit,F_empty_stk_L)
      implicit none
#include <arch_specific.hf>
!
      character* (*) nomvar
      logical F_empty_stk_L
      integer lminx,lmaxx,lminy,lmaxy,nkfa,nbit,nk_o,kind
      integer ind_o(nk_o)
      real fa(lminx:lmaxx,lminy:lmaxy,nkfa),rf(nkfa),mul,add
!
!author
!    Michel Desgagne - Fall 2012
!
!revision
! v4_50 - Desgagne M. - Initial version

#include "glb_ld.cdk"
#include "out3.cdk"
#include "out.cdk"
#include "level.cdk"
#include "ptopo.cdk"
      include "out_meta.cdk"
!
Interface
subroutine out_stkecr ( fa,lminx,lmaxx,lminy,lmaxy,meta,nplans  , &
                        l_id,l_if,l_jd,l_jf, g_id,g_if,g_jd,g_jf, &
                        ip2,ip3 )
      include "out_meta.cdk"
      integer lminx,lmaxx,lminy,lmaxy,nplans
      integer l_id,l_if,l_jd,l_jf, g_id,g_if,g_jd,g_jf
      integer ip2,ip3
      real fa(lminx:lmaxx,lminy:lmaxy,nplans)
      type (meta_fstecr), dimension(:), pointer :: meta
End Subroutine out_stkecr
End Interface

      character*8 dumc
      integer modeip1,ip3,ig3,ig4,l_id,l_if,l_jd,l_jf,i,j,k
      integer max_stack
      integer, save :: istk = 0
      real, save, dimension (:,:,:), pointer :: f2c => null()
      type (meta_fstecr), save, dimension(:), pointer :: meta => null()
!
!----------------------------------------------------------------------
!
      max_stack= Ptopo_nblocx*Ptopo_nblocy
      if (.not.associated(meta)) allocate (meta(max_stack))
      if (.not.associated(f2c )) allocate (f2c(l_minx:l_maxx,l_miny:l_maxy,max_stack))

      l_id = max(1   ,(Out_gridi0-Out_myproci0+1))
      l_if = min(l_ni,(Out_gridin-Out_myproci0+1))
      l_jd = max(1   ,(Out_gridj0-Out_myprocj0+1))
      l_jf = min(l_nj,(Out_gridjn-Out_myprocj0+1))

      ip3 = Out_ip3
      if (ip3.lt.0) ip3 = Out_npas
      ig4 = 0

      if (F_empty_stk_L) then
         if ( istk .gt. 0) then
            call out_stkecr ( f2c,l_minx,l_maxx,l_miny,l_maxy            ,&
                              meta,istk, l_id,l_if,l_jd,l_jf             ,&
                              Out_gridi0,Out_gridin,Out_gridj0,Out_gridjn,&
                              Out_ip2,ip3 )
            out_stk_cnt= out_stk_cnt + 1
            out_stk_part(out_stk_cnt) = istk
         endif
         istk= 0
         deallocate (meta, f2c) ; nullify (meta, f2c)
         return
      endif

      modeip1=level_mode_ip1
!     Force oldip1style for output on pressure levels
      if (kind.eq.2) modeip1=3

      ig3 = 0
      if (Out3_uencode_L) then
         ig3 = 1                             ! points de masse
         if (trim(nomvar) == 'UT1')  ig3 = 2 ! points U
         if (trim(nomvar) == 'VT1')  ig3 = 3 ! points V
      endif

      do k= 1, nk_o
         istk = istk + 1
         do j= 1, l_nj
         do i= 1, l_ni
            f2c(i,j,istk)= fa(i,j,ind_o(k))*mul + add
         end do
         end do
         call convip(meta(istk)%ip1,rf(ind_o(k)),kind,modeip1,dumc,.false.)
         meta(istk)%nv   = nomvar
         meta(istk)%ig1  = Out_ig1
         meta(istk)%ig2  = Out_ig2
         meta(istk)%ig3  = ig3
         meta(istk)%ni   = Out_gridin - Out_gridi0 + 1
         meta(istk)%nj   = Out_gridjn - Out_gridj0 + 1
         meta(istk)%nbits= nbit
         meta(istk)%dtyp = 134
         if (istk.eq.max_stack) then
            call out_stkecr ( f2c,l_minx,l_maxx,l_miny,l_maxy            ,&
                              meta,istk, l_id,l_if,l_jd,l_jf             ,&
                              Out_gridi0,Out_gridin,Out_gridj0,Out_gridjn,&
                              Out_ip2,ip3 )
            istk=0
            out_stk_full= out_stk_full + 1
         endif
      end do
!
!--------------------------------------------------------------------
!
      return
      end

      subroutine out_flush_stk ()
      implicit none
#include <arch_specific.hf>
!
!author
!    Michel Desgagne - Fall 2012
!
!revision
! v4_50 - Desgagne M. - Initial version

#include "out3.cdk"

      real dummy
!
!--------------------------------------------------------------------
!
      if (Out3_fullplane_L) &
           call out_fstecr ( dummy,dummy,dummy,dummy,dummy,dummy,&
                             dummy,dummy,dummy,dummy,dummy,dummy,&
                             dummy,dummy, .true. )
!
!--------------------------------------------------------------------
!
      return
      end     

      subroutine out_stat
      implicit none
#include <arch_specific.hf>
!
!author
!    Michel Desgagne - Fall 2012
!
!revision
! v4_50 - Desgagne M. - Initial version

      include "out_meta.cdk"
!
!--------------------------------------------------------------------
!
      print*, 'OUTPUT_STAT: full stack called: ',out_stk_full,' times'
      if (out_stk_cnt .gt. 0) then
         print*, 'OUTPUT_STAT: partial stack called: ',out_stk_cnt, 'times'
         print*, 'OUTPUT_STAT: ',out_stk_part(1:out_stk_cnt)
      endif
!
!--------------------------------------------------------------------
!
      return
      end      

      BLOCK DATA out_stat_start
      include "out_meta.cdk"
      data out_stk_full,out_stk_cnt /0,0/
      END BLOCK DATA out_stat_start
