!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!
!*s/r yyg_rhsuv - Exchange and interp the right-hand sides: Ru, Rv for Yin-Yang
!
#include "model_macros_f.h"
!
      subroutine yyg_rhsuv ( F_oru, F_orv, DIST_DIM, Nk )
      implicit none
#include <arch_specific.hf>
!
      integer DIST_DIM, Nk
      real F_oru (DIST_SHAPE,  Nk), F_orv (DIST_SHAPE,  Nk)
!
!author
!     Qaddouri/Lee      Nov 2009
!
!revision
! v4_40 - Qaddouri/Lee      - initial MPI version (for Yin-Yang)
!
!object
!     Exchange and interp winds between Yin, Yang
!
!arguments
!
!implicits
#include "glb_ld.cdk"
#include "geomg.cdk"
!
      integer i, j, k, i0, j0, in, jn
      real temp_F_u(LDIST_SHAPE,nk), temp1_F_u(LDIST_SHAPE,nk),   &
           temp_F_v(LDIST_SHAPE,nk), temp1_F_v(LDIST_SHAPE,nk)
!
!     __________________________________________________________________
!
!  lazy code ===> should be fixed
      temp_F_u (:,:,:)=0.0
      temp_F_v (:,:,:)=0.0
      temp1_F_u(:,:,:)=0.0
      temp1_F_v(:,:,:)=0.0

! Fill temp U vectors
      i0=1
      in=l_ni
      j0=1
      jn=l_nj
! Reset indices to compute Ru
      if (l_west ) i0 = 2
      if (l_east ) in = l_niu-1
      if (l_south) j0 = 3
      if (l_north) jn = l_njv-1
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
         temp_F_u (i,j,k)= F_oru(i,j,k)
         temp1_F_u(i,j,k)= F_oru(i,j,k)
      enddo
      enddo
      enddo

! Reset indices to compute Rv
      if (l_west ) i0 = 3
      if (l_east ) in = l_niu-1
      if (l_south) j0 = 2
      if (l_north) jn = l_njv-1
      do k=1,l_nk
      do j=j0,jn
      do i=i0,in
         temp_F_v (i,j,k)= F_orv(i,j,k)
         temp1_F_v(i,j,k)= F_orv(i,j,k)
      enddo
      enddo
      enddo

      call rpn_comm_xch_halo(temp_F_u ,LDIST_DIM,l_niu,l_nj ,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo(temp_F_v ,LDIST_DIM,l_ni ,l_njv,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo(temp1_F_u,LDIST_DIM,l_niu,l_nj ,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )
      call rpn_comm_xch_halo(temp1_F_v,LDIST_DIM,l_ni ,l_njv,G_nk, &
                      G_halox,G_haloy,G_periodx,G_periody,l_ni,0 )

      call  yyg_vecbc1(temp1_F_u,temp_F_u,temp_F_v,LDIST_DIM,G_nk)
      call  yyg_vecbc2(temp1_F_v,temp_F_v,temp_F_u,LDIST_DIM,G_nk)

!Now copy back only the data that has to be updated.

!$omp parallel private(i,j) shared(temp1_F_u,temp1_F_v)
      if (l_west) then
!$omp do
         do k= 1, G_nk
            do j= 1,l_nj
               F_oru(1,j,k)= temp1_F_u (1,j,k)
            enddo
            do j= 1,l_njv
               F_orv(1,j,k)= temp1_F_v (1,j,k)
               F_orv(2,j,k)= temp1_F_v (2,j,k)
            enddo
         enddo
!$omp enddo
      endif

      if (l_east) then
!$omp do
         do k= 1, G_nk
            do j= 1,l_nj
               F_oru(l_niu,j,k)= temp1_F_u (l_niu,j,k)
            enddo
            do j= 1,l_njv
               F_orv(l_niu,j,k)= temp1_F_v (l_niu,j,k)
               F_orv(l_ni,j ,k)= temp1_F_v (l_ni,j ,k)
            enddo
         enddo
!$omp enddo
      endif

      if (l_south) then
!$omp do
         do k= 1, G_nk
            do i= 1, l_niu
               F_oru(i,1,k)=temp1_F_u (i,1,k)
               F_oru(i,2,k)=temp1_F_u (i,2,k)
            enddo
            do i= 1, l_ni
               F_orv(i,1,k)=temp1_F_v (i,1,k)
            enddo
         enddo
!$omp enddo
      endif

      if (l_north) then
!$omp do
         do k= 1, G_nk
            do i= 1, l_niu
               F_oru(i,l_njv,k)= temp1_F_u (i,l_njv,k)
               F_oru(i,l_nj ,k)= temp1_F_u (i,l_nj ,k)
            enddo
            do i= 1, l_ni
               F_orv(i,l_njv,k)= temp1_F_v (i,l_njv,k)
            enddo
         enddo
!$omp enddo
      endif
!$omp  end parallel
!
!     __________________________________________________________________
!
      return
      end
