!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
!**s/r set_geom - initialize model geometry
!
#include "model_macros_f.h"
!
      subroutine set_geom
!
      implicit none
#include <arch_specific.hf>
!
!author
!     M. Desgagne - V. Lee ( after version v1_03 of setgeom )
!
!revision
! v2_00 - Desgagne/Lee     - initial MPI version
! v2_20 - Lee V.           - convert xgi,ygi to real*8
! v2_30 - Edouard S.       - adapt for vertical hybrid coordinate
! v2_30 - A. Methot        - introduction of a new stretch grid design
! v2_30                        with upper limits on grid point spacing
! v2_30 - Desgagne M.      - entry vertical interpolator in gemdm
! v3_00 - Desgagne & Lee   - Lam configuration
! v3_01 - Desgagne M.      - Introduce Geomn_latrx,Geomn_lonrx
! v3_11 - Tanguay M.       - Introduce Grd_gauss_L 
! v3_21 - Desgagne M.      - Optimization
! v3_30 - Dugas B.         - Corriger l'allocation de Geomg*
! v3_30 - Desgagne M.      - Add calls to: set_cori, set_intuv 
!                                          and itf_phy_vlsp
! v4_40 - Lee V.           - add reciprocal vectors for Geomg_invcy_8,invcyv_8
!
!object
!	
!arguments
!	none
!
!implicits
#include "glb_ld.cdk"
#include "glb_pil.cdk"
#include "lun.cdk"
#include "dcst.cdk"
#include "schm.cdk"
#include "cstv.cdk"
#include "geomn.cdk"
#include "grd.cdk"
#include "geomg.cdk"
#include "p_geof.cdk"
#include "hgc.cdk"
#include "xst.cdk"
#include "ptopo.cdk"
#include "type.cdk"
#include "ver.cdk"
!
      integer  ezgdef_fmem,gdll
      external ezgdef_fmem,gdll
      character*12 gem_debug
      character*8 dumc
      integer offi,offj,indx,err,ierx,iery,dgid
      integer i,j,k,dimy,istat,pnip1
      real   xfi(l_ni),yfi(l_nj),height,heightp1
      real*8 xgi_8(Grd_ni+2), ygi_8(Grd_nj+2),xxgi_8
      real*8 rad2deg_8,deg2rad_8
      real*8 ZERO_8, HALF_8, ONE_8, TWO_8, CLXXX_8
      parameter( ZERO_8  = 0.0 )
      parameter( HALF_8  = 0.5 )
      parameter( ONE_8   = 1.0 )
      parameter( TWO_8   = 2.0 )
      parameter( CLXXX_8 = 180.0 )

      namelist / dyngrid /  &
           Grd_left, Grd_belo, Grd_x0, Grd_xl, Grd_y0, Grd_yl
!
!     ---------------------------------------------------------------
!
      rad2deg_8 = CLXXX_8/Dcst_pi_8
      deg2rad_8 = acos( -ONE_8 )/CLXXX_8

      allocate (G_xg_8(1-G_ni:2*G_ni) , G_yg_8(1-G_nj:2*G_nj) )
      allocate (Geomn_latrx(l_ni,l_nj), Geomn_lonrx(l_ni,l_nj))
      allocate (Geomn_latgs(G_nj),Geomn_longs(G_ni+1), &
                Geomn_latgv(G_nj),Geomn_longu(G_ni+1))

      call set_gemHgrid2 ( xgi_8, ygi_8, Grd_ni, Grd_nj, Grd_dx, Grd_dy,       & 
                           Grd_x0, Grd_xl, Grd_left, Grd_y0, Grd_yl, Grd_belo, &
                           Grd_nila, Grd_njla, Grd_dxmax, Grd_dymax,           &
                           Grd_yinyang_L, Grd_gauss_L, G_lam, Grd_uniform_L,   &
                           ierx, iery, Lun_out.gt.0 )

      if ( (ierx.ne.0) .and. (Lun_out.gt.0) ) &
             write (Lun_out,*)'ERROR in generating XGI_8 values!'
      if ( (iery.ne.0) .and. (Lun_out.gt.0) ) &
             write (Lun_out,*)'ERROR in generating YGI_8 values!'
      call handle_error(ierx,'set_geom','set_geom')
      call handle_error(iery,'set_geom','set_geom')
!
      if (Lun_out.gt.0) then
         write (Lun_out,1000)
         write (Lun_out, nml=dyngrid)
         write (Lun_out,1005) G_nk,Grd_rcoef
         do k=1,G_nk
            height  =-16000./alog(10.)*alog(Ver_hyb%m(k))
            if (k.lt.G_nk)&
            heightp1 =-16000./alog(10.)*alog(Ver_hyb%m(k+1))
            if (k.eq.G_nk) heightp1 = 0.
            call convip(pnip1,Ver_hyb%m(k),5,1,dumc,.false.)
            write (Lun_out,1006) k,Ver_hyb%m(k),height, &
                                 height-heightp1,pnip1
         end do
      endif
!
! call parpos_from_file (xgi_8,ygi_8,Grd_ni,Grd_nj)
!
!      Grd_uniform_L   = (G_ni.eq.Grd_nila).and.(G_nj.eq.Grd_njla).and..not.Grd_gauss_L
!
      do i=1,G_ni
         G_xg_8(i) = xgi_8(i)*deg2rad_8
      end do
      do j=1,G_nj
         G_yg_8(j) = ygi_8(j)*deg2rad_8
      enddo
!
      do i=-G_ni+1,0
         G_xg_8(i) = G_xg_8(i+G_ni) - TWO_8*Dcst_pi_8
      end do
      do i=G_ni+1,2*G_ni
         G_xg_8(i) = G_xg_8(i-G_ni) + TWO_8*Dcst_pi_8
      end do
!
      G_yg_8( 0    ) = -(G_yg_8(1) + Dcst_pi_8)
      G_yg_8(-1    ) = -TWO_8*Dcst_pi_8 -  &
                       (G_yg_8(0)+G_yg_8(1)+G_yg_8(2))
      G_yg_8(G_nj+1) =  Dcst_pi_8 - G_yg_8(G_nj)
      G_yg_8(G_nj+2) =  TWO_8*Dcst_pi_8 - &
                       (G_yg_8(G_nj+1)+G_yg_8(G_nj)+G_yg_8(G_nj-1))
      do j=-2,-G_nj+1,-1
         G_yg_8(j) = 1.01*G_yg_8(j+1)
      end do
      do j=G_nj+3,2*G_nj
         G_yg_8(j) = 1.01*G_yg_8(j-1)
      end do
!
!C             Compute longitudes in degrees for model output
!              ----------------------------------------------
      do i = 1, G_ni+1
         Geomn_longs(i) =  G_xg_8(i)  * rad2deg_8
         Geomn_longu(i) = (G_xg_8(i+1)+G_xg_8(i))*HALF_8*rad2deg_8
      end do
      do i = 1, G_nj
         Geomn_latgs(i) = G_yg_8(i) * rad2deg_8
      end do

      do i =1, G_njv
         Geomn_latgv(i) = (G_yg_8(i+1)+G_yg_8(i))*HALF_8*rad2deg_8
      end do

      call hpalloc(Geomg_x_8_   ,LARRAY1DX, err,8)
      call hpalloc(Geomg_y_8_   ,LARRAY1DY, err,8)
      call hpalloc(Geomg_xu_8_  ,LARRAY1DX, err,8)
      call hpalloc(Geomg_yv_8_  ,LARRAY1DY, err,8)
      call hpalloc(Geomg_hx_8_  ,LARRAY1DX, err,8)
      call hpalloc(Geomg_hy_8_  ,LARRAY1DY, err,8)
      call hpalloc(Geomg_hxu_8_ ,LARRAY1DX, err,8)
      call hpalloc(Geomg_hyv_8_ ,LARRAY1DY, err,8)
      call hpalloc(Geomg_sx_8_  ,LARRAY1DX, err,8)
      call hpalloc(Geomg_sy_8_  ,LARRAY1DY, err,8)
      call hpalloc(Geomg_cx_8_  ,LARRAY1DX, err,8)
      call hpalloc(Geomg_cy_8_  ,LARRAY1DY, err,8)
      call hpalloc(Geomg_cy2_8_ ,LARRAY1DY, err,8)
      call hpalloc(Geomg_cyv_8_ ,LARRAY1DY, err,8)
      call hpalloc(Geomg_cyv2_8_,LARRAY1DY, err,8)
      call hpalloc(Geomg_invDX_8_   ,LARRAY1DX, err,8)
      call hpalloc(Geomg_invDXu_8_  ,LARRAY1DX, err,8)
      call hpalloc(Geomg_invDY_8_   ,LARRAY1DY, err,8)
      call hpalloc(Geomg_invDYv_8_  ,LARRAY1DY, err,8)
      call hpalloc(Geomg_invcy_8_   ,LARRAY1DY, err,8)
      call hpalloc(Geomg_invcyv_8_   ,LARRAY1DY, err,8)
      call hpalloc(Geomg_invcy2_8_  ,LARRAY1DY*2, err,1)
      call hpalloc(Geomg_invcyv2_8_ ,LARRAY1DY*2, err,1)
!
      offi = Ptopo_gindx(1,Ptopo_myproc+1)-1
      offj = Ptopo_gindx(3,Ptopo_myproc+1)-1
!
      do i=1-G_halox,l_ni+G_halox
         indx = offi + i
         Geomg_x_8  (i) =  G_xg_8(indx)
         Geomg_xu_8 (i) = (G_xg_8(indx+1)+ G_xg_8(indx)) * HALF_8
         Geomg_hx_8 (i) =  G_xg_8(indx+1)- G_xg_8(indx)
         Geomg_hxu_8(i) = (G_xg_8(indx+2)- G_xg_8(indx)) * HALF_8
         Geomg_invDX_8(i)  = TWO_8/( G_xg_8(indx+1)- G_xg_8(indx-1))
         Geomg_invDXu_8(i) = ONE_8/( G_xg_8(indx+1)- G_xg_8(indx))
         Geomg_sx_8(i) = sin( Geomg_x_8(i) )
         Geomg_cx_8(i) = cos( Geomg_x_8(i) )
      end do

      do j=1-G_haloy,l_nj+G_haloy
         indx = offj + j
         Geomg_y_8  (j) =  G_yg_8(indx)
         Geomg_yv_8 (j) = (G_yg_8(indx+1)+ G_yg_8(indx)) * HALF_8
         Geomg_hy_8 (j) =  G_yg_8(indx+1)- G_yg_8(indx)
         Geomg_hyv_8(j) = (G_yg_8(indx+2)- G_yg_8(indx)) * HALF_8
         Geomg_sy_8  (j)= sin( Geomg_y_8 (j) )
         Geomg_cy_8  (j)= cos( Geomg_y_8 (j) )
         Geomg_cy2_8 (j)= cos( Geomg_y_8 (j) )**2
         Geomg_cyv_8 (j)= cos( Geomg_yv_8(j) )
         Geomg_cyv2_8(j)= cos( Geomg_yv_8(j) )**2
         Geomg_invDY_8(j) =geomg_cy2_8(j) / &
            ( sin((G_yg_8(indx+1)+G_yg_8(indx  ))* HALF_8) -  &
              sin((G_yg_8(indx  )+G_yg_8(indx-1))* HALF_8) )
         Geomg_invDYv_8(j)=geomg_cyv2_8(j) / &
                        ( sin( G_yg_8(indx+1))-sin(G_yg_8(indx)) )
      end do
!
      dimy = l_nj+2*G_haloy
      call vrec (geomg_invcy2_8  , geomg_cy2_8 , dimy )
      call vrec (geomg_invcyv2_8 , geomg_cyv2_8, dimy )
      call vrec (geomg_invcy_8   , geomg_cy_8, dimy )
      call vrec (geomg_invcyv_8  , geomg_cyv_8, dimy )
!
      do i=1,l_ni
         indx = offi + i
         xfi(i) = xgi_8(indx)
      end do
      do i=1,l_nj
         indx = offj + i
         yfi(i) = ygi_8(indx)
      end do
!
      if (Lun_debug_L) then
         do i=1,l_ni
            print *,'PE_xpos:',Ptopo_myproc,i,xfi(i)
         enddo
         do i=1,l_nj
            print *,'PE_ypos:',Ptopo_myproc,i,yfi(i)
         enddo
      endif
!
      dgid = ezgdef_fmem (l_ni , l_nj , 'Z', 'E', Hgc_ig1ro, &
                Hgc_ig2ro, Hgc_ig3ro, Hgc_ig4ro, xfi , yfi )
      err = gdll (dgid,Geomn_latrx,Geomn_lonrx)
      do j=1,l_nj
      do i=1,l_ni
         if (Geomn_lonrx(i,j).ge.180.0) Geomn_lonrx(i,j)=Geomn_lonrx(i,j)-360.0
      enddo 
      enddo 
!
!C              Computes coriolis factor
!		------------------------
      call set_cori()
!
!C              Computes (u,v) interpolation coefficients for coriolis
!		and right hand side computations
!		------------------------------------------------------
      call set_intuv()
!    
 1000 format(/,'INITIALIZATION OF MODEL GEOMETRY (S/R SET_GEOM)', &
             /'===============================================')
 1005 format (/'STAGGERED VERTICAL LAYERING ON',I4,' MOMENTUM HYBRID LEVELS WITH ', &
               'Grd_rcoef= ',2f7.2,':'/ &
               2x,'level',10x,'HYB',8x,'~HEIGHTS',5x,'~DELTA_Z',7x,'IP1')
 1006 format (1x,i4,3x,es16.4,2(6x,f6.0),4x,i10)
!
!     ---------------------------------------------------------------
!
      return
      end
