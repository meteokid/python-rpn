!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer,
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer
!version 3 or (at your option) any later version that should be found at:
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software;
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec),
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!** s/p itf_phy_slb
Subroutine itf_phy_slb ( geofld ,Phy_busdyn3D ,Phy_busper3D ,Phy_busvol3D ,&
                     esiz,dsiz,fsiz,vsiz,dt,kount,phy_timing,ni,nj,nk,pslic )
  Implicit None

  Integer esiz,dsiz,fsiz,vsiz,kount,ni,nj,nk,pslic,nthreads
  Real, Dimension(:), Pointer ::  geofld, Phy_busdyn3D, Phy_busper3D, &
                                  Phy_busvol3D
  Real dt, phy_timing(ni,nj) 

  !Author
  !          L. Spacek (May 2010)
  !
  !Revisions
  ! 001
  !
  !Object
  !          The main physics subroutine
  !
  !Arguments
  !
  !          - Input -
  ! Geofld        - entry    input field
  ! Phy_busdyn3D  - dynamics input field
  !
  !          - Input/Output -
  ! Phy_busper3D  - historic variables for the physics
  !
  !          - Output -
  ! Phy_busvol3D  - physics tendencies and other output fields from the physics
  !
  !          - Input -
  ! esiz     dimension of e
  ! dsiz     dimension of d
  ! fsiz     dimension of f
  ! vsiz     dimension of v
  ! dt       timestep (sec.)
  ! kount    timestep number
  ! ni       horizontal running length
  ! nj       number of slices
  ! nk       vertical dimension

  integer*8 time_base, ticks_deb, ticks_fin
  external  time_base

  Integer jdo, ithread, ione
  real busent, busdyn, busper, busvol, sltime
  pointer (pabusent,busent(*))
  pointer (pabusdyn,busdyn(*))
  pointer (pabusper,busper(*))
  pointer (pabusvol,busvol(*))

  !

  ithread=1

100 Continue
!$omp critical
  pslic= pslic+1
  jdo  = pslic
!$omp end critical

  If(jdo>nj)Return

  if(kount==0) pabusent = loc (      geofld((jdo-1)*esiz+1))
               pabusdyn = loc (Phy_busdyn3D((jdo-1)*dsiz+1))
               pabusper = loc (Phy_busper3D((jdo-1)*fsiz+1))
               pabusvol = loc (Phy_busvol3D((jdo-1)*vsiz+1))

  ticks_deb = time_base()

  call phy_exe ( busent ,busdyn ,busper ,busvol , &
                 esiz   ,dsiz   ,fsiz   ,vsiz   , &
                 dt, jdo, kount, ithread, ni, nk)

  ticks_fin = time_base()
  sltime    = (ticks_fin-ticks_deb)*8.0d0/1.9d9
  phy_timing(:,jdo) = sltime

  Goto 100

End Subroutine itf_phy_slb
