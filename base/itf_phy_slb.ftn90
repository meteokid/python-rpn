!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!** s/p itf_phy_slb
Subroutine itf_phy_slb ( geofld ,busdyn3D ,busper3D, busvol3D ,&
                         esiz,dsiz,fsiz,vsiz,dt,kount,phy_timing,ni,nj,nk,pslic )
  Implicit None

  Integer esiz,dsiz,fsiz,vsiz,kount,ni,nj,nk,pslic
  Real, Dimension(:,:), Pointer ::  busdyn3D, busper3D, busvol3D
  Real, Dimension(:  ), Pointer ::  geofld
  Real dt, phy_timing(ni,nj) 

  !Author
  !          L. Spacek (May 2010)
  !
  !Revisions
  ! 001
  !
  !Object
  !          The main physics subroutine
  !
  !Arguments
  !
  !          - Input -
  ! Geofld        - entry    input field
  ! Phy_busdyn3D  - dynamics input field
  !
  !          - Input/Output -
  ! Phy_busper3D  - historic variables for the physics
  !
  !          - Output -
  ! Phy_busvol3D  - physics tendencies and other output fields from the physics
  !
  !          - Input -
  ! esiz     dimension of e
  ! dsiz     dimension of d
  ! fsiz     dimension of f
  ! vsiz     dimension of v
  ! dt       timestep (sec.)
  ! kount    timestep number
  ! ni       horizontal running length
  ! nj       number of slices
  ! nk       vertical dimension

  integer*8 time_base, ticks_deb, ticks_fin
  external  time_base

  Integer jdo, ithread, ione
  real busent, sltime
  pointer (pabusent,busent(*))

  !

  ithread=1

100 Continue
!$omp critical
  pslic= pslic+1
  jdo  = pslic
!$omp end critical

  If(jdo>nj)Return

  if(kount==0) pabusent = loc (geofld((jdo-1)*esiz+1))

  ticks_deb = time_base()

  call phy_exe ( busent ,busdyn3D(1,jdo) , busper3D(1,jdo), busvol3D(1,jdo) , &
                 esiz   ,dsiz   ,fsiz   ,vsiz   , &
                 dt, jdo, kount, ithread, ni, nk)

  ticks_fin = time_base()
  sltime    = (ticks_fin-ticks_deb)*8.0d0/1.9d9
  phy_timing(:,jdo) = sltime

  Goto 100

End Subroutine itf_phy_slb
