!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r ens_nml - read parametres for ensemble forecast
!
      integer function ens_nml (F_namelist_S, F_Grdtyp_S, F_unout) 
      implicit none
#include <arch_specific.hf>
!
      character* (*) F_namelist_S, F_Grdtyp_S
      integer F_unout

!author Lubos Spacek - May 2005
!
!revision
! v4_12 - Spacek L.          - called from itf_ens_init
! v_4.1.3 - N. Gagnon      - add vertical envelope parameters for PTP and change name of most parameters in the NAMELIST
! v_4.2.0 - N. Gagnon      - add the parameter Ens_ptp_env_hor_f for latitudinal enveloppe that control PTP, 
!           L. Spacek      - remove limitation of use when in mode LAM (only SKEB is now unavailable)
! v_4.4.0 - N. Gagnon      - remove Ens_ptp_env_hor_f not use anymore
!                          - add ens_ptp_cape and ens_ptp_tlc keys
! v_4.5.0 - N. Gagnon      - add F_ens_ptp_crit_w and F_ens_ptp_fac_reduc keys
!
!object
!  To initialize the ensemble forecast system
!  by reading the namelist ens_nml
!
!arguments
!  Name           I/O                 Description
!-----------------------------------------------------------------------
! F_namelistf_S       I             namelist path
! F_Grdtyp_S          I             grid configuration (GU required)
! F_unout             I             output unit
!-----------------------------------------------------------------------
!
#include <WhiteBoard.hf>
#include "ens_param.cdk"

      integer, external :: fnom,wkoffit
      logical found_namelist_ok, stochphy_L
      integer i, ier,err,err_open,unf,nrec

      namelist /ensembles/                                           &
          Ens_conf,      Ens_skeb_conf,                              &
          Ens_stat,      Ens_skeb_div,  Ens_skeb_dif,  Ens_skeb_gwd, &
          Ens_mc_seed,   Ens_mc3d_nlon, Ens_mc3d_nlat, Ens_mc3d_trnz,&
          Ens_mc3d_trnl, Ens_mc3d_trnh,                              &
          Ens_mc3d_max,  Ens_mc3d_min,  Ens_mc3d_std,                &
          Ens_mc3d_tau,  Ens_mc3d_str,  Ens_skeb_alph, Ens_skeb_alpt,&
          Ens_skeb_bfc,  Ens_skeb_lam,                               &
          Ens_mc2d_nlon, Ens_mc2d_nlat, Ens_mc2d_ncha, Ens_mc2d_trnl,&
          Ens_mc2d_trnh, Ens_dim2,      Ens_mc2d_min,  Ens_mc2d_max, &
          Ens_mc2d_std,  Ens_mc2d_tau,  Ens_mc2d_str,                &
          Ens_ptp_conf,  Ens_ptp_env_u, Ens_ptp_env_b, Ens_ptp_cape, &
          Ens_ptp_tlc,   Ens_ptp_crit_w,Ens_ptp_fac_reduc
!
!--------------------------------------------------------------------
!
      ens_nml= -1

      if ((F_namelist_S.eq.'print').or.(F_namelist_S.eq.'PRINT')) then
         ens_nml = 0
         if (F_unout.ge.0) write (F_unout,nml=ensembles)
         return
      endif

      Ens_conf        = .false.
      Ens_mc_seed     = -1
      Ens_skeb_conf   = .false.
      Ens_skeb_dif    = .false.
      Ens_skeb_gwd    = .false.
      Ens_stat        = .false.
      Ens_skeb_div    = .false.
      Ens_mc3d_nlon   = 16 
      Ens_mc3d_nlat   =  8
      Ens_mc3d_trnz   =  3
      Ens_mc3d_trnl   =  2
      Ens_mc3d_trnh   =  8
      Ens_mc3d_min    = 0.0
      Ens_mc3d_max    = 0.0
      Ens_mc3d_std    = 0.0
      Ens_mc3d_tau    = 0.0
      Ens_mc3d_str    = 0.0

      Ens_skeb_bfc    = 1.0e-01
      Ens_skeb_lam    = 2.0e+05
      Ens_skeb_alph   = 0.0
      Ens_skeb_alpt   = 0.0

      Ens_ptp_conf    = .false.
      Ens_mc2d_nlon   = 16
      Ens_mc2d_nlat   =  8
      Ens_mc2d_ncha   =  1
      Ens_mc2d_trnl   =  1
      Ens_mc2d_trnh   =  8
      Ens_mc2d_min    = 0.0
      Ens_mc2d_max    = 0.0
      Ens_mc2d_std    = 0.0
      Ens_mc2d_tau    = 0.0
      Ens_mc2d_str    = 0.0
      Ens_ptp_env_u   = 1.0
      Ens_ptp_env_b   = 1.0
      Ens_ptp_cape    = 0.0
      Ens_ptp_tlc     = 0.0
      Ens_ptp_crit_w  = 100.0
      Ens_ptp_fac_reduc = 0.0

      unf = 0
      found_namelist_ok = .false.
      err = wkoffit (F_namelist_S)

      if (err.ge.-1) then
         err_open  = fnom (unf,F_namelist_S, 'SEQ+OLD', nrec)
         if (err_open.eq.0) then
            read (unf, nml=ensembles, end = 1000, err=999)
            found_namelist_ok = .true.
            if (F_unout.ge.0) write (F_unout,nml=ensembles)
         endif
 1000    call fclos (unf)
      endif

      if (found_namelist_ok) then

         ens_nml = 1

         if ((F_Grdtyp_S.ne.'GU'.and.F_Grdtyp_S.ne.'GY').and.Ens_skeb_conf) then
            if(F_unout.ge.0) write(F_unout,"(a,a)" ) 'Ens_nml: ','Ens_skeb only available with grid GU/GY'
            ens_nml = -1
         endif

         if ((Ens_mc_seed.lt.0))then
            if(F_unout.ge.0)write(F_unout,*)'You have to provide a positive integer as seed see Ens_mc_seed in NAMELIST'
            ens_nml = -1
         endif

         if (Ens_mc3d_nlon.ne.2*Ens_mc3d_nlat)then
            if(F_unout.ge.0)write(F_unout,*)'Nlon must equal 2*nlat'
            ens_nml = -1
         endif

         if (Ens_mc2d_ncha.gt.MAX2DC) then
            if(F_unout.ge.0)write(F_unout,*)'Ens_mc2d_ncha must be <=9'
            ens_nml = -1
         endif

         do i=1,Ens_mc2d_ncha
            if (Ens_mc2d_nlon(i).ne.2*Ens_mc2d_nlat(i))then
                if(F_unout.ge.0)write(F_unout,*)'Nlon2 must equal 2*nlat2'
                ens_nml = -1
            endif
         enddo

         if (ens_nml.lt.0) return

         Ens_mc3d_dim    = (Ens_mc3d_trnh+1)*(Ens_mc3d_trnh+2)/2
         Ens_mc3d_mzt    = (Ens_mc3d_trnz-1)/2
         Ens_skeb_conf   =  Ens_skeb_conf.and.Ens_conf
         Ens_stat        =  Ens_stat.and.Ens_conf
         Ens_skeb_div    =  Ens_skeb_div .and.Ens_conf
         Ens_dim2        = (Ens_mc2d_trnh+1)*(Ens_mc2d_trnh+2)/2
         Ens_dim2_max    =  maxval(Ens_dim2)

         stochphy_L  = Ens_ptp_conf.and.Ens_conf

         if(F_unout.ge.0)then
            write(F_unout,"(a,i8)" )'Ens_mc_seed   = ',Ens_mc_seed
            write(F_unout,"(a,i5)" )'Ens_mc3d_dim   = ',Ens_mc3d_dim
            write(F_unout,'(a,i5)' )'Ens_mc3d_mzt   = ',Ens_mc3d_mzt
            write(F_unout,'(a,l5)' )'Ens_skeb_conf  = ',Ens_skeb_conf
            write(F_unout,'(a,l5)' )'Ens_stat  = ',Ens_stat
            write(F_unout,'(a,l5)' )'Ens_skeb_div   = ',Ens_skeb_div
            write(F_unout,'(a,9i5)')'Ens_dim2     = ',Ens_dim2
            write(F_unout,'(a,i5)' )'Ens_dim2_max = ',Ens_dim2_max
            write(F_unout,'(a,l5)' )'Ens_stochphy_L = ',stochphy_L
            write(F_unout,'(a,i5)' )'Ens_imrkv2     = ',Ens_mc2d_ncha
            write(F_unout,'(a,f8.5)' )'Ens_ens_ptp_env_u = ',Ens_ptp_env_u
            write(F_unout,'(a,f8.5)' )'Ens_ens_ptp_env_b = ',Ens_ptp_env_b
            write(F_unout,'(a,f8.5)' )'Ens_ens_ptp_cape = ',Ens_ptp_cape
            write(F_unout,'(a,f8.5)' )'Ens_ens_ptp_tlc = ',Ens_ptp_tlc
            write(F_unout,'(a,f12.5)' )'Ens_ens_ptp_crit_w = ',Ens_ptp_crit_w
            write(F_unout,'(a,f8.5)' )'Ens_ens_ptp_fac_reduc = ',Ens_ptp_fac_reduc
         endif
      else
          ens_nml = 0
      endif

      ier= WB_OK
      ier= min(wb_put('ens/IMRKV2'     , Ens_mc2d_ncha    , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/STOCHPHY'   , stochphy_L       , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/PTPENVU'    , Ens_ptp_env_u    , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/PTPENVB'    , Ens_ptp_env_b    , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/PTPCAPE'    , Ens_ptp_cape     , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/PTPTLC'     , Ens_ptp_tlc      , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/PTPCRITW'   , Ens_ptp_crit_w   , WB_REWRITE_MANY),ier)
      ier= min(wb_put('ens/PTPFACREDUC', Ens_ptp_fac_reduc, WB_REWRITE_MANY),ier)

      err=0
      if (.not.WB_IS_OK(ier)) ens_nml= -1
!
!--------------------------------------------------------------------
!
 999  return
      end

