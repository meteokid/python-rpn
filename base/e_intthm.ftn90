!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r e_intthm  - Interpolate GZ,VT,HU on model grid.
!
#include "model_macros_f.h"
!
      subroutine e_intthm (errcode)
      implicit none
#include <arch_specific.hf>
!
      integer errcode

!AUTHOR  M. ROCH - july 95 - from intscal
!
!revision
! v2_31 - M. Desgagne
! v3_00 - Desgagne & Lee    - Lam configuration
! v3_02 - Lee V.            - added one more argument to e_bmfrd
! v3_02 -                   - correction to search for GZ at 1.0 eta/sg
! v3_12 - Winger K.         - Use Anal_cond_L_L
! v3_12 - Winger & Dugas    - Output TD for pressure level moisture
! v3_20 - Pellerin Pierre   - To run off-line (surface)
! v3_21 - Dugas B.          - replace TD by ES in pressure mode
! v3_22 - Lee V.            - removed Trvs tracers
! v3_30 - Lee/Desgagne      - new LAM IO, read from analysis files to
!                             produce BCS or 3DF files
! v4_00 - A. Plante         - Adapt for staggering
!                             NOTE : un-staggered input data only
! v4_03 - Lee V.            - ISST adaptation, read p0 here
! v4_03 - Lee V.            - Adapt to using new pressure functions
! v4_05 - Lee V.            - Always write P0 in Pascals
! v4_05 - Plante A.         - Read zdt1,wt1,qt1 if present
!
!object
!    Computes  the ln of surface and top pressure given the topo 
!    (topography calculated on the model grid, phi,U or V), then
!    project the geopotential, virtual temperature,
!    specific humidity onto that grid

#include "e_fu.cdk"
#include "e_grids.cdk"
#include "e_anal.cdk"
#include "dcst.cdk"
#include "pilot.cdk"
#include "e_tr.cdk"
#include "e_grdc.cdk"
#include "e_cdate.cdk"
#include "hgc.cdk"

      integer, external :: e_rdhint3,fstinf
      character*4 vhh
      logical horinterp_L
      integer i,k,kk,nis,njs,nks,ng,code_h,keyt,nic,njc,nkc,err
      real*8 c1, c2
      real, parameter :: pref=100000.
      real, dimension (:  ), allocatable :: p0,wk2,rna_tlev
      real, dimension (:,:), allocatable :: ttn,hun,gzn,zdn,wn,qn
!
!---------------------------------------------------------------------
!
      write(6,1001)

      c1 = Dcst_tcdk_8
      c2 = 10.d0 * Dcst_grav_8
      if (vt.eq.'TT1') c1 = 0.
      vhh= vh//'  '

      if (Pil_bmf_L) then
         nis= nifi
         njs= njfi
      else
         nis= e_Grdc_ni
         njs= e_Grdc_nj
      endif

      ng= nis*njs
      nk= 1
      if (.not.Pil_bmf_L) nk= lv_t

      errcode    = -1
      horinterp_L= .false.

      allocate ( ttn(ng,nk), hun(ng,nk)  , gzn(ng,nk),  &
                 zdn(ng,nk),  wn(ng,nk),  qn(ng,lv+1),  &
                 p0(ng), wk2(ng) )
!
! Surface pressure
!
      if (.not.Anal_pres_L) then

         code_h= e_rdhint3 (p0,dstf_gid,nis,njs,'ST1 ',-1, &
              ip2a,ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)

         if (code_h.lt.0) then
            code_h= e_rdhint3 (wk2,dstf_gid,nis,njs,'P0  ',-1, &
              ip2a,ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) goto 999
            if (Anal_hybstg_L) then
               p0(:) = log(wk2(:)*100./pref)
            else
               if (.not. Anal_pres_L) p0(:) = wk2(:) * 100.
            endif
         endif

         horinterp_L= horinterp_L .or. (code_h.gt.0)

      endif

      if (Pil_bmf_L) then
         call e_bmfsplitxy2 (p0 ,nis,njs,   'P0  ',1,1,pni ,0,0,0)
      else
         call e_write_3df   (p0 ,nis,njs,1 ,'S   ',unf_casc)
      endif

      if ( .not. Anal_pres_L ) then

         write(6,*) 'ANALYSIS IS IN SIGMA OR ETA OR HYBRID COORDINATES'

! Temperature and humidity

         do k=1,lv_t
            kk=k
            if (Pil_bmf_L) kk=1
            code_h= e_rdhint3 (hun(1,kk),dstf_gid,nis,njs,'HU  ',na_t(k),ip2a, &
                ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) goto 999
            horinterp_L= horinterp_L .or. (code_h.gt.0)

            code_h= e_rdhint3(ttn(1,kk),dstf_gid,nis,njs,vt,na_t(k), ip2a, &
                ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)

            if (code_h.lt.0) goto 999
            horinterp_L= horinterp_L .or. (code_h.gt.0)

            ttn(:,kk) = ttn(:,kk) + c1
            if (vt.eq.'TT') call mfotvt (ttn(1,kk),ttn(1,kk),hun(1,kk),ng,1,ng)

            if (Pil_bmf_L) then
               call e_bmfsplitxy2 (hun,nis,njs,'HU  ',k,lv_t,pni,0,0,0)
               call e_bmfsplitxy2 (ttn,nis,njs,'VT  ',k,lv_t,pni,0,0,0)
            endif
         end do         

         if (VAR_ZD /= '') then
            do k=1,lv_t-1
               kk=k
               if (Pil_bmf_L) kk=1
               code_h= e_rdhint3 (zdn(1,kk),dstf_gid,nis,njs,VAR_ZD,na_t(k),ip2a    , &
                    ip3a,' ',tva,.false.,.false.,'CUBIC',e_fu_anal,6)
               if (code_h.lt.0) goto 999
               horinterp_L= horinterp_L .or. (code_h.gt.0)
               if (Pil_bmf_L) then
                  call e_bmfsplitxy2 (zdn,nis,njs,'ZD  ',k,lv_t-1,pni,0,0,0)
               endif            
            enddo
         endif

         if (VAR_W /= '') then
            do k=1,lv_t-1
               kk=k
               if (Pil_bmf_L) kk=1 
               code_h= e_rdhint3 (wn(1,kk),dstf_gid,nis,njs,VAR_W,na_t(k),ip2a, &
                    ip3a,' ',tva,.false.,.false.,'CUBIC',e_fu_anal,6)
               if (code_h.lt.0) goto 999
               horinterp_L= horinterp_L .or. (code_h.gt.0)
               if (Pil_bmf_L) then
                  call e_bmfsplitxy2 (wn,nis,njs,'W   ',k,lv_t-1,pni,0,0,0)
               endif            
            enddo
         endif

         if (VAR_Q /= '') then
            do k=1,lv
               kk=k
               if (Pil_bmf_L) kk=1  
               code_h= e_rdhint3 (qn(1,kk),dstf_gid,nis,njs,'QT1 ',na(k),ip2a, &
                    ip3a,' ',tva,.false.,.false.,'CUBIC',e_fu_anal,6)
               if (code_h.lt.0) goto 999
               horinterp_L= horinterp_L .or. (code_h.gt.0)
               if (Pil_bmf_L) then
                  call e_bmfsplitxy2 (qn,nis,njs,'Q   ',k,lv,pni,0,0,0)                
               endif
            enddo
         endif

         code_h= e_rdhint3 (gzn,dstf_gid,nis,njs,'GZ  ',na_t(lv_t),ip2a,ip3a,' ', &
                            tva,.false.,.false.,'CUBIC',e_fu_anal,6)
         if (code_h.lt.0) then
            code_h= e_rdhint3 (gzn,dstf_gid,nis,njs,'ME  ',0,ip2a,ip3a,' ', &
                            tva,.false.,.false.,'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) goto 999
            gzn(:,1)= gzn(:,1)*Dcst_grav_8
         else
            gzn(:,1)= gzn(:,1)*c2
         endif

         horinterp_L= horinterp_L .or. (code_h.gt.0)         
         
         if (Pil_bmf_L) then
            call e_bmfsplitxy2 (gzn,nis,njs,'GZ  ',1,1,pni,0,0,0)
         else
            call e_write_3df ( ttn,nis,njs, lv_t  , 'TT  ', unf_casc )
            call e_write_3df ( gzn,nis,njs, 1     , 'GZ  ', unf_casc )
            call e_write_3df ( hun,nis,njs, lv_t  , 'HU  ', unf_casc )
            if (VAR_ZD /= '') call e_write_3df (zdn,nis,njs,lv_t-1,'ZD  ',unf_casc)
            if (VAR_W  /= '') call e_write_3df (wn ,nis,njs,lv_t-1,'W   ',unf_casc)
            if (VAR_Q  /= '') call e_write_3df (qn ,nis,njs,lv  +1,'Q   ',unf_casc)
         endif

      else

         write(6,*) 'ANALYSIS IS IN PRESSURE COORDINATES' 

         allocate(rna_tlev(ng))
         do k=1,lv_t

            kk=k
            if (Pil_bmf_L) kk=1

            code_h= e_rdhint3 (gzn(1,kk),dstf_gid,nis,njs,'GZ  ',na_t(k),ip2a, &
                ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) goto 999
            horinterp_L= horinterp_L .or. (code_h.gt.0)         

            code_h= e_rdhint3 (ttn(1,kk),dstf_gid,nis,njs,vt,na_t(k),ip2a, &
                ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) goto 999
            horinterp_L= horinterp_L .or. (code_h.gt.0)         

            code_h= e_rdhint3 (wk2,dstf_gid,nis,njs,vhh,na_t(k),ip2a, &
                ip3a,' ',tva,.true.,.false.,'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) goto 999
            horinterp_L= horinterp_L .or. (code_h.gt.0)         

            gzn(:,kk)   = gzn(:,kk) * 10.0
            ttn(:,kk)   = ttn(:,kk) + c1
            rna_tlev(:) = rna_t(k)  * 100.

            ! WARNING: These next conversions are probably incorrect if (vt.eq.'VT')
            if (vh.eq.'HR') then
               call mhrahu3( hun(1,kk), wk2, ttn(1,kk), rna_tlev, &
                             Anal_cond_L, ng, 1, ng )
            elseif (vh.eq.'ES') then
               call mesahu3( hun(1,kk), wk2, ttn(1,kk), rna_tlev, &
                             Anal_cond_L, ng, 1, ng )
            elseif (vh.eq.'TD') then
               wk2(:) = max( ttn(:,kk)-wk2(:),0.0 )
               call mesahu3( hun(1,kk), wk2, ttn(1,kk), rna_tlev, &
                             Anal_cond_L, ng, 1, ng )
            else
               hun(:,kk) = wk2(:)
            endif

            if (vt.eq.'TT') call mfotvt (ttn(1,kk),ttn(1,kk),hun(1,kk),ng,1,ng)

            if (Pil_bmf_L) then
               call e_bmfsplitxy2 (gzn,nis,njs,'GZ  ',k,lv_t,pni,0,0,0)
               call e_bmfsplitxy2 (hun,nis,njs,'HU  ',k,lv_t,pni,0,0,0)
               call e_bmfsplitxy2 (ttn,nis,njs,'VT  ',k,lv_t,pni,0,0,0)
            endif

         end do
         deallocate(rna_tlev)

         if (.not.Pil_bmf_L) then
            call e_write_3df ( ttn,nis,njs,lv_t  ,'TT  ',unf_casc)
            call e_write_3df ( gzn,nis,njs,lv_t  ,'GZ  ',unf_casc)
            call e_write_3df ( hun,nis,njs,lv_t  ,'HU  ',unf_casc)
         endif

      endif

!     For tracer variables, search does not have to be successful
!     They can be assigned a constant value.

      do i=1,E_tr3d_ntr
         E_trname_S(i)=E_tr3d_name_S(i)
         if ( E_tr3d_name_S(i)(3:4).eq.'T1'.or. &
              E_tr3d_name_S(i)(3:4).eq.'T0'    ) &
              E_trname_S(i) = E_Tr3d_name_S(i)(1:2)//'  '
      enddo

      do i=1,E_tr3d_ntr
         do k=1,lv_t
            kk=k
            if (Pil_bmf_L) kk=1
            code_h= e_rdhint3 (hun(1,kk),dstf_gid,nis,njs, E_tr3d_name_S(i), &
                           na_t(k),ip2a,ip3a,' ',tva, .true.,.false.   , &
                           'CUBIC',e_fu_anal,6)
            if (code_h.lt.0) hun= E_tr3d_sval(i)
            horinterp_L= horinterp_L .or. (code_h.gt.0)         
            
            if (Pil_bmf_L) then
               call e_bmfsplitxy2 (hun,nis,njs,E_trname_S(i),k,lv_t,pni,0,0,0)
            endif
         enddo
         if (.not.Pil_bmf_L) then
            call e_write_3df ( hun,nis,njs,lv_t,E_trname_S(i),unf_casc )
         endif 
      end do

      keyt= fstinf (e_fu_anal,nic,njc,nkc,datev,' ',na_t(2), &
                    ip2a,ip3a,' ','PWTT')
      if (keyt.ge.0) then
         err= 0
         do k=2,lv_t
            kk=k
            if (Pil_bmf_L) kk=1
            keyt = e_rdhint3 (qn(1,kk),dstf_gid,nis,njs,'PWTT',na_t(k),ip2a, &
                           ip3a,' ',tva,.false.,.false.,'NEAREST',e_fu_anal,6)
            if (keyt.ne.3) err= -1
            if (Pil_bmf_L) then
               call e_bmfsplitxy2 (qn,nis,njs,'PWTT',k-1,lv_t-1,pni,0,0,0)
            endif
         end do
         call handle_error(err,'e_intthm','EXTRACTION OF PWTT FAILED')
         if (.not.Pil_bmf_L) then
            call e_write_3df ( qn,nis,njs,lv_t-1,'PWTT',unf_casc)
         endif         
      endif

      deallocate (ttn,hun,gzn,zdn,wn,qn,p0,wk2)
      errcode = 0

      if (.not.horinterp_L) anal_hav(1) = 11
     
 1001 format(/,'COMPUTE TT, HU and GZ (S/R E_INTTHM)',/,25('+'))

  999 return

!------------------------------------------------------------------
!
      end
