!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r  bac_ad - ADJ of bac_tl
!
#include "model_macros_f.h"
!
      subroutine bac_ad( Itr, Itnlh )
!
      implicit none
#include <arch_specific.hf>
!
      integer Itr, Itnlh
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - reduce standard output as in model 
! v2_30 - Edouard S.        - remove pi' at the top (pptt0) - hybrid version
! v2_31 - Tanguay M.        - adapt for vertical hybrid coordinate 
!                           - adapt for tracers in tr3d  
! v3_03 - Tanguay M.        - Adjoint NoHyd configuration 
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_30 - Tanguay M.        - Revision
! 
!object
!     see id section
!
!arguments
!  Name        I/O                 Description
!----------------------------------------------------------------
!  Itr          I           current nonlinear iteration number
!  Itnlh        I           total number of nonlinear iterations
!----------------------------------------------------------------
!
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "schm.cdk"
#include "p_geof.cdk"
#include "rhsc.cdk"
#include "nl.cdk"
#include "vt0.cdk"
#include "vtx.cdk"
#include "lctl.cdk"
#include "vt0_m.cdk"
#include "vtx_m.cdk"
#include "nest.cdk"
!
      real*8, parameter :: ZERO_8 = 0.0
!
      integer i,j,k,istat
      type(gmm_metadata) :: mymeta

      real w_fiptx(LDIST_SHAPE,0:l_nk+1)
!     ______________________________________________________
!
      if (Lun_debug_L) write(Lun_out,1000)
!
!     Zero adjoint variables
!     ----------------------
      w_fiptx = ZERO_8 
!
      istat = gmm_get(gmmk_rhsu_s,rhsu,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(rhsu)'
      istat = gmm_get(gmmk_rhsv_s,rhsv,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(rhsv)'
      istat = gmm_get(gmmk_rhst_s,rhst,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(rhst)'
      istat = gmm_get(gmmk_rhsf_s,rhsf,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(rhsf)'
      istat = gmm_get(gmmk_rhsb_s,rhsb,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(rhsb)'
      istat = gmm_get(gmmk_wt0_s,wt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(wt0)'
      istat = gmm_get(gmmk_tt0_s,tt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(tt0)'
      istat = gmm_get(gmmk_st0_s,st0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(st0)'
      istat = gmm_get(gmmk_zdt0_s,zdt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(zdt0)'
      istat = gmm_get(gmmk_fiptx_s,fiptx,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(fiptx)'
      if (.not. Schm_hydro_L) then
         istat = gmm_get(gmmk_rhsw_s,rhsw,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(rhsw)'
      endif

      istat = gmm_get(gmmk_fis0_s,fis0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(fis0)'
      istat = gmm_get(gmmk_ut0_s,ut0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(ut0)'
      istat = gmm_get(gmmk_vt0_s,vt0,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(vt0)'
      istat = gmm_get(gmmk_wt0_s,wt0,mymeta)

      nullify(qt0,nest_q)
      if (.not. Schm_hydro_L) then
         istat = gmm_get(gmmk_qt0_s,qt0,mymeta)
         if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(qt0)'
         if (Schm_opentop_L) then
           istat = gmm_get(gmmk_nest_q_s,nest_q,mymeta)
           if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(nest_q)'
         endif
      endif
!
!     TRAJECTORY
!     ----------
      istat = gmm_get(gmmk_tt0_m_s,tt0_m,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(tt0_m)'
      istat = gmm_get(gmmk_st0_m_s,st0_m,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(st0_m)'
      istat = gmm_get(gmmk_fiptx_m_s,fiptx_m,mymeta)
      if (GMM_IS_ERROR(istat)) print *,'bac_ad ERROR at gmm_get(fiptx_m)'
!
      call  bacp_2_ad ( &
                       Itr , Itnlh, w_fiptx, fis0 , &
                       ut0 , vt0  , wt0    , tt0  , &
                       st0 , zdt0 , qt0    , fiptx, nest_q, &
                       rhsu, rhsv , rhst   , rhsw , rhsf  , rhsb, &
                       nl_u, nl_v , nl_t   , nl_w , nl_f  , nl_b, &
!
                       tt0_m,st0_m, fiptx_m, &
!
                       LDIST_DIM, l_nk )
!
!     ADJ of
!     Use to alleviate confusion in bac_ad
!     ------------------------------------
!$omp parallel do 
      do k = 0,l_nk+1
      do j = l_miny,l_maxy 
      do i = l_minx,l_maxx 
         fiptx  (i,j,k) = w_fiptx(i,j,k) + fiptx(i,j,k)
!CC      w_fiptx(i,j,k) = ZERO_8
      enddo
      enddo
      enddo
!$omp end parallel do 
!
1000  format (5X,' ADJ of BACK SUBSTITUTION: (S/R BAC_AD)')

      return
      end
