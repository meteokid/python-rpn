!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**s/r wndth_tl - TLM of wndth 
!
#include "model_macros_f.h"
!
      subroutine wndth_tl
!
      implicit none
#include <arch_specific.hf>
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v3_20 - Tanguay M.        - 1d higher order diffusion operator 
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_12 - Tanguay M.        - OPENMP TL/AD
! v4_30 - Tanguay M.        - Revision
!
!object
!     see id section
!	
!implicits
#include "gmm.hf"
#include "glb_ld.cdk"
#include "lun.cdk"
#include "vt0.cdk"
#include "vth.cdk"
#include "vt1.cdk"
#include "vt0_m.cdk"
#include "vth_m.cdk"
#include "vt1_m.cdk"
#include "hzd.cdk"
#include "schm.cdk"
#include "ver.cdk"
!
      type(gmm_metadata) :: meta3d
      integer i, j, k,gmmstat
!     ---------------------------------------------------------------
!
      gmmstat = gmm_get(gmmk_uth_s, uth ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(uth)'
      gmmstat = gmm_get(gmmk_vth_s, vth ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(vth)'
      gmmstat = gmm_get(gmmk_zdth_s,zdth,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(zdth)'
      gmmstat = gmm_get(gmmk_ut1_s,ut1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(ut1)'
      gmmstat = gmm_get(gmmk_ut0_s,ut0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(ut0)'
      gmmstat = gmm_get(gmmk_vt1_s,vt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(vt1)'
      gmmstat = gmm_get(gmmk_vt0_s,vt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(vt0)'
      gmmstat = gmm_get(gmmk_zdt1_s,zdt1,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(zdt1)'
      gmmstat = gmm_get(gmmk_zdt0_s,zdt0,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(zdt0)'
!
!     TRAJECTORY
!     ----------
      gmmstat = gmm_get(gmmk_uth_m_s, uth_m ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(uth_m)'
      gmmstat = gmm_get(gmmk_vth_m_s, vth_m ,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(vth_m)'
      gmmstat = gmm_get(gmmk_zdth_m_s,zdth_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(zdth_m)'
      gmmstat = gmm_get(gmmk_ut1_m_s,ut1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(ut1_m)'
      gmmstat = gmm_get(gmmk_ut0_m_s,ut0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(ut0_m)'
      gmmstat = gmm_get(gmmk_vt1_m_s,vt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(vt1_m)'
      gmmstat = gmm_get(gmmk_vt0_m_s,vt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(vt0_m)'
      gmmstat = gmm_get(gmmk_zdt1_m_s,zdt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(zdt1_m)'
      gmmstat = gmm_get(gmmk_zdt0_m_s,zdt0_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'wndth_tl ERROR at gmm_get(zdt0_m)'
!
!     Filtering
!     ---------
      if (Hzd_t0_0_L) call hzd_hoffld (ut0_m, LDIST_DIM, G_nk,  1)
      if (Hzd_t0_0_L) call hzd_hoffld (vt0_m, LDIST_DIM, G_nk,  2)
      if (Hzd_t0_0_L) call hzd_hoffld (zdt0_m,LDIST_DIM, G_nk+1,3)
!
      if (Hzd_t0_1_L) call hzd_hoffld (ut0,   LDIST_DIM, G_nk,  1)
      if (Hzd_t0_1_L) call hzd_hoffld (vt0,   LDIST_DIM, G_nk,  2)
      if (Hzd_t0_1_L) call hzd_hoffld (zdt0,  LDIST_DIM, G_nk+1,3)
!
!     Perform the averaging
!     ---------------------
!
!$omp parallel
!
!$omp do
      do k=1,l_nk
         do j= 1, l_nj
         do i= 1, l_niu
!   
!        TRAJECTORY
!        ----------
         uth_m(i,j,k) = 0.5*ut0_m(i,j,k)+ 0.5*ut1_m(i,j,k)
!
!        TLM 
!        ---
         uth(i,j,k) = 0.5*ut0(i,j,k)+ 0.5*ut1(i,j,k)
!
         end do
         end do
!
         do j= 1, l_njv
         do i= 1, l_ni
!
!        TRAJECTORY
!        ----------
         vth_m(i,j,k) = 0.5*vt0_m(i,j,k)+ 0.5*vt1_m(i,j,k)
!
!        TLM 
!        ---
         vth(i,j,k) = 0.5*vt0(i,j,k)+ 0.5*vt1(i,j,k)
!
         end do
         end do
      end do
!$omp enddo
!
!      if(.not.Schm_zdotMid_L) then
!$omp do
      do k=1,l_nk+1
         do j= 1, l_nj
         do i= 1, l_ni
!
!           TRAJECTORY
!           ----------
            zdth_m(i,j,k) = 0.5 * ( zdt0_m(i,j,k) + zdt1_m(i,j,k) )
!
!           TLM 
!           ---
            zdth(i,j,k) = 0.5 * ( zdt0(i,j,k) + zdt1(i,j,k) )
!
         end do
         end do
      end do
!$omp enddo
!      endif
!
!$omp end parallel
!
!     ---------------------------------------------------------------
!
 1000 format( &
      / /,' TLM of AVERAGE WINDS t0-dt/2 (th): (S/R WNDTH_TL)', &
       /,'===================================================', &
      / /)
!
      return
      end
