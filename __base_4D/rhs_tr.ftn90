!---------------------------------- LICENCE BEGIN -------------------------------
! GEM - Library of kernel routines for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This library is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------

!**s/r rhs_tr - Equivalent to rhs for TRAJECTORY
!
#include "model_macros_f.h"
!
      subroutine rhs_tr()
!
      implicit none
#include <arch_specific.hf>
!
!author M.Tanguay
!
!revision
! v2_10 - Tanguay M.        - initial MPI version
! v2_21 - Tanguay M.        - replace xfis by topo
! v2_31 - Tanguay M.        - adapt for tracers in tr3d
! v3_00 - Tanguay M.        - adapt to restructured rhs
! v3_03 - Tanguay M.        - Adjoint Lam and NoHyd configuration
! v3_11 - Tanguay M.        - AIXport+Opti+OpenMP for TLM-ADJ
! v3_21 - Tanguay M.        - Revision Openmp
! v4_04 - Tanguay M.        - Staggered version TL/AD 
! v4_10 - Tanguay M.        - VMM replacement with GMM for (TL/AD)
! v4_12 - Tanguay M.        - Remove fipt1
! v4_40 - Tanguay M.        - Revision TL/AD
!
!object
!**********************************************************************
! See GEMergo4.doc
!**********************************************************************
!
!arguments
!        None
!
!implicits
#include "gmm.hf"
#include "ptopo.cdk"
#include "glb_pil.cdk"
#include "glb_ld.cdk"
#include "schm.cdk"
#include "lun.cdk"
#include "orh_m.cdk"
#include "p_geof.cdk" 
#include "rhsc_m.cdk"
#include "vt1_m.cdk" 
#include "vtx_m.cdk" 
#include "nest_m.cdk"
#include "orh.cdk"
!
      integer i,j,k, gmmstat
      type(gmm_metadata) :: meta2d,meta3d
!
!     __________________________________________________________________
!
      if (Lun_debug_L) write (Lun_out,1000)
!
      gmmstat = gmm_get(gmmk_ruw1_m_s,ruw1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(ruw1_m)'
      gmmstat = gmm_get(gmmk_rvw1_m_s,rvw1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(rvw1_m)'
      gmmstat = gmm_get(gmmk_ut1_m_s,ut1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(ut1_m)'
      gmmstat = gmm_get(gmmk_vt1_m_s,vt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(vt1_m)'
      gmmstat = gmm_get(gmmk_wt1_m_s,wt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(wt1_m)'
      gmmstat = gmm_get(gmmk_tt1_m_s,tt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(tt1_m)'
      gmmstat = gmm_get(gmmk_bspqtx_m_s,bspqtx_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(bspqtx_m)'
      gmmstat = gmm_get(gmmk_st1_m_s,st1_m,meta2d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(st1_m)'
      gmmstat = gmm_get(gmmk_zdt1_m_s,zdt1_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(zdt1_m)'
      gmmstat = gmm_get(gmmk_fiptx_m_s,fiptx_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(fiptx_m)'
      gmmstat = gmm_get(gmmk_orhsu_m_s,orhsu_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(orhsu_m)'
      gmmstat = gmm_get(gmmk_orhsv_m_s,orhsv_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(orhsv_m)'
      gmmstat = gmm_get(gmmk_orhsc_m_s,orhsc_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(orhsc_m)'
      gmmstat = gmm_get(gmmk_orhst_m_s,orhst_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(orhst_m)'
      gmmstat = gmm_get(gmmk_orhsf_m_s,orhsf_m,meta3d)
      if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(orhsf_m)'
      if (G_lam) then
         gmmstat = gmm_get(gmmk_rhsu_m_s,rhsu_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(rhsu_m)'
         gmmstat = gmm_get(gmmk_rhsv_m_s,rhsv_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(rhsv_m)'
         gmmstat = gmm_get(gmmk_nest_u_m_s,nest_u_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(nest_u_m)'
         gmmstat = gmm_get(gmmk_nest_v_m_s,nest_v_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(nest_v_m)'
      endif
      if (.not. Schm_hydro_L) then
         gmmstat = gmm_get(gmmk_mutx_m_s,mutx_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(mutx_m)'
         gmmstat = gmm_get(gmmk_orhsw_m_s,orhsw_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(orhsw_m)'
         gmmstat = gmm_get(gmmk_qt1_m_s,qt1_m,meta3d)
         if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(qt1_m)'
      endif
!
      gmmstat = gmm_get(gmmk_fis0_s,fis0,meta2d)
!     if (GMM_IS_ERROR(gmmstat)) print *,'rhs_tr ERROR at gmm_get(fis0)'
!
!     Perform the computation in the first 
!     cycle of Crank-Nicholson procedure only
!     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      call diag_var (bspqtx_m, mutx_m, st1_m, qt1_m, & 
                     1,l_ni,1,l_nj,1,l_nk)
!
      call diag_fip(fiptx_m, st1_m, tt1_m, qt1_m, fis0, LDIST_DIM, l_nk)
!
      if ( Orh_icn .eq. Schm_itcn ) then
!
      call rhsp_2  ( orhsu_m,  orhsv_m, orhsc_m, orhst_m, orhsw_m,  orhsf_m, &
                     ruw1_m,   rvw1_m,  rhsu_m,  rhsv_m,  nest_u_m, nest_v_m, &
                     ut1_m,    vt1_m,   wt1_m,   tt1_m,   st1_m,    zdt1_m, &
                     bspqtx_m, fiptx_m, mutx_m, &
                     LDIST_DIM,l_nk  )
!
      endif
!
1000  format(3X,'TRAJ of COMPUTE THE RIGHT-HAND-SIDES: (S/R RHS_TR)')
!
!     __________________________________________________________________
!
      return
      end
